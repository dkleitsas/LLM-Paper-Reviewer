Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,Abstract
ABSTRACT,0.0009191176470588235,"Causal identification is at the core of the causal inference literature, where complete
1"
ABSTRACT,0.001838235294117647,"algorithms have been proposed to identify causal queries of interest. The validity
2"
ABSTRACT,0.0027573529411764708,"of these algorithms hinges on the restrictive assumption of having access to a
3"
ABSTRACT,0.003676470588235294,"correctly specified causal structure. In this work, we study the setting where a
4"
ABSTRACT,0.004595588235294118,"probabilistic model of the causal structure is available. Specifically, the edges in a
5"
ABSTRACT,0.0055147058823529415,"causal graph are assigned probabilities which may, for example, represent degree
6"
ABSTRACT,0.006433823529411764,"of belief from domain experts. Alternatively, the uncertainly about an edge may
7"
ABSTRACT,0.007352941176470588,"reflect the confidence of a particular statistical test. The question that naturally
8"
ABSTRACT,0.008272058823529412,"arises in this setting is: Given such a probabilistic graph and a specific causal
9"
ABSTRACT,0.009191176470588236,"effect of interest, what is the subgraph which has the highest plausibility and for
10"
ABSTRACT,0.01011029411764706,"which the causal effect is identifiable? We show that answering this question
11"
ABSTRACT,0.011029411764705883,"reduces to solving an NP-hard combinatorial optimization problem which we call
12"
ABSTRACT,0.011948529411764705,"the edge ID problem. We propose efficient algorithms to approximate this problem,
13"
ABSTRACT,0.012867647058823529,"and evaluate our proposed algorithms against real-world networks and randomly
14"
ABSTRACT,0.013786764705882353,"generated graphs.
15"
INTRODUCTION,0.014705882352941176,"1
Introduction
16"
INTRODUCTION,0.015625,"A large proportion of questions of interest in various fields including but not limited to psychology,
17"
INTRODUCTION,0.016544117647058824,"social sciences, behavioural sciences, medical research, epidemiology, economy, etc. are causal in
18"
INTRODUCTION,0.017463235294117647,"nature [21, 13, 2]. In order to estimate causal effects, the gold standard is performing controlled
19"
INTRODUCTION,0.01838235294117647,"interventions and experiments. Unfortunately, such experiments can be prohibitively expensive,
20"
INTRODUCTION,0.019301470588235295,"unethical, or impractical (consider, for example, an experiment in which participants are required
21"
INTRODUCTION,0.02022058823529412,"to smoke in order to understand the links to cancer) [3, 5]. In contrast, non-experimental data are
22"
INTRODUCTION,0.021139705882352942,"comparatively abundant, and no expensive interventions are required to generate such data. This
23"
INTRODUCTION,0.022058823529411766,"has motivated the development of numerous techniques for understanding whether a causal query
24"
INTRODUCTION,0.02297794117647059,"can be answered using observational data. Specifically, if a particular causal query is identifiable, it
25"
INTRODUCTION,0.02389705882352941,"means it can be expressed as a function of the observational distribution, and thus estimated from
26"
INTRODUCTION,0.024816176470588234,"observational data (at least in principle).
27"
INTRODUCTION,0.025735294117647058,"A significant body of the causal inference literature is dedicated to the identification problem [18,
28"
INTRODUCTION,0.02665441176470588,"13, 16, 7, 12]. In particular, Huang and Valtora presented a complete algorithmic approach to decide
29"
INTRODUCTION,0.027573529411764705,"the identifiability of a specific query, and proved that Pearl’s do calculus is complete, in the sense
30"
INTRODUCTION,0.02849264705882353,"that if a causal query is identifiable, a sequence of do calculus rules can be applied to derive an
31"
INTRODUCTION,0.029411764705882353,"identification expression for that query [6]. Furthermore, Shpitser and Pearl provided a graphical
32"
INTRODUCTION,0.030330882352941176,"criteria to decide the identifiability, based on the hedge criterion [16]. However, all of these results
33"
INTRODUCTION,0.03125,"hinge on full specification of the causal structure, i.e., access to a correctly specified Acyclic Directed
34"
INTRODUCTION,0.03216911764705882,"Mixed Graph (ADMG) that models the causal dynamics of the system. This requirement is restrictive
35"
INTRODUCTION,0.03308823529411765,"in a number of ways. Firstly, the causal identification problem is concerned with inference from
36"
INTRODUCTION,0.03400735294117647,"the observational data, but the ADMG cannot be inferred from the observational distribution alone.
37"
INTRODUCTION,0.034926470588235295,"Secondly, structure learning methods rely heavily on statistical tests, which are prone to errors arising
38"
INTRODUCTION,0.035845588235294115,"from lack of sufficient data and method-specific limitations [15] which can result in misspecification
39"
INTRODUCTION,0.03676470588235294,"of the causal structure.
40"
INTRODUCTION,0.03768382352941176,"As opposed to full specification of the causal structure, we propose the setting in which we only have
41"
INTRODUCTION,0.03860294117647059,"access to a probabilistic model of the causal structure. For instance, an ADMG G is given along with
42"
INTRODUCTION,0.03952205882352941,"probabilities assigned to each edge of G. An example is shown in Figure 1a. These probabilities
43"
INTRODUCTION,0.04044117647058824,"could represent uncertainties arising from statistical tests, or the strength of belief of domain experts
44"
INTRODUCTION,0.04136029411764706,"concerning the plausibility of the existence of an edge. Under this setting, each ADMG on the set
45"
INTRODUCTION,0.042279411764705885,"of vertices of G is assigned its own plausibility score. Since the causal structure is not deterministic
46"
INTRODUCTION,0.043198529411764705,"anymore, answering questions such as “is the causal effect P(Y |do(X)) identifiable?” also becomes
47"
INTRODUCTION,0.04411764705882353,"probabilistic in nature. One can compare the overall plausibility of different subgraphs in which
48"
INTRODUCTION,0.04503676470588235,"the causal effect is identifiable, and then select the graph which maximises the plausibility. Indeed,
49"
INTRODUCTION,0.04595588235294118,"identification is often assumed on the basis of ignorability (i.e., no unobserved confounders exist)
50"
INTRODUCTION,0.046875,"[8, 14], thus the use of probabilistic models enables us to quantify the strength of such an assumption.
51"
INTRODUCTION,0.04779411764705882,"In this work, for a specific causal query P(Y |do(X)), we first answer the question “which graph
52"
INTRODUCTION,0.04871323529411765,"has the highest plausibility among those compliant with the probabilistic ADMG model that renders
53"
INTRODUCTION,0.04963235294117647,"P(Y |do(X)) identifiable?” The answer to this question then shows us with what confidence we can
54"
INTRODUCTION,0.050551470588235295,"carry out the causal identification task using the combination of the data at hand and the corresponding
55"
INTRODUCTION,0.051470588235294115,"probabilistic model.
56"
INTRODUCTION,0.05238970588235294,"Noting that the causal identification task is carried out through an identification formula which is
57"
INTRODUCTION,0.05330882352941176,"based on the causal structure, our second focus is on deriving an identification formula for a given
58"
INTRODUCTION,0.05422794117647059,"causal query that holds with the highest probability. This problem is different from the former in
59"
INTRODUCTION,0.05514705882352941,"the sense that a single identification formula can be valid with respect to a set of different graphs.
60"
INTRODUCTION,0.05606617647058824,"Therefore, the probability that a given identification formula is valid for a causal query would be the
61"
INTRODUCTION,0.05698529411764706,"aggregate probability of all graphs on which this formula is valid. We shall illustrate this point in
62"
INTRODUCTION,0.057904411764705885,"more detail through Example 1 in Section 2. To identify the most probable identification formula,
63"
INTRODUCTION,0.058823529411764705,"we first show that if an identification formula is valid w.r.t. a causal graph, it is also valid w.r.t. all
64"
INTRODUCTION,0.05974264705882353,"its edge-induced subgraphs. Afterwards, we propose a surrogate problem (see Problem 2 in Section
65"
INTRODUCTION,0.06066176470588235,"2.1) that recovers a causal graph with highest aggregated probability of its subgraphs. Both problems
66"
INTRODUCTION,0.06158088235294118,"discussed in this work are aimed at evaluating the plausibility of performing causal identification for
67"
INTRODUCTION,0.0625,"a specific query given a dataset and a non-deterministic model describing the causal structure.
68"
INTRODUCTION,0.06341911764705882,"To sum up, our main contributions are as follows.
69"
INTRODUCTION,0.06433823529411764,"1. We study the problem of causal identifiability in probabilistic causal models, where there are
70"
INTRODUCTION,0.06525735294117647,"uncertainties about the existence of edges and whether a given causal effect is identifiable. More
71"
INTRODUCTION,0.0661764705882353,"precisely, we consider two problems: 1) finding the most probable graph that renders a desired
72"
INTRODUCTION,0.06709558823529412,"causal query identifiable, and 2) finding the graph with the highest aggregate probability over its
73"
INTRODUCTION,0.06801470588235294,"edge-induced subgraphs that renders a desired causal query identifiable.
74"
WE SHOW THAT BOTH AFOREMENTIONED PROBLEMS REDUCE TO A SPECIAL COMBINATORIAL OPTIMIZATION,0.06893382352941177,"2. We show that both aforementioned problems reduce to a special combinatorial optimization
75"
WE SHOW THAT BOTH AFOREMENTIONED PROBLEMS REDUCE TO A SPECIAL COMBINATORIAL OPTIMIZATION,0.06985294117647059,"problem which we call the edge ID problem. We prove that the edge ID problem is NP-hard, and
76"
WE SHOW THAT BOTH AFOREMENTIONED PROBLEMS REDUCE TO A SPECIAL COMBINATORIAL OPTIMIZATION,0.07077205882352941,"thus, so are both of the problems we discussed.
77"
WE SHOW THAT BOTH AFOREMENTIONED PROBLEMS REDUCE TO A SPECIAL COMBINATORIAL OPTIMIZATION,0.07169117647058823,"3. We propose several exact and heuristic algorithms for the aforementioned problems.
78"
WE SHOW THAT BOTH AFOREMENTIONED PROBLEMS REDUCE TO A SPECIAL COMBINATORIAL OPTIMIZATION,0.07261029411764706,"In Section 2, we introduce the terminology and formally define the two problems we are considering
79"
WE SHOW THAT BOTH AFOREMENTIONED PROBLEMS REDUCE TO A SPECIAL COMBINATORIAL OPTIMIZATION,0.07352941176470588,"in this work. In Section 3, we show that both of these problems are equivalent to the edge ID problem.
80"
WE SHOW THAT BOTH AFOREMENTIONED PROBLEMS REDUCE TO A SPECIAL COMBINATORIAL OPTIMIZATION,0.0744485294117647,"Furthermore, we show that the edge ID problem is NP-hard. We discuss algorithmic approaches (both
81"
WE SHOW THAT BOTH AFOREMENTIONED PROBLEMS REDUCE TO A SPECIAL COMBINATORIAL OPTIMIZATION,0.07536764705882353,"exact and heuristic) in Section 4. Empirical evaluations of our algorithms are presented in Section
82"
WE SHOW THAT BOTH AFOREMENTIONED PROBLEMS REDUCE TO A SPECIAL COMBINATORIAL OPTIMIZATION,0.07628676470588236,"5. Proofs and accompanying code are provided in the appendices and in supplementary material,
83"
WE SHOW THAT BOTH AFOREMENTIONED PROBLEMS REDUCE TO A SPECIAL COMBINATORIAL OPTIMIZATION,0.07720588235294118,"respectively.
84"
PRELIMINARIES,0.078125,"2
Preliminaries
85"
PRELIMINARIES,0.07904411764705882,"We utilize small letters for variables, and capital letters for sets of variables. Calligraphic letters are
86"
PRELIMINARIES,0.07996323529411764,"used to denote graphs. An acyclic directed mixed graph (ADMG) G = (V G, EG
d , EG
b ) is defined as an
87"
PRELIMINARIES,0.08088235294117647,"acyclic graph on the vertices V G, where EG
d ⊆V G × V G and EG
b ⊆
 V G"
PRELIMINARIES,0.0818014705882353,"2

are the set of directed and
88"
PRELIMINARIES,0.08272058823529412,"bidirected edges among the vertices, respectively. With slight abuse of notation, if e ∈EG
d ∪EG
b , we
89 x z
t y"
PRELIMINARIES,0.08363970588235294,"1.0
1.0 1.0 0.7 0.9 0.7 1.0"
PRELIMINARIES,0.08455882352941177,"(a) ADMG G. x z
t y"
PRELIMINARIES,0.08547794117647059,"1.0
1.0 1.0"
PRELIMINARIES,0.08639705882352941,"0.7
0.7 1.0"
PRELIMINARIES,0.08731617647058823,"(b) G1 ⊆G. x z
t y"
PRELIMINARIES,0.08823529411764706,"1.0
1.0"
PRELIMINARIES,0.08915441176470588,"1.0
0.9 1.0"
PRELIMINARIES,0.0900735294117647,(c) G2 ⊆G.
PRELIMINARIES,0.09099264705882353,"Figure 1: (a) An example of a probabilistic ADMG G with corresponding edge probabilities. (b) and
(c) are two different subgraphs of G in which Q[y] is identifiable."
PRELIMINARIES,0.09191176470588236,"write e ∈G. We use G′ ⊆G when G′ is an edge-induced subgraph of G, i.e., G′ = (V G′, EG′
d , EG′
b ),
90"
PRELIMINARIES,0.09283088235294118,"where V G′ = V G and EG′
i
⊆EG
i for i ∈{b, d}. We denote by G[X] the vertex-induced subgraph
91"
PRELIMINARIES,0.09375,"of G over the subset of vertices X ⊆V G. For a set of vertices X, we denote by AncG(X) the set of
92"
PRELIMINARIES,0.09466911764705882,"vertices in G that have a directed path to X. Note that X ⊆AncG(X). Let PX(Y ) be a shorthand for
93"
PRELIMINARIES,0.09558823529411764,"P(Y |do(X)), and P M(·) denote the distribution of variables described by the causal model M.
94"
PRELIMINARIES,0.09650735294117647,"Definition 1 (Identifiability [13]). Given a causal ADMG G = (V G, EG
d , EG
b ), and two disjoint
95"
PRELIMINARIES,0.0974264705882353,"subsets of variables X, Y ⊆V G, the causal effect of X on Y , denoted by PX(Y ), is identifiable in G if
96"
PRELIMINARIES,0.09834558823529412,"P M1
X (Y ) = P M2
X (Y ) for any two models M1 and M2 that induce G and P M1(V G) = P M2(V G) >0.
97"
PRELIMINARIES,0.09926470588235294,"Definition 2 (Valid identification formula). For a causal ADMG G over variables V G and a causal
98"
PRELIMINARIES,0.10018382352941177,"query PX(Y ), we say a functional F defined on the probability space over V G is a valid identification
99"
PRELIMINARIES,0.10110294117647059,"formula for PX(Y ) in G if P M1
X (Y ) = P M2
X (Y ) = F(P M1(V G)) = F(P M2(V G)) for any two
100"
PRELIMINARIES,0.10202205882352941,"models M1 and M2 that induce G and P M1(V G) = P M2(V G) > 0.
101"
PRELIMINARIES,0.10294117647058823,"For any query PX(Y ), let [G]Id(PX(Y )) denote the set of subgraphs of G in which PX(Y ) is iden-
102"
PRELIMINARIES,0.10386029411764706,"tifiable (note that if G is complete graph, [G]Id(PX(Y )) is the set of all graphs in which PX(Y ) is
103"
PRELIMINARIES,0.10477941176470588,"identifiable.) We denote by Q[Y ] the causal effect of V \Y on Y , i.e., Q[Y ]=P(Y |do(V \Y )).
104"
PRELIMINARIES,0.1056985294117647,"Definition 3 (District [4]). For ADMG G = (V G, EG
d , EG
b ), let G↔denote the edge-induced subgraph
105"
PRELIMINARIES,0.10661764705882353,"of G over its bidirected edges. X ⊆V G is a district (aka c-component) in G if G↔[X] is connected.
106"
PRELIMINARIES,0.10753676470588236,"Definition 4 (Hedge [16]). Let G be an ADMG, and Y ⊊X be two subsets of its vertices, where Y is
107"
PRELIMINARIES,0.10845588235294118,"a district in G[Y ]. Vertices X form a hedge for Q[Y ] if X is a district in G[X] and AncG[X](Y ) = X1.
108"
PRELIMINARIES,0.109375,"Definition 5 (Maximal hedge [1]). For ADMG G and a set of its vertices Y , let X be the union of all
109"
PRELIMINARIES,0.11029411764705882,"hedges formed for Q[Y ]. Graph G[X], denoted by MH(G, Y ), is called the maximal hedge for Q[Y ].
110"
PRELIMINARIES,0.11121323529411764,"As an example, both sets {t, x} and {z, x} form a hedge for Q[x] in G in Figure 1a, and G[{x, z, t}]
111"
PRELIMINARIES,0.11213235294117647,"is the maximal hedge for Q[x].
112"
PROBLEM SETUP,0.1130514705882353,"2.1
Problem setup
113"
PROBLEM SETUP,0.11397058823529412,"Let G = (V G, EG
d , EG
b ) be an ADMG, where V G is the set of vertices each representing an observed
114"
PROBLEM SETUP,0.11488970588235294,"variable of the system, EG
d is the set of directed edges, and EG
b is the set of bidirected edges among
115"
PROBLEM SETUP,0.11580882352941177,"V G. We know a priori that the true ADMG describing the system is an edge-induced subgraph of
116"
PROBLEM SETUP,0.11672794117647059,"G,2 and we are given a probability map that indicates for each subgraph of G such as Gs, with what
117"
PROBLEM SETUP,0.11764705882352941,"probability Gs is the true causal ADMG of the system. We denote this probability as P(Gs). For
118"
PROBLEM SETUP,0.11856617647058823,"instance, if edge probabilities pe are assumed to be mutually independent, P(Gs) takes the form:
119"
PROBLEM SETUP,0.11948529411764706,"P(Gs) =
Y"
PROBLEM SETUP,0.12040441176470588,"e∈Gs
pe
Y"
PROBLEM SETUP,0.1213235294117647,"e/∈Gs
(1 −pe).
(1)"
PROBLEM SETUP,0.12224264705882353,"In what follows, we will refer to P(Gs) simply as the probability of the ADMG Gs. The first problem
120"
PROBLEM SETUP,0.12316176470588236,"of our interest is formally defined as follows.
121"
PROBLEM SETUP,0.12408088235294118,"Problem 1. We consider the problem of finding the most probable edge-induced subgraph of G, in
122"
PROBLEM SETUP,0.125,"which the causal effect Q[Y ] is identifiable. That is, the goal is to find the ADMG G∗defined by
123"
PROBLEM SETUP,0.12591911764705882,"G∗:=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ])"
PROBLEM SETUP,0.12683823529411764,"P(Gs).
(2)"
PROBLEM SETUP,0.12775735294117646,"1Akbari et al. [1] showed that this intuitive definition is equivalent to the standard definition of hedge in [16].
2Note that G can be a complete graph over both its directed and bidirected edges. z
t y z
t y z
t y"
PROBLEM SETUP,0.12867647058823528,"Figure 2: Three different graphs that share the same set AncG({y}) = {z, t}."
PROBLEM SETUP,0.12959558823529413,"We will prove in Proposition 1 that if Q[Y ] is identifiable in G, then it is also identifiable in every
124"
PROBLEM SETUP,0.13051470588235295,"edge-induced subgraph of G. In other words, if G is a feasible solution to the above optimization
125"
PROBLEM SETUP,0.13143382352941177,"problem, so are all its edge-induced subgraphs. Furthermore, the same identification functional that
126"
PROBLEM SETUP,0.1323529411764706,"is valid w.r.t. G, is also valid w.r.t. every subgraph of G. Let us illustrate this first on an example.
127"
PROBLEM SETUP,0.1332720588235294,"Example 1. Consider the ADMG in Figure 1a. With the given edge probabilities and assuming
128"
PROBLEM SETUP,0.13419117647058823,"independence among the edge probabilities, the subgraph of G illustrated in Figure 1b has probability
129"
PROBLEM SETUP,0.13511029411764705,"0.7 × 0.7 × 0.1 = 0.049, whereas the subgraph of Figure 1c has probability 0.3 × 0.3 × 0.9 = 0.081
130"
PROBLEM SETUP,0.13602941176470587,"(see Eq. (1)). If we were to solve Problem 1, we would choose G2 over G1, as it has a higher
131"
PROBLEM SETUP,0.13694852941176472,"probability. Now consider identification formulas in G1 and G2, respectively:
132"
PROBLEM SETUP,0.13786764705882354,"F1 :
Q[Y ] = P(Y |X),
F2 :
Q[Y ] =
X"
PROBLEM SETUP,0.13878676470588236,"Z,T
P(Y |X, Z, T)P(Z, T)."
PROBLEM SETUP,0.13970588235294118,"F1 is a valid identification formula for any edge-induced subgraph of G1 (see Proposition 1).
133"
PROBLEM SETUP,0.140625,"Analogously, F2 is valid for all edge-induced subgraphs of G2. If we consider the aggregate
134"
PROBLEM SETUP,0.14154411764705882,"probability of the subgraphs of G1 and G2, i.e.,
135 X"
PROBLEM SETUP,0.14246323529411764,"ˆG⊆G1
P( ˆG) = 1 −0.9 = 0.1,
versus
X"
PROBLEM SETUP,0.14338235294117646,"ˆG⊆G2
P( ˆG) = (1 −0.7) × (1 −0.7) = 0.09,"
PROBLEM SETUP,0.14430147058823528,"then we should prefer choosing G1 over G2, as its identification formula F1 is more likely to be valid
136"
PROBLEM SETUP,0.14522058823529413,"than F2 considering the fact that for all its subgraphs, the identification functional F1 is still valid.
137"
PROBLEM SETUP,0.14613970588235295,"Plausibility of a certain identification functional F is the sum of the probabilities of all graphs in
138"
PROBLEM SETUP,0.14705882352941177,"which F is valid given the query of interest. Finding the most plausible identification formula for
139"
PROBLEM SETUP,0.1479779411764706,"a given query requires computing the plausibility of all formulae. Since the space of all formulae
140"
PROBLEM SETUP,0.1488970588235294,"is intractable, an alternative approach to solve this problem is enumerating all valid formulae for a
141"
PROBLEM SETUP,0.14981617647058823,"given graph. This changes the search space of the problem to the space of all graphs. However, this is
142"
PROBLEM SETUP,0.15073529411764705,"yet another challenging and to the best of our knowledge open problem. Therefore, we propose the
143"
PROBLEM SETUP,0.15165441176470587,"following problem as a surrogate that maximizes a lower bound of the most plausible identification
144"
PROBLEM SETUP,0.15257352941176472,"formula. To do so, we use the result of Proposition 1 that shows when an identification functional is
145"
PROBLEM SETUP,0.15349264705882354,"valid in a causal graph, it is also valid in all its edge-induced subgraphs.
146"
PROBLEM SETUP,0.15441176470588236,"Problem 2. Consider the problem of finding the edge-induced subgraph H∗of G with maximum
147"
PROBLEM SETUP,0.15533088235294118,"aggregate probability of its subgraphs, in which Q[Y ] is identifiable. Formally,
148"
PROBLEM SETUP,0.15625,"H∗:=
arg max
Gs⊆G, Gs∈[G]Id(Q[Y ]) X"
PROBLEM SETUP,0.15716911764705882,"ˆG⊆Gs
P( ˆG).
(3)"
PROBLEM SETUP,0.15808823529411764,"In other words, we are looking for a graph H∗with the maximum aggregate probability of its
149"
PROBLEM SETUP,0.15900735294117646,"subgraphs, among the graphs in [G]Id(Q[Y ]), i.e., the graphs in which Q[Y ] is identifiable. Running
150"
PROBLEM SETUP,0.15992647058823528,"an identification algorithm (such as the ID function of [16]) on H∗yields an identification formula
151"
PROBLEM SETUP,0.16084558823529413,"for Q[Y ] which is valid at least with the aggregate probability of the subgraphs of H∗. Therefore,
152"
PROBLEM SETUP,0.16176470588235295,"Problem 2 is a surrogate to recovering the identification formula with the highest plausibility.
153"
PROBLEM SETUP,0.16268382352941177,"In the sequel, for simplicity, we study Problems 1 and 2 under the following assumption. However,
154"
PROBLEM SETUP,0.1636029411764706,"as proved in Appendix C, our results are valid in a more general setting where we allow only for
155"
PROBLEM SETUP,0.1645220588235294,"perfect negative or positive correlations among the edges. An example of perfect negative correlation
156"
PROBLEM SETUP,0.16544117647058823,"between two edges is that both of them cannot exist simultaneously. Appendix C.1 discusses the
157"
PROBLEM SETUP,0.16636029411764705,"significance of this generalization.
158"
PROBLEM SETUP,0.16727941176470587,"Assumption 1. The edges of G are mutually independent. That is, the probability of a subgraph Gs
159"
PROBLEM SETUP,0.16819852941176472,"of G is of the form in (1).
160"
PROBLEM SETUP,0.16911764705882354,"Remark 1. It is noteworthy that our results are not limited to causal queries of the form
161"
PROBLEM SETUP,0.17003676470588236,"Q[Y ] = P(Y |do(V G \ Y )). They can be applied to general causal queries of the form PX(Y )
162"
PROBLEM SETUP,0.17095588235294118,"if the set AncG\X(Y ) is known. This is because the causal query PX(Y ) can be expressed as
163"
PROBLEM SETUP,0.171875,"P
AncG\X(Y )\Y Q[AncG\X(Y )], where AncG\X(Y ) is the set of ancestors of Y in G after removing
164"
PROBLEM SETUP,0.17279411764705882,"the vertices of X. Furthermore, PX(Y ) is identifiable in G if and only if Q[AncG\X(Y )] is iden-
165"
PROBLEM SETUP,0.17371323529411764,"tifiable in G [19, 16, 9]. Note that the assumption that AncG\X(Y ) is known is not equivalent to
166"
PROBLEM SETUP,0.17463235294117646,"precluding uncertainty on the directed edges (as in the case of fixing the edge probabilities to 0 or 1),
167"
PROBLEM SETUP,0.17555147058823528,"but it rather imposes a perfect correlation type of constraint. Consider for instance the three graphs
168"
PROBLEM SETUP,0.17647058823529413,"of Figure 2, where all of them share the same set AncG\X(Y ) = {z, t}. In fact, knowing this set
169"
PROBLEM SETUP,0.17738970588235295,"forces a constraint of the type that if the edge z →y does not exist, the path z →t →y must.
170"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.17830882352941177,"3
Reduction to Edge ID problem and establishing complexity
171"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.1792279411764706,"We begin this section with the following proposition, to which we referred before. Thereafter, we
172"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.1801470588235294,"discuss the hardness of the two problems considered in this work.
173"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.18106617647058823,"Proposition 1. For any causal query PX(Y ) and ADMG G, if F is a valid identification formula for
174"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.18198529411764705,"PX(Y ) in G (Def. 2), then F is a valid identification formula for PX(Y ) in any G′ ⊆G.
175"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.18290441176470587,"All proofs are presented in Appendix A. In what follows, we first formally define the edge ID problem,
176"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.18382352941176472,"and then show the equivalence of Problems 1 and 2 to the edge ID problem under Assumption 1.
177"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.18474264705882354,"Definition 6 (Edge ID problem). For ADMG G = (V G, EG
d , EG
b ), a set of non-negative edge weights
178"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.18566176470588236,"WG = {we ≥0|e ∈G}, and a causal query Q[Y ] for a subset of variables Y ⊆V G, the objective
179"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.18658088235294118,"of the edge ID problem is to find the set of edges E∗⊆EG
d ∪EG
b with minimum aggregated weight
180"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.1875,"(cost), such that Q[Y ] is identifiable in the graph resulting from removing E∗from G. Formally,
181"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.18841911764705882,"E∗:= arg min
E⊆EG
d ∪EG
b X"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.18933823529411764,"e∈E
we,"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.19025735294117646,"s.t.
G′ = (V G, EG
d \ E, EG
b \ E) ∈[G]Id(Q[Y ]).
(4)"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.19117647058823528,"We implicitly assume that the cost of removing a set of edges from G is the sum of the weights of each
182"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.19209558823529413,"individual edge.
183"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.19301470588235295,"The following result unifies the two problems considered in this work by establishing their equivalence
184"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.19393382352941177,"to the edge ID problem. This is done by transforming Problems 1 and 2 with multiplicative objectives
185"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.1948529411764706,"into the edge ID problem that has an additive objective.
186"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.1957720588235294,"Lemma 1. Under Assumption 1, Problem 1 is equivalent to the edge ID problem with the edge
187"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.19669117647058823,"weights chosen to be the log propensity ratios, i.e., we = max{0, log(
pe
1−pe )}, ∀e ∈G. Moreover,
188"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.19761029411764705,"Problem 2 is equivalent to the edge ID problem with the choice of weights we = −log(1 −pe),
189"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.19852941176470587,"∀e ∈G. That is, an instance of Problems 1 and 2 can be reduced to an instance of the edge ID
190"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.19944852941176472,"problem in polynomial time, and vice versa.
191"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.20036764705882354,"As we mentioned earlier, the equivalence of these three problems can be established in more general
192"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.20128676470588236,"settings than what is described under Assumption 1. We refer the interested reader to Appendix C for
193"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.20220588235294118,"a discussion on one such setting. The following result shows that no polynomial-time algorithm for
194"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.203125,"solving any of these three problems exists unless P = NP.
195"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.20404411764705882,"Theorem 1. The edge ID problem is NP-hard.
196"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.20496323529411764,"Theorem 1 is established through a reduction from the minimum vertex cover problem, which is
197"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.20588235294117646,"known to be NP-hard [11]. Theorem 1 is a key result which shows the hardness of recovering the
198"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.20680147058823528,"most plausible graph in which a specified causal effect of interest is identifiable.
199"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.20772058823529413,"Corollary 1. Problems 1 and 2 are NP-hard under Assumption 1.
200"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.20863970588235295,"It is noteworthy that the size of the problem depends on the number of vertices of G, i.e., |V G|, and
201"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.20955882352941177,"the number of edges of G with finite weight, i.e., |EG| = |EG
d | + |EG
b |. Since the ID algorithm
202"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.2104779411764706,"(function ID of [16]) runs in time O(|V G|2), the brute-force algorithm that tests the identifiability of
203"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.2113970588235294,"Q[Y ] in every edge-induced subgraph of G and chooses the one with the minimum weight of deleted
204"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.21231617647058823,"edges runs in time O(2|EG||V G|2). In the next Section, we present various algorithmic approaches
205"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.21323529411764705,"for solving or approximating the solutions to these problems.
206"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.21415441176470587,Algorithm 1 Recursive Algorithm for edge ID.
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.21507352941176472,"1: function EDGEID(G, Y, WG, ωub, ωth)
2:
H ←MH(G, Y )
3:
if H = G[Y ] then return (True, ∅)
4:
ID ←False, Emin ←∅
5:
while True do
6:
e ←The edge of H with minimum weight
7:
if we = ∞or we > ωub then return (ID, Emin)
8:
(id, E) ←EDGEID(H \ e, Y, WG \ {we}, ωub −we, ωth −we)
9:
if id = True then
10:
ID ←True, ωE ←we + P"
REDUCTION TO EDGE ID PROBLEM AND ESTABLISHING COMPLEXITY,0.21599264705882354,"ej∈E wej
11:
ωub ←ωE, Emin ←E ∪{e}
12:
if ωub ≤ωth then return (ID, Emin)
13:
Update we ←∞in WG"
ALGORITHMIC APPROACHES,0.21691176470588236,"4
Algorithmic approaches
207"
ALGORITHMIC APPROACHES,0.21783088235294118,"We first present a recursive approach for solving the edge ID problem in Section 4.1, described
208"
ALGORITHMIC APPROACHES,0.21875,"in Algorithm 1. Since the problem itself is NP-hard, Algorithm 1 runs in exponential time in the
209"
ALGORITHMIC APPROACHES,0.21966911764705882,"worst case. In Section 4.2, we present heuristic approximations of the edge ID problem which run
210"
ALGORITHMIC APPROACHES,0.22058823529411764,"in cubic time in the worst case. These heuristics can also be used as a pre-process to reduce the
211"
ALGORITHMIC APPROACHES,0.22150735294117646,"runtime of Alg. 1 by providing an upper bound which can be fed into Alg. 1 to prune the search space.
212"
ALGORITHMIC APPROACHES,0.22242647058823528,"Finally, in Section 4.3, we present a reduction of edge ID to yet another NP-hard problem, namely
213"
ALGORITHMIC APPROACHES,0.22334558823529413,"minimum-cost intervention problem [1], which allows us to use the algorithms designed for that
214"
ALGORITHMIC APPROACHES,0.22426470588235295,"problem to solve edge ID. Our simulations in Section 5 evaluate these approaches against each other.
215"
RECURSIVE EXACT ALGORITHM,0.22518382352941177,"4.1
Recursive exact algorithm
216"
RECURSIVE EXACT ALGORITHM,0.2261029411764706,"This approach is described in Algorithm 1. The inputs to the algorithm are an ADMG G along with
217"
RECURSIVE EXACT ALGORITHM,0.2270220588235294,"edge weights WG, a set of vertices Y corresponding to the causal query Q[Y ], an upper bound ωub
218"
RECURSIVE EXACT ALGORITHM,0.22794117647058823,"on the aggregate weight (cost) of the optimal solution, and a threshold ωth, an upper bound on the
219"
RECURSIVE EXACT ALGORITHM,0.22886029411764705,"acceptable cost of a solution. The closer ωub is to the optimal cost, the quicker Algorithm 1 will find
220"
RECURSIVE EXACT ALGORITHM,0.22977941176470587,"the solution. If no upper bound is known, the algorithm can be initiated with ωub = ∞. However,
221"
RECURSIVE EXACT ALGORITHM,0.23069852941176472,"we shall discuss a few approaches to find a good upper bound ωub in the following Section. Note
222"
RECURSIVE EXACT ALGORITHM,0.23161764705882354,"that when ωth = 0, Algorithm 1 will output the optimal solution. Otherwise, as soon as a feasible
223"
RECURSIVE EXACT ALGORITHM,0.23253676470588236,"solution with weight less than ωth is found, the algorithm terminates (line 12).
224"
RECURSIVE EXACT ALGORITHM,0.23345588235294118,"The algorithm begins with calling subroutine MH in line 2, which constructs the maximal hedge for
225"
RECURSIVE EXACT ALGORITHM,0.234375,"Q[Y ], denoted by H. We discuss this subroutine in detail in Appendix B. Throughout the rest of the
226"
RECURSIVE EXACT ALGORITHM,0.23529411764705882,"algorithm, we only consider the edges in H, as the other edges do not alter the identifiability. If there
227"
RECURSIVE EXACT ALGORITHM,0.23621323529411764,"is no hedge formed for Q[Y ], i.e., H = G[Y ], there is no need to remove any edges from G and the
228"
RECURSIVE EXACT ALGORITHM,0.23713235294117646,"effect is already identified. Otherwise, we remove the edge with the lowest weight (e) from H and
229"
RECURSIVE EXACT ALGORITHM,0.23805147058823528,"recursively call the algorithm to find the solution after removing the edge e, unless the weight of e is
230"
RECURSIVE EXACT ALGORITHM,0.23897058823529413,"already higher than the upper bound ωub, which means no feasible solutions exist for the provided
231"
RECURSIVE EXACT ALGORITHM,0.23988970588235295,"upper bound (line 7). Whenever a feasible solution is found, the upper bound ωub is updated to the
232"
RECURSIVE EXACT ALGORITHM,0.24080882352941177,"lowest weight among all the solutions weights discovered so far (line 11). This in turn helps the
233"
RECURSIVE EXACT ALGORITHM,0.2417279411764706,"algorithm prune the exponential search space during the next iterations to reduce the runtime. As
234"
RECURSIVE EXACT ALGORITHM,0.2426470588235294,"soon as a solution with a weight less than the acceptable threshold, i.e., ωth, is found, the algorithm
235"
RECURSIVE EXACT ALGORITHM,0.24356617647058823,"returns the solution. Otherwise, we is updated to infinity so that it never gets removed (line 13). This
236"
RECURSIVE EXACT ALGORITHM,0.24448529411764705,"is due to the fact that we have already explored all the solutions involving e.
237"
HEURISTIC ALGORITHMS,0.24540441176470587,"4.2
Heuristic algorithms
238"
HEURISTIC ALGORITHMS,0.24632352941176472,"In this Section, we present two heuristic algorithms for approximating the solution to the edge ID
239"
HEURISTIC ALGORITHMS,0.24724264705882354,"problem. These algorithms can also be used to find the upper bound ωub efficiently, which could be
240"
HEURISTIC ALGORITHMS,0.24816176470588236,"fed as an input to Algorithm 1.
241"
HEURISTIC ALGORITHMS,0.24908088235294118,"Let Z = {z ∈V G|∃y ∈Y : {z, y} ∈EG
b } \ Y denote the set of vertices that have at least one
242"
HEURISTIC ALGORITHMS,0.25,"common bidirected edge with a vertex in Y . Any hedge formed for Q[Y ] contains at least one vertex
243"
HEURISTIC ALGORITHMS,0.2509191176470588,Algorithm 2 Heuristic algorithm for Edge ID.
HEURISTIC ALGORITHMS,0.25183823529411764,"1: function HEID(G, Y, WG)
2:
G′ ←MH(G, Y ) , Z ←{z ∈V G′|∃y ∈Y : {z, y} ∈EG′
b } \ Y
3:
H ←The induced subgraph of G′ on its directed edges.
4:
WH ←{we ∈WG|e ∈H}, V H ←V H ∪{y∗, z∗}
5:
for z ∈Z do EH ←EH ∪(z∗, z), WH ←WH ∪{w(z∗,z) = P"
HEURISTIC ALGORITHMS,0.25275735294117646,"y w{z,y}}"
HEURISTIC ALGORITHMS,0.2536764705882353,"6:
for y ∈Y do EH ←EH ∪(y, y∗), WH ←WH ∪{w(y,y∗) = ∞}
7:
E ←MinCut(H, WH, z∗, y∗)
8:
return (E, P
e∈E we) x1 x2 y1 y2"
HEURISTIC ALGORITHMS,0.2545955882352941,"wd
x2x1"
HEURISTIC ALGORITHMS,0.2555147058823529,"wd
x1y1"
HEURISTIC ALGORITHMS,0.25643382352941174,"wb
x1x2"
HEURISTIC ALGORITHMS,0.25735294117647056,"wb
x2y2"
HEURISTIC ALGORITHMS,0.25827205882352944,"wb
y1y2"
HEURISTIC ALGORITHMS,0.25919117647058826,"(a) ADMG G, Y = {y1, y2}. x1 x2 y1 y2"
HEURISTIC ALGORITHMS,0.2601102941176471,"xd
21
wd
x2x1"
HEURISTIC ALGORITHMS,0.2610294117647059,"y12
1
∞"
HEURISTIC ALGORITHMS,0.2619485294117647,"y12
2
∞ xb
12"
HEURISTIC ALGORITHMS,0.26286764705882354,"wb
x1x2"
HEURISTIC ALGORITHMS,0.26378676470588236,"zb
22 wb
x2y2"
HEURISTIC ALGORITHMS,0.2647058823529412,"yb
12
wb
y1y2"
HEURISTIC ALGORITHMS,0.265625,"y12
12
∞"
HEURISTIC ALGORITHMS,0.2665441176470588,"zd
11
wd
x1y1"
HEURISTIC ALGORITHMS,0.26746323529411764,"(b) ADMG H, Y mcip ={y1, y2 , y12
2 }."
HEURISTIC ALGORITHMS,0.26838235294117646,Figure 3: Reduction from edge ID to MCIP.
HEURISTIC ALGORITHMS,0.2693014705882353,"of Z. As a result, in order to eliminate all the hedges formed for Q[Y ], it suffices to make sure that
244"
HEURISTIC ALGORITHMS,0.2702205882352941,"none of the vertices in Z appear in such a hedge. To this end, for any z ∈Z, it suffices to either
245"
HEURISTIC ALGORITHMS,0.2711397058823529,"remove all the bidirected edges between z and Y , or eliminate all the directed paths from z to Y .
246"
HEURISTIC ALGORITHMS,0.27205882352941174,"The problem of eliminating all directed paths from Z to Y can be cast as a minimum cut problem
247"
HEURISTIC ALGORITHMS,0.27297794117647056,"between Z and Y in the edge-induced subgraph of G over its directed edges. To add the possibility of
248"
HEURISTIC ALGORITHMS,0.27389705882352944,"removing the bidirected edges between Z and Y , we add an auxiliary vertex z∗to the graph, and
249"
HEURISTIC ALGORITHMS,0.27481617647058826,draw a directed edge from z∗to every z ∈Z with weight w = P
HEURISTIC ALGORITHMS,0.2757352941176471,"y∈Y w{z,y}, i.e., the sum of the
250"
HEURISTIC ALGORITHMS,0.2766544117647059,"weights of all bidirected edges between z and Y . Note that z can have bidirected edges to multiple
251"
HEURISTIC ALGORITHMS,0.2775735294117647,"vertices in Y . We then solve the minimum cut problem for z∗and Y . If an edge between z∗and
252"
HEURISTIC ALGORITHMS,0.27849264705882354,"z ∈Z is included in the solution to this minimum cut problem, it is mapped to removing all the
253"
HEURISTIC ALGORITHMS,0.27941176470588236,"bidirected edges between z and Y in the main problem. Note that we can run the algorithm on the
254"
HEURISTIC ALGORITHMS,0.2803308823529412,"maximal hedge formed for Q[Y ] in G rather than G itself. This heuristic is presented as Algorithm 2.
255"
HEURISTIC ALGORITHMS,0.28125,"An analogous approach which goes through solving an undirected minimum cut on the edge induced
256"
HEURISTIC ALGORITHMS,0.2821691176470588,"subgraph of G over its bidirected edges is presented in Algorithm 4 in Appendix D. As mentioned
257"
HEURISTIC ALGORITHMS,0.28308823529411764,"earlier, these algorithms can be used either as standalone algorithms to approximate the solution to
258"
HEURISTIC ALGORITHMS,0.28400735294117646,"the edge ID problem, or as a pre-processing step to find an upper bound ωub for Algorithm 1. As we
259"
HEURISTIC ALGORITHMS,0.2849264705882353,"shall see in our simulations, both algorithms achieve near-optimal results on random graphs.
260"
HEURISTIC ALGORITHMS,0.2858455882352941,"4.3
Alternative approach: reduction to MCIP
261"
HEURISTIC ALGORITHMS,0.2867647058823529,"As an alternative approach to the algorithms discussed so far, we present a reduction of the edge ID
262"
HEURISTIC ALGORITHMS,0.28768382352941174,"problem to another NP-hard problem, i.e., the minimum-cost intervention problem (MCIP) introduced
263"
HEURISTIC ALGORITHMS,0.28860294117647056,"in [1]. This reduction allows us to exploit algorithms designed for MCIP to solve our problems. The
264"
HEURISTIC ALGORITHMS,0.28952205882352944,"formal definition of MCIP is as follows.
265"
HEURISTIC ALGORITHMS,0.29044117647058826,"Definition 7 (MCIP). Suppose G = (V G, EG
d , EG
b ) is an ADMG, C : V G →R≥0 is a cost function
266"
HEURISTIC ALGORITHMS,0.2913602941176471,"mapping each vertex of G to a non-negative cost, and Y ⊆V G. The objective of the minimum-cost
267"
HEURISTIC ALGORITHMS,0.2922794117647059,"intervention problem for identifying the causal effect Q[Y ] is to find the subset A ⊆V G with the
268"
HEURISTIC ALGORITHMS,0.2931985294117647,"minimum aggregate cost such that Q[Y ] is identifiable after intervening on the set A.
269"
HEURISTIC ALGORITHMS,0.29411764705882354,"The reduction from edge ID to MCIP is based on a transformation from ADMG G to another ADMG
270"
HEURISTIC ALGORITHMS,0.29503676470588236,"H, where each edge in G is represented by a vertex in H. This transformation is based on the causal
271"
HEURISTIC ALGORITHMS,0.2959558823529412,"query Q[Y ], and it maps the identifiability of Q[Y ] in G to identifiability of Q[Y mcip] in H, where
272"
HEURISTIC ALGORITHMS,0.296875,"Y mcip is a set of vertices in H. This transformation satisfies the following property; removing a set
273"
HEURISTIC ALGORITHMS,0.2977941176470588,"of edges E∗in G makes Q[Y ] identifiable if and only if intervening on the corresponding vertices of
274"
HEURISTIC ALGORITHMS,0.29871323529411764,"E∗in H makes Q[Y mcip] identifiable. More precisely, after this transformation, solving the edge
275"
HEURISTIC ALGORITHMS,0.29963235294117646,"ID problem for Q[Y ] in G is equivalent to solving MCIP for Q[Y mcip] in H. The complete details
276"
HEURISTIC ALGORITHMS,0.3005514705882353,"of this transformation can be found in Appendix A.2. An example of this reduction is shown in
277"
HEURISTIC ALGORITHMS,0.3014705882352941,"Figure 3, where Q[{y1, y2}] in G (Figure 3a) is mapped to Q[{y1, y2, y12
2 }] in H (Figure 3b), where
278"
HEURISTIC ALGORITHMS,0.3023897058823529,"{y1, y2, y12
2 } is a district, and the set of all vertices of H forms a hedge for it. The vertices of H
279"
HEURISTIC ALGORITHMS,0.30330882352941174,"corresponding to each edge in G are indicated with the same color and have the same weight (cost). To
280"
HEURISTIC ALGORITHMS,0.30422794117647056,"avoid intervening on the remaining vertices in H, we assign infinity cost to them. It is straightforward
281"
HEURISTIC ALGORITHMS,0.30514705882352944,"to see that the solution to the edge ID problem in G with the query Q[Y = {y1, y2}] would be to
282"
HEURISTIC ALGORITHMS,0.30606617647058826,"remove the edge with the lowest weight. This is because after removing any edge in G, no hedge
283"
HEURISTIC ALGORITHMS,0.3069852941176471,"remains for Q[Y ]. Similarly, in H, the solution to MCIP with the query Q[Y mcip = {y1, y2, y12
2 }] is
284"
HEURISTIC ALGORITHMS,0.3079044117647059,"to intervene on the vertex with the lowest cost among Z = {zd
11, xd
21, xb
12, yb
12, zb
22}. This is because
285"
HEURISTIC ALGORITHMS,0.3088235294117647,"after intervening on any vertex in Z, no hedge remains for Q[Y mcip]. The following result formally
286"
HEURISTIC ALGORITHMS,0.30974264705882354,"establishes the link between the edge ID problem in G and MCIP in H.
287"
HEURISTIC ALGORITHMS,0.31066176470588236,"Proposition 2. There exists a polynomial-time reduction from edge ID to MCIP and vice versa.
288"
EXPERIMENTS,0.3115808823529412,"5
Experiments
289"
EXPERIMENTS,0.3125,"We evaluate the proposed heuristic algorithms 2 (HEID-1) and 4 (HEID-2), as well as the exact
290"
EXPERIMENTS,0.3134191176470588,"algorithm 1 (EDGEID), where the upper-bound ωub for EDGEID is set to be the minimum cost found
291"
EXPERIMENTS,0.31433823529411764,"by HEID-1 or -2. Furthermore, given the reduction of the edge ID problem to the MCIP problem
292"
EXPERIMENTS,0.31525735294117646,"described in Section 4.3, we also evaluate the two approximation and one exact algorithms from [1]
293"
EXPERIMENTS,0.3161764705882353,"(MCIP-H1, MCIP-H2, and MCIP-exact, respectively). Experimental results are provided for Problem
294"
EXPERIMENTS,0.3170955882352941,"1, and analogous results for Problem 2 are provided in Appendix E.3. All experiments were carried
295"
EXPERIMENTS,0.3180147058823529,"out on an Intel i9-9900K CPU running at 3.6GHz.
296"
EXPERIMENTS,0.31893382352941174,"Simulations: The algorithms are evaluated for graphs with between 5 and 250 vertices. For a given
297"
EXPERIMENTS,0.31985294117647056,"number of vertices, we uniformly sample 50 ADMG structures from a library of graphs which are
298"
EXPERIMENTS,0.32077205882352944,"non-isomorphic to each other. Edges for each of these 100 graphs are sampled with probability of
299"
EXPERIMENTS,0.32169117647058826,"log(n)/n, where n is the number of (observable) vertices, to impose sparsity (thus pragmatically
300"
EXPERIMENTS,0.3226102941176471,"reducing the search space). For each graph we sample directed and bidirected edge probabilities pe
301"
EXPERIMENTS,0.3235294117647059,"uniformly between 0.51 and 1.03. The problem is then converted into edge ID according to Lemma 1.
302"
EXPERIMENTS,0.3244485294117647,"The vertices in the graphs are topologically sorted and the outcome Y is selected to be the last vertex
303"
EXPERIMENTS,0.32536764705882354,"in the topological ordering. We then check whether a solution exists in principle by removing all
304"
EXPERIMENTS,0.32628676470588236,"finite cost edges and checking for identifiability. If not, a new graph is sampled to avoid evaluating
305"
EXPERIMENTS,0.3272058823529412,"the algorithms on graphs with no solution. For each of these 50 probabilistic ADMGs, we run the
306"
EXPERIMENTS,0.328125,"algorithms and record the resulting runtime and the associated cost of the solution. If the runtime
307"
EXPERIMENTS,0.3290441176470588,"exceeds 3 minutes, we abort and log that the algorithm has failed to find a solution.
308"
EXPERIMENTS,0.32996323529411764,"Results are presented in Figure 4. Runtimes and costs are shown for the subset of graphs for which
309"
EXPERIMENTS,0.33088235294117646,"all algorithms found a solution (to facilitate comparison). Runtimes for each algorithm are shown
310"
EXPERIMENTS,0.3318014705882353,"in Fig. 4a, where it can be seen that our proposed HEID-1 and HEID-2 heuristic algorithms have
311"
EXPERIMENTS,0.3327205882352941,"negligible runtime, followed by the MCIP variants. Interestingly, the exact algorithm EDGEID
312"
EXPERIMENTS,0.3336397058823529,"outperformed the MCIP algorithms on larger graphs, for which the transformation time from the
313"
EXPERIMENTS,0.33455882352941174,"edge ID problem to the MCIP increases with the size of the graph. In contrast, EDGEID had large
314"
EXPERIMENTS,0.33547794117647056,"runtime variance which depended heavily on the specifics of the graph under evaluation, particularly
315"
EXPERIMENTS,0.33639705882352944,"for graphs with fewer vertices. The costs for each graph are shown in Fig. 4b, and here we see,
316"
EXPERIMENTS,0.33731617647058826,"as expected, the lowest cost is achieved by the two exact algorithms, EDGEID and MCIP-exact,
317"
EXPERIMENTS,0.3382352941176471,"followed closely by the heuristic algorithms. Figure 4c shows the fraction of evaluations for which the
318"
EXPERIMENTS,0.3391544117647059,"runtime exceeded 3 minutes (applicable to the exact algorithms). In general, and owing to the sparsity
319"
EXPERIMENTS,0.3400735294117647,"penalty in our graph generation mechanism, the cost of identified solutions falls with the number
320"
EXPERIMENTS,0.34099264705882354,"of vertices. However, among the exact algorithms, EDGEID, exceeds the 3 minute runtime more
321"
EXPERIMENTS,0.34191176470588236,"often than the MCIP-Exact, regardless of the number of vertices and despite the fact that EDGEID is
322"
EXPERIMENTS,0.3428308823529412,"quicker at finding a solution when it does so. Overall, HEID-1 was both the most consistent in terms
323"
EXPERIMENTS,0.34375,"of finding a solution, having a short runtime, and achieving a close to optimal cost.
324"
EXPERIMENTS,0.3446691176470588,"3Note that we do not consider edge probabilities less than 0.5 as from Lemma 1, such edges would be mapped
to edges with 0 weight in the equivalent edge ID problem, which can always be removed at the beginning."
EXPERIMENTS,0.34558823529411764,"(a) Runtimes.
(b) Solution costs.
(c) Fraction runtime exceeded 3 min."
EXPERIMENTS,0.34650735294117646,"Figure 4: Experimental results for runtime, solution costs, fraction of graphs for which no solution
was found, and fraction of graphs for which runtime limit of 3 minutes was exceeded. Error bars for
runtime and cost graphs indicate 5th and 95th percentiles. Best viewed in color."
EXPERIMENTS,0.3474264705882353,"Real-World Graphs: We also apply the algorithms to four real-world datasets. The first ‘Psych’
325"
EXPERIMENTS,0.3483455882352941,"(22 nodes & 70 directed edges) concerns the putative structure from a causal discovery algorithm
326"
EXPERIMENTS,0.3492647058823529,"Structural Agnostic Model [10] using data collected as part of the Health and Relationships Project
327"
EXPERIMENTS,0.35018382352941174,"[20]. The other three ‘Barley’ (48 nodes & 84 directed edges), ‘Water’ (32 nodes & 66 directed
328"
EXPERIMENTS,0.35110294117647056,"edges), and ‘Alarm’ (37 nodes & 46 directed edges) come from the bnlearn python package [17]. For
329"
EXPERIMENTS,0.35202205882352944,"all four graphs, and as with the simulations described above, we introduce bidirected edges with a
330"
EXPERIMENTS,0.35294117647058826,"sparsity constraint of log(n)/n, and simulate expert domain knowledge by random assigning directed
331"
EXPERIMENTS,0.3538602941176471,"and bidirected edge probabilities between 0.51 and 1. The outcome Y is selected to be the last vertex
332"
EXPERIMENTS,0.3547794117647059,"in the topological ordering. For these results, we provide the runtime (limited to 500 seconds) and
333"
EXPERIMENTS,0.3556985294117647,"cost, as well as the ratio of graph plausibility before and after selecting a subgraph in which the effect
334"
EXPERIMENTS,0.35661764705882354,"is identifiable P( ˆG∗)/P(G). This ratio is 1.0 if the effect is identifiable in the original graph, and
335"
EXPERIMENTS,0.35753676470588236,"decreases according to the plausibility of an identified subgraph.
336"
EXPERIMENTS,0.3584558823529412,"Results are shown in Table 1. In cases where MCIP-exact and/or EDGEID did not exceed the
337"
EXPERIMENTS,0.359375,"runtime limit, it can be seen that HEID-2 and MCIP-H2 achieved equivalent to optimal cost and
338"
EXPERIMENTS,0.3602941176470588,"ratio. Runtimes for MCIP variants exceeded the HEID variants owing to the required transformation.
339"
EXPERIMENTS,0.36121323529411764,"EDGEID timed out on all but the Alarm structure, whereas MCIP-exact only timed out on the Psych
340"
EXPERIMENTS,0.36213235294117646,"structure, indicating that the MCIP-exact is more consistent (this also corroborates Figure 4c).
341"
EXPERIMENTS,0.3630514705882353,"Table 1: Time (seconds), cost, and ratio P( ˆG∗)/P(G) for seven algorithms over four real-world
datasets. A dash - indicates maximum runtime (500 seconds) exceeded."
EXPERIMENTS,0.3639705882352941,"Algorithm
Psych
Barley
Alarm
Water
Time
Cost
Ratio
Time
Cost
Ratio
Time
Cost
Ratio
Time
Cost
Ratio"
EXPERIMENTS,0.3648897058823529,"HEID-1
0.0019
2.648
0.07
0.0026
0.081
0.92
0.0004
0.0
1.0
0.0019
1.02
0.36
HEID-2
0.0019
1.806
0.16
0.0026
0.081
0.92
0.0003
0.0
1.0
0.0017
0.42
0.66
MCIP-H1
0.0136
2.648
0.07
0.0140
0.081
0.92
0.0027
0.0
1.0
0.0124
1.02
0.36
MCIP-H2
0.0133
1.806
0.16
0.0131
0.081
0.92
0.0029
0.0
1.0
0.0113
0.42
0.66
MCIP-exact
-
-
-
0.0099
0.081
0.92
0.0028
0.0
1.0
0.0221
0.42
0.66
EDGEID
-
-
-
-
-
-
0.0005
0.0
1.0
-
-
-"
CONCLUSION,0.36580882352941174,"6
Conclusion
342"
CONCLUSION,0.36672794117647056,"Researchers in causal inference are often faced with graphs for which the effect of interest is not
343"
CONCLUSION,0.36764705882352944,"identifiable. It is common to identify a target effect by assuming ignorability. A less drastic and more
344"
CONCLUSION,0.36856617647058826,"reasonable approach would be to relax this assumption by identifying the most plausible subgraph,
345"
CONCLUSION,0.3694852941176471,"given uncertainty about the structure as we suggested in this work. We presented a number of
346"
CONCLUSION,0.3704044117647059,"algorithms for finding the most probable/plausible probabilistic ADMG in which the target causal
347"
CONCLUSION,0.3713235294117647,"effect is identifiable. We provided an analysis of the complexity of the problem, and an experimental
348"
CONCLUSION,0.37224264705882354,"comparison of runtimes, solution costs, and failure rates. We noted that our heuristic algorithms,
349"
CONCLUSION,0.37316176470588236,"Alg. 2 and Alg. 4 performed remarkably well across all metrics. In terms of limitations, we made the
350"
CONCLUSION,0.3740808823529412,"assumption that the edges in G are mutually independent (Assumption 1). Future work should explore
351"
CONCLUSION,0.375,"the case where this assumption does not hold. Finally, it is worth noting that the external validity
352"
CONCLUSION,0.3759191176470588,"of the derived subgraph (i.e., whether or not the subgraph is correctly specified with respect to the
353"
CONCLUSION,0.37683823529411764,"corresponding real-world process) is not guaranteed. As such, practitioners that use such approaches
354"
CONCLUSION,0.37775735294117646,"are encouraged to do so with caution, in particular for research involving human participants.
355"
REFERENCES,0.3786764705882353,"References
356"
REFERENCES,0.3795955882352941,"[1] S. Akbari, J. Etesami, and N. Kiyavash. Minimum cost intervention design for causal effect
357"
REFERENCES,0.3805147058823529,"identification. arXiv preprint, arXiv:2205.02232, 2022.
358"
REFERENCES,0.38143382352941174,"[2] E. Bareinboim, J.D. Correa, D. Ibeling, and T. Icard. On Pearl’s hierarchy and the foundations
359"
REFERENCES,0.38235294117647056,"of causal inference. ACM Special Reports, 2020.
360"
REFERENCES,0.38327205882352944,"[3] A. Deaton and N. Cartwright. Understanding and misundertstanding randomized controlled
361"
REFERENCES,0.38419117647058826,"trials. Social Science and Medicine, 210:2–21, 2018. doi: 10.1016/j.socscimed.2017.12.005.
362"
REFERENCES,0.3851102941176471,"[4] Robin J Evans and Thomas S Richardson. Markovian acyclic directed mixed graphs for discrete
363"
REFERENCES,0.3860294117647059,"data. The Annals of Statistics, 42(4):1452–1482, 2014.
364"
REFERENCES,0.3869485294117647,"[5] C. Glymour, K. Zhang, and P. Spirtes. Review of causal discovery methods based on graphical
365"
REFERENCES,0.38786764705882354,"models. Frontiers in Genetics, 10, 2019.
366"
REFERENCES,0.38878676470588236,"[6] Y. Huang and M. Valtorta. Pearl’s calculus of intervention is complete. Proceedings of
367"
REFERENCES,0.3897058823529412,"the Twenty-Second Conference on Uncertainty in Artificial Intelligence (UAI), 2006. doi:
368"
REFERENCES,0.390625,"10.5555/3020419.3020446.
369"
REFERENCES,0.3915441176470588,"[7] G.W. Imbens and J.D. Angrist. Identification and estimation of local average treatment effects.
370"
REFERENCES,0.39246323529411764,"Econometrica, 62(2):467–475, 1994. doi: 10.2307/2951620.
371"
REFERENCES,0.39338235294117646,"[8] G.W. Imbens and D.B. Rubin. Causal inference for statistics, social, and biomedical sciences.
372"
REFERENCES,0.3943014705882353,"An Introduction. Cambridge University Press, New York, 2015.
373"
REFERENCES,0.3952205882352941,"[9] Amin Jaber, Jiji Zhang, and Elias Bareinboim. Causal identification under Markov equivalence:
374"
REFERENCES,0.3961397058823529,"Completeness results. In International Conference on Machine Learning, pages 2981–2989.
375"
REFERENCES,0.39705882352941174,"PMLR, 2019.
376"
REFERENCES,0.39797794117647056,"[10] D. Kalainathan, O. Goudet, I. Guyon, D. Lopez-Paz, and M. Sebag. Structural agnostic
377"
REFERENCES,0.39889705882352944,"modeling: Adversarial learning of causal graphs. arXiv:1803.04929v3, 2020.
378"
REFERENCES,0.39981617647058826,"[11] Richard M Karp. Reducibility among combinatorial problems. In Complexity of computer
379"
REFERENCES,0.4007352941176471,"computations, pages 85–103. Springer, 1972.
380"
REFERENCES,0.4016544117647059,"[12] J. Pearl. Aspects of graphical models connceted with causality. Proceedings of the 49th Session
381"
REFERENCES,0.4025735294117647,"of the International Statistical Institute, pages 399–401, 1993.
382"
REFERENCES,0.40349264705882354,"[13] J. Pearl. Causality. Cambridge University Press, Cambridge, 2009.
383"
REFERENCES,0.40441176470588236,"[14] D. B. Rubin.
Causal inference using potential outcomes: Design, modeling, decisions.
384"
REFERENCES,0.4053308823529412,"Journal of the American Statistical Association, 100(469):322–331, 2005. doi: 10.1198/
385"
REFERENCES,0.40625,"016214504000001880.
386"
REFERENCES,0.4071691176470588,"[15] R. D. Shah and J. Peters. The hardness of conditional independence testing and the generalised
387"
REFERENCES,0.40808823529411764,"covariance measure. The Annals of Statistics, 48(3), 2020.
388"
REFERENCES,0.40900735294117646,"[16] Ilya Shpitser and Judea Pearl. Identification of joint interventional distributions in recursive semi-
389"
REFERENCES,0.4099264705882353,"Markovian causal models. In Proceedings of the National Conference on Artificial Intelligence,
390"
REFERENCES,0.4108455882352941,"volume 21, page 1219. Menlo Park, CA; Cambridge, MA; London; AAAI Press; MIT Press;
391"
REFERENCES,0.4117647058823529,"1999, 2006.
392"
REFERENCES,0.41268382352941174,"[17] E. Taskesen. bnlearn - Library for Bayesian network learning and inference. Python Library,
393"
REFERENCES,0.41360294117647056,"2020. URL https://erdogant.github.io/bnlearn.
394"
REFERENCES,0.41452205882352944,"[18] J. Tian and J. Pearl. A general identification condition for causal effects. AAAI, 2002.
395"
REFERENCES,0.41544117647058826,"[19] Jin Tian and Judea Pearl. On the testable implications of causal models with hidden variables.
396"
REFERENCES,0.4163602941176471,"In Proceedings of the Eighteenth conference on Uncertainty in artificial intelligence, pages
397"
REFERENCES,0.4172794117647059,"519–527, 2002.
398"
REFERENCES,0.4181985294117647,"[20] D. Umberson. Health and relationships project. Inter-university consortium for political and
399"
REFERENCES,0.41911764705882354,"social research, 2014-2015. doi: 10.3886/ICPSR37404.v2.
400"
REFERENCES,0.42003676470588236,"[21] M. J. van der Laan and S. Rose. Targeted Learning - Causal Inference for Observational and
401"
REFERENCES,0.4209558823529412,"Experimental Data. Springer International, New York, 2011.
402"
REFERENCES,0.421875,"Checklist
403"
REFERENCES,0.4227941176470588,"1. For all authors...
404"
REFERENCES,0.42371323529411764,"(a) Do the main claims made in the abstract and introduction accurately reflect the paper’s
405"
REFERENCES,0.42463235294117646,"contributions and scope? [Yes]
406"
REFERENCES,0.4255514705882353,"(b) Did you describe the limitations of your work? [Yes]
407"
REFERENCES,0.4264705882352941,"(c) Did you discuss any potential negative societal impacts of your work? [Yes]
408"
REFERENCES,0.4273897058823529,"(d) Have you read the ethics review guidelines and ensured that your paper conforms to
409"
REFERENCES,0.42830882352941174,"them? [Yes]
410"
REFERENCES,0.42922794117647056,"2. If you are including theoretical results...
411"
REFERENCES,0.43014705882352944,"(a) Did you state the full set of assumptions of all theoretical results? [Yes]
412"
REFERENCES,0.43106617647058826,"(b) Did you include complete proofs of all theoretical results? [Yes]
413"
REFERENCES,0.4319852941176471,"3. If you ran experiments...
414"
REFERENCES,0.4329044117647059,"(a) Did you include the code, data, and instructions needed to reproduce the main experi-
415"
REFERENCES,0.4338235294117647,"mental results (either in the supplemental material or as a URL)? [Yes]
416"
REFERENCES,0.43474264705882354,"(b) Did you specify all the training details (e.g., data splits, hyperparameters, how they
417"
REFERENCES,0.43566176470588236,"were chosen)? [Yes] ...
418"
REFERENCES,0.4365808823529412,"(c) Did you report error bars (e.g., with respect to the random seed after running experi-
419"
REFERENCES,0.4375,"ments multiple times)? [Yes]
420"
REFERENCES,0.4384191176470588,"(d) Did you include the total amount of compute and the type of resources used (e.g., type
421"
REFERENCES,0.43933823529411764,"of GPUs, internal cluster, or cloud provider)? [Yes]
422"
REFERENCES,0.44025735294117646,"4. If you are using existing assets (e.g., code, data, models) or curating/releasing new assets...
423"
REFERENCES,0.4411764705882353,"(a) If your work uses existing assets, did you cite the creators? [Yes]
424"
REFERENCES,0.4420955882352941,"(b) Did you mention the license of the assets? [Yes]
425"
REFERENCES,0.4430147058823529,"(c) Did you include any new assets either in the supplemental material or as a URL? [Yes]
426"
REFERENCES,0.44393382352941174,"(d) Did you discuss whether and how consent was obtained from people whose data you’re
427"
REFERENCES,0.44485294117647056,"using/curating? [N/A]
428"
REFERENCES,0.44577205882352944,"(e) Did you discuss whether the data you are using/curating contains personally identifiable
429"
REFERENCES,0.44669117647058826,"information or offensive content? [N/A]
430"
REFERENCES,0.4476102941176471,"5. If you used crowdsourcing or conducted research with human subjects...
431"
REFERENCES,0.4485294117647059,"(a) Did you include the full text of instructions given to participants and screenshots, if
432"
REFERENCES,0.4494485294117647,"applicable? [N/A]
433"
REFERENCES,0.45036764705882354,"(b) Did you describe any potential participant risks, with links to Institutional Review
434"
REFERENCES,0.45128676470588236,"Board (IRB) approvals, if applicable? [N/A]
435"
REFERENCES,0.4522058823529412,"(c) Did you include the estimated hourly wage paid to participants and the total amount
436"
REFERENCES,0.453125,"spent on participant compensation? [N/A]
437"
REFERENCES,0.4540441176470588,"Appendix
438"
REFERENCES,0.45496323529411764,"The appendices are organized as follows. Formal proofs of the results stated in the main text are
439"
REFERENCES,0.45588235294117646,"presented in Section A. In Section B, we describe the algorithm to recover the maximal hedge
440"
REFERENCES,0.4568014705882353,"formed for a certain query (Def. 5), which is used as a subroutine of Algorithm 1. A generalization
441"
REFERENCES,0.4577205882352941,"of Assumption 1 is discussed in Section C. Section D provides further details of the heuristic
442"
REFERENCES,0.4586397058823529,"algorithms discussed in the main text. Further evaluations and experimental conditions for our
443"
REFERENCES,0.45955882352941174,"proposed algorithms are presented in Section E.
444"
REFERENCES,0.46047794117647056,"Table 2: Table of notations
Symbol
Description
V G
Vertices of G
EG
b
The set of bidirected edges of G
EG
d
The set of directed edges of G
AncG(X)
Ancestors of X in G
M(G)
The set of the all compatible models with G
pe
Probability of edge e
we
Weight of edge e
PX(Y )
Causal effect of X on Y"
REFERENCES,0.46139705882352944,"A
Formal Proofs
445"
REFERENCES,0.46231617647058826,"We begin with presenting the proofs of Proposition 1 and Lemma 1. Proofs of Theorem 1 and
446"
REFERENCES,0.4632352941176471,"Proposition 2 appear at the end of Sections A.1 and A.2, respectively.
447"
REFERENCES,0.4641544117647059,"Proposition 1. For any causal query PX(Y ) and ADMG G, if F is a valid identification formula for
448"
REFERENCES,0.4650735294117647,"PX(Y ) in G (Def. 2), then F is a valid identification formula for PX(Y ) in any G′ ⊆G.
449"
REFERENCES,0.46599264705882354,"Proof. Let H ⊆G be an arbitrary edge-induced subgraph of G. Let F be an identification formula
450"
REFERENCES,0.46691176470588236,"for PX(Y ) in G, i.e., for any model M that induces G,
451"
REFERENCES,0.4678308823529412,"P M
X (Y ) = F(P M(V G)).
(5)"
REFERENCES,0.46875,"By definition, PX(Y ) is identifiable in G. As a result, there exists and identification formula such as
452"
REFERENCES,0.4696691176470588,"F′ that can be derived for PX(Y ) in G, using a sequence of do calculus rules and basic probability
453"
REFERENCES,0.47058823529411764,"manipulations. Note that this means for any model M that induces G,
454"
REFERENCES,0.47150735294117646,"P M
X (Y ) = F′(P M(V G)).
(6)"
REFERENCES,0.4724264705882353,"Note that an immediate corollary of Equations 5 and 6 is that for any model M that induces G,
455"
REFERENCES,0.4733455882352941,"F(P M(V G)) = F′(P M(V G)).
(7)"
REFERENCES,0.4742647058823529,"Now, we first show that this sequence of actions (combination of do calculus rules and probability
456"
REFERENCES,0.47518382352941174,"manipulations) is valid in H. Note that the basic probability manipulations are graph-independent.
457"
REFERENCES,0.47610294117647056,"It only suffices to show that any applied do calculus rule w.r.t. G can also be applied w.r.t. H. The
458"
REFERENCES,0.47702205882352944,"validity conditions of all three do calculus rules are based on certain d-separations. As a result, it
459"
REFERENCES,0.47794117647058826,"suffices to show that if a d-separation relation is valid in G, it is also valid in H. To do so, it suffices
460"
REFERENCES,0.4788602941176471,"to show that if all paths between Z1 and Z2 are blocked in G given W, they are blocked in H too, for
461"
REFERENCES,0.4797794117647059,"arbitrary disjoint sets of vertices Z1, Z2, W ⊆V G. Take an arbitrary path, p, between Z1 and Z2 in
462"
REFERENCES,0.4806985294117647,"H. Since H ⊆G, this path exists in G. Since Z1 and Z2 are d-separated given W in G, the path p
463"
REFERENCES,0.48161764705882354,"is blocked by W. As a result, any path between Z1 and Z2 in H is blocked by W. Therefore, any
464"
REFERENCES,0.48253676470588236,"do-calculus rule applied in G, can also be applied in H. Hence, F′ is a valid identification formula
465"
REFERENCES,0.4834558823529412,"for PX(Y ). That is, for any model M that induces H,
466"
REFERENCES,0.484375,"P M
X (Y ) = F′(P M(V H)).
(8)"
REFERENCES,0.4852941176470588,"Now note that any model M that induces H, i.e., is compatible with H, is also compatible with G.
467"
REFERENCES,0.48621323529411764,"Also, V G = V H. As a result, from Equations 7 and 8, we know that for any model M that induces
468"
REFERENCES,0.48713235294117646,"H,
469"
REFERENCES,0.4880514705882353,"P M
X (Y ) = F(P M(V H)).
By definition, F is a valid identification formula for PX(Y ) in H.
470"
REFERENCES,0.4889705882352941,"Lemma 1. Under Assumption 1, Problem 1 is equivalent to the edge ID problem with the edge
471"
REFERENCES,0.4898897058823529,"weights chosen to be the log propensity ratios, i.e., we = max{0, log(
pe
1−pe )}, ∀e ∈G. Moreover,
472"
REFERENCES,0.49080882352941174,"Problem 2 is equivalent to the edge ID problem with the choice of weights we = −log(1 −pe),
473"
REFERENCES,0.49172794117647056,"∀e ∈G. That is, an instance of Problems 1 and 2 can be reduced to an instance of the edge ID
474"
REFERENCES,0.49264705882352944,"problem in polynomial time, and vice versa.
475"
REFERENCES,0.49356617647058826,"Proof. Problem 1. First consider an arbitrary graph G1 ∈[G]Id(Q[Y ]) such that G1 has an edge e with
476"
REFERENCES,0.4944852941176471,"pe < 1/2. Let G2 denote the graph G1 after removing e. Proposition 1 implies that G2 ∈[G]Id(Q[Y ]).
477"
REFERENCES,0.4954044117647059,"According to Equation 1, we have P(G2) = 1−pe"
REFERENCES,0.4963235294117647,"pe P(G1) > P(G1) (since pe < 1/2). As a result,
478"
REFERENCES,0.49724264705882354,"the solution G∗to Problem 1 (Eq. 2) has no edges with probability less than 1/2. We can therefore
479"
REFERENCES,0.49816176470588236,"rewrite Problem 1 as:
480"
REFERENCES,0.4990808823529412,"G∗:=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ])"
REFERENCES,0.5,"P(Gs) =
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ])"
REFERENCES,0.5009191176470589,"P(Gs)
s.t.
∀e ∈Gs : pe ≥1 2."
REFERENCES,0.5018382352941176,"Or equivalently, we can always assume that we start with a graph G that has no edges with probability
481"
REFERENCES,0.5027573529411765,"less than 1/2, as otherwise we can remove all of those edges and the problem does not change. This
482"
REFERENCES,0.5036764705882353,"indeed is equivalent to choosing weight (cost) 0 for those edges in the equivalent edge ID problem.
483"
REFERENCES,0.5045955882352942,"Now assuming that the edges have probability at least 1/2,
484"
REFERENCES,0.5055147058823529,"G∗=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ]) P(Gs)"
REFERENCES,0.5064338235294118,"=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ])"
REFERENCES,0.5073529411764706,log(P(Gs))
REFERENCES,0.5082720588235294,"=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ])"
REFERENCES,0.5091911764705882,"log(
Y"
REFERENCES,0.5101102941176471,"e∈Gs
pe
Y"
REFERENCES,0.5110294117647058,"e/∈Gs
(1 −pe))"
REFERENCES,0.5119485294117647,"=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ]) X"
REFERENCES,0.5128676470588235,"e∈Gs
log(pe) +
X"
REFERENCES,0.5137867647058824,"e/∈Gs
log(1 −pe))"
REFERENCES,0.5147058823529411,"=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ]) X"
REFERENCES,0.515625,"e∈Gs
log(pe) +
X"
REFERENCES,0.5165441176470589,"e/∈Gs
log(1 −pe)) +
X"
REFERENCES,0.5174632352941176,"e∈Gs
log(1 −pe)) −
X"
REFERENCES,0.5183823529411765,"e∈Gs
log(1 −pe))"
REFERENCES,0.5193014705882353,Since P
REFERENCES,0.5202205882352942,e/∈Gs log(1 −pe)) + P
REFERENCES,0.5211397058823529,"e∈Gs log(1 −pe)) is a constant value that does not depend on Gs, it
485"
REFERENCES,0.5220588235294118,"can be ignored in the maximization and we have:
486"
REFERENCES,0.5229779411764706,"G∗=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ]) X"
REFERENCES,0.5238970588235294,"e∈Gs
log(pe) −
X"
REFERENCES,0.5248161764705882,"e∈Gs
log(1 −pe))"
REFERENCES,0.5257352941176471,"=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ]) X"
REFERENCES,0.5266544117647058,"e∈Gs
log(
pe
1 −pe))"
REFERENCES,0.5275735294117647,"=
arg min
Gs⊆G,
Gs∈[G]Id(Q[Y ]) X"
REFERENCES,0.5284926470588235,"e/∈Gs
log(
pe
1 −pe))."
REFERENCES,0.5294117647058824,"From the formulation above, it is clear that if we assign the weight we = log(
pe
1−pe ) to each edge
487"
REFERENCES,0.5303308823529411,"e ∈EG, we will have an instance of the edge ID problem. Note that for edges with probability higher
488"
REFERENCES,0.53125,"than 1/2, log(
pe
1−pe ) ≥0, and this assignment of edge weights satisfies the positivity requirement.
489"
REFERENCES,0.5321691176470589,"For the opposite direction, note that the procedure explained above is reversible by the choice of
490"
REFERENCES,0.5330882352941176,"probabilities pe =
exp (we)
1+exp (we), which is a value between 1/2 and 1.
491"
REFERENCES,0.5340073529411765,"Problem 2. First note that under Assumption 1, for any graph Gs,
492 X"
REFERENCES,0.5349264705882353,"ˆG⊆Gs
P( ˆG) =
Y"
REFERENCES,0.5358455882352942,"e/∈Gs
(1 −pe)[
X"
REFERENCES,0.5367647058823529,"ˆ
E⊆EGs Y"
REFERENCES,0.5376838235294118,"e∈ˆ
E
pe
Y"
REFERENCES,0.5386029411764706,"e/∈ˆ
E
(1 −pe)] =
Y"
REFERENCES,0.5395220588235294,"e/∈Gs
(1 −pe)."
REFERENCES,0.5404411764705882,"This is because the inner summation goes over all the possible subsets of EGs, and the summation
493"
REFERENCES,0.5413602941176471,"adds up to 1. Therefore, we can rewrite Problem 2 (Eq. 3)as
494"
REFERENCES,0.5422794117647058,"H∗=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ]) X"
REFERENCES,0.5431985294117647,"ˆG⊆Gs
P( ˆG)"
REFERENCES,0.5441176470588235,"=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ]) Y"
REFERENCES,0.5450367647058824,"e/∈Gs
(1 −pe)"
REFERENCES,0.5459558823529411,"=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ])"
REFERENCES,0.546875,"log(
Y"
REFERENCES,0.5477941176470589,"e/∈Gs
(1 −pe))"
REFERENCES,0.5487132352941176,"=
arg max
Gs⊆G,
Gs∈[G]Id(Q[Y ]) X"
REFERENCES,0.5496323529411765,"e/∈Gs
log(1 −pe)"
REFERENCES,0.5505514705882353,"=
arg min
Gs⊆G,
Gs∈[G]Id(Q[Y ]) X"
REFERENCES,0.5514705882352942,"e/∈Gs
−log(1 −pe)."
REFERENCES,0.5523897058823529,"With the same reasoning as before, assigning the weights we = −log(1 −pe) to each edge e ∈EG,
495"
REFERENCES,0.5533088235294118,"we end up with an instance of the edge ID problem. Note that again 0 ≤−log(1 −pe) ≤∞.
496"
REFERENCES,0.5542279411764706,"It is noteworthy that this procedure is also reversible with the choice of edge probabilities pe =
497"
REFERENCES,0.5551470588235294,"1 −exp (−we), which reduces the edge ID problem to an instance of Problem 2. Again note that
498"
REFERENCES,0.5560661764705882,"0 ≤1 −exp (−we) ≤1 for any non-negative we.
499"
REFERENCES,0.5569852941176471,"A.1
Reduction from MCIP to edge ID
500"
REFERENCES,0.5579044117647058,"Theorem 1. The edge ID problem is NP-hard.
501"
REFERENCES,0.5588235294117647,"To prove Theorem 1, we first present a polynomial-time reduction from MCIP to the edge ID problem.
502"
REFERENCES,0.5597426470588235,"It has been shown that the minimum vertex cover problem can be reduced to MCIP in polynomial
503"
REFERENCES,0.5606617647058824,"time [1]. Combining the two reductions, we show that there exists a polynomial-time redcution from
504"
REFERENCES,0.5615808823529411,"the minimum vertex cover problem to the edge ID problem. Since the minimum vertex cover problem
505"
REFERENCES,0.5625,"is known to be NP-hard [11], it follows that the edge ID problem is also NP-hard.
506"
REFERENCES,0.5634191176470589,"We propose the following reduction from MCIP to the edge ID problem. Assume we want to solve
507"
REFERENCES,0.5643382352941176,"MCIP given ADMG G = (V G, EG
d , EG
b ), query Q[Y ], and the intervention costs C(v) for v ∈V G.
508"
REFERENCES,0.5652573529411765,"We construct a graph, denoted by H = T1(G, Y ), through the following steps.
509"
REFERENCES,0.5661764705882353,"a. For every vertex x ∈V G \ Y , add two vertices x1, x2 to V H.
510"
REFERENCES,0.5670955882352942,"b. For any bidirected edge {x, z} ∈EG
b where x ∈V G \ Y and z ∈V G, add the bidirected edge
511"
REFERENCES,0.5680147058823529,"{x2, z2} to EH
b .
512"
REFERENCES,0.5689338235294118,"c. For any directed edge (x, z) ∈EG
d where x ∈V G \Y and z ∈V G, add the directed edge (x1, z1)
513"
REFERENCES,0.5698529411764706,"to EH
d .
514"
REFERENCES,0.5707720588235294,"d. For any bidirected edge {y1, y2} ∈EG
b where y1, y2 ∈Y , add the bidirected edge {y1, y2} to
515"
REFERENCES,0.5716911764705882,"EH
b .
516"
REFERENCES,0.5726102941176471,"e. For every x1, x2 ∈V G \Y , draw the two edges {x1, x2} ∈EH
b and (x2, x1) ∈EH
d . Furthermore,
517"
REFERENCES,0.5735294117647058,"the weight of {x1, x2} is C(x).
518"
REFERENCES,0.5744485294117647,"f. The costs of the all other edges in H are assigned to be infinite.
519"
REFERENCES,0.5753676470588235,"With abuse of notation, for any vertex x ∈V G \ Y , we define T1(x) = {x2, x1} ∈EH
b , where
520"
REFERENCES,0.5762867647058824,"{x2, x1} is the bidirected edge in H that corresponds to x in G, and inherits the same weight (cost).
521"
REFERENCES,0.5772058823529411,"Example 2. Consider graph G in Figure 5a. Vertices x and z are mapped to x1, x2, and z1, z2,
522"
REFERENCES,0.578125,"respectively. Both a directed and a bidirected edge are drawn between these pairs. The bidirected
523"
REFERENCES,0.5790441176470589,"edge {x1, x2} is assigned the weight C(x) = cx, and the bidirected edge {z1, z2} is assigned the
524"
REFERENCES,0.5799632352941176,"weight C(z) = cz. Infinite weights are assigned to the rest of the edges in H (Figure 5b).
525 x
cx z
cz y1
y2"
REFERENCES,0.5808823529411765,"(a) The model G with costs
on each vertex x1 z1 y1
y2 x2 z2 ∞ ∞ ∞ cx cz
∞ ∞
∞ ∞"
REFERENCES,0.5818014705882353,"(b) The model G with costs
on each edge"
REFERENCES,0.5827205882352942,Figure 5: Reduction of MCIP to edge ID
REFERENCES,0.5836397058823529,"Proposition 3. Suppose G′ is an ADMG, Y ⊆V G′ is a set of its vertices such that Y is a district
526"
REFERENCES,0.5845588235294118,"in G′[Y ], and H′ = T1(G′, Y ). Consider X ⊆V G′ \ Y as an arbitrary subset of vertices of G′, and
527"
REFERENCES,0.5854779411764706,"define G = G′[V G′ \ X]. Let E′′
b = {e ∈EH′
b |∃v ∈X, e = T1(v)} and define EH
b = EH′
b
\ E′′
b . Let
528"
REFERENCES,0.5863970588235294,"H be the edge-induced subgraph of H′ defined as H = (V H′, EH
d , EH
b ). Q[Y ] is identifiable in G if
529"
REFERENCES,0.5873161764705882,"and only if Q[Y ] is identifiable in H.
530"
REFERENCES,0.5882352941176471,"Proof. We prove the contrapositive, i.e., Q[Y ] is not identifiable in G iff Q[Y ] is not identifiable in
531"
REFERENCES,0.5891544117647058,"H. Note that by construction, Y is a district in both G[Y ] and H[Y ]. That is, it suffices to show that
532"
REFERENCES,0.5900735294117647,"there exists a hedge formed for Q[Y ] in G iff there exists a hedge formed for Q[Y ] in H.
533"
REFERENCES,0.5909926470588235,"To this end, we first prove the following claim. Let W ∈V H form a hedge for Q[Y ]. If x1 ∈W for
534"
REFERENCES,0.5919117647058824,"some x ∈V G′, then x2 ∈W and vice versa. That is, the two vertices x1 and x2 corresponding to the
535"
REFERENCES,0.5928308823529411,"same vertex x in V G′ appear only simultaneously in any hedge. To see this, note that by construction,
536"
REFERENCES,0.59375,"x1 is the only child of x2. By definition of hedge, if x2 ∈W, then it has a directed path to Y within
537"
REFERENCES,0.5946691176470589,"H[W], and this path can only go through x1. For the other direction, note that x1 has only one
538"
REFERENCES,0.5955882352941176,"bidirected edge, which is with x2. Again, by definition of hedge, if x1 ∈W, then it has a bidirected
539"
REFERENCES,0.5965073529411765,"path to Y within H[W], and this path can only go through x2. Hence, in the sequel, when there is a
540"
REFERENCES,0.5974264705882353,"hedge W formed for Q[Y ] in H, we will without loss of generality assume that there exists a set of
541"
REFERENCES,0.5983455882352942,"variables Z ⊆V G′ such that W = Z1 ∪Z2 ∪Y , where Z1 = {z1|z ∈Z} and Z2 = {z2|z ∈Z}.
542"
REFERENCES,0.5992647058823529,"If part. Let W = Z1 ∪Z2 ∪Y form a hedge for Q[Y ] in H. First note that since none of the
543"
REFERENCES,0.6001838235294118,"bidirected edges between Z1 and Z2 are removed in H, by construction, all vertices Z are present
544"
REFERENCES,0.6011029411764706,"in G, i.e., Z ⊆V G. Now we show that Z ∪Y forms a hedge for Q[Y ] in G. To this end, we prove
545"
REFERENCES,0.6020220588235294,"G[Z ∪Y ] is a district and Z ∪Y = AncG[Z∪Y ](Y ). First note that any vertex in Z1 has only one
546"
REFERENCES,0.6029411764705882,"bidirected edge to a vertex in Z2. That is, if we consider the edge-induced subgraph of H[W] over
547"
REFERENCES,0.6038602941176471,"its bidirected edges, vertices of Z1 are leaf nodes. As a result, Z2 ∪Y must be connected in this
548"
REFERENCES,0.6047794117647058,"graph. That is, Z2 ∪Y is a district in H[Z2 ∪Y ]. This implies by construction of H that G[Z ∪Y ]
549"
REFERENCES,0.6056985294117647,"is a single district. With a similar reasoning, note that vertices in Z2 have no parents. As result,
550"
REFERENCES,0.6066176470588235,"Z1 ∪Y = AncH[Z1∪Y ](Y ) (since the directed paths cannot go through Z2). Again, by construction,
551"
REFERENCES,0.6075367647058824,"the edge-induced subgraph of G[Z ∪Y ] over its directed edges is a copy of H[Z1 ∪Y ]. As a result,
552"
REFERENCES,0.6084558823529411,"Z ∪Y = AncG[Z∪Y ](Y ).
553"
REFERENCES,0.609375,"Only if part. Let Z ∪Y form a hedge for Q[Y ] in G, where Z ⊆V G \ Y . Define Z1 = {z1|z ∈Z}
554"
REFERENCES,0.6102941176470589,"and Z2 = {z2|z ∈Z}. We show that Z1 ∪Z2 ∪Y forms a hedge for Q[Y ] in H. First, by definition
555"
REFERENCES,0.6112132352941176,"of hedge, AncG[Z∪Y ](Y ) = Z ∪Y . Since the edge-induced subgraph of H[Z1 ∪Y ] is a copy of
556"
REFERENCES,0.6121323529411765,"G[Z ∪Y ] by construction, we know AncG[Z1∪Y ](Y ) = Z1 ∪Y . Further, each vertex z2 ∈Z2 is a
557"
REFERENCES,0.6130514705882353,"parent of z1 ∈Z1. As a result, AncG[Z1∪Z2∪Y ](Y ) = Z1 ∪Z2 ∪Y . Now it suffices to show that
558"
REFERENCES,0.6139705882352942,"Z1 ∪Z2 ∪Y is a district in H[Z1 ∪Z2 ∪Y ]. By definition of hedge, Z ∪Y is a district in G[Z ∪Y ].
559"
REFERENCES,0.6148897058823529,"By construction of H, exactly the same bidirected edges (and therefore bidirected paths) exist in
560"
REFERENCES,0.6158088235294118,"H[Z2 ∪Y ]. Therefore, Z2 ∪Y is a district in H[Z2 ∪Y ]. Now note that by construction of H′,
561"
REFERENCES,0.6167279411764706,"each vertex z1 ∈Z1 has a bidirected edge to z2 ∈Z2. And by definition of G and H, since the
562"
REFERENCES,0.6176470588235294,"vertices Z exist in G, none of these edges are removed in H. As a result, Z1 ∪Z2 ∪Y is a district in
563"
REFERENCES,0.6185661764705882,"H[Z1 ∪Z2 ∪Y ], which completes the proof.
564 565"
REFERENCES,0.6194852941176471,"Proof of Theorem 1. A polynomial-time reduction from MCIP to the edge ID problem follows
566"
REFERENCES,0.6204044117647058,"immediately from Proposition 3. MCIP is shown to be NP-hard [1]. As a result, the edge ID problem
567"
REFERENCES,0.6213235294117647,"is Np-hard.
568"
REFERENCES,0.6222426470588235,"A.2
Reduction from edge ID to MCIP
569"
REFERENCES,0.6231617647058824,"Proposition 2. There exists a polynomial-time reduction from edge ID to MCIP and vice versa.
570"
REFERENCES,0.6240808823529411,"To prove Proposition 2, we begin with presenting a transformation T2(G, Y ) which is in the core of
571"
REFERENCES,0.625,"reduction from edge ID to MCIP.
572"
REFERENCES,0.6259191176470589,"Suppose we want to solve the edge ID problem given ADMG G = (V G, EG
d , EG
b ), query Q[Y ], and
573"
REFERENCES,0.6268382352941176,"edge weights WG = {we|e ∈G}. Let X = V G \ Y denote the set of vertices of G excluding Y .
574"
REFERENCES,0.6277573529411765,"We define the transformation (H, Y mcip) = T2(G, Y ) where H = (V H, EH
d , EH
b ) is an ADMG and
575"
REFERENCES,0.6286764705882353,"Y mcip ⊆V H as follows. Note that V H will consist of two disjoint set of vertices, namely V H
top and
576"
REFERENCES,0.6295955882352942,"V H
bot, i.e., V H = V H
top ∪V H
bot.
577"
REFERENCES,0.6305147058823529,"a. Begin with V H
top = V H
bot = ∅, Y mcip = ∅. For any vertex v ∈V G, add a vertex v to V H
top with
578"
REFERENCES,0.6314338235294118,"cost C(v) = ∞. If v ∈Y , add v to Y mcip.
579"
REFERENCES,0.6323529411764706,"b. For any directed edge (vi, vj) ∈EG
d with weight wd
ij in G, add a new vertex vd
ij to V H
top, with cost
580"
REFERENCES,0.6332720588235294,"C(vd
ij) = wd
ij, where
581"
REFERENCES,0.6341911764705882,"vd
ij = 
 "
REFERENCES,0.6351102941176471,"xd
ij
if vi, vj ∈X,
zd
ij
if vi ∈Y or vj ∈Y,
yd
ij
if both vi, vj ∈Y."
REFERENCES,0.6360294117647058,"Draw directed edges (vi, vd
ij) and (vd
ij, vj). Further, draw a bidirected edge between vi and vd
ij.
582"
REFERENCES,0.6369485294117647,"c. For any bidirected edge {xi, xj} ∈EG
b with weight wb
ij, add a new vertex, xb
ij to V H
top with cost
583"
REFERENCES,0.6378676470588235,"C(xb
ij) = wb
ij. Add two bidirected edges {xi, xb
ij} and {xj, xb
ij}. Further, draw two directed
584"
REFERENCES,0.6387867647058824,"edges (xb
ij, xi) and (xb
ij, xj) in H.
585"
REFERENCES,0.6397058823529411,"d. For any bidirected edge {xi, yj} with weight wb
ij, add a new vertex zb
ij to V H
top with cost C(zb
ij) =
586"
REFERENCES,0.640625,"wb
ij. Draw bidirected edges {zb
ij, xi} and {zb
ij, yj}. Then draw a directed edge from zb
ij to xi.
587"
REFERENCES,0.6415441176470589,"e. For any bidirected edge between {yi, yj} ∈EG
b with weight wb
ij in G, add a new vertex, yb
ij to
588"
REFERENCES,0.6424632352941176,"V H
top with cost C(yb
ij) = wb
ij. Draw bidirected edges {yb
ij, yi} and {yb
ij, yj}. Further, for any
589"
REFERENCES,0.6433823529411765,"x ∈X, draw a directed edge from yb
ij to x.
590"
REFERENCES,0.6443014705882353,"f. Let y1 ≺... ≺yk denote a topological ordering among vertices of Y . For every pair {yi, yj}
591"
REFERENCES,0.6452205882352942,"of vertices of Y , where i < j, add vertices yij
i , yij
i+1, . . . , yij
j to V H
bot. Add yij
j to Y mcip. Draw
592"
REFERENCES,0.6461397058823529,"the directed edges (yk, yij
k ) for every i ≤k ≤j. Draw the directed edges (yij
k , yij
i ) for every
593"
REFERENCES,0.6470588235294118,"i < k < j, and the directed edge (yij
i , yij
j ). Draw a bidirected edge between yj and yij
i . Further,
594"
REFERENCES,0.6479779411764706,"for any bidirected edge {yk, yl} ∈EG
b where i ≤k, l ≤j, add a new vertex yij
kl to V H
bot, draw
595"
REFERENCES,0.6488970588235294,"two bidirected edges {yij
kl, yij
k } and {yij
kl, yij
l }, and a directed edge (yij
kl, yb
ij). The costs of the all
596"
REFERENCES,0.6498161764705882,"of the vertices in V H
bot are infinite.
597"
REFERENCES,0.6507352941176471,"With abuse of notation, for any bidirected edge eb
ij = {vi, vj} ∈EG
b and any directed edge ed
ij =
598"
REFERENCES,0.6516544117647058,"(vi, vj) ∈EG
d , we define T2(eb
ij) = vb
ij and T2(ed
ij) = vd
ij, respectively, where vb
ij, vd
ij ∈V H are the
599"
REFERENCES,0.6525735294117647,"vertices representing their corresponding edges.
600"
REFERENCES,0.6534926470588235,"We will utilize the following results to prove Proposition 2. More precisely, Lemmas 2 through 9 are
601"
REFERENCES,0.6544117647058824,"used to prove Proposition 4, which in turn is used to prove Proposition 2.
602"
REFERENCES,0.6553308823529411,"Lemma 2. Suppose G is an ADMG, Y is a set of its vertices, and (H, Y mcip) = T (G, Y ). Each
603"
REFERENCES,0.65625,"vertex y ∈Y mcip is a district in H.
604"
REFERENCES,0.6571691176470589,"Proof. It suffices to show that for every pair of v1, v2 ∈Y mcip there is no bidirected edge between
605"
REFERENCES,0.6580882352941176,"them in H. Suppose first that v1, v2 ∈Y . Any bidirected edge between v1 and v2 in G (if it exists)
606"
REFERENCES,0.6590073529411765,"is removed in step (e) of the transformation, and none of the steps (a) through (f) add a bidirected
607"
REFERENCES,0.6599264705882353,"edge between them. Otherwise, at least one of v1, v2, w.l.o.g. v1, is in Y mcip \ Y . Suppose w.l.o.g.
608"
REFERENCES,0.6608455882352942,"that v1 = yij
j . From step (f) of the transformation T , we know that v1 has bidirected edges only to
609"
REFERENCES,0.6617647058823529,"vertices yij
kj, where none of them is a member of Y mcip.
610"
REFERENCES,0.6626838235294118,"Lemma 3. Suppose G is an ADMG, Y is a set of its vertices, and (H, Y mcip) = T2(G, Y ). Suppose
611"
REFERENCES,0.6636029411764706,"there is a hedge formed for Q[y] in H, where y ∈Y . Let H denote the set of vertices of this hedge. H
612"
REFERENCES,0.6645220588235294,"does not include any of the vertices added in the step (f) of the transformation. That is, H ∩V H
bot = ∅.
613"
REFERENCES,0.6654411764705882,"Proof. Define V1 = {yij
kl ∈V H
bot, ∀i, j, k, l}, and V2 = V H
bot \ V1. By construction of H, the vertices
614"
REFERENCES,0.6663602941176471,"of V2 have directed edges only to vertices in V2. Therefore, for each vertex v ∈V2, we have
615"
REFERENCES,0.6672794117647058,"v /∈AncH[H](y). As a result, V2 ∩H = ∅, since by definition of hedge, any vertex of H is an
616"
REFERENCES,0.6681985294117647,"ancestor of y in H[H]. Now, consider an arbitrary vertex v ∈V1. By construction of H, if there
617"
REFERENCES,0.6691176470588235,"exists a bidirected edge {v, v′} ∈EH
b , we must have that v′ ∈V2. Therefore, if v ∈H, there must
618"
REFERENCES,0.6700367647058824,"be at least one vertex v′ ∈V2 ∩H. Since we proved V2 ∩H = ∅, v cannot be in H. Consequently,
619"
REFERENCES,0.6709558823529411,"V1 ∩H = ∅.
620 621"
REFERENCES,0.671875,"Lemma 4. Suppose G is an ADMG, Y is a set of its vertices, and (H, Y mcip) = T (G, Y ). Suppose
622"
REFERENCES,0.6727941176470589,"there is a hedge formed for Q[yij
j ] in H, where yi, yj ∈Y and yij
j is the vertex corresponding to the
623"
REFERENCES,0.6737132352941176,"pair (yi, yj) added in step (f) of the transform T . Let H denote the set of vertices of this hedge. If
624"
REFERENCES,0.6746323529411765,"v ∈H ∩V H
bot, then v has the superscript ij, that is, v is either one of the vertices yij
k , or one of the
625"
REFERENCES,0.6755514705882353,"vertices yij
kl, where i ≤k, l ≤j. In the latter case, yb
kl ∈H.
626"
REFERENCES,0.6764705882352942,"Proof. Define V1 = {ymn
kl
∈V H
bot, ∀m, n, k, l}, and V2 = V H
bot \ V1. Suppose V ∗
1 = {vij
kl ∈
627"
REFERENCES,0.6773897058823529,"V H
bot, ∀k, l} and V ∗
2 = {vij
k ∈V H
bot, ∀k}. Also define V ′
1 = V1 \ V ∗
1 , V ′
2 = V2 \ V ∗
2 . For the first
628"
REFERENCES,0.6783088235294118,"part of the claim, it suffices to show that V ′
1 ∩H = ∅, V ′
2 ∩H = ∅. By construction of H, the
629"
REFERENCES,0.6792279411764706,"vertices of V
′
2 do not have any child out of V
′
2. Therefore, V ′
2 ∩AncH[H](yij
j ) = ∅. This implies that
630"
REFERENCES,0.6801470588235294,"V
′
2 ∩H = ∅. Now let vi
′j
′"
BE AN ARBITRARY VERTEX IN V,0.6810661764705882,"1
be an arbitrary vertex in V
′
1. By construction of H, vi
′j
′"
HAS BIDIRECTED,0.6819852941176471,"1
has bidirected
631"
HAS BIDIRECTED,0.6829044117647058,"edges only to vertices of V ′
2. This implies that if vi
′j
′"
HAS BIDIRECTED,0.6838235294117647,"1
∈H, there must be at least one vertex of V ′
2
632"
HAS BIDIRECTED,0.6847426470588235,"in H which is in contradiction with V ′
2 ∩H = ∅. Therefore, vi
′j
′"
HAS BIDIRECTED,0.6856617647058824,"1
/∈H. Since vi
′j
′"
IS AN ARBITRARY,0.6865808823529411,"1
is an arbitrary
633"
IS AN ARBITRARY,0.6875,"vertex in V ′
1, we conclude V ′
1 ∩H = ∅.
634"
IS AN ARBITRARY,0.6884191176470589,"Now, we prove that if v ∈H is one of the vertices yij
kl, we have yb
kl ∈H. Since yij
kl ∈H, there exists
635"
IS AN ARBITRARY,0.6893382352941176,"a directed path from yij
kl to yij
j in H[H]. Since yb
kl is the only child of yij
kl, the aforementioned path
636"
IS AN ARBITRARY,0.6902573529411765,"passes through yb
kl. Therefore, yb
kl ∈H.
637 638"
IS AN ARBITRARY,0.6911764705882353,"Lemma 5. Suppose G′ = (V G′, EG′
d , EG′
b ) is an ADMG, Y ⊆V G′ is a set of its vertices, and
639"
IS AN ARBITRARY,0.6920955882352942,"(H′, Y mcip) = T (G′, Y ). Let E′′
d ⊆EG′
d
and E′′
b ⊆EG′
b
be arbitrary edges of G, and define
640"
IS AN ARBITRARY,0.6930147058823529,"EG
d = EG′
d \ E′′
d , EG
b = EG′
b
\ E′′
b . Define G = (V G, EG
d , EG
b ) and H = H′[V H′ \ V ′], where
641"
IS AN ARBITRARY,0.6939338235294118,"V G = V G′ and V ′ = {v ∈V H′|∃e ∈E′′
b ∪E′′
d , v = T2(e)}. Suppose there is a hedge formed
642"
IS AN ARBITRARY,0.6948529411764706,"for Q[yij
j ] in H for some i, j. Let H denote the set of vertices of this hedge in H. The set of
643"
IS AN ARBITRARY,0.6957720588235294,"vertices Y ∗= {yk|yij
k ∈H} is a district in G[Y ]. Moreover, Htop = AncH[Htop](Y ∗), where
644"
IS AN ARBITRARY,0.6966911764705882,"Htop = H ∩V H
top.
645"
IS AN ARBITRARY,0.6976102941176471,"Proof. First we prove that Y ∗is a district in G[Y ]. Consider an arbitrary vertex yij
k in H. By definition
646"
IS AN ARBITRARY,0.6985294117647058,"of hedge, there exists a bidirected path, p1, between yij
k and yij
j in H[H]. Let Y ij denotes the set of
647"
IS AN ARBITRARY,0.6994485294117647,"vertices in H such that their superscript is ij. Lemma 4 implies that H ⊆V H
top ∪Y ij. Furthermore,
648"
IS AN ARBITRARY,0.7003676470588235,"by construction of H, there is only one bidirected edge between Y ij and H \ Y ij, which is {yj, yij
i }.
649"
IS AN ARBITRARY,0.7012867647058824,"Therefore, all of the vertices on the path p1 are in Y ij. Now, we define Y
′
1 = {yk|yij
k ∈p1} and
650"
IS AN ARBITRARY,0.7022058823529411,"Y ′
2 = {yb
kl|yij
kl ∈p1}, i.e., the V H
top counterparts of the vertices in p1. Since the vertices on p1
651"
IS AN ARBITRARY,0.703125,"are in H, Y ′
1 ⊆Y ∗. From Lemma 4, we know that if yij
kl ∈H, then, yb
kl ∈H. It implies that
652"
IS AN ARBITRARY,0.7040441176470589,"Y
′
2 ⊆H. As a result, Y ′
1 and Y ′
2 are both vertices of H. Now if we replace all the vertices in p1 with
653"
IS AN ARBITRARY,0.7049632352941176,"their corresponding counterpart in Y ′
1 ∪Y ′
2, we arrive at a bidirected path p2 between yk and yj in
654"
IS AN ARBITRARY,0.7058823529411765,"H[Y ′
1 ∪Y ′
2] (as by construction the same edges exist in V H
top). By definition of G and H, if a vertex
655"
IS AN ARBITRARY,0.7068014705882353,"yb
kl exists in H, the corresponding edge {yk, yl} exists in G. As a result, a bidirected path between yk
656"
IS AN ARBITRARY,0.7077205882352942,"and yl exists in G[Y ′
1]. Noting that yk is an arbitrary vertex in Y ∗and Y ′
1 ⊆Y ∗, this implies that all
657"
IS AN ARBITRARY,0.7086397058823529,"of the vertices of Y ∗are in the same district as yj in G[Y ∗], which completes the proof.
658"
IS AN ARBITRARY,0.7095588235294118,"Next, we prove that Htop = AncH[Htop](Y ∗). To this end, it suffices to show that there is a directed
659"
IS AN ARBITRARY,0.7104779411764706,"path form an arbitrary vertex v ∈Htop to Y ∗in H[Htop]. Since H forms a hedge for Q[yij
j ] in H,
660"
IS AN ARBITRARY,0.7113970588235294,"there exists a directed path from v to yij
j in H[H]. This path must go through the only parent of yij
j ,
661"
IS AN ARBITRARY,0.7123161764705882,"which is yij
i . Then, the last vertex on the path is one of the parents of yij
i . If this parent is yi, we are
662"
IS AN ARBITRARY,0.7132352941176471,"done as we have a directed path from v to yi, where yi ∈Y ∗and it has no ancestors in H \ Htop.
663"
IS AN ARBITRARY,0.7141544117647058,"Otherwise, let this parent be yij
k for some i < k < j. Now the last vertex on the path before yij
k must
664"
IS AN ARBITRARY,0.7150735294117647,"be yk, which is the only parent of yij
k . Note that by definition of Y ∗, yk ∈Y ∗. Therefore, v has a
665"
IS AN ARBITRARY,0.7159926470588235,"directed path to Y ∗in H[Htop].
666"
IS AN ARBITRARY,0.7169117647058824,"Lemma 6. Suppose G = (V G, EG
d , EG
b ) is an ADMG, Y is a set of its vertices, and (H, Y mcip) =
667"
IS AN ARBITRARY,0.7178308823529411,"T2(G, Y ). Suppose there is a hedge formed for Q[y] in H for some y ∈Y mcip. Let H denote the set
668"
IS AN ARBITRARY,0.71875,"of vertices of this hedge. Then H ∩X ̸= ∅, where X = V G \ Y .
669"
IS AN ARBITRARY,0.7196691176470589,"Proof. Since H forms a hedge for Q[y] in H, there exists a vertex h ∈H such that {y, h} ∈EH
b .
670"
IS AN ARBITRARY,0.7205882352941176,"There are two possibilities for y ∈Y mcip:
671"
IS AN ARBITRARY,0.7215073529411765,"• y = yi ∈Y . From Lemma 4 we have h /∈V H
bot. Therefore, by construction of H, h = yb
ij
672"
IS AN ARBITRARY,0.7224264705882353,"for some j.
673"
IS AN ARBITRARY,0.7233455882352942,"• y = yij
j ∈V H
bot. By construction of H, h = yij
kj for some k. Vertex h must have a directed
674"
IS AN ARBITRARY,0.7242647058823529,"path to y in H by definition of hedge, which must go through the only child of h, i.e., yb
kl.
675"
IS AN ARBITRARY,0.7251838235294118,"In both cases, we showed that there exists a vertex v = yb
ij ∈H for some i, j. By definition of hedge,
676"
IS AN ARBITRARY,0.7261029411764706,"there is a bidirected path, p, from v to y in H because v ∈AncH(y). Since all of the children of v are
677"
IS AN ARBITRARY,0.7270220588235294,"in X, there is at least one vertex in X on path p. Therefore, H includes at least one vertex of X.
678 679"
IS AN ARBITRARY,0.7279411764705882,"Lemma 7. [Inverse transform preserves hedges.] Suppose G′ = (V G′, EG′
d , EG′
b ) is an ADMG,
680"
IS AN ARBITRARY,0.7288602941176471,"Y ⊆V G′ is a set of its vertices, and (H′, Y mcip) = T2(G′, Y ). Let E′′
d ⊆EG′
d and E′′
b ⊆EG′
b
be
681"
IS AN ARBITRARY,0.7297794117647058,"arbitrary edges of G, and define EG
d = EG′
d \ E′′
d , EG
b = EG′
b
\ E′′
b . Define G = (V G, EG
d , EG
b )
682"
IS AN ARBITRARY,0.7306985294117647,"and H = H′[V H′ \ V ′], where V G = V G′ and V ′ = {v ∈V H′|∃e ∈E′′
b ∪E′′
d , v = T2(e)}. Let
683"
IS AN ARBITRARY,0.7316176470588235,"W ⊆V H
top be a set of vertices of H. Let Ws ⊆W ∩V G be a subset of W such that Ws are vertices
684"
IS AN ARBITRARY,0.7325367647058824,"of G as well. Consider the inverse transform of H[W] in the ADMG G, i.e., for any v = vb
ij ∈W,
685"
IS AN ARBITRARY,0.7334558823529411,"delete v and all edges incident to it and draw a bidirected edge between vi and vj, and for any
686"
IS AN ARBITRARY,0.734375,"v = vd
ij, delete v and all edges incident to it and draw a directed edge from vi to vj. Let the resulting
687"
IS AN ARBITRARY,0.7352941176470589,"subgraph (which is a subgraph of G) be denoted by G[W −1] with the set of vertices W −1 ⊆V G. If
688"
IS AN ARBITRARY,0.7362132352941176,"AncH[W ](Ws) = W, then AncG[W −1](Ws) = W −1. Moreover, if W is a district in H[W], then
689"
IS AN ARBITRARY,0.7371323529411765,"W −1 is a district in G[W −1].
690"
IS AN ARBITRARY,0.7380514705882353,"Proof. First, we show that if AncH[W ](Ws) = W, then AncG[W −1](Ws) = W −1. Let v be an
691"
IS AN ARBITRARY,0.7389705882352942,"arbitrary vertex in W −1. Vertex v is in W because W −1 ⊆W. Since v ∈W and v ∈AncH[W ](Ws),
692"
IS AN ARBITRARY,0.7398897058823529,"v has a directed path v →. . . vi →vd
ij →vj · · · →w, denoted by l, to a vertex w ∈Ws in H[W].
693"
IS AN ARBITRARY,0.7408088235294118,"For each vertex vd
ij on path l, we have vi, vj ∈G[W −1] and since vd
ij ∈V H, by definition of G
694"
IS AN ARBITRARY,0.7417279411764706,"and H, there exists (vi, vj) ∈EG
d s.t. i ≺j, and consequently, (vi, vj) ∈EG[W −1]
d
. Therefore,
695"
IS AN ARBITRARY,0.7426470588235294,"there exists a directed path from v to w in G[W −1]. Noting that v is an arbitrary vertex in W −1, we
696"
IS AN ARBITRARY,0.7435661764705882,"conclude that AncG[W −1](Ws) = W −1.
697"
IS AN ARBITRARY,0.7444852941176471,"Now, we prove that if W is a district in H[W], then W −1 is a district in G[W −1]. Consider two
698"
IS AN ARBITRARY,0.7454044117647058,"vertices v1, v2 ∈W −1. Since v1, v2 ∈W and W is a district, there exists a bidirected path
699"
IS AN ARBITRARY,0.7463235294117647,"v1 ↔. . . vi ↔vb
ij ↔vj · · · ↔v2, denoted by p, between v1 and v2 in H[W]. Each vertex vb
ij on
700"
IS AN ARBITRARY,0.7472426470588235,"path p is in H and vi, vj ∈G[W −1]. By definition of G and H, we have {vi, vj} ∈EG
b . Therefore,
701"
IS AN ARBITRARY,0.7481617647058824,"{vi, vj} ∈EG[W −1]
b
. Then, there is a bidirected path between v1 and v2 in G[W −1]. Since v1 and v2
702"
IS AN ARBITRARY,0.7490808823529411,"are two arbitrary vertices in W −1, it implies that W −1 is a district in G[W −1].
703"
IS AN ARBITRARY,0.75,"Lemma 8. [Transform preserves hedges.] Suppose G′ = (V G′, EG′
d , EG′
b ) is an ADMG, Y ⊆V G′ is
704"
IS AN ARBITRARY,0.7509191176470589,"a set of its vertices, and (H′, Y mcip) = T2(G′, Y ). Let E′′
d ⊆EG′
d and E′′
b ⊆EG′
b be arbitrary edges
705"
IS AN ARBITRARY,0.7518382352941176,"of G, and define EG
d = EG′
d \E′′
d , EG
b = EG′
b \E′′
b . Define G = (V G, EG
d , EG
b ) and H = H′[V H′ \V ′],
706"
IS AN ARBITRARY,0.7527573529411765,"where V G = V G′ and V ′ = {v ∈V H′|∃e ∈E′′
b ∪E′′
d , v = T2(e)}. Let W ⊆V G be a set of vertices
707"
IS AN ARBITRARY,0.7536764705882353,"of G such that W \ Y ̸= ∅. Let Ws ⊆W be a subset of W. Let the transformed graph of G[W]
708"
IS AN ARBITRARY,0.7545955882352942,"under T2 be denoted by H′′, where H′′ ⊆H. Define W ∗= V H′′
top . If AncG[W ](Ws) = W, then
709"
IS AN ARBITRARY,0.7555147058823529,"AncH[W ∗](Ws) = W ∗. Moreover, if W is a district in G[W], then W ∗is a district in H[W ∗].
710"
IS AN ARBITRARY,0.7564338235294118,"Proof. First, we prove that if AncG[W ](Ws) = W, then AncH[W ∗](Ws) = W ∗. Take an arbitrary
711"
IS AN ARBITRARY,0.7573529411764706,"vertex v ∈W ∗. There are two possibilities for v:
712"
IS AN ARBITRARY,0.7582720588235294,"• v ∈W. That is, vertex v is in G[W].
713"
IS AN ARBITRARY,0.7591911764705882,"• v /∈W. This implies that v represents an edge e between two vertices vi and vj in G[W].
714"
IS AN ARBITRARY,0.7601102941176471,"There are three possibilities for e:
715"
IS AN ARBITRARY,0.7610294117647058,"– e = (vi, vj). By construction of H, v is parent of vj in H[W ∗], where vj is a vertex of
716"
IS AN ARBITRARY,0.7619485294117647,"G[W].
717"
IS AN ARBITRARY,0.7628676470588235,"– e = {vi, vj} and vi ∈X or vj ∈X. In this case, v is parent of at least one of vi and
718"
IS AN ARBITRARY,0.7637867647058824,"vj in H[W ∗], w.l.o.g. vi, where vi is a vertex of G[W].
719"
IS AN ARBITRARY,0.7647058823529411,"– e = {vi, vj} and vi, vj ∈Y . By construction of H, v is parent of all vertices in V G \Y .
720"
IS AN ARBITRARY,0.765625,"Since W \ Y ̸= ∅, there exists a vertex x in G[W] such that v is a parent of x.
721"
IS AN ARBITRARY,0.7665441176470589,"In all three cases above, we proved that there exists a vertex x ∈W such that v is a parent
722"
IS AN ARBITRARY,0.7674632352941176,"of x.
723"
IS AN ARBITRARY,0.7683823529411765,"Therefore, we showed that any vertex v ∈W ∗either is itself a vertex in W or is a parent of a vertex
724"
IS AN ARBITRARY,0.7693014705882353,"in W. As a result, it suffices to show that every w ∈W has a directed path to Ws in H[W ∗]. We
725"
IS AN ARBITRARY,0.7702205882352942,"know that w has a directed path to Ws in G[W] such as p. Take an arbitrary pair of consecutive
726"
IS AN ARBITRARY,0.7711397058823529,"vertices on this path, such as v1 and v2. The directed edge (v1, v2) exists in G[W]. As a result, the
727"
IS AN ARBITRARY,0.7720588235294118,"directed path v1 →vd
12 →v2 exists in H[W ∗]. Starting at w and repeating this argument for every
728"
IS AN ARBITRARY,0.7729779411764706,"pair of consecutive vertices on p, we conclude that there exists a directed path from w to Ws, which
729"
IS AN ARBITRARY,0.7738970588235294,"completes the proof.
730"
IS AN ARBITRARY,0.7748161764705882,"Now, we show that if W is a district in G[W], then W ∗is a district in H[W ∗]. Take an arbitrary
731"
IS AN ARBITRARY,0.7757352941176471,"vertex v ∈W ∗. There are two possibilities for v:
732"
IS AN ARBITRARY,0.7766544117647058,"• v ∈W. That is, v is a vertex in G[W].
733"
IS AN ARBITRARY,0.7775735294117647,"• v /∈W. In this case, at least one of the vertices v represents an edge e between two vertices
734"
IS AN ARBITRARY,0.7784926470588235,"vi and vj in G[W]. By construction of H, v is connected to at least one of vi or vj, w.l.o.g.
735"
IS AN ARBITRARY,0.7794117647058824,"vi, by a bidirected edge, where vi ∈W.
736"
IS AN ARBITRARY,0.7803308823529411,"We showed that any vertex v ∈W ∗either is in W, or is connected to a vertex in W through a
737"
IS AN ARBITRARY,0.78125,"bidirected edge. Therefore, it suffices to show that for any two vertices w1, w2 ∈W there exists
738"
IS AN ARBITRARY,0.7821691176470589,"a bidirected path between w1 and w2 in H[W ∗]. Since w1, w2 ∈W, there is a bidirected path, p,
739"
IS AN ARBITRARY,0.7830882352941176,"between w1 and w2 in G[W]. Take an arbitrary pair of consecutive vertices on this path, such as v1
740"
IS AN ARBITRARY,0.7840073529411765,"and v2. The bidirected edge {v1, v2} exists in G[W]. As a result, the bidirected path v1 ↔vb
12 ↔v2
741"
IS AN ARBITRARY,0.7849264705882353,"exists in H[W ∗]. Starting at w and repeating this argument for every pair of consecutive vertices on
742"
IS AN ARBITRARY,0.7858455882352942,"p, we conclude that there exists a bidirected path from w1 to w2, which completes the proof.
743"
IS AN ARBITRARY,0.7867647058823529,"Lemma 9. Suppose G is an ADMG, and Y is a subset of its vertices. Also let Y ∗be a district in
744"
IS AN ARBITRARY,0.7876838235294118,"G[Y ]. If the set of vertices H form a hedge for Q[Y ∗], then H \ Y ̸= ∅.
745"
IS AN ARBITRARY,0.7886029411764706,"Proof. Assume by contradiction H \ Y = ∅, i.e., H ⊆Y . By definition of hedge, we know
746"
IS AN ARBITRARY,0.7895220588235294,"H \ Y ∗̸= ∅. Take an arbitrary vertex v ∈H \ Y ∗. Furthermore, v ∈Y \ Y ∗because H ⊆Y . Since
747"
IS AN ARBITRARY,0.7904411764705882,"H forms a hedge for Q[Y ∗], H is a district in G[H]. Therefore, there exists a bidirected path between
748"
IS AN ARBITRARY,0.7913602941176471,"v and a vertex y∗∈Y ∗in Q[Y ] which is in contradiction with the assumption that Y ∗is a district in
749"
IS AN ARBITRARY,0.7922794117647058,"G[Y ].
750"
IS AN ARBITRARY,0.7931985294117647,"Proposition 4. Suppose G′ = (V G′, EG′
d , EG′
b ) is an ADMG, Y ⊆V G′ is a set of its vertices, and
751"
IS AN ARBITRARY,0.7941176470588235,"(H′, Y mcip) = T2(G′, Y ). Let E′′
d ⊆EG′
d
and E′′
b ⊆EG′
b
be arbitrary edges of G, and define
752"
IS AN ARBITRARY,0.7950367647058824,"EG
d = EG′
d \E′′
d , EG
b = EG′
b \E′′
b . Q[Y ] is identifiable in G = (V G, EG
d , EG
b ) if and only if Q[Y mcip]
753"
IS AN ARBITRARY,0.7959558823529411,"is identifiable in H = H′[V H′ \ V ′], where V G = V G′ and V ′ = {v ∈V H′|∃e ∈E′′
b ∪E′′
d , v =
754"
IS AN ARBITRARY,0.796875,"T2(e)}.
755"
IS AN ARBITRARY,0.7977941176470589,"Proof. We prove the contrapositive, i.e., Q[Y ] is not identifiable in G iff Q[Y mcip] is not identifiable
756"
IS AN ARBITRARY,0.7987132352941176,"in H.
757"
IS AN ARBITRARY,0.7996323529411765,"If part. Suppose Q[Y mcip] is not identifiable in H. That is, there exists a hedge formed for Q[Y mcip]
758"
IS AN ARBITRARY,0.8005514705882353,"in H. From Lemma 2, this hedge is formed for Q[y′] for some y′ ∈Y mcip. Denote the set of vertices
759"
IS AN ARBITRARY,0.8014705882352942,"of this hedge by H. We consider two possibilities separately:
760"
IS AN ARBITRARY,0.8023897058823529,"• y′ = yi, where yi ∈Y . From Lemma 3, H ⊆V H
top. Taking W = H in Lemma 7, W −1 is a
761"
IS AN ARBITRARY,0.8033088235294118,"set of vertices in G such that AncG[W −1](y) = W −1, and W −1 is a district in G. Now take
762"
IS AN ARBITRARY,0.8042279411764706,"Y ∗to be the district of G[Y ] that includes yi. By definition of hedge, G[W −1 ∪Y ∗] forms a
763"
IS AN ARBITRARY,0.8051470588235294,"hedge for Q[Y ∗] in G. Note that from Lemma 6, W −1 \ Y ̸= ∅. As a result, Q[Y ] is not
764"
IS AN ARBITRARY,0.8060661764705882,"identifiable in G.
765"
IS AN ARBITRARY,0.8069852941176471,"• y′ = yij
j , where yi, yj ∈Y and y′ is one of the vertices added to H in the last step of the
766"
IS AN ARBITRARY,0.8079044117647058,"transformation T (step (f)). Define the set Y ∗= {yk|yij
k ∈H}. From Lemma 5, Y ∗is a
767"
IS AN ARBITRARY,0.8088235294117647,"district in G, and therefore a district in G[Y ]. As a result, it suffices to show that there exists
768"
IS AN ARBITRARY,0.8097426470588235,"a hedge formed for Q[Y ∗] in G. Now define Htop = H ∩V H
top. By definition of hedge,
769"
IS AN ARBITRARY,0.8106617647058824,"H is a district in H[H], i.e., it is connected over its bidirected edges. By construction of
770"
IS AN ARBITRARY,0.8115808823529411,"H, there is only one bidirected edge between the vertices in Htop and H \ Htop, which is
771"
IS AN ARBITRARY,0.8125,"the bidirected edge between yj and yij
i . Therefore, this edge is a cut set that partitions the
772"
IS AN ARBITRARY,0.8134191176470589,"graph H[H] into two connected components H[Htop] and H[H \ Htop]. That is, H[Htop]
773"
IS AN ARBITRARY,0.8143382352941176,"is connected over its bidirected edges and therefore Htop is a district in H[Htop]. Further,
774"
IS AN ARBITRARY,0.8152573529411765,"from Lemma 5, Htop = AncH[Htop](Y ∗). Noting that Htop ⊆V H
top, taking W = Htop in
775"
IS AN ARBITRARY,0.8161764705882353,"Lemma 7, W −1 is a district in G and AncG[W −1](Y ∗) = W −1. Note that from Lemma 6,
776"
IS AN ARBITRARY,0.8170955882352942,"W −1 \ Y ̸= ∅. Therefore, the set of vertices W −1 form a hedge for Q[Y ∗] in G. Hence,
777"
IS AN ARBITRARY,0.8180147058823529,"Q[Y ] is not identifiable in G.
778"
IS AN ARBITRARY,0.8189338235294118,"Only if part. Suppose Q[Y ] is not identifiable in G. It implies that there exists a district of G[Y ] such
779"
IS AN ARBITRARY,0.8198529411764706,"as Y ∗such that there is a hedge formed for Q[Y ∗] in G. Let H denote the set of vertices of this hedge.
780"
IS AN ARBITRARY,0.8207720588235294,"From Lemma 9, H \ Y ̸= ∅. Define W ∗as in Lemma 8, that is the transform T (G[H], Y ∗) without
781"
IS AN ARBITRARY,0.8216911764705882,"step (f) (only on the vertices of V H
top). Note that Y ∗⊆W ∗. We consider the following two cases
782"
IS AN ARBITRARY,0.8226102941176471,"separately:
783"
IS AN ARBITRARY,0.8235294117647058,"• Y ∗= {y}, that is, Y ∗is a single vertex. From Lemma 8, W ∗is a district in H[W ∗], and
784"
IS AN ARBITRARY,0.8244485294117647,"AncH[W ∗](y) = W ∗. By definition of hedge, the vertices W ∗form a hedge for Q[y] in H.
785"
IS AN ARBITRARY,0.8253676470588235,"Note that y ∈Y mcip, and from Lemma 2 it is a district of H[Y mcip]. As a result, Q[Y mcip]
786"
IS AN ARBITRARY,0.8262867647058824,"is not identifiable in H.
787"
IS AN ARBITRARY,0.8272058823529411,"• |Y ∗| ≥2. Let yi and yj be the first and the last vertices of Y ∗in the topological order. Define
788"
IS AN ARBITRARY,0.828125,"Y ij∗= {yij
k |yk ∈Y ∗} ∪{yij
kl|yk, yl ∈Y ∗}. Y ij∗are the vertices in V H
bot with superscript
789"
IS AN ARBITRARY,0.8290441176470589,"ij corresponding to the vertices in Y ∗. Note that yij
i , yij
j ∈Y ij∗, since yi, yj ∈Y ∗. Since
790"
IS AN ARBITRARY,0.8299632352941176,"yij
j ∈Y mcip and from Lemma 2 yij
j is a district in H[Y mcip], it suffices to show that there
791"
IS AN ARBITRARY,0.8308823529411765,"is a hedge formed for yij
j in H. We show that the vertices W = W ∗∪Y ij∗form a hedge
792"
IS AN ARBITRARY,0.8318014705882353,"for yij
j in H. From Lemma 8, AncH[W ∗](Y ∗) = W ∗, that is, all of the vertices in W ∗are
793"
IS AN ARBITRARY,0.8327205882352942,"ancestors of Y ∗in H[W ∗], and therefore in H[W]. Also, the vertices yij
kl in Y ij∗have a
794"
IS AN ARBITRARY,0.8336397058823529,"direct edge to their corresponding vertex in W ∗, i.e., yb
kl, and therefore are ancestors of
795"
IS AN ARBITRARY,0.8345588235294118,"Y ∗in H[W] as well. Further, each vertex in Y ∗such as yk is a parent of yij
k , which is
796"
IS AN ARBITRARY,0.8354779411764706,"in turn a parent of yij
i (or is yij
i itself if k = i.) Finally, yij
i has a directed edge to yij
j by
797"
IS AN ARBITRARY,0.8363970588235294,"construction. As a result, all of the vertices W have a direct path to yij
j in H[W]. That is,
798"
IS AN ARBITRARY,0.8373161764705882,"AncH[W ](yij
j ) = W. It now remains to show that W is a district in H[W]. From Lemma 8,
799"
IS AN ARBITRARY,0.8382352941176471,"W ∗is a district in H[W ∗]. As a result, the vertices W ∗are connected through bidirected
800"
IS AN ARBITRARY,0.8391544117647058,"edges in H[W]. There is a bidirected edge between yj and yij
i by construction of H. It
801"
IS AN ARBITRARY,0.8400735294117647,"suffices to show that for any v ∈Y ij∗, there exists a bidirected path between v and yij
i in
802"
IS AN ARBITRARY,0.8409926470588235,"H[W]. A vertex yij
kl ∈Y ij∗(with double subscript, which are due to the bidirected edges
803"
IS AN ARBITRARY,0.8419117647058824,"among Y ∗) has bidirected edges to yij
k and yij
l , which are both in Y ij∗by definition. Now
804"
IS AN ARBITRARY,0.8428308823529411,"take an arbitrary vertex yij
k ∈Y ij∗(with single subscript, due to vertices in Y ∗). We know
805"
IS AN ARBITRARY,0.84375,"yk ∈Y ∗, as yij
k ∈Y ij∗, by definition of Y ij∗. Y ∗is a district in G[Y ∗]. That is, there exists
806"
IS AN ARBITRARY,0.8446691176470589,"a bidirected path from yk to yi in G[Y ∗]. From Lemma 8 by taking W = Y ∗, there is a
807"
IS AN ARBITRARY,0.8455882352941176,"bidirected path p from yk to yi in H[Y ∗∪{ylm|yl, ym ∈Y ∗}]. By construction of H, if we
808"
IS AN ARBITRARY,0.8465073529411765,"replace each vertex v on p by vij, we achieve a bidirected path p′ with vertices in Y ij∗from
809"
IS AN ARBITRARY,0.8474264705882353,"yij
k to yij
i , which completes the proof.
810 811"
IS AN ARBITRARY,0.8483455882352942,"Proof of Proposition 2. The reduction from the edge ID problem to MCIP was shown through the
812"
IS AN ARBITRARY,0.8492647058823529,"proof of Proposition 4. The opposite direction is an immediate corollary of Proposition 3.
813"
IS AN ARBITRARY,0.8501838235294118,"Corollary 2. The edge ID problem and MCIP are equivalent.
814"
IS AN ARBITRARY,0.8511029411764706,"B
Maximal Hedge
815"
IS AN ARBITRARY,0.8520220588235294,Algorithm 3 Maximal Hedge.
IS AN ARBITRARY,0.8529411764705882,"1: function MH(G, Y )
2:
Initialize M ←∅
3:
for Yi in districts of G[Y ] do
4:
M ←M ∪HHull(G, Yi)
5:
return G[M]"
IS AN ARBITRARY,0.8538602941176471,"1: function HHULL(G, Yi)
2:
Initialize H ←V G"
IS AN ARBITRARY,0.8547794117647058,"3:
while True do
4:
C ←connected component (district) of Yi via bidirected edges in G[H]
5:
A ←ancestors of Yi in G[C]
6:
if C ̸= A then
7:
H ←A
8:
else
9:
break
10:
return H"
IS AN ARBITRARY,0.8556985294117647,"Herein, we present the algorithm for recovering the maximal hedge formed for Q[Y ] in a given
816"
IS AN ARBITRARY,0.8566176470588235,"ADMG G (see Definition 5). Maximal hedge was initially defined in [1] under the name hedge hull.
817"
IS AN ARBITRARY,0.8575367647058824,"x
z
y
p
q"
IS AN ARBITRARY,0.8584558823529411,"Figure 6: An example where the expert is aware that there is no causal path from z to y, e.g., because
z ⊥⊥y with high confidence."
IS AN ARBITRARY,0.859375,"We adopt the same definition, and when G[Y ] comprises several districts, we define the maximal
818"
IS AN ARBITRARY,0.8602941176470589,"hedge as the union of the hedge hulls formed for each district of G[Y ]. As a result, the complete
819"
IS AN ARBITRARY,0.8612132352941176,"procedure of recovering the maximal hedge for a query Q[Y ], summarized in Algorithm 3, finds the
820"
IS AN ARBITRARY,0.8621323529411765,"maximal hedge formed for each district Yi of G[Y ] and returns the union of them. This procedure is
821"
IS AN ARBITRARY,0.8630514705882353,"used as a subroutine MH in Algorithm 1. The function HHull is in fact Algorithm 1 borrowed from
822"
IS AN ARBITRARY,0.8639705882352942,"[1]. This function is proven to recover the union of all hedges formed for Yi, where Yi is one of the
823"
IS AN ARBITRARY,0.8648897058823529,"districts of G[Y ] (see Lemma 6 of [1]).
824"
IS AN ARBITRARY,0.8658088235294118,"C
Generalizing Assumption 1
825"
IS AN ARBITRARY,0.8667279411764706,"Lemma 1 states the equivalence of Problems 1 and 2 with the edge ID problem under Assumption 1.
826"
IS AN ARBITRARY,0.8676470588235294,"However, as mentioned in the main text, this equivalence holds in the more general setting where we
827"
IS AN ARBITRARY,0.8685661764705882,"allow for perfect negative correlations among edges. As an example, consider the graph of Figure
828"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8694852941176471,"6. Suppose that the performed statistical independence tests show that the two variables z and y are
829"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8704044117647058,"independent of each other with high confidence. As a result, the expert believes that the edges (z, x)
830"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8713235294117647,"and (x, y) must not exist simultaneously, as otherwise the causal path from z to y would make them
831"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8722426470588235,"dependent. In such cases, the belief of the expert can be modeled as probabilities p and q assigned
832"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8731617647058824,"to the existence of the edges (z, x) and (x, y), respectively, as well as a perfect negative correlation
833"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8740808823529411,"between them.
834"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.875,"Note that the aforementioned constraint, i.e., that the edges do not exist simultaneously, can be
835"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8759191176470589,"specified for any number of edges, not limited to two edges only. For instance, the expert might
836"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8768382352941176,"believe at least one of the edges along a causal path of length n must not exist in the true ADMG
837"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8777573529411765,"describing the system. This belief can be modeled as an extra constraint in the optimization of
838"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8786764705882353,"Equations 2 and 3. We show that with the specification of such negative correlations, Problems 1 and
839"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8795955882352942,"2 can still be cast as an instance of the edge ID problem. Therefore, the results presented in this work
840"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8805147058823529,"are valid in this setting as well.
841"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8814338235294118,"Assumption 2. The edges in G are assigned probabilities pe, ∀e ∈G, and perfect negative corre-
842"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8823529411764706,"lations are defined among subsets of edges. More precisely, for any subset E ⊆EG
d ∪EG
b , there is
843"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8832720588235294,"either 1) no constraint (mutually independent), or 2) the constraint that at least one of the edges in E
844"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8841911764705882,"must not exist in the true ADMG (perfect negative correlation).
845"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8851102941176471,"Proposition 5. Under Assumption 2, there exists a reduction from Problems 1 and 2 to the edge ID
846"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8860294117647058,"problem and vice versa with the time complexity in the order of O(|C| · |V G| + |EG
d ∪EG
b |), where
847"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8869485294117647,"C is the set of perfect correlation constraints.
848"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8878676470588235,"Proof. First note that we proved the equivalence of Problems 1 and 2 with the edge ID problem
849"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8887867647058824,"without the perfect correlation constraints in Lemma 1. As a result, under assumption 2, i.e., by adding
850"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8897058823529411,"the perfect correlation constraints, Problems 1 and 2 are equivalent to a modified edge ID problem
851"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.890625,"with those constraints. But we claim that there exists and instance of the original unconstrained edge
852"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8915441176470589,"ID problem which is equivalent to these problems. To see this, first note that we know from Corollary
853"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8924632352941176,"2 that the edge ID problem is equivalent to MCIP. Therefore, it suffices to show that there exists
854"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8933823529411765,"an instance of MCIP which is equivalent to the constrained edge ID mentioned above. To this end,
855"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8943014705882353,"consider the transform T2(G, Y ) introduced in Section A.2. This transformation maps an instance of
856"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8952205882352942,"the edge ID problem to an instance of MCIP. Applying this transformation to the constrained edge ID
857"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8961397058823529,"problem, we can map the constrained edge ID to an instance of MCIP with extra constraints, with
858"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8970588235294118,"transforming the constraints as well. That is, if for instance, there is a perfect negative correlation
859"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8979779411764706,"among the edges e1, e2 in G, this constraint is mapped to a negative perfect correlation on the
860"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8988970588235294,"corresponding vertices in H, namely T2(e1), T2(e2). In words, this constraint would be that at least
861"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.8998161764705882,"one of T2(e1) and T2(e2) must be intervened upon. We show that such constraints can be integrated
862"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9007352941176471,"into the original definition of MCIP.
863"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9016544117647058,"Suppose we have an MCIP problem in ADMG G with query Q[Y ], with the extra constraint that
864"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9025735294117647,"at least one of the vertices X ⊆V G must be intervened upon. Consider the example of X =
865"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9034926470588235,"x1
x2
x3"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9044117647058824,"x′
1
x′
2
x′
3 ˆy"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9053308823529411,Figure 7: Integrating the perfect negative correlation constraint into MCIP.
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.90625,"{x1, x2, x3} in Figure 7. We build a new ADMG G′ by adding vertices {x′|x ∈X}, i.e., a new vertex
866"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9071691176470589,"corresponding to each vertex in X, along with an auxiliary vertex ˆy to G. We fix a random ordering
867"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9080882352941176,"over the vertices of X, and denote the set of vertices of X as x1, ..., xm. We add the directed edges
868"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9090073529411765,"(xi, x′
i) to G′, as well as the bidirected edges {xi, x′
i}. Further, we draw directed edges (x′
i, x′
i+1) for
869"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9099264705882353,"every 1 ≤i < m. Finally, we draw the directed edge (x′
m, ˆy) and the bidirected edge {x1, ˆy}. Refer
870"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9108455882352942,"to the graph in Figure 7 for an example with X = {x1, x2, x3}. Note that the set X ∪X′ ∪{ˆy} forms
871"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9117647058823529,"a hedge for Q[ˆy], where X′ = {x′|x ∈X} Now it suffices to set the cost of intervention on vertices
872"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9126838235294118,"of X′ to infinity, and consider MCIP for the query Q[Y ∪{ˆy}] in G′. It is straightforward to see that
873"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9136029411764706,"the objective of this problem would be to find the minimum cost intervention for identification of
874"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9145220588235294,"Q[Y ], with the constraint that at least one of the vertices in X must be intervened on. Note that as
875"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9154411764705882,"soon as one vertex in X gets intervened upon, there is no hedge left for Q[ˆy]. Also it is noteworthy
876"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9163602941176471,"that adding this structure does not add any new hedges formed for Q[Y ], since the structure only
877"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9172794117647058,"includes new descendants for X which have no directed paths to Y . Also note that the vertices X′
878"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9181985294117647,"and ˆy are specific to the very constraint corresponding to the set of vertices X. For any constraint, we
879"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9191176470588235,"add such a structure to G. The number of vertices (and therefore the time complexity) is at most in
880"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9200367647058824,"the order O(|C| · |V G|), where C is the set of constraints.
881 882"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9209558823529411,"C.1
Further applications
883"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.921875,"The relaxation provided in this Appendix allows the approaches proposed in this work to be applicable
884"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9227941176470589,"to a more general set of problems. Herein, we discuss one such application.
885"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9237132352941176,"Let us assume we run our algorithm which returns the subgraph with the highest probability, G1.
886"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9246323529411765,"However, the probability that G1 is the true causal structure describing the system might be too low.
887"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9255514705882353,"In such a case, the researcher might be interested in having a ranking of most probable graphs (for
888"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9264705882352942,"instance, the 10 most probable graphs), rather than only one most probable graph. This could be
889"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9273897058823529,"helpful for instance, when a unique identification formula is valid in a few of these graphs, or the
890"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9283088235294118,"researcher is interested in identifying more than one causal query. The methods discussed in this
891"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9292279411764706,"work along with the relaxation proposed in this appendix provide the tools to recover such a ranking
892"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9301470588235294,"(of the most probable graphs in which a query is identifiable). To see this, note that based on what
893"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9310661764705882,"we proposed in this Appendix, perfect negative correlation constraints can be added to the edge
894"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9319852941176471,"ID problem without additional computational cost. So we begin by solving the original problem,
895"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9329044117647058,"which yields a graph G1. We then solve it for a second time (i.e., re-run the algorithm), with the only
896"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9338235294117647,"difference that we add the perfect negative correlation constraint over the set of all edges of G1 (i.e.,
897"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9347426470588235,"we force the algorithm to exclude at least one of the edges of G1.) The solution to this problem (let us
898"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9356617647058824,"call it G2) is the highest probability graph among all subgraphs except G1, i.e., it is the second highest
899"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9365808823529411,"probability graph in which the query is identifiable. Continuing in this manner, running the algorithm
900"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9375,"n times would give us a ranking of the n highest probability graphs.
901"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9384191176470589,"D
Heuristic Algorithms
902"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9393382352941176,"Algorithm 2 was devised considering the fact that every hedge formed for Q[Y ] must include a vertex
903"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9402573529411765,"that has a bidirected edge to Y . As mentioned in Section 4.2, an analogous approach, summarized in
904"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9411764705882353,"Algorithm 4, uses the fact that any hedge formed for Q[Y ] must include a parent of Y .
905"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9420955882352942,"Let Y ⊆V G be a set of vertices of G such that G[Y ] comprises of only one district. Let Z := {z ∈
906"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9430147058823529,"V G|∃y ∈Y : (z, y) ∈EG
d } \ Y denote the set of vertices that have at least one directed edge to a
907"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9439338235294118,"vertex in Y , i.e., the parents of Y excluding Y . Any hedge formed for Q[Y ] contains at least one
908"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9448529411764706,"vertex of Z. As a result, in order to eliminate all the hedges formed for Q[Y ], it suffices to ensure that
909"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9457720588235294,"none of the vertices in Z appear in the final hedge. To this end, for any z ∈Z, it suffices to either
910"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9466911764705882,"remove all the directed edges between z and Y , or eliminate all the bidirected paths from z to Y .
911"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9476102941176471,"The problem of eliminating all bidirected paths from Z to Y can be cast as a minimum cut problem
912"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9485294117647058,"between Z and Y in the edge-induced subgraph of G over its bidirected edges. To add the possibility
913"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9494485294117647,"of removing the directed edges between Z and Y , we add an auxiliary vertex z∗to the graph and
914"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9503676470588235,draw a bidirected edge between z∗and every z ∈Z with weight w = P
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9512867647058824,"y∈Y w(z,y), i.e., the sum of
915"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9522058823529411,"the weights of all directed edges between z and Y . Note that z can have directed edges to multiple
916"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.953125,"vertices in Y . We then solve the minimum cut problem for z∗and Y . If an edge between z∗and
917"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9540441176470589,"z ∈Z is in the solution to this min-cut problem, it translates to removing all the directed edges from
918"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9549632352941176,"z to Y in the original problem. Note that we can run the algorithm on the maximal hedge formed for
919"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9558823529411765,"Q[Y ] in G rather than G itself.
920"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9568014705882353,Algorithm 4 Heuristic algorithm 2.
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9577205882352942,"1: function HEID2(G, Y, WG)
2:
G′ ←MH(G, Y )
3:
Z ←{z ∈V G′|∃y ∈Y : (z, y) ∈EG′
d } \ Y
4:
H ←The induced subgraph of G′ on its bidirected edges.
5:
WH ←{we ∈WG|e ∈H}
6:
V H ←V H ∪{y∗, z∗}
7:
for z ∈Z do
8:
EH ←EH ∪{z∗, z}
9:
WH ←WH ∪{w{z∗,z} = P"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9586397058823529,"y w(z,y)}"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9595588235294118,"10:
for y ∈Y do
11:
EH ←EH ∪{y, y∗}
12:
WH ←WH ∪{w{y,y∗} = ∞}"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9604779411764706,"13:
E ←MinCut(H, WH, z∗, y∗)
14:
return (E, P"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9613970588235294,e∈E we)
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9623161764705882,"E
Experiments
921"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9632352941176471,"Noting that the synthetic/simulation results in the main paper were for graphs with a log(n)/n sparsity
922"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9641544117647058,"constraint, we begin this section by providing a set a results on the simulated graphs without the
923"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9650735294117647,"sparsity penalty for comparison. Then, we provide information about the causal discovery algorithm
924"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9659926470588235,"used to derive the psychology ‘Psych’ real-world graph. We also provide experimental results for
925"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9669117647058824,"Problem 2 formulation in Section E.3
926"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9678308823529411,"E.1
Additional Simulation Results without Sparsity Constraint
927"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.96875,"The simulation results for graphs generated without the sparsity constraint are shown in Figure 8.
928"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9696691176470589,"These results illustrate monotonic increases in runtime and cost as the number of nodes increases. Our
929"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9705882352941176,"proposed heuristic algorithms (HEID-1 and HEID-2) maintain runtimes less than 0.5 seconds even
930"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9715073529411765,"for 250 nodes. In contrast, the two exact algorithms (MCIP-exact and EDGEID) exceed the three
931"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9724264705882353,"minute runtime limit at only 20 nodes, and the MCIP heuristic variants (MCIP-H1 and MCIP-H2)
932"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9733455882352942,"have runtimes which increase exponentially with the number of nodes. These results highlight the
933"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9742647058823529,"efficiency of our proposed heuristic algorithms to find solutions with equivalent cost with significantly
934"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9751838235294118,"faster runtimes.
935"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9761029411764706,"E.2
Psychology Graph Discovery
936"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9770220588235294,"The settings for deriving the putative structure used on the psychology real-world graph are provided
937"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9779411764705882,"in Table 3.
938"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9788602941176471,"(a) Runtimes.
(b) Solution costs."
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9797794117647058,(c) Fraction for which runtime of 3 minutes exceeded.
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9806985294117647,"Figure 8: Experimental results (for graphs generated without the sparsity constraint) for runtime,
solution costs, fraction of graphs for which no solution was found, and fraction of graphs for which
runtime limit of 3 minutes was exceeded. Error bars for runtime and cost graphs indicate 5th and
95th percentiles. Best viewed in color."
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9816176470588235,"Table 3: Hyperparameter settings for the Structural Agnostic Model used to generate the putative
(directed) structure for the ‘Psych’ real-world dataset."
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9825367647058824,"Parameter
Value
Learning Rate
0.01
DAG Penalty
True
DAG Penalty Weight
0.05
Number of Runs
50
Train Epochs
3000
Test Epochs
800
Mixed Data
True
hlayers
2
dhlayers
2
lambda1
10
lambda2
0.001
dlr
0.001
linear
False
nh
20
dnh
200"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9834558823529411,"E.3
Simulation Results for Problem 2 Formulation
939"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.984375,"The experimental setup is exactly as in the main text (the results depicted in Figure 4), except that the
940"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9852941176470589,"probabilities are chosen in the range [0.01, 1] instead of [0.51, 1], and we use the weight mapping
941"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9862132352941176,"corresponding to Problem 2 as described in Lemma 1. That is, we map each probability pe to the
942"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9871323529411765,"weight −log(1 −pe) in the corresponding edge ID problem.
943"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9880514705882353,"The simulation results are presented in Figure 9. Runtimes and costs are shown for the subset of
944"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9889705882352942,"graphs for which all algorithms found a solution (to facilitate comparison). Runtimes for each
945"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9898897058823529,"algorithm are shown in Fig. 9a, where it can be seen that our proposed HEID-1 and HEID-2 heuristic
946"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9908088235294118,"algorithms have negligible runtime. In contrast, EDGEID had large runtime variance which depended
947"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9917279411764706,"heavily on the specifics of the graph under evaluation, particularly for graphs with fewer vertices.
948"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9926470588235294,"(a) Runtimes.
(b) Solution costs."
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9935661764705882,(c) Fraction runtime exceeded 3 min.
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9944852941176471,"Figure 9: Experimental results for runtime, solution costs, fraction of graphs for which no solution
was found, and fraction of graphs for which runtime limit of 3 minutes was exceeded. Error bars for
runtime and cost graphs indicate 5th and 95th percentiles. Best viewed in color."
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9954044117647058,"The costs for each graph are shown in Fig. 9b. Figure 9c shows the fraction of evaluations for which
949"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9963235294117647,"the runtime exceeded 3 minutes (applicable to the exact algorithms). In general, and owing to the
950"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9972426470588235,"sparsity penalty in our graph generation mechanism, the cost of identified solutions falls with the
951"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9981617647058824,"number of vertices. Overall, HEID-1 was both the most consistent in terms of finding a solution,
952"
SUPPOSE THAT THE PERFORMED STATISTICAL INDEPENDENCE TESTS SHOW THAT THE TWO VARIABLES Z AND Y ARE,0.9990808823529411,"having a short runtime, and achieving a close to optimal cost.
953"
