Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.002061855670103093,"Many practical applications of reinforcement learning require agents to learn from
sparse and delayed rewards. It challenges the ability of agents to attribute their ac-
tions to future outcomes. In this paper, we consider the problem formulation of
episodic reinforcement learning with trajectory feedback. It refers to an extreme
delay of reward signals, in which the agent can only obtain one reward signal at
the end of each trajectory. A popular paradigm for this problem setting is learning
with a designed auxiliary dense reward function, namely proxy reward, instead
of sparse environmental signals. Based on this framework, this paper proposes a
novel reward redistribution algorithm, randomized return decomposition (RRD),
to learn a proxy reward function for episodic reinforcement learning. We establish
a surrogate problem by Monte-Carlo sampling that scales up least-squares-based
reward redistribution to long-horizon problems. We analyze our surrogate loss
function by connection with existing methods in the literature, which illustrates
the algorithmic properties of our approach. In experiments, we extensively eval-
uate our proposed method on a variety of benchmark tasks with episodic rewards
and demonstrate substantial improvement over baseline algorithms."
INTRODUCTION,0.004123711340206186,"1
INTRODUCTION"
INTRODUCTION,0.006185567010309278,"Scaling reinforcement learning (RL) algorithms to practical applications has become the focus of
numerous recent studies, including resource management (Mao et al., 2016), industrial control (Hein
et al., 2017), drug discovery (Popova et al., 2018), and recommendation systems (Chen et al., 2018).
One of the challenges in these real-world problems is the sparse and delayed environmental rewards.
For example, in the molecular structure design problem, the target molecule property can only be
evaluated after completing the whole sequence of modification operations (Zhou et al., 2019b). The
sparsity of environmental feedback would complicate the attribution of rewards on agent actions and
therefore can hinder the efficiency of learning (Rahmandad et al., 2009). In practice, it is a common
choice to formulate the RL objective with a meticulously designed reward function instead of the
sparse environmental rewards. The design of such a reward function is crucial to the performance of
the learned policies. Most standard RL algorithms, such as temporal difference learning and policy
gradient methods, prefer dense reward functions that can provide instant feedback for every step
of environment transitions. Designing such dense reward functions is not a simple problem even
with domain knowledge and human supervision. It has been widely observed in prior works that
handcrafted heuristic reward functions may lead to unexpected and undesired behaviors (Randløv
& Alstrøm, 1998; Bottou et al., 2013; Andrychowicz et al., 2017). The agent may find a shortcut
solution that formally optimizes the given objective but deviates from the desired policies (Dewey,
2014; Amodei et al., 2016). The reward designer can hardly anticipate all potential side effects of
the designed reward function, which highlights the difficulty of reward engineering."
INTRODUCTION,0.008247422680412371,"To avoid the unintended behaviors induced by misspecified reward engineering, a common paradigm
is considering the reward design as an online problem within the trial-and-error loop of reinforce-
ment learning (Sorg et al., 2010). This algorithmic framework contains two components, namely
reward modeling and policy optimization. The agent first learns a proxy reward function from the
experience data and then optimizes its policy based on the learned per-step rewards. By iterating this"
INTRODUCTION,0.010309278350515464,Published as a conference paper at ICLR 2022
INTRODUCTION,0.012371134020618556,"procedure and interacting with the environment, the agent is able to continuously refine its reward
model so that the learned proxy reward function can better approximate the actual objective given by
the environmental feedback. More specifically, this paradigm aims to reshape the sparse and delayed
environmental rewards to a dense Markovian reward function while trying to avoid misspecifying
the goal of given tasks."
INTRODUCTION,0.01443298969072165,"In this paper, we propose a novel reward redistribution algorithm based on a classical mechanism
called return decomposition (Arjona-Medina et al., 2019). Our method is built upon the least-
squares-based return decomposition (Efroni et al., 2021) whose basic idea is training a regression
model that decomposes the trajectory return to the summation of per-step proxy rewards. This
paradigm is a promising approach to redistributing sparse environmental feedback. Our proposed
algorithm, randomized return decomposition (RRD), establish a surrogate optimization of return de-
composition to improve the scalability in long-horizon tasks. In this surrogate problem, the reward
model is trained to predict the episodic return from a random subsequence of the agent trajectory,
i.e., we conduct a structural constraint that the learned proxy rewards can approximately reconstruct
environmental trajectory return from a small subset of state-action pairs. This design enables us to
conduct return decomposition effectively by mini-batch training. Our analysis shows that our sur-
rogate loss function is an upper bound of the original loss of deterministic return decomposition,
which gives a theoretical interpretation of this randomized implementation. We also present how
the surrogate gap can be controlled and draw connections to another method called uniform reward
redistribution. In experiments, we demonstrate substantial improvement of our proposed approach
over baseline algorithms on a suite of MuJoCo benchmark tasks with episodic rewards."
BACKGROUND,0.016494845360824743,"2
BACKGROUND"
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.018556701030927835,"2.1
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK"
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.020618556701030927,"In standard reinforcement learning settings, the environment model is usually formulated by a
Markov decision process (MDP; Bellman, 1957), defined as a tuple M = ⟨S, A, P, R, µ⟩, where
S and A denote the spaces of environment states and agent actions. P(s′|s, a) and R(s, a) denote
the unknown environment transition and reward functions. µ denotes the initial state distribution.
The goal of reinforcement learning is to find a policy π : S →A maximizing cumulative rewards.
More specifically, a common objective is maximizing infinite-horizon discounted rewards based on
a pre-defined discount factor γ as follows:"
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.02268041237113402,"(standard objective)
J(π) = E "" ∞
X"
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.024742268041237112,"t=0
γtR(st, π(st))"
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.026804123711340205,"s0 ∼µ, st+1 ∼P(· | st, π(st)) # . (1)"
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.0288659793814433,"In this paper, we consider the episodic reinforcement learning setting with trajectory feedback, in
which the agent can only obtain one reward feedback at the end of each trajectory. Let τ denote
an agent trajectory that contains all experienced states and behaved actions within an episode. We
assume all trajectories terminate in finite steps. The episodic reward function Rep(τ) is defined on
the trajectory space, which represents the overall performance of trajectory τ. The goal of episodic
reinforcement learning is to maximize the expected trajectory return:"
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.030927835051546393,"(episodic objective)
Jep(π) = E

Rep(τ)
 s0 ∼µ, at = π(st), τ = ⟨s0, a0, s1, · · · , sT ⟩

. (2)"
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.032989690721649485,"In general, the episodic-reward setting is a particular form of partially observable Markov decision
processes (POMDPs) where the reward function is non-Markovian. The worst case may require the
agent to enumerate the entire exponential-size trajectory space for recovering the episodic reward
function. In practical problems, the episodic environmental feedback usually has structured repre-
sentations. A common structural assumption is the existence of an underlying Markovian reward
function bR(s, a) that approximates the episodic reward Rep(τ) by a sum-form decomposition,"
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.03505154639175258,"(sum-decomposable episodic reward)
Rep(τ) ≈bRep(τ) ="
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.03711340206185567,"T −1
X"
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.03917525773195876,"t=0
bR(st, at).
(3)"
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.041237113402061855,"This structure is commonly considered by both theoretical (Efroni et al., 2021) and empirical studies
(Liu et al., 2019; Raposo et al., 2021) on long-horizon episodic rewards. It models the situations"
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.04329896907216495,Published as a conference paper at ICLR 2022
EPISODIC REINFORCEMENT LEARNING WITH TRAJECTORY FEEDBACK,0.04536082474226804,"where the agent objective is measured by some metric with additivity properties, e.g., the distance
of robot running, the time cost of navigation, or the number of products produced in a time interval."
REWARD REDISTRIBUTION,0.04742268041237113,"2.2
REWARD REDISTRIBUTION"
REWARD REDISTRIBUTION,0.049484536082474224,"The goal of reward redistribution is constructing a proxy reward function bR(st, at) that transforms
the episodic-reward problem stated in Eq. (2) to a standard dense-reward setting. By replacing
environmental rewards with such a Markovian proxy reward function bR(st, at), the agent can be
trained to optimize the discounted objective in Eq. (1) using any standard RL algorithms. Formally,
the proxy rewards bR(st, at) form a sum-decomposable reward function bRep(τ) = PT −1
t=0 bR(st, at)
that is expected to have high correlation to the environmental reward Rep(τ). Here, we introduce
two branches of existing reward redistribution methods, return decomposition and uniform reward
redistribution, which are the most related to our proposed approach. We defer the discussions of
other related work to section 5."
REWARD REDISTRIBUTION,0.05154639175257732,"Return Decomposition.
The idea of return decomposition is training a reward model that pre-
dicts the trajectory return with a given state-action sequence (Arjona-Medina et al., 2019). In this
paper, without further specification, we focus on the least-squares-based implementation of return
decomposition (Efroni et al., 2021). The reward redistribution is given by the learned reward model,
i.e., decomposing the environmental episodic reward Rep(τ) to a Markovian proxy reward function
bR(s, a). In practice, the reward modeling is formulated by optimizing the following loss function:"
REWARD REDISTRIBUTION,0.05360824742268041,"LRD(θ) =
E
τ∼D"
REWARD REDISTRIBUTION,0.05567010309278351,"""
Rep(τ) −"
REWARD REDISTRIBUTION,0.0577319587628866,"T −1
X"
REWARD REDISTRIBUTION,0.05979381443298969,"t=0
bRθ(st, at)
2# ,
(4)"
REWARD REDISTRIBUTION,0.061855670103092786,"where bRθ denotes the parameterized proxy reward function, θ denotes the parameters of the learned
reward model, and D denotes the experience dataset collected by the agent. Assuming the sum-
decomposable structure stated in Eq. (3), bRθ(s, a) is expected to asymptotically concentrate near the
ground-truth underlying rewards bR(s, a) when Eq. (4) is properly optimized (Efroni et al., 2021)."
REWARD REDISTRIBUTION,0.06391752577319587,"One limitation of the least-squares-based return decomposition method specified by Eq. (4) is its
scalability in terms of the computation costs. Note that the trajectory-wise episodic reward is the
only environmental supervision for reward modeling. Computing the loss function LRD(θ) with a
single episodic reward label requires to enumerate all state-action pairs along the whole trajectory.
This computation procedure can be expensive in numerous situations, e.g., when the task horizon T
is quite long, or the state space S is high-dimensional. To address this practical barrier, recent works
focus on designing reward redistribution mechanisms that can be easily integrated in complex tasks.
We will discuss the implementation subtlety of existing methods in section 4."
REWARD REDISTRIBUTION,0.06597938144329897,"Uniform Reward Redistribution.
To pursue a simple but effective reward redistribution mech-
anism, IRCR (Gangwani et al., 2020) considers uniform reward redistribution which assumes all
state-action pairs equally contribute to the return value. It is designed to redistribute rewards in the
absence of any prior structure or information. More specifically, the proxy reward bRIRCR(s, a) is
computed by averaging episodic return values over all experienced trajectories containing (s, a),"
REWARD REDISTRIBUTION,0.06804123711340206,"bRIRCR(s, a) =
E
τ∼D"
REWARD REDISTRIBUTION,0.07010309278350516,"
Rep(τ) | (s, a) ∈τ

.
(5)"
REWARD REDISTRIBUTION,0.07216494845360824,"In this paper, we will introduce a novel reward redistribution mechanism that bridges between return
decomposition and uniform reward redistribution."
REWARD REDISTRIBUTION VIA RANDOMIZED RETURN DECOMPOSITION,0.07422680412371134,"3
REWARD REDISTRIBUTION VIA RANDOMIZED RETURN DECOMPOSITION"
REWARD REDISTRIBUTION VIA RANDOMIZED RETURN DECOMPOSITION,0.07628865979381444,"In this section, we introduce our approach, randomized return decomposition (RRD), which sets
up a surrogate optimization problem of the least-squares-based return decomposition. The proposed
surrogate objective allows us to conduct return decomposition on short subsequences of agent trajec-
tories, which is scalable in long-horizon tasks. We provide analyses to characterize the algorithmic
property of our surrogate objective function and discuss connections to existing methods."
REWARD REDISTRIBUTION VIA RANDOMIZED RETURN DECOMPOSITION,0.07835051546391752,Published as a conference paper at ICLR 2022
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.08041237113402062,"3.1
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.08247422680412371,"One practical barrier to apply least-squares-based return decomposition methods in long-horizon
tasks is the computation costs of the regression loss in Eq. (4), i.e., it requires to enumerate all state-
action pairs within the agent trajectory. To resolve this issue, we consider a randomized method that
uses a Monte-Carlo estimator to compute the predicted episodic return bRep,θ(τ) as follows:"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.08453608247422681,"bRep,θ(τ) ="
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.0865979381443299,"T −1
X"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.088659793814433,"t=0
bRθ(st, at)"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.09072164948453608,"|
{z
}
Deterministic Computation"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.09278350515463918,"=
E
I∼ρT (·)"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.09484536082474226,"""
T
|I| X"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.09690721649484536,"t∈I
bRθ(st, at) # ≈T |I| X"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.09896907216494845,"t∈I
bRθ(st, at)"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.10103092783505155,"|
{z
}
Monte-Carlo Estimation ,
(6)"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.10309278350515463,"where I denotes a subset of indices. ρT (·) denotes an unbiased sampling distribution where each
index t has the same probability to be included in I. In this paper, without further specification,
ρT (·) is constructed by uniformly sampling K distinct indices."
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.10515463917525773,"ρT (·) = Uniform
 
I ⊆ZT : |I| = K
	
,
(7)
where K is a hyper-parameter. In this sampling distribution, each timestep t has the same probability
to be covered by the sampled subsequence I ∼ρT (·) so that it gives an unbiased Monte-Carlo
estimation of the episodic summation bRep,θ(τ)."
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.10721649484536082,"Randomized Return Decomposition.
Based on the idea of using Monte-Carlo estimation shown
in Eq. (6), we introduce our approach, randomized return decomposition (RRD), to improve the scal-
ability of least-squares-based reward redistribution methods. The objective function of our approach
is formulated by the randomized return decomposition loss LRand-RD(θ) stated in Eq. (8), in which
the parameterized proxy reward function bRθ is trained to predict the episodic return Rep(τ) given a
random subsequence of the agent trajectory. In other words, we integrate the Monte-Carlo estimator
(see Eq. (6)) into the return decomposition loss to obtain the following surrogate loss function:"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.10927835051546392,"LRand-RD(θ) =
E
τ∼D """
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.11134020618556702,"E
I∼ρT (·)"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.1134020618556701,"""
Rep(τ) −T |I| X"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.1154639175257732,"t∈I
bRθ(st, at)
2## .
(8)"
RANDOMIZED RETURN DECOMPOSITION WITH MONTE-CARLO RETURN ESTIMATION,0.11752577319587629,"In practice, the loss function LRand-RD(θ) can be estimated by sampling a mini-batch of trajectory
subsequences instead of computing bRθ(st, at) for the whole agent trajectory, and thus the imple-
mentation of randomized return decomposition is adaptive and flexible in long-horizon tasks."
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.11958762886597939,"3.2
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION"
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.12164948453608247,"The main purpose of our approach is establishing a surrogate loss function to improve the scala-
bility of least-squares-based return decomposition in practice. Our proposed method, randomized
return decomposition, is a trade-off between the computation complexity and the estimation error
induced by the Monte-Carlo estimator. In this section, we show that our approach is an interpolation
between between the return decomposition paradigm and uniform reward redistribution, which can
be controlled by the hyper-parameter K used in the sampling distribution (see Eq. (7)). We present
Theorem 1 as a formal characterization of our proposed surrogate objective function.
Theorem 1 (Loss Decomposition). The surrogate loss function LRand-RD(θ) can be decomposed to
two terms interpolating between return decomposition and uniform reward redistribution."
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.12371134020618557,"LRand-RD(θ) = LRD(θ) + E
τ∼D """
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.12577319587628866,"Var
I∼ρT (·)"
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.12783505154639174,"""
T
|I| X"
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.12989690721649486,"t∈I
bRθ(st, at) #"
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.13195876288659794,"|
{z
}
variance of the Monte-Carlo estimator # (9)"
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.13402061855670103,"=
LRD(θ)
| {z }
return decomposition"
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.1360824742268041,"+ E
τ∼D """
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.13814432989690723,"T 2 ·
Var
(st,at)∼τ"
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.1402061855670103,"h
bRθ(st, at)
i"
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.1422680412371134,"|
{z
}
uniform reward redistribution · 1 K"
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.14432989690721648,"
1 −K −1 T −1 "
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.1463917525773196,"|
{z
}
interpolation weight #"
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.14845360824742268,",
(10)"
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.15051546391752577,where K denotes the length of sampled subsequences defined in Eq. (7).
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.15257731958762888,"The proof of Theorem 1 is based on the bias-variance decomposition formula of mean squared error
(Kohavi & Wolpert, 1996). The detailed proofs are deferred to Appendix A."
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.15463917525773196,Published as a conference paper at ICLR 2022
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.15670103092783505,"Interpretation as Regularization.
As presented in Theorem 1, the randomized decomposition
loss can be decomposed to two terms, the deterministic return decomposition loss LRD(θ) and a
variance penalty term (see the second term of Eq. (9)). The variance penalty term can be regarded
as a regularization that is controlled by hyper-parameter K. In practical problems, the objective
of return decomposition is ill-posed, since the number of trajectory labels is dramatically less than
the number of transition samples. There may exist solutions of reward redistribution that formally
optimize the least-squares regression loss but serve little functionality to guide the policy learning.
Regarding this issue, the variance penalty in randomized return decomposition is a regularizer for
reward modeling. It searches for smooth proxy rewards that has low variance within the trajectory.
This regularization effect is similar to the mechanism of uniform reward redistribution (Gangwani
et al., 2020), which achieves state-of-the-art performance in the previous literature. In section 4,
our experiments demonstrate that the variance penalty is crucial to the empirical performance of
randomized return decomposition."
ANALYSIS OF RANDOMIZED RETURN DECOMPOSITION,0.15876288659793814,"A Closer Look at Loss Decomposition.
In addition to the intuitive interpretation of regulariza-
tion, we will present a detailed characterization of the loss decomposition shown in Theorem 1. We
interpret this loss decomposition as below:"
NOTE THAT THE MONTE-CARLO ESTIMATOR USED BY RANDOMIZED RETURN DECOMPOSITION IS AN UNBI-,0.16082474226804125,"1. Note that the Monte-Carlo estimator used by randomized return decomposition is an unbi-
ased estimation of the proxy episodic return bRep,θ(τ) (see Eq. (6)). This unbiased property
gives the first component of the loss decomposition, i.e, the original return decomposition
loss LRD(θ).
2. Although the Monte-Carlo estimator is unbiased, its variance would contribute to an addi-
tional loss term induced by the mean-square operator, i.e., the second component of loss
decomposition presented in Eq. (10). This additional term penalizes the variance of the
learned proxy rewards under random sampling. This penalty expresses the same mecha-
nism as uniform reward redistribution (Gangwani et al., 2020) in which the episodic return
is uniformly redistributed to the state-action pairs in the trajectory."
NOTE THAT THE MONTE-CARLO ESTIMATOR USED BY RANDOMIZED RETURN DECOMPOSITION IS AN UNBI-,0.16288659793814433,"Based on the above discussions, we can analyze the algorithmic properties of randomized return
decomposition by connecting with previous studies."
SURROGATE OPTIMIZATION OF RETURN DECOMPOSITION,0.16494845360824742,"3.2.1
SURROGATE OPTIMIZATION OF RETURN DECOMPOSITION"
SURROGATE OPTIMIZATION OF RETURN DECOMPOSITION,0.1670103092783505,"Randomized return decomposition conducts a surrogate optimization of the actual return decompo-
sition. Note that the variance penalty term in Eq. (10) is non-negative, our loss function LRand-RD(θ)
serves an upper bound estimation of the original loss LRD(θ) as the following statement.
Proposition 1 (Surrogate Upper Bound). The randomized return decomposition loss LRand-RD(θ) is
an upper bound of the actual return decomposition loss function LRD(θ), i.e., LRand-RD(θ) ≥LRD(θ)."
SURROGATE OPTIMIZATION OF RETURN DECOMPOSITION,0.16907216494845362,"Proposition 1 suggests that optimizing our surrogate loss LRand-RD(θ) guarantees to optimize an up-
per bound of the actual return decomposition loss LRD(θ). According to Theorem 1, the gap between
LRand-RD(θ) and LRD(θ) refers to the variance of subsequence sampling. The magnitude of this gap
can be controlled by the hyper-parameter K that refers to the length of sampled subsequences."
SURROGATE OPTIMIZATION OF RETURN DECOMPOSITION,0.1711340206185567,"Proposition 2 (Objective Gap). Let L(K)
Rand-RD(θ) denote the randomized return decomposition loss
that samples subsequences with length K. The gap between L(K)
Rand-RD(θ) and LRD(θ) can be reduced
by using larger values of hyper-parameter K."
SURROGATE OPTIMIZATION OF RETURN DECOMPOSITION,0.1731958762886598,"∀θ,
L(1)
Rand-RD(θ) ≥L(2)
Rand-RD(θ) ≥· · · ≥L(T −1)
Rand-RD(θ) ≥L(T )
Rand-RD(θ) = LRD(θ).
(11)"
SURROGATE OPTIMIZATION OF RETURN DECOMPOSITION,0.17525773195876287,"This gap can be eliminated by choosing K = T in the sampling distribution (see Eq. (7)) so that our
approach degrades to the original deterministic implementation of return decomposition."
GENERALIZATION OF UNIFORM REWARD REDISTRIBUTION,0.177319587628866,"3.2.2
GENERALIZATION OF UNIFORM REWARD REDISTRIBUTION"
GENERALIZATION OF UNIFORM REWARD REDISTRIBUTION,0.17938144329896907,"The reward redistribution mechanism of randomized return decomposition is a generalization of
uniform reward redistribution. To serve intuitions, we start the discussions with the simplest case
using K = 1 in subsequence sampling, in which our approach degrades to the uniform reward
redistribution as the following statement."
GENERALIZATION OF UNIFORM REWARD REDISTRIBUTION,0.18144329896907216,Published as a conference paper at ICLR 2022
GENERALIZATION OF UNIFORM REWARD REDISTRIBUTION,0.18350515463917524,"Proposition 3 (Uniform Reward Redistribution). Assume all trajectories have the same length and
the parameterization space of θ serves universal representation capacity. The optimal solution θ⋆of
minimizing L(1)
Rand-RD(θ) is stated as follows:"
GENERALIZATION OF UNIFORM REWARD REDISTRIBUTION,0.18556701030927836,"bRθ⋆(s, a) =
E
τ∼D"
GENERALIZATION OF UNIFORM REWARD REDISTRIBUTION,0.18762886597938144,"
Rep(τ)/T | (s, a) ∈τ

,
(12)"
GENERALIZATION OF UNIFORM REWARD REDISTRIBUTION,0.18969072164948453,"where L(1)
Rand-RD(θ) denotes the randomized return decomposition loss with K = 1."
GENERALIZATION OF UNIFORM REWARD REDISTRIBUTION,0.19175257731958764,"A minor difference between Eq. (12) and the proxy reward designed by Gangwani et al. (2020) (see
Eq. (5)) is a multiplier scalar 1/T. Gangwani et al. (2020) interprets such a proxy reward mechanism
as a trajectory-space smoothing process or a non-committal reward redistribution. Our analysis can
give a mathematical characterization to illustrate the objective of uniform reward redistribution. As
characterized by Theorem 1, uniform reward redistribution conducts an additional regularizer to
penalize the variance of per-step proxy rewards. In the view of randomized return decomposition,
the functionality of this regularizer is requiring the reward model to reconstruct episodic return from
each single-step transition."
GENERALIZATION OF UNIFORM REWARD REDISTRIBUTION,0.19381443298969073,"By using larger values of hyper-parameter K, randomized return decomposition is trained to recon-
struct the episodic return from a subsequence of agent trajectory instead of the single-step transition
used by uniform reward redistribution. This mechanism is a generalization of uniform reward re-
distribution, in which we equally assign rewards to subsequences generated by uniformly random
sampling. It relies on the concentratability of random sampling, i.e., the average of a sequence can
be estimated by a small random subset with sub-linear size. The individual contribution of each
transition within the subsequence is further attributed by return decomposition."
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.1958762886597938,"3.3
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION"
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.1979381443298969,"In Algorithm 1, we integrate randomized return decomposition with policy optimization. It follows
an iterative paradigm that iterates between the rewarding modeling and policy optimization modules."
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.2,Algorithm 1 Policy Optimization with Randomized Return Decomposition
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.2020618556701031,"1: Initialize D ←∅
2: for ℓ= 1, 2, · · · do
3:
Collect a rollout trajectory τ using the current policy.
4:
Store trajectory τ and feedback Rep(τ) into the replay buffer D ←D ∪{(τ, Rep(τ))}.
5:
for i = 1, 2, · · · do
6:
Sample M trajectories {τj ∈D}M
j=1 from the replay buffer.
7:
Sample subsequences {Ij ⊆ZTj}M
j=1 for these trajectories."
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.20412371134020618,"8:
Estimate randomized return decomposition loss bLRand-RD(θ),"
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.20618556701030927,"bLRand-RD(θ) = 1 M M
X j=1 "
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.20824742268041238,"

Rep(τj) −Tj |Ij| X t∈Ij"
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.21030927835051547,"bRθ(sj,t, aj,t)
2
"
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.21237113402061855,",
(13)"
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.21443298969072164,"where Tj denotes the length of trajectory τj = ⟨sj,1, aj,1, · · · , sj,Tj⟩."
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.21649484536082475,"9:
Perform a gradient update on the reward model bRθ,"
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.21855670103092784,"θ ←θ −α∇θ bLRand-RD(θ),
(14)"
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.22061855670103092,"where α denotes the learning rate.
10:
Perform policy optimization using the learned proxy reward function bRθ(s, a)."
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.22268041237113403,"As presented in Eq. (13) and Eq. (14), the optimization of our loss function LRand-RD(θ) can be easily
conducted by mini-batch gradient descent. This surrogate loss function only requires computations
on short-length subsequences. It provides a scalable implementation for return decomposition that
can be generalized to long-horizon tasks with manageable computation costs. In section 4, we will
show that this simple implementation can also achieve state-of-the-art performance in comparison
to other existing methods."
PRACTICAL IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION,0.22474226804123712,Published as a conference paper at ICLR 2022
EXPERIMENTS,0.2268041237113402,"4
EXPERIMENTS"
EXPERIMENTS,0.2288659793814433,"In this section, we investigate the empirical performance of our proposed methods by conducting ex-
periments on a suite of MuJoCo benchmark tasks with episodic rewards. We compare our approach
with several baseline algorithms in the literature and conduct an ablation study on subsequence
sampling that is the core component of our algorithm."
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2309278350515464,"4.1
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS"
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2329896907216495,"Experiment Setting.
We adopt the same experiment setting as Gangwani et al. (2020) to compare
the performance of our approach with baseline algorithms. The experiment environments is based on
the MuJoCo locomotion benchmark tasks created by OpenAI Gym (Brockman et al., 2016). These
tasks are long-horizon with maximum trajectory length T = 1000, i.e., the task horizon is definitely
longer than the batch size used by the standard implementation of mini-batch gradient estimation.
We modify the reward function of these environments to set up an episodic-reward setting. Formally,
on non-terminal states, the agent will receive a zero signal instead of the per-step dense rewards.
The agent can obtain the episodic feedback Rep(τ) at the last step of the rollout trajectory, in which
Rep(τ) is computed by the summation of per-step instant rewards given by the standard setting. We
evaluate the performance of our proposed methods with the same configuration of hyper-parameters
in all environments. A detailed description of implementation details is included in Appendix B."
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.23505154639175257,We evaluate two implementations of randomized return decomposition (RRD):
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.23711340206185566,"• RRD (ours) denotes the default implementation of our approach. We train a reward model
using randomized return decomposition loss LRand-RD, in which we sample subsequences with
length K = 64 in comparison to the task horizon T = 1000. The reward model bRθ is
parameterized by a two-layer fully connected network. The policy optimization module is
implemented by soft actor-critic (SAC; Haarnoja et al., 2018a). 1"
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.23917525773195877,"• RRD-LRD (ours) is an alternative implementation that optimizes LRD instead of LRand-RD.
Note that Theorem 1 gives a closed-form characterization of the gap between LRand-RD(θ) and
LRD(θ), which is represented by the variance of the learned proxy rewards. By subtracting an
unbiased variance estimation from loss function LRand-RD(θ), we can estimate loss function
LRD(θ) by sampling short subsequences. It gives a computationally efficient way to opti-
mize LRD(θ). We include this alternative implementation to reveal the functionality of the
regularization given by variance penalty. A detailed description is deferred to Appendix B.3."
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.24123711340206186,We compare with several existing methods for episodic or delayed reward settings:
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.24329896907216494,"• IRCR (Gangwani et al., 2020) is an implementation of uniform reward redistribution. The
reward redistribution mechanism of IRCR is non-parametric, in which the proxy reward of a
transition is set to be the normalized value of corresponding trajectory return. It is equivalent
to use a Monte-Carlo estimator of Eq. (5). Due to the ease of implementation, this method
achieves state-of-the-art performance in the literature.
• RUDDER (Arjona-Medina et al., 2019) is based on the idea of return decomposition but does
not directly optimize LRD(θ). Instead, it trains a return predictor based on trajectory, and the
step-wise credit is assigned by the prediction difference between two consecutive states. By
using the warm-up technique of LSTM, this transform prevents its training computation costs
from depending on the task horizon T so that it is adaptive to long-horizon tasks.
• GASIL (Guo et al., 2018), generative adversarial self-imitation learning, is a generalization
of GAIL (Ho & Ermon, 2016). It formulates an imitation learning framework by imitating
best trajectories in the replay buffer. The proxy rewards are given by a discriminator that is
trained to classify the agent and expert trajectories.
• LIRPG (Zheng et al., 2018) aims to learn an intrinsic reward function from sparse environ-
ment feedback. Its policy is trained to optimized the sum of the extrinsic and intrinsic rewards.
The parametric intrinsic reward function is updated by meta-gradients to optimize the actual
extrinsic rewards achieved by the policy"
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.24536082474226803,"1The source code of our implementation is available at https://github.com/Stilwell-Git/
Randomized-Return-Decomposition."
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.24742268041237114,Published as a conference paper at ICLR 2022
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.24948453608247423,0M 0.5M 1M 1.5M 2M 2.5M 3M
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2515463917525773,Timesteps 0 1000 2000 3000 4000 5000 6000
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2536082474226804,Average Episodic Return
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2556701030927835,Ant-v2
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.25773195876288657,0M 0.5M 1M 1.5M 2M 2.5M 3M
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2597938144329897,Timesteps 0 2000 4000 6000 8000 10000 12000
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2618556701030928,HalfCheetah-v2
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2639175257731959,0M 0.5M 1M 1.5M 2M 2.5M 3M
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.26597938144329897,Timesteps 0 1000 2000 3000 4000 5000 6000
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.26804123711340205,Walker2d-v2
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.27010309278350514,0M 0.5M 1M 1.5M 2M 2.5M 3M
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2721649484536082,Timesteps 0 1000 2000 3000 4000 5000 6000
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.27422680412371137,Humanoid-v2
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.27628865979381445,0M 0.5M 1M 1.5M 2M 2.5M 3M
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.27835051546391754,Timesteps 400 320 240 160 80 0
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2804123711340206,Average Episodic Return
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2824742268041237,Reacher-v2
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2845360824742268,0M 0.5M 1M 1.5M 2M 2.5M 3M
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2865979381443299,Timesteps 0 60 120 180 240 300
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.28865979381443296,"360
Swimmer-v2"
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2907216494845361,0M 0.5M 1M 1.5M 2M 2.5M 3M
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2927835051546392,Timesteps 0 600 1200 1800 2400 3000
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.2948453608247423,"3600
Hopper-v2"
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.29690721649484536,0M 0.5M 1M 1.5M 2M 2.5M 3M
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.29896907216494845,Timesteps 25000 50000 75000
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.30103092783505153,100000
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.3030927835051546,125000
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.30515463917525776,150000
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.30721649484536084,HumanoidStandup-v2
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.30927835051546393,"RRD (ours)
RRD-
RD (ours)
IRCR
RUDDER
GASIL
LIRPG"
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.311340206185567,"Figure 1: Learning curves on a suite of MuJoCo benchmark tasks with episodic rewards. All curves
for MuJoCo benchmark are plotted from 30 runs with random initializations. The shaded region
indicates the standard deviation. To make the comparison more clear, the curves are smoothed by
averaging 10 most recent evaluation points. We set up an evaluation point every 104 timesteps."
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.3134020618556701,"Overall Performance Comparison.
As presented in Figure 1, randomized return decomposition
generally outperforms baseline algorithms. Our approach can achieve higher sample efficiency and
produce better policies after convergence. RUDDER is an implementation of return decomposition
that represents single-step rewards by the differences between the return predictions of two consecu-
tive states. This implementation maintains high computation efficiency but long-term return predic-
tion is a hard optimization problem and requires on-policy samples. In comparison, RRD is a more
scalable and stable implementation which can better integrate with off-policy learning for improving
sample efficiency. The uniform reward redistribution considered by IRCR is simple to implement
but cannot extract the temporal structure of episodic rewards. Thus the final policy quality produced
by RRD is usually better than that of IRCR. GASIL and LIRPG aim to construct auxiliary reward
functions that have high correlation to the environmental return. These two methods cannot achieve
high sample efficiency since their objectives require on-policy training."
PERFORMANCE EVALUATION ON MUJOCO BENCHMARK WITH EPISODIC REWARDS,0.3154639175257732,"Variance Penalty as Regularization.
Figure 1 also compares two implementations of randomized
return decomposition. In most testing environments, RRD optimizing LRand-RD outperforms the un-
biased implementation RRD-LRD. We consider RRD using LRand-RD as our default implementation
since it performs better and its objective function is simpler to implement. As discussed in sec-
tion 3.2, the variance penalty conducted by RRD aims to minimize the variance of the Monte-Carlo
estimator presented in Eq. (6). It serves as a regularization to restrict the solution space of return
decomposition, which gives two potential effects: (1) RRD prefers smooth proxy rewards when the
expressiveness capacity of reward network over-parameterizes the dataset. (2) The variance of mini-
batch gradient estimation can also be reduced when the variance of Monte-Carlo estimator is small.
In practice, this regularization would benefit the training stability. As presented in Figure 1, RRD
achieves higher sample efficiency than RRD-LRD in most testing environments. The quality of the
learned policy of RRD is also better than that of RRD-LRD. It suggests that the regularized reward
redistribution can better approximate the actual environmental objective."
ABLATION STUDIES,0.31752577319587627,"4.2
ABLATION STUDIES"
ABLATION STUDIES,0.31958762886597936,"We conduct an ablation study on the hyper-parameter K that represent the length of subsequences
used by randomized return decomposition. As discussed in section 3.2, the hyper-parameter K
controls the interpolation ratio between return decomposition and uniform reward redistribution.
It trades off the accuracy of return reconstruction and variance regularization. In Figure 2, we
evaluate RRD with a set of choices of hyper-parameter K ∈{1, 8, 16, 32, 64, 128}. The experiment
results show that, although the sensitivity of this hyper-parameter depends on the environment, a
relatively large value of K generally achieves better performance, since it can better approximate
the environmental objective. In this experiment, we ensure all runs use the same input size for mini-
batch training, i.e., using larger value of K leads to less number of subsequences in the mini-batch."
ABLATION STUDIES,0.3216494845360825,Published as a conference paper at ICLR 2022
M,0.3237113402061856,"0M
0.5M
1M
1.5M
2M
2.5M
3M
Timesteps 0 1000 2000 3000 4000 5000 6000"
M,0.32577319587628867,Average Episodic Return
M,0.32783505154639175,Ant-v2
M,0.32989690721649484,"0M
0.5M
1M
1.5M
2M
2.5M
3M
Timesteps 0 2000 4000 6000 8000 10000 12000"
M,0.3319587628865979,HalfCheetah-v2
M,0.334020618556701,"0M
0.5M
1M
1.5M
2M
2.5M
3M
Timesteps 0 1000 2000 3000 4000 5000 6000"
M,0.33608247422680415,Walker2d-v2
M,0.33814432989690724,"0M
0.5M
1M
1.5M
2M
2.5M
3M
Timesteps 0 1000 2000 3000 4000 5000 6000"
M,0.3402061855670103,Humanoid-v2
M,0.3422680412371134,"K=128
K=64
K=32
K=16
K=8
K=1"
M,0.3443298969072165,"Figure 2: Learning curves of RRD with different choices of hyper-parameter K. The curves with
K = 64 correspond to the default implementation of RRD presented in Figure 1."
M,0.3463917525773196,"More specifically, in this ablation study, all algorithm instances estimate the loss function LRand-RD
using a mini-batch containing 256 transitions. We consider K = 64 as our default configuration. As
presented in Figure 2, larger values give marginal improvement in most environments. The benefits
of larger values of K can only be observed in HalfCheetah-v2. We note that HalfCheetah-v2 does
not have early termination and thus has the longest average horizon among these locomotion tasks. It
highlights the trade-off between the weight of regularization and the bias of subsequence estimation."
RELATED WORK,0.34845360824742266,"5
RELATED WORK"
RELATED WORK,0.35051546391752575,"Reward Design.
The ability of RL agents highly depends on the designs of reward functions. It is
widely observed that reward shaping can accelerate learning (Mataric, 1994; Ng et al., 1999; Devlin
et al., 2011; Wu & Tian, 2017; Song et al., 2019). Many previous works study how to automatically
design auxiliary reward functions for efficient reinforcement learning. A famous paradigm, inverse
RL (Ng & Russell, 2000; Fu et al., 2018), considers to recover a reward function from expert demon-
strations. Another branch of work is learning an intrinsic reward function that guides the agent to
maximize extrinsic objective (Sorg et al., 2010; Guo et al., 2016). Such an intrinsic reward function
can be learned through meta-gradients (Zheng et al., 2018; 2020) or self-imitation (Guo et al., 2018;
Gangwani et al., 2019). A recent work (Abel et al., 2021) studies the expressivity of Markov rewards
and proposes algorithms to design Markov rewards for three notions of abstract tasks."
RELATED WORK,0.3525773195876289,"Temporal Credit Assignment.
Another methodology for tackling long-horizon sequential deci-
sion problems is assigning credits to emphasize the contribution of each single step over the temporal
structure. These methods directly consider the specification of the step values instead of manipu-
lating the reward function. The simplest example is studying how the choice of discount factor γ
affects the policy learning (Petrik & Scherrer, 2008; Jiang et al., 2015; Fedus et al., 2019). Several
previous works consider to extend the λ-return mechanism (Sutton, 1988) to a more generalized
credit assignment framework, such as adaptive λ (Xu et al., 2018) and pairwise weights (Zheng
et al., 2021). RUDDER (Arjona-Medina et al., 2019) proposes a return-equivalent formulation for
the credit assignment problem and establish theoretical analyses (Holzleitner et al., 2021). Aligned-
RUDDER (Patil et al., 2020) considers to use expert demonstrations for higher sample efficiency.
Harutyunyan et al. (2019) opens up a new family of algorithms, called hindsight credit assignment,
that attributes the credits from a backward view. In Appendix F, we cover more topics of related
work and discuss the connections to the problem focused by this paper."
CONCLUSION,0.354639175257732,"6
CONCLUSION"
CONCLUSION,0.35670103092783506,"In this paper, we propose randomized return decomposition (RRD), a novel reward redistribution
algorithm, to tackle the episodic reinforcement learning problem with trajectory feedback. RRD
uses a Monte-Carlo estimator to establish a surrogate optimization problem of return decomposi-
tion. This surrogate objective implicitly conducts a variance reduction penalty as regularization. We
analyze its algorithmic properties by connecting with previous studies in reward redistribution. Our
experiments demonstrate that RRD outperforms previous methods in terms of both sample efficiency
and policy quality. The basic idea of randomized return decomposition can potentially generalize to
other related problems with sum-decomposition structure, such as preference-based reward model-
ing (Christiano et al., 2017) and multi-agent value decomposition (Sunehag et al., 2018). It is also
promising to consider non-linear decomposition as what is explored in multi-agent value factoriza-
tion (Rashid et al., 2018). We leave these investigations as our future work."
CONCLUSION,0.35876288659793815,Published as a conference paper at ICLR 2022
CONCLUSION,0.36082474226804123,ACKNOWLEDGMENTS
CONCLUSION,0.3628865979381443,"The authors would like to thank Kefan Dong for insightful discussions. This work is supported by
the National Science Foundation under Grant CCF-2006526."
REFERENCES,0.3649484536082474,REFERENCES
REFERENCES,0.3670103092783505,"David Abel, Will Dabney, Anna Harutyunyan, Mark K Ho, Michael Littman, Doina Precup, and
Satinder Singh. On the expressivity of Markov reward. Advances in Neural Information Process-
ing Systems, 34, 2021."
REFERENCES,0.36907216494845363,"Dario Amodei, Chris Olah, Jacob Steinhardt, Paul Christiano, John Schulman, and Dan Man´e. Con-
crete problems in AI safety. arXiv preprint arXiv:1606.06565, 2016."
REFERENCES,0.3711340206185567,"Saidhiraj Amuru and R Michael Buehrer. Optimal jamming using delayed learning. In 2014 IEEE
Military Communications Conference, pp. 1528–1533. IEEE, 2014."
REFERENCES,0.3731958762886598,"Marcin Andrychowicz, Filip Wolski, Alex Ray, Jonas Schneider, Rachel Fong, Peter Welinder, Bob
McGrew, Josh Tobin, Pieter Abbeel, and Wojciech Zaremba. Hindsight experience replay. In
Advances in Neural Information Processing Systems, pp. 5048–5058, 2017."
REFERENCES,0.3752577319587629,"Andr´as Antos, Csaba Szepesv´ari, and R´emi Munos. Learning near-optimal policies with Bellman-
residual minimization based fitted policy iteration and a single sample path. Machine Learning,
71(1):89–129, 2008."
REFERENCES,0.37731958762886597,"Jose A Arjona-Medina, Michael Gillhofer, Michael Widrich, Thomas Unterthiner, Johannes Brand-
stetter, and Sepp Hochreiter. RUDDER: Return decomposition for delayed rewards. In Advances
in Neural Information Processing Systems, volume 32, 2019."
REFERENCES,0.37938144329896906,"Richard Bellman. Dynamic programming. Princeton University Press, 89:92, 1957."
REFERENCES,0.38144329896907214,"Wendelin B¨ohmer, Vitaly Kurin, and Shimon Whiteson. Deep coordination graphs. In International
Conference on Machine Learning, pp. 980–991. PMLR, 2020."
REFERENCES,0.3835051546391753,"L´eon Bottou, Jonas Peters, Joaquin Qui˜nonero-Candela, Denis X Charles, D Max Chickering, Elon
Portugaly, Dipankar Ray, Patrice Simard, and Ed Snelson. Counterfactual reasoning and learning
systems: The example of computational advertising. Journal of Machine Learning Research, 14
(11), 2013."
REFERENCES,0.38556701030927837,"Yann Bouteiller, Simon Ramstedt, Giovanni Beltrame, Christopher Pal, and Jonathan Binas. Re-
inforcement learning with random delays. In International Conference on Learning Representa-
tions, 2021."
REFERENCES,0.38762886597938145,"Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas Schneider, John Schulman, Jie Tang, and
Wojciech Zaremba. OpenAI gym. arXiv preprint arXiv:1606.01540, 2016."
REFERENCES,0.38969072164948454,"Pablo Samuel Castro, Subhodeep Moitra, Carles Gelada, Saurabh Kumar, and Marc G Belle-
mare.
Dopamine: A research framework for deep reinforcement learning.
arXiv preprint
arXiv:1812.06110, 2018."
REFERENCES,0.3917525773195876,"Niladri Chatterji, Aldo Pacchiano, Peter Bartlett, and Michael Jordan. On the theory of reinforce-
ment learning with once-per-episode feedback. Advances in Neural Information Processing Sys-
tems, 34, 2021."
REFERENCES,0.3938144329896907,"Shi-Yong Chen, Yang Yu, Qing Da, Jun Tan, Hai-Kuan Huang, and Hai-Hong Tang. Stabilizing
reinforcement learning in dynamic environment with application to online recommendation. In
Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery &
Data Mining, pp. 1187–1196, 2018."
REFERENCES,0.3958762886597938,"Xinshi Chen, Yu Li, Ramzan Umarov, Xin Gao, and Le Song. Rna secondary structure prediction
by learning unrolled algorithms. In International Conference on Learning Representations, 2020."
REFERENCES,0.3979381443298969,Published as a conference paper at ICLR 2022
REFERENCES,0.4,"Paul F Christiano, Jan Leike, Tom Brown, Miljan Martic, Shane Legg, and Dario Amodei. Deep
reinforcement learning from human preferences. Advances in neural information processing sys-
tems, 30, 2017."
REFERENCES,0.4020618556701031,"Edward H Clarke. Multipart pricing of public goods. Public choice, pp. 17–33, 1971."
REFERENCES,0.4041237113402062,"Sam Devlin, Daniel Kudenko, and Marek Grze´s. An empirical study of potential-based reward
shaping and advice in complex, multi-agent systems. Advances in Complex Systems, 14(02):
251–278, 2011."
REFERENCES,0.4061855670103093,"Daniel Dewey. Reinforcement learning and the reward engineering principle. In 2014 AAAI Spring
Symposium Series, 2014."
REFERENCES,0.40824742268041236,"Yali Du, Lei Han, Meng Fang, Tianhong Dai, Ji Liu, and Dacheng Tao. LIIR: learning individ-
ual intrinsic reward in multi-agent reinforcement learning. In Advances in Neural Information
Processing Systems, pp. 4403–4414, 2019."
REFERENCES,0.41030927835051545,"Yonathan Efroni, Nadav Merlis, and Shie Mannor. Reinforcement learning with trajectory feedback.
In Proceedings of the AAAI Conference on Artificial Intelligence, volume 35, pp. 7288–7295,
2021."
REFERENCES,0.41237113402061853,"William Fedus, Carles Gelada, Yoshua Bengio, Marc G Bellemare, and Hugo Larochelle. Hyper-
bolic discounting and learning over multiple horizons. arXiv preprint arXiv:1902.06865, 2019."
REFERENCES,0.4144329896907217,"Justin Fu, Katie Luo, and Sergey Levine. Learning robust rewards with adverserial inverse rein-
forcement learning. In International Conference on Learning Representations, 2018."
REFERENCES,0.41649484536082476,"Scott Fujimoto, Herke Hoof, and David Meger. Addressing function approximation error in actor-
critic methods. In International Conference on Machine Learning, pp. 1587–1596, 2018."
REFERENCES,0.41855670103092785,"Tanmay Gangwani, Qiang Liu, and Jian Peng. Learning self-imitating diverse policies. In Interna-
tional Conference on Learning Representations, 2019."
REFERENCES,0.42061855670103093,"Tanmay Gangwani, Yuan Zhou, and Jian Peng. Learning guidance rewards with trajectory-space
smoothing. In Advances in Neural Information Processing Systems, volume 33, pp. 822–832,
2020."
REFERENCES,0.422680412371134,"Theodore Groves. Incentives in teams. Econometrica: Journal of the Econometric Society, pp.
617–631, 1973."
REFERENCES,0.4247422680412371,"Xiaoxiao Guo, Satinder P Singh, Richard L Lewis, and Honglak Lee. Deep learning for reward
design to improve Monte Carlo tree search in ATARI games. In Proceedings of the Twenty-Fifth
International Joint Conference on Artificial Intelligence, pp. 1519–1525, 2016."
REFERENCES,0.4268041237113402,"Yijie Guo, Junhyuk Oh, Satinder Singh, and Honglak Lee. Generative adversarial self-imitation
learning. arXiv preprint arXiv:1812.00950, 2018."
REFERENCES,0.4288659793814433,"Tuomas Haarnoja, Aurick Zhou, Pieter Abbeel, and Sergey Levine. Soft actor-critic: Off-policy
maximum entropy deep reinforcement learning with a stochastic actor. In International confer-
ence on machine learning, pp. 1861–1870. PMLR, 2018a."
REFERENCES,0.4309278350515464,"Tuomas Haarnoja, Aurick Zhou, Kristian Hartikainen, George Tucker, Sehoon Ha, Jie Tan, Vikash
Kumar, Henry Zhu, Abhishek Gupta, Pieter Abbeel, et al. Soft actor-critic algorithms and appli-
cations. arXiv preprint arXiv:1812.05905, 2018b."
REFERENCES,0.4329896907216495,"Beining Han, Zhizhou Ren, Zuofan Wu, Yuan Zhou, and Jian Peng. Off-policy reinforcement learn-
ing with delayed rewards. arXiv preprint arXiv:2106.11854, 2021."
REFERENCES,0.4350515463917526,"Anna Harutyunyan, Will Dabney, Thomas Mesnard, Mohammad Gheshlaghi Azar, Bilal Piot, Nico-
las Heess, Hado P van Hasselt, Gregory Wayne, Satinder Singh, Doina Precup, et al. Hindsight
credit assignment. In Advances in neural information processing systems, volume 32, pp. 12488–
12497, 2019."
REFERENCES,0.43711340206185567,Published as a conference paper at ICLR 2022
REFERENCES,0.43917525773195876,"Daniel Hein, Stefan Depeweg, Michel Tokic, Steffen Udluft, Alexander Hentschel, Thomas A Run-
kler, and Volkmar Sterzing. A benchmark environment motivated by industrial control problems.
In 2017 IEEE Symposium Series on Computational Intelligence (SSCI), pp. 1–8. IEEE, 2017."
REFERENCES,0.44123711340206184,"Am´elie H´eliou, Panayotis Mertikopoulos, and Zhengyuan Zhou. Gradient-free online learning in
continuous games with delayed rewards. In International Conference on Machine Learning, pp.
4172–4181. PMLR, 2020."
REFERENCES,0.44329896907216493,"Todd Hester and Peter Stone. TEXPLORE: real-time sample-efficient reinforcement learning for
robots. Machine learning, 90(3):385–429, 2013."
REFERENCES,0.44536082474226807,"Jonathan Ho and Stefano Ermon. Generative adversarial imitation learning. In Advances in neural
information processing systems, volume 29, pp. 4565–4573, 2016."
REFERENCES,0.44742268041237115,"Markus Holzleitner, Lukas Gruber, Jos´e Arjona-Medina, Johannes Brandstetter, and Sepp Hochre-
iter. Convergence proof for actor-critic methods applied to PPO and RUDDER. In Transactions
on Large-Scale Data-and Knowledge-Centered Systems XLVIII, pp. 105–130. Springer, 2021."
REFERENCES,0.44948453608247424,"Nan Jiang, Alex Kulesza, Satinder Singh, and Richard Lewis. The dependence of effective planning
horizon on model accuracy. In Proceedings of the 2015 International Conference on Autonomous
Agents and Multiagent Systems, pp. 1181–1189. Citeseer, 2015."
REFERENCES,0.4515463917525773,"Konstantinos V Katsikopoulos and Sascha E Engelbrecht. Markov decision processes with delays
and asynchronous cost collection. IEEE transactions on automatic control, 48(4):568–574, 2003."
REFERENCES,0.4536082474226804,"Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In International
Conference on Learning Representations, 2015."
REFERENCES,0.4556701030927835,"Ron Kohavi and David Wolpert. Bias plus variance decomposition for zero-one loss functions. In
Proceedings of the Thirteenth International Conference on International Conference on Machine
Learning, pp. 275–283, 1996."
REFERENCES,0.4577319587628866,"Kimin Lee, Laura Smith, and Pieter Abbeel. PEBBLE: Feedback-efficient interactive reinforcement
learning via relabeling experience and unsupervised pre-training. In International Conference on
Machine Learning, 2021."
REFERENCES,0.45979381443298967,"Lei Lei, Yue Tan, Kan Zheng, Shiwen Liu, Kuan Zhang, and Xuemin Shen. Deep reinforcement
learning for autonomous internet of things: Model, applications and challenges. IEEE Communi-
cations Surveys & Tutorials, 22(3):1722–1760, 2020."
REFERENCES,0.4618556701030928,"Timothy P Lillicrap, Jonathan J Hunt, Alexander Pritzel, Nicolas Heess, Tom Erez, Yuval Tassa,
David Silver, and Daan Wierstra. Continuous control with deep reinforcement learning. In Inter-
national Conference on Learning Representations, 2016."
REFERENCES,0.4639175257731959,"Yang Liu, Yunan Luo, Yuanyi Zhong, Xi Chen, Qiang Liu, and Jian Peng. Sequence modeling of
temporal credit assignment for episodic reinforcement learning. arXiv preprint arXiv:1905.13420,
2019."
REFERENCES,0.465979381443299,"Horia Mania, Aurelia Guy, and Benjamin Recht. Simple random search provides a competitive
approach to reinforcement learning. arXiv preprint arXiv:1803.07055, 2018."
REFERENCES,0.46804123711340206,"Hongzi Mao, Mohammad Alizadeh, Ishai Menache, and Srikanth Kandula. Resource management
with deep reinforcement learning. In Proceedings of the 15th ACM workshop on hot topics in
networks, pp. 50–56, 2016."
REFERENCES,0.47010309278350515,"Maja J Mataric. Reward functions for accelerated learning. Machine learning, pp. 181–189, 1994."
REFERENCES,0.47216494845360824,"Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A Rusu, Joel Veness, Marc G Belle-
mare, Alex Graves, Martin Riedmiller, Andreas K Fidjeland, Georg Ostrovski, et al. Human-level
control through deep reinforcement learning. Nature, 518(7540):529–533, 2015."
REFERENCES,0.4742268041237113,"Roger B Myerson. Optimal auction design. Mathematics of operations research, 6(1):58–73, 1981."
REFERENCES,0.4762886597938144,Published as a conference paper at ICLR 2022
REFERENCES,0.47835051546391755,"Somjit Nath, Mayank Baranwal, and Harshad Khadilkar. Revisiting state augmentation methods
for reinforcement learning with stochastic delays. In Proceedings of the 30th ACM International
Conference on Information & Knowledge Management, pp. 1346–1355, 2021."
REFERENCES,0.48041237113402063,"Andrew Y Ng and Stuart Russell. Algorithms for inverse reinforcement learning. In Proceedings of
the Seventeenth International Conference on Machine Learning. Citeseer, 2000."
REFERENCES,0.4824742268041237,"Andrew Y Ng, Daishi Harada, and Stuart J Russell. Policy invariance under reward transforma-
tions: Theory and application to reward shaping. In Proceedings of the Sixteenth International
Conference on Machine Learning, pp. 278–287. Morgan Kaufmann Publishers Inc., 1999."
REFERENCES,0.4845360824742268,"Duc Thien Nguyen, Akshat Kumar, and Hoong Chuin Lau. Credit assignment for collective multia-
gent RL with global rewards. In Advances in Neural Information Processing Systems, volume 31,
pp. 8102–8113, 2018."
REFERENCES,0.4865979381443299,"Johan Nilsson, Bo Bernhardsson, and Bj¨orn Wittenmark. Stochastic analysis and control of real-time
systems with random time delays. Automatica, 34(1):57–64, 1998."
REFERENCES,0.488659793814433,"Vihang P Patil, Markus Hofmarcher, Marius-Constantin Dinu, Matthias Dorfer, Patrick M Blies,
Johannes Brandstetter, Jose A Arjona-Medina, and Sepp Hochreiter. Align-RUDDER: Learning
from few demonstrations by reward redistribution. arXiv preprint arXiv:2009.14108, 2020."
REFERENCES,0.49072164948453606,"Marek Petrik and Bruno Scherrer. Biasing approximate dynamic programming with a lower discount
factor. Advances in neural information processing systems, 21:1265–1272, 2008."
REFERENCES,0.4927835051546392,"Mariya Popova, Olexandr Isayev, and Alexander Tropsha. Deep reinforcement learning for de novo
drug design. Science advances, 4(7):eaap7885, 2018."
REFERENCES,0.4948453608247423,"Hazhir Rahmandad, Nelson Repenning, and John Sterman. Effects of feedback delay on learning.
System Dynamics Review, 25(4):309–338, 2009."
REFERENCES,0.49690721649484537,"Jette Randløv and Preben Alstrøm. Learning to drive a bicycle using reinforcement learning and
shaping. In International Conference on Machine Learning, pp. 463–471. Citeseer, 1998."
REFERENCES,0.49896907216494846,"David Raposo, Sam Ritter, Adam Santoro, Greg Wayne, Theophane Weber, Matt Botvinick, Hado
van Hasselt, and Francis Song. Synthetic returns for long-term credit assignment. arXiv preprint
arXiv:2102.12425, 2021."
REFERENCES,0.5010309278350515,"Tabish Rashid, Mikayel Samvelyan, Christian Schroeder, Gregory Farquhar, Jakob Foerster, and
Shimon Whiteson. QMIX: Monotonic value function factorisation for deep multi-agent rein-
forcement learning. In International Conference on Machine Learning, pp. 4295–4304. PMLR,
2018."
REFERENCES,0.5030927835051546,"Erik Schuitema, Lucian Bus¸oniu, Robert Babuˇska, and Pieter Jonker. Control delay in reinforcement
learning for real-time dynamic systems: a memoryless approach. In 2010 IEEE/RSJ International
Conference on Intelligent Robots and Systems, pp. 3226–3231. IEEE, 2010."
REFERENCES,0.5051546391752577,"Sarjinder Singh. Advanced Sampling Theory With Applications: How Michael”” Selected”” Amy,
volume 2. Springer Science & Business Media, 2003."
REFERENCES,0.5072164948453608,"Kyunghwan Son, Daewoo Kim, Wan Ju Kang, David Earl Hostallero, and Yung Yi.
QTRAN:
Learning to factorize with transformation for cooperative multi-agent reinforcement learning. In
International Conference on Machine Learning, pp. 5887–5896. PMLR, 2019."
REFERENCES,0.5092783505154639,"Shihong Song, Jiayi Weng, Hang Su, Dong Yan, Haosheng Zou, and Jun Zhu. Playing FPS games
with environment-aware hierarchical reinforcement learning. In Proceedings of the Twenty-Eighth
International Joint Conference on Artificial Intelligence, pp. 3475–3482, 2019."
REFERENCES,0.511340206185567,"Jonathan Sorg, Richard L Lewis, and Satinder Singh. Reward design via online gradient ascent. In
Advances in Neural Information Processing Systems, volume 23, pp. 2190–2198, 2010."
REFERENCES,0.51340206185567,"Peter Sunehag, Guy Lever, Audrunas Gruslys, Wojciech Marian Czarnecki, Vinicius Zambaldi, Max
Jaderberg, Marc Lanctot, Nicolas Sonnerat, Joel Z Leibo, Karl Tuyls, et al. Value-decomposition
networks for cooperative multi-agent learning based on team reward. In Proceedings of the 17th
International Conference on Autonomous Agents and MultiAgent Systems, pp. 2085–2087, 2018."
REFERENCES,0.5154639175257731,Published as a conference paper at ICLR 2022
REFERENCES,0.5175257731958763,"Richard S Sutton. Learning to predict by the methods of temporal differences. Machine learning, 3
(1):9–44, 1988."
REFERENCES,0.5195876288659794,"Wei Tang, Chien-Ju Ho, and Yang Liu. Bandit learning with delayed impact of actions. Advances
in Neural Information Processing Systems, 34, 2021."
REFERENCES,0.5216494845360825,"Arash Tavakoli, Mehdi Fatemi, and Petar Kormushev. Learning to represent action values as a
hypergraph on the action vertices. In International Conference on Learning Representations,
2021."
REFERENCES,0.5237113402061856,"William Vickrey. Counterspeculation, auctions, and competitive sealed tenders. The Journal of
finance, 16(1):8–37, 1961."
REFERENCES,0.5257731958762887,"Thomas J Walsh, Ali Nouri, Lihong Li, and Michael L Littman. Learning and planning in envi-
ronments with delayed feedback. Autonomous Agents and Multi-Agent Systems, 18(1):83–105,
2009."
REFERENCES,0.5278350515463918,"Jianhao Wang, Zhizhou Ren, Beining Han, Jianing Ye, and Chongjie Zhang. Towards understanding
cooperative multi-agent q-learning with value factorization. In Thirty-Fifth Conference on Neural
Information Processing Systems, 2021a."
REFERENCES,0.5298969072164949,"Jianhao Wang, Zhizhou Ren, Terry Liu, Yang Yu, and Chongjie Zhang. QPLEX: Duplex dueling
multi-agent q-learning. In International Conference on Learning Representations, 2021b."
REFERENCES,0.5319587628865979,"Jianhong Wang, Yuan Zhang, Tae-Kyun Kim, and Yunjie Gu. Shapley Q-value: a local reward
approach to solve global reward games. In Proceedings of the AAAI Conference on Artificial
Intelligence, volume 34, pp. 7285–7292, 2020."
REFERENCES,0.534020618556701,"Christian Wirth, Johannes F¨urnkranz, and Gerhard Neumann. Model-free preference-based rein-
forcement learning. In Thirtieth AAAI Conference on Artificial Intelligence, 2016."
REFERENCES,0.5360824742268041,"Yuxin Wu and Yuandong Tian. Training agent for first-person shooter game with actor-critic cur-
riculum learning. In International Conference on Learning Representations, 2017."
REFERENCES,0.5381443298969072,"Zhongwen Xu, Hado P van Hasselt, and David Silver. Meta-gradient reinforcement learning. In
Advances in Neural Information Processing Systems, volume 31, pp. 2396–2407, 2018."
REFERENCES,0.5402061855670103,"Zeyu Zheng, Junhyuk Oh, and Satinder Singh. On learning intrinsic rewards for policy gradient
methods. In Advances in Neural Information Processing Systems, volume 31, pp. 4644–4654,
2018."
REFERENCES,0.5422680412371134,"Zeyu Zheng, Junhyuk Oh, Matteo Hessel, Zhongwen Xu, Manuel Kroiss, Hado Van Hasselt, David
Silver, and Satinder Singh. What can learned intrinsic rewards capture? In International Confer-
ence on Machine Learning, pp. 11436–11446. PMLR, 2020."
REFERENCES,0.5443298969072164,"Zeyu Zheng, Risto Vuorio, Richard Lewis, and Satinder Singh. Pairwise weights for temporal credit
assignment. arXiv preprint arXiv:2102.04999, 2021."
REFERENCES,0.5463917525773195,"Zhengyuan Zhou, Panayotis Mertikopoulos, Nicholas Bambos, Peter Glynn, Yinyu Ye, Li-Jia Li,
and Li Fei-Fei. Distributed asynchronous optimization with unbounded delays: How slow can
you go? In International Conference on Machine Learning, pp. 5970–5979. PMLR, 2018."
REFERENCES,0.5484536082474227,"Zhengyuan Zhou, Renyuan Xu, and Jose Blanchet. Learning in generalized linear contextual bandits
with stochastic delays. In Advances in Neural Information Processing Systems, volume 32, pp.
5197–5208, 2019a."
REFERENCES,0.5505154639175258,"Zhenpeng Zhou, Steven Kearnes, Li Li, Richard N Zare, and Patrick Riley.
Optimization of
molecules via deep reinforcement learning. Scientific reports, 9(1):1–10, 2019b."
REFERENCES,0.5525773195876289,Published as a conference paper at ICLR 2022
REFERENCES,0.554639175257732,"A
OMITTED PROOFS"
REFERENCES,0.5567010309278351,"Theorem 1 (Loss Decomposition). The surrogate loss function LRand-RD(θ) can be decomposed to
two terms interpolating between return decomposition and uniform reward redistribution."
REFERENCES,0.5587628865979382,"LRand-RD(θ) = LRD(θ) + E
τ∼D """
REFERENCES,0.5608247422680412,"Var
I∼ρT (·)"
REFERENCES,0.5628865979381443,"""
T
|I| X"
REFERENCES,0.5649484536082474,"t∈I
bRθ(st, at) #"
REFERENCES,0.5670103092783505,"|
{z
}
variance of the Monte-Carlo estimator # (9)"
REFERENCES,0.5690721649484536,"=
LRD(θ)
| {z }
return decomposition"
REFERENCES,0.5711340206185567,"+ E
τ∼D """
REFERENCES,0.5731958762886598,"T 2 ·
Var
(st,at)∼τ"
REFERENCES,0.5752577319587628,"h
bRθ(st, at)
i"
REFERENCES,0.5773195876288659,"|
{z
}
uniform reward redistribution · 1 K"
REFERENCES,0.5793814432989691,"
1 −K −1 T −1 "
REFERENCES,0.5814432989690722,"|
{z
}
interpolation weight #"
REFERENCES,0.5835051546391753,",
(10)"
REFERENCES,0.5855670103092784,where K denotes the length of sampled subsequences defined in Eq. (7).
REFERENCES,0.5876288659793815,"Proof. First, we note that random sampling serves an unbiased estimation. i.e.,"
REFERENCES,0.5896907216494846,"E
I∼ρT (·)"
REFERENCES,0.5917525773195876,"""
T
|I| X"
REFERENCES,0.5938144329896907,"t∈I
bRθ(st, at) # ="
REFERENCES,0.5958762886597938,"T −1
X"
REFERENCES,0.5979381443298969,"t=0
bRθ(st, at) = bRep,θ(τ)."
REFERENCES,0.6,We can decompose our loss function LRand-RD(θ) as follows:
REFERENCES,0.6020618556701031,"LRand-RD(θ) =
E
τ∼D """
REFERENCES,0.6041237113402061,"E
I∼ρT (·)"
REFERENCES,0.6061855670103092,"""
Rep(τ) −T |I| X"
REFERENCES,0.6082474226804123,"t∈I
bRθ(st, at)
2##"
REFERENCES,0.6103092783505155,"=
E
τ∼D """
REFERENCES,0.6123711340206186,"E
I∼ρT (·)"
REFERENCES,0.6144329896907217,"""
Rep(τ) −bRep,θ(τ) + bRep,θ(τ) −T |I| X"
REFERENCES,0.6164948453608248,"t∈I
bRθ(st, at)
2##"
REFERENCES,0.6185567010309279,"=
E
τ∼D """
REFERENCES,0.6206185567010309,"E
I∼ρT (·)"
REFERENCES,0.622680412371134,"""
Rep(τ) −bRep,θ(τ)
2##"
REFERENCES,0.6247422680412371,"|
{z
}
=LRD(θ)"
REFERENCES,0.6268041237113402,"+ E
τ∼D """
REFERENCES,0.6288659793814433,"2
 
Rep(τ) −bRep,θ(τ)

·
E
I∼ρT (·)"
REFERENCES,0.6309278350515464,"""
bRep,θ(τ) −T |I| X"
REFERENCES,0.6329896907216495,"t∈I
bRθ(st, at)
#"
REFERENCES,0.6350515463917525,"|
{z
}
=0 #"
REFERENCES,0.6371134020618556,"+ E
τ∼D """
REFERENCES,0.6391752577319587,"E
I∼ρT (·)"
REFERENCES,0.6412371134020619,"""
bRep,θ(τ) −T |I| X"
REFERENCES,0.643298969072165,"t∈I
bRθ(st, at)
2#"
REFERENCES,0.6453608247422681,"|
{z
}"
REFERENCES,0.6474226804123712,=Var[(T/|I|)·P
REFERENCES,0.6494845360824743,"t∈I b
Rθ(st,at)] #"
REFERENCES,0.6515463917525773,"= LRD(θ) + E
τ∼D """
REFERENCES,0.6536082474226804,"Var
I∼ρT (·)"
REFERENCES,0.6556701030927835,"""
T
|I| X"
REFERENCES,0.6577319587628866,"t∈I
bRθ(st, at) ## ."
REFERENCES,0.6597938144329897,"Note our sampling distribution defined in Eq. (7) refers to “sampling without replacement” (Singh,
2003) whose variance can be further decomposed as follows:"
REFERENCES,0.6618556701030928,"LRand-RD(θ) = LRD(θ) + E
τ∼D """
REFERENCES,0.6639175257731958,"Var
I∼ρT (·)"
REFERENCES,0.6659793814432989,"""
T
|I| X"
REFERENCES,0.668041237113402,"t∈I
bRθ(st, at) ##"
REFERENCES,0.6701030927835051,"= LRD(θ) + E
τ∼D """
REFERENCES,0.6721649484536083,"T 2 ·
Var
(st,at)∼τ"
REFERENCES,0.6742268041237114,"h
bRθ(st, at)
i
· 1 K"
REFERENCES,0.6762886597938145,"
1 −K −1 T −1 # ."
REFERENCES,0.6783505154639176,Published as a conference paper at ICLR 2022
REFERENCES,0.6804123711340206,"The proof of Theorem 1 follows a particular form of bias-variance decomposition formula (Kohavi
& Wolpert, 1996). Similar decomposition form can also be found in other works in the literature of
reinforcement learning (Antos et al., 2008)."
REFERENCES,0.6824742268041237,"Proposition 1 (Surrogate Upper Bound). The randomized return decomposition loss LRand-RD(θ) is
an upper bound of the actual return decomposition loss function LRD(θ), i.e., LRand-RD(θ) ≥LRD(θ)."
REFERENCES,0.6845360824742268,"Proof. Note that the second term of Eq. (9) in Theorem 1 expresses the variance of a Monte-Carlo
estimator which is clearly non-negative. It directly gives LRand-RD(θ) ≥LRD(θ)."
REFERENCES,0.6865979381443299,An alternative proof of Proposition 1 can be directly given by Jensen’s inequality.
REFERENCES,0.688659793814433,"Proposition 2 (Objective Gap). Let L(K)
Rand-RD(θ) denote the randomized return decomposition loss
that samples subsequences with length K. The gap between L(K)
Rand-RD(θ) and LRD(θ) can be reduced
by using larger values of hyper-parameter K."
REFERENCES,0.6907216494845361,"∀θ,
L(1)
Rand-RD(θ) ≥L(2)
Rand-RD(θ) ≥· · · ≥L(T −1)
Rand-RD(θ) ≥L(T )
Rand-RD(θ) = LRD(θ).
(11)"
REFERENCES,0.6927835051546392,"Proof. In Eq. (10) of Theorem 1, the last term 1"
REFERENCES,0.6948453608247422,"K

1 −K−1"
REFERENCES,0.6969072164948453,"T −1

monotonically decreases as the hyper-
parameter K increases. When K = T, this coefficient is equal to zero. It derives Eq. (11) in the
given statement."
REFERENCES,0.6989690721649484,"Proposition 3 (Uniform Reward Redistribution). Assume all trajectories have the same length and
the parameterization space of θ serves universal representation capacity. The optimal solution θ⋆of
minimizing L(1)
Rand-RD(θ) is stated as follows:"
REFERENCES,0.7010309278350515,"bRθ⋆(s, a) =
E
τ∼D"
REFERENCES,0.7030927835051546,"
Rep(τ)/T | (s, a) ∈τ

,
(12)"
REFERENCES,0.7051546391752578,"where L(1)
Rand-RD(θ) denotes the randomized return decomposition loss with K = 1."
REFERENCES,0.7072164948453609,"Proof. Note that we assume all trajectories have the same length. The optimal solution of this least-
squares problem is given by"
REFERENCES,0.709278350515464,"bRθ⋆(s, a) = min
r∈R
E
τ∼D"
REFERENCES,0.711340206185567,"h
(Rep(τ) −T · r)2 (s, a) ∈τ
i"
REFERENCES,0.7134020618556701,"= min
r∈R
E
τ∼D  1"
REFERENCES,0.7154639175257732,"T 2 (Rep(τ)/T −r)2 (s, a) ∈τ
"
REFERENCES,0.7175257731958763,"= min
r∈R
1
T 2
E
τ∼D"
REFERENCES,0.7195876288659794,"h
(Rep(τ)/T −r)2 (s, a) ∈τ
i"
REFERENCES,0.7216494845360825,"= min
r∈R
E
τ∼D"
REFERENCES,0.7237113402061855,"h
(Rep(τ)/T −r)2 (s, a) ∈τ
i"
REFERENCES,0.7257731958762886,"=
E
τ∼D"
REFERENCES,0.7278350515463917,"
Rep(τ)/T | (s, a) ∈τ

,"
REFERENCES,0.7298969072164948,which depends on the trajectory distribution in dataset D.
REFERENCES,0.7319587628865979,"If we relax the assumption that all trajectories have the same length, the solution of the above least-
squares problem would be a weighted expectation as follows:"
REFERENCES,0.734020618556701,"bRθ⋆(s, a) = min
r∈R
E
τ∼D"
REFERENCES,0.7360824742268042,"h
(Rep(τ) −Tτ · r)2 (s, a) ∈τ
i"
REFERENCES,0.7381443298969073,"= min
r∈R
E
τ∼D"
REFERENCES,0.7402061855670103,"h
T 2
τ · (Rep(τ)/Tτ −r)2 (s, a) ∈τ
i = P"
REFERENCES,0.7422680412371134,"τ∈D:(s,a)∈τ Tτ · Rep(τ) P"
REFERENCES,0.7443298969072165,"τ∈D:(s,a)∈τ T 2τ
,"
REFERENCES,0.7463917525773196,"where Tτ denotes the length of trajectory τ. This solution can still be interpreted as a uniform reward
redistribution, in which the dataset distribution is prioritized by the trajectory length."
REFERENCES,0.7484536082474227,Published as a conference paper at ICLR 2022
REFERENCES,0.7505154639175258,"B
EXPERIMENT SETTINGS AND IMPLEMENTATION DETAILS"
REFERENCES,0.7525773195876289,"B.1
MUJOCO BENCHMARK WITH EPISODIC REWARDS"
REFERENCES,0.7546391752577319,"MuJoCo Benchmark with Episodic Rewards.
We adopt the same experiment setting as Gang-
wani et al. (2020) and compare our approach with baselines in a suite of MuJoCo locomotion bench-
mark tasks with episodic rewards. This experiment setting is commonly used in the literature (Mania
et al., 2018; Guo et al., 2018; Liu et al., 2019; Arjona-Medina et al., 2019; Gangwani et al., 2019;
2020). The environment simulator is based on OpenAI Gym (Brockman et al., 2016). These tasks
are long-horizon with maximum trajectory length T = 1000. We modify the reward function of
these environments to set up an episodic-reward setting. Formally, on non-terminal states, the agent
will receive a zero signal instead of the per-step dense rewards. The agent can obtain the episodic
feedback Rep(τ) at the last step of the rollout trajectory, in which Rep(τ) is computed by the sum-
mation of per-step instant rewards given by the standard setting."
REFERENCES,0.756701030927835,"Hyper-Parameter Configuration For MuJoCo Experiments.
In MuJoCo experiments, the pol-
icy optimization module of RRD is implemented based on soft actor-critic (SAC; Haarnoja et al.,
2018a). We evaluate the performance of our proposed methods with the same configuration of hyper-
parameters in all environments. The hyper-parameters of the back-end SAC follow the official tech-
nical report (Haarnoja et al., 2018b). We summarize our default configuration of hyper-parameters
as the following table:"
REFERENCES,0.7587628865979381,"Hyper-Parameter
Default Configuration"
REFERENCES,0.7608247422680412,"discount factor γ
0.99"
REFERENCES,0.7628865979381443,"# hidden layers (all networks)
2
# neurons per layer
256
activation
ReLU
optimizer (all losses)
Adam (Kingma & Ba, 2015)
learning rate
3 · 10−4"
REFERENCES,0.7649484536082474,"initial temperature αinit
1.0
target entropy
−dim(A)
Polyak-averaging coefficient
0.005
# gradient steps per environment step
1
# gradient steps per target update
1"
REFERENCES,0.7670103092783506,"# transitions in replay buffer
106
# transitions in mini-batch for training SAC
256
# transitions in mini-batch for training bRθ
256
# transitions per subsequence (K)
64
# subsequences in mini-batch for training bRθ
4"
REFERENCES,0.7690721649484537,Table 1: The hyper-parameter configuration of RRD in MuJoCo experiments.
REFERENCES,0.7711340206185567,"In addition to SAC, we also provide the implementations upon DDPG (Lillicrap et al., 2016) and
TD3 (Fujimoto et al., 2018) in our Github repository."
REFERENCES,0.7731958762886598,"B.2
ATARI BENCHMARK WITH EPISODIC REWARDS"
REFERENCES,0.7752577319587629,"Atari Benchmark with Episodic Rewards.
In addition, we conduct experiments in a suite of
Atari games with episodic rewards. The environment simulator is based on OpenAI Gym (Brockman
et al., 2016). Following the standard Atari pre-processing proposed by Mnih et al. (2015), we rescale
each RGB frame to an 84 × 84 luminance map, and the observation is constructed as a stack of 4
recent luminance maps. We modify the reward function of these environments to set up an episodic-
reward setting. Formally, on non-terminal states, the agent will receive a zero signal instead of the
per-step dense rewards. The agent can obtain the episodic feedback Rep(τ) at the last step of the
rollout trajectory, in which Rep(τ) is computed by the summation of per-step instant rewards given
by the standard setting."
REFERENCES,0.777319587628866,Published as a conference paper at ICLR 2022
REFERENCES,0.7793814432989691,"Hyper-Parameter Configuration For Atari Experiments.
In Atari experiments, the policy op-
timization module of RRD is implemented based on deep Q-network (DQN; Mnih et al., 2015). We
evaluate the performance of our proposed methods with the same configuration of hyper-parameters
in all environments. The hyper-parameters of the back-end DQN follow the technical report (Castro
et al., 2018). We summarize our default configuration of hyper-parameters as the following table:"
REFERENCES,0.7814432989690722,"Hyper-Parameter
Default Configuration"
REFERENCES,0.7835051546391752,"discount factor γ
0.99
# stacked frames in agent observation
4
# noop actions while starting a new episode
30"
REFERENCES,0.7855670103092783,"network architecture
DQN (Mnih et al., 2015)
optimizer for Q-values
Adam (Kingma & Ba, 2015)
learning rate for Q-values
6.25 · 10−5"
REFERENCES,0.7876288659793814,"optimizer for bRθ
Adam (Kingma & Ba, 2015)
learning rate for bRθ
3 · 10−4"
REFERENCES,0.7896907216494845,"exploration strategy
ϵ-greedy
ϵ decaying range - start value
1.0
ϵ decaying range - end value
0.01
# timesteps for ϵ decaying schedule
250000
# gradient steps per environment step
0.25
# gradient steps per target update
8000"
REFERENCES,0.7917525773195876,"# transitions in replay buffer
106
# transitions in mini-batch for training DQN
32
# transitions in mini-batch for training bRθ
32
# transitions per subsequence (K)
32
# subsequences in mini-batch for training bRθ
1"
REFERENCES,0.7938144329896907,Table 2: The hyper-parameter configuration of RRD in Atari experiments.
REFERENCES,0.7958762886597938,"B.3
AN ALTERNATIVE IMPLEMENTATION OF RANDOMIZED RETURN DECOMPOSITION"
REFERENCES,0.797938144329897,"Recall that the major practical barrier of the least-squares-based return decomposition method spec-
ified by LRD(θ) is its scalability in terms of the computation costs. The trajectory-wise episodic
reward is the only environmental supervision for reward modeling. Computing the loss function
LRD(θ) with a single episodic reward label requires to enumerate all state-action pairs along the
whole trajectory."
REFERENCES,0.8,"Theorem 1 motivates an unbiased implementation of randomized return decomposition that opti-
mizes LRD(θ) instead of LRand-RD(θ). By rearranging the terms of Eq. (10), we can obtain the
difference between LRand-RD(θ) and LRD(θ) as follows:"
REFERENCES,0.8020618556701031,"LRand-RD(θ) −LRD(θ) =
Var
I∼ρT (·)"
REFERENCES,0.8041237113402062,"""
T
|I| X"
REFERENCES,0.8061855670103093,"t∈I
bRθ(st, at) # ."
REFERENCES,0.8082474226804124,"Note our sampling distribution ρT (·) defined in Eq. (7) refers to “sampling without replacement”
(Singh, 2003) whose variance can be estimated as follows:"
REFERENCES,0.8103092783505155,"Var
I∼ρT (·)"
REFERENCES,0.8123711340206186,"""
T
|I| X"
REFERENCES,0.8144329896907216,"t∈I
bRθ(st, at) #"
REFERENCES,0.8164948453608247,"= T 2 ·
E
I∼ρT (·) "
REFERENCES,0.8185567010309278,"T −K T
· P"
REFERENCES,0.8206185567010309,"t∈I

bRθ(st, at) −¯Rθ(I; τ)
2"
REFERENCES,0.822680412371134,"K(K −1)  ,"
REFERENCES,0.8247422680412371,"where ¯Rθ(I; τ) =
1
|I|
P"
REFERENCES,0.8268041237113402,"t∈I bRθ(st, at). Thus we can obtain an unbiased estimation of this variance"
REFERENCES,0.8288659793814434,"penalty by sampling a subsequence I. By subtracting this estimation from bLRand-RD(θ), we can"
REFERENCES,0.8309278350515464,Published as a conference paper at ICLR 2022
REFERENCES,0.8329896907216495,"obtain an unbiased estimation of LRD(θ). More specifically, we can use the following sample-based
loss function to substitute Eq. (13) in implementation:"
REFERENCES,0.8350515463917526,"bLRD(θ) =
1
M M
X j=1 "
REFERENCES,0.8371134020618557,"

Rep(τj) −Tj |Ij| X t∈Ij"
REFERENCES,0.8391752577319588,"bRθ(sj,t, aj,t)
2
 "
REFERENCES,0.8412371134020619,"|
{z
}
b
LRand-RD(θ) −1 M M
X j=1 "
REFERENCES,0.843298969072165,Tj(Tj −K)
REFERENCES,0.845360824742268,"|Ij|(|Ij| −1) ·
X t∈Ij"
REFERENCES,0.8474226804123711,"
bRθ(sj,t, aj,t) −
1
|Ij| X t∈Ij"
REFERENCES,0.8494845360824742,"bRθ(sj,t, aj,t)
2
 ."
REFERENCES,0.8515463917525773,"The above loss function can be optimized through the same mini-batch training paradigm as what is
presented in Algorithm 1."
REFERENCES,0.8536082474226804,"C
EXPERIMENTS ON ATARI BENCHMARK WITH EPISODIC REWARDS"
M,0.8556701030927835,"0M
2M
4M
6M
8M
10M
Timesteps 0 200 400 600 800 1000"
M,0.8577319587628865,Median Episodic Return
M,0.8597938144329897,Assault
M,0.8618556701030928,"0M
2M
4M
6M
8M
10M
Timesteps 0 500 1000 1500 2000 2500 3000"
M,0.8639175257731959,MsPacman
M,0.865979381443299,"0M
2M
4M
6M
8M
10M
Timesteps 20 16 12 8 4"
PONG,0.8680412371134021,"0
Pong"
M,0.8701030927835052,"0M
2M
4M
6M
8M
10M
Timesteps 0 1500 3000 4500 6000"
ROADRUNNER,0.8721649484536083,"7500
RoadRunner"
ROADRUNNER,0.8742268041237113,"RRD (ours)
RRD-
RD (ours)
IRCR
RUDDER"
ROADRUNNER,0.8762886597938144,"Figure 3: Learning curves on a suite of Atari benchmark tasks with episodic rewards. These curves
are plotted from 5 runs with random initializations. The shaded region indicates the standard devi-
ation. To make the comparison more clear, the curves are smoothed by averaging 10 most recent
evaluation points. We set up an evaluation point every 5 · 104 timesteps."
ROADRUNNER,0.8783505154639175,"Note that our proposed method does not restricts its usage to continuous control problems. It can
also be integrated in DQN-based algorithms to solve problems with discrete-action space. We eval-
uate the performance of our method built upon DQN in several famous Atari games. The reward
redistribution problem in these tasks is more challenging than that in MuJoCo locomotion bench-
mark since the task horizon of Atari is much longer. For example, the maximum task horizon in
Pong can exceed 20000 steps in a single trajectory. This setting highlights the scalability advantage
of our method, i.e., the objective of RRD can be optimized by sampling short subsequences whose
computation cost is manageable. The experiment results are presented in Figure 3. Our method
outperforms all baselines in 3 out of 4 tasks. We note that IRCR outperforms RRD in RoadRunner.
It may be because IRCR is non-parametric and thus does not suffer from the difficulty of processing
visual observations."
ROADRUNNER,0.8804123711340206,"D
VISUALIZING THE PROXY REWARDS OF RRD"
ROADRUNNER,0.8824742268041237,"0.08
0.00
0.08
0.16
0.24
0.32
0.40
Agent Forward Motion 1.5 0.0 1.5 3.0 4.5"
ROADRUNNER,0.8845360824742268,"Proxy Reward R (s,a)"
ROADRUNNER,0.8865979381443299,Ant-v2
ROADRUNNER,0.8886597938144329,"0.00
0.15
0.30
0.45
0.60
Agent Forward Motion 4.5 6.0 7.5 9.0 10.5 12.0"
ROADRUNNER,0.8907216494845361,HalfCheetah-v2
ROADRUNNER,0.8927835051546392,"0.030
0.015
0.000
0.015
0.030
0.045
0.060
Agent Forward Motion 0 1 2 3 4 5"
ROADRUNNER,0.8948453608247423,"6
Walker2d-v2"
ROADRUNNER,0.8969072164948454,"0.02
0.01
0.00
0.01
0.02
0.03
Agent Forward Motion 3.5 4.0 4.5 5.0 5.5 6.0"
ROADRUNNER,0.8989690721649485,Humanoid-v2
ROADRUNNER,0.9010309278350516,Figure 4: Visualization of the proxy rewards learned by RRD in MuJoCo locomotion tasks.
ROADRUNNER,0.9030927835051547,Published as a conference paper at ICLR 2022
ROADRUNNER,0.9051546391752577,"In MuJoCo locomotion tasks, the goal of agents is running towards a fixed direction. In Figure 4,
we visualize the correlation between per-step forward distance and the assigned proxy reward. We
uniformly collected 103 samples during the first 106 training steps. “Agent Forward Motion” denotes
the forward distance at a single step. “Proxy Reward bRθ(s, a)” denotes the immediate proxy reward
assigned at that step. It shows that the learned proxy reward has high correlation to the forward
distance at that step."
ROADRUNNER,0.9072164948453608,"E
AN ABLATION STUDY ON THE HYPER-PARAMETERS OF IRCR"
ROADRUNNER,0.9092783505154639,"We note that Gangwani et al. (2020) uses a different hyper-parameter configuration from the standard
SAC implementation (Haarnoja et al., 2018b). The differences exist in two hyper-parameters:"
ROADRUNNER,0.911340206185567,"Hyper-Parameter
Default Configuration"
ROADRUNNER,0.9134020618556701,"Polyak-averaging coefficient
0.001
# transitions in replay buffer
3 · 105
# transitions in mini-batch for training SAC
512"
ROADRUNNER,0.9154639175257732,Table 3: The hyper-parameters used by Gangwani et al. (2020) in MuJoCo experiments.
ROADRUNNER,0.9175257731958762,"To establish a rigorous comparison, we evaluate the performance of IRCR with the hyper-parameter
configuration proposed by Haarnoja et al. (2018b), so that IRCR and RRD use the same hyper-
parameters in their back-end SAC agents. The experiment results are presented in Figure 5."
ROADRUNNER,0.9195876288659793,0M 0.5M 1M 1.5M 2M 2.5M 3M
ROADRUNNER,0.9216494845360824,Timesteps 0 1000 2000 3000 4000 5000 6000
ROADRUNNER,0.9237113402061856,Average Episodic Return
ROADRUNNER,0.9257731958762887,Ant-v2
ROADRUNNER,0.9278350515463918,0M 0.5M 1M 1.5M 2M 2.5M 3M
ROADRUNNER,0.9298969072164949,Timesteps 0 2000 4000 6000 8000 10000 12000
ROADRUNNER,0.931958762886598,HalfCheetah-v2
ROADRUNNER,0.934020618556701,0M 0.5M 1M 1.5M 2M 2.5M 3M
ROADRUNNER,0.9360824742268041,Timesteps 0 1000 2000 3000 4000 5000 6000
ROADRUNNER,0.9381443298969072,Walker2d-v2
ROADRUNNER,0.9402061855670103,0M 0.5M 1M 1.5M 2M 2.5M 3M
ROADRUNNER,0.9422680412371134,Timesteps 0 1000 2000 3000 4000 5000 6000
ROADRUNNER,0.9443298969072165,Humanoid-v2
ROADRUNNER,0.9463917525773196,0M 0.5M 1M 1.5M 2M 2.5M 3M
ROADRUNNER,0.9484536082474226,Timesteps 400 320 240 160 80 0
ROADRUNNER,0.9505154639175257,Average Episodic Return
ROADRUNNER,0.9525773195876288,Reacher-v2
ROADRUNNER,0.954639175257732,0M 0.5M 1M 1.5M 2M 2.5M 3M
ROADRUNNER,0.9567010309278351,Timesteps 0 60 120 180 240 300
ROADRUNNER,0.9587628865979382,"360
Swimmer-v2"
ROADRUNNER,0.9608247422680413,0M 0.5M 1M 1.5M 2M 2.5M 3M
ROADRUNNER,0.9628865979381444,Timesteps 0 600 1200 1800 2400 3000
ROADRUNNER,0.9649484536082474,"3600
Hopper-v2"
ROADRUNNER,0.9670103092783505,0M 0.5M 1M 1.5M 2M 2.5M 3M
ROADRUNNER,0.9690721649484536,Timesteps 25000 50000 75000
ROADRUNNER,0.9711340206185567,100000
ROADRUNNER,0.9731958762886598,125000
ROADRUNNER,0.9752577319587629,150000
ROADRUNNER,0.977319587628866,HumanoidStandup-v2
ROADRUNNER,0.979381443298969,"RRD (ours)
IRCR
IRCR (ablation)"
ROADRUNNER,0.9814432989690721,"Figure 5: An ablation study on the hyper-parameter configuration of IRCR. The curves of “IRCR”
refer to the performance of IRCR using the hyper-parameter setting proposed by Gangwani et al.
(2020).
The curves of “IRCR (ablation)” refer to the performance of IRCR using the hyper-
parameters stated in Table 1. All curves are plotted from 30 runs with random initializations."
ROADRUNNER,0.9835051546391752,"As shown in Figure 5, the hyper-parameters tuned by Gangwani et al. (2020) is more stable in most
environments. Although using hyper-parameters stated in Table 1 can improve the performance in
some cases, the overall performance cannot outperform RRD."
ROADRUNNER,0.9855670103092784,"F
RELATED WORK"
ROADRUNNER,0.9876288659793815,"Delayed Feedback.
Tackling environmental delays is a long-lasting problem in reinforcement
learning and control theory (Nilsson et al., 1998; Walsh et al., 2009; Zhou et al., 2018; 2019a; H´eliou
et al., 2020; Nath et al., 2021; Tang et al., 2021). In real-world applications, almost all environmental
signals have random delays (Schuitema et al., 2010; Hester & Stone, 2013; Amuru & Buehrer, 2014;
Lei et al., 2020), which is a fundamental challenge for the designs of RL algorithms. A classical
method to handle delayed signals is stacking recent observations within a small sliding window as"
ROADRUNNER,0.9896907216494846,Published as a conference paper at ICLR 2022
ROADRUNNER,0.9917525773195877,"the input for decision-making (Katsikopoulos & Engelbrecht, 2003). This simple transformation
can establish a Markovian environment formulation, which is widely used to deal with short-term
environmental delays (Mnih et al., 2015). Many recent works focus on establishing sample-efficient
off-policy RL algorithm that is adaptive to delayed environmental signals (Bouteiller et al., 2021;
Han et al., 2021). In this paper, we consider an extreme delay of reward signals, which is a harder
problem setting than short-term random delays."
ROADRUNNER,0.9938144329896907,"Reward Design.
The ability of reinforcement learning agents highly depends on the designs of
reward functions. It is widely observed that reward shaping can accelerate learning (Mataric, 1994;
Ng et al., 1999; Devlin et al., 2011; Wu & Tian, 2017; Song et al., 2019). Many previous works
study how to automatically design auxiliary reward functions for efficient reinforcement learning. A
famous paradigm, inverse reinforcement learning (Ng & Russell, 2000; Fu et al., 2018), considers
to recover a reward function from expert demonstrations. Several works consider to learn a reward
function from expert labels of preference comparisons (Wirth et al., 2016; Christiano et al., 2017;
Lee et al., 2021), which is a form of weak supervision. Another branch of work is learning an
intrinsic reward function from experience that guides the agent to maximize extrinsic objective (Sorg
et al., 2010; Guo et al., 2016). Such an intrinsic reward function can be learned through meta-
gradients (Zheng et al., 2018; 2020) or self-imitation (Guo et al., 2018; Gangwani et al., 2019). A
recent work (Abel et al., 2021) studies the expressivity of Markov rewards and proposes algorithms
to design Markov rewards for three notions of abstract tasks."
ROADRUNNER,0.9958762886597938,"Temporal Credit Assignment.
Another methodology for tackling long-horizon sequential deci-
sion problems is assigning credits to emphasize the contribution of each single step over the temporal
structure. These methods directly consider the specification of the step values instead of manipu-
lating the reward function. The simplest example is studying how the choice of discount factor γ
affects the policy learning (Petrik & Scherrer, 2008; Jiang et al., 2015; Fedus et al., 2019). Several
previous works consider to extend the λ-return mechanism (Sutton, 1988) to a more generalized
credit assignment framework, such as adaptive λ (Xu et al., 2018) and pairwise weights (Zheng
et al., 2021). RUDDER (Arjona-Medina et al., 2019) proposes a return-equivalent formulation for
the credit assignment problem and establish theoretical analyses (Holzleitner et al., 2021). Aligned-
RUDDER (Patil et al., 2020) considers to use expert demonstrations for higher sample efficiency.
Harutyunyan et al. (2019) opens up a new family of algorithms, called hindsight credit assignment,
that attributes the credits from a backward view."
ROADRUNNER,0.9979381443298969,"Value Decomposition.
This paper follows the paradigm of reward redistribution that aims to de-
compose the return value to step-wise reward signals. The simplest mechanism in the literature
is the uniform reward redistribution considered by Gangwani et al. (2020). It can be effectively
integrated with off-policy reinforcement learning and thus achieves state-of-the-art performance in
practice. Least-squares-based reward redistribution is investigated by Efroni et al. (2021) from a
theoretical point of view. Chatterji et al. (2021) extends the theoretic results to the logistic reward
model. In game theory and multi-agent reinforcement learning, a related problem is how to attribute
a global team reward to individual rewards (Nguyen et al., 2018; Du et al., 2019; Wang et al., 2020),
which provide agents incentives to optimize the global social welfare (Vickrey, 1961; Clarke, 1971;
Groves, 1973; Myerson, 1981). A promising paradigm for multi-agent credit assignment is using
structural value representation (Sunehag et al., 2018; Rashid et al., 2018; Son et al., 2019; B¨ohmer
et al., 2020; Wang et al., 2021a;b), which supports end-to-end temporal difference learning. This
paradigm transforms the value decomposition to the structured prediction problem. A future work
is integrating prior knowledge of the decomposition structure as many previous works for structured
prediction (Chen et al., 2020; Tavakoli et al., 2021)."
