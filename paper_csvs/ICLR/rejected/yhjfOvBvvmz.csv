Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.003424657534246575,"Hierarchical reinforcement learning (RL) usually requires skills that can be appli-
cable to various downstream tasks. While many recent works have been proposed
to learn such skills in supervised or unsupervised manners, the learned skills are
often entangled, which makes it difﬁcult to interpret those skills. To alleviate
this, we propose a novel WEakly-supervised learning approach for learning Dis-
entangled and Interpretable Skills (WEDIS) from the continuous latent represen-
tations of trajectories. We accomplish this by extending a trajectory variational
autoencoder (VAE) to impose an inductive bias with weak labels, which explicitly
enforces the trajectory representations to be disentangled into factors of interest
that we intend the model to learn. Given the latent representations as skills, a
skill-based policy network is trained to generate similar trajectories to the learned
decoder of the trajectory VAE. Additionally, we propose to train a policy network
with single-step transitions and perform the trajectory-level behaviors at test time
with the knowledge on the skills, which simpliﬁes the training procedure for the
policy. With a sample-efﬁcient planning strategy based on the skills, we show that
our method is effective in solving the hierarchical RL problems in experiments on
several challenging navigation tasks with a long horizon and sparse rewards."
INTRODUCTION,0.00684931506849315,"1
INTRODUCTION"
INTRODUCTION,0.010273972602739725,"Deep reinforcement learning (RL) has achieved great success for various applications, ranging from
playing games (Mnih et al., 2013; Silver et al., 2016) to complex locomotion and robots control
(Lillicrap et al., 2015; Schulman et al., 2015; 2017; Haarnoja et al., 2017). However, several chal-
lenges such as sparse rewards or inadaptability to unlearned tasks still hinder its practical usages in
real-world problems. To alleviate these challenges, hierarchical RL (Sutton et al., 1999; Dietterich,
2000) has been studied where an agent pre-learns reusable skills from prior experiences and hier-
archically solve higher-level problems by combining the skills. Two issues need to be resolved for
the successful deployment of the hierarchical RL; how to learn useful skills and how to effectively
make use of the skills for various downstream tasks."
INTRODUCTION,0.0136986301369863,"A possible approach for skills that can be applicable to various downstream tasks is to learn without
task-speciﬁc rewards (Eysenbach et al., 2018). Another way to achieve the useful skills is to make
them predictable. To learn those skills, (Co-Reyes et al., 2018; Sharma et al., 2019) proposed to
combine model-free and model-based RL approaches, where a skill-based predictive model, a dy-
namics model over the latent space, is trained together with a skill-based policy network.By using
the predictive model for model-based planning during testing time, these works showed to efﬁciently
solve various downstream tasks without the need to learn additional higher-level policies. However,
since they did not consider how the skill is embedded into the latent space, the factors consisting
of the skill often are entangled when the skill is a continuous latent variable. Compared to the en-
tangled one, the skill consisting of disentangled factors has several advantages in its applicability in
that the factors can be separately interpreted and handled."
INTRODUCTION,0.017123287671232876,"In this paper, we introduce a novel WEakly-supervised learning approach for learning Disentangled
and Interpretable Skills (WEDIS) from the continuous latent representations of trajectories that are
composed of several generative factors, e.g., speed, direction, and curvature. To this end, we propose"
INTRODUCTION,0.02054794520547945,Under review as a conference paper at ICLR 2022
INTRODUCTION,0.023972602739726026,"a weakly-supervised trajectory variational autoencoder (WET-VAE) model that is an extension of
the trajectory VAE (Co-Reyes et al., 2018) consisting of a recurrent neural network (RNN). We
leverage the weak labels (Margonis et al., 2020) to enforce an inductive bias on the model, which
explicitly enforces the trajectory representations to be disentangled into factors of interest that we
intend the model to learn. To train the WET-VAE, we ﬁrst synthetically generate a trajectory dataset
by the combination of several factors of interest, because the trajectories obtained by an online
exploration are likely to contain meaningless samples such as random walks. With the trajectory
dataset, the WET-VAE model is trained apart from a policy network. It is worthy of noting that
while this is similar to imitation learning, our data acquisition is much simpler than collecting expert
demonstration."
INTRODUCTION,0.0273972602739726,"Sequentially, we train a skill-based policy network with the WET-VAE ﬁxed. Given the latent rep-
resentations as skills, the skill-based policy network is trained to generate similar trajectories with
the decoder of the WET-VAE by minimizing the KL divergence between two trajectory distribu-
tions. However, training a policy to generate a trajectory given a skill is difﬁcult since it is unlikely
to explore the corresponding trajectory in the training procedure. Instead, we propose to train the
policy network with the single-step transitions and perform the trajectory-level behaviors in the test
time, which can be achieved with the knowledge of the learned skills. This simpliﬁes the training
procedure of the policy, and also allows for a sample-efﬁcient large-scale planning strategy with the
scaled trajectories. In experiments in Mujoco Ant environment, we show that our disentangled and
interpretable skills are effective in solving challenging sparse reward and long-horizon problems in
2D navigation in mazes."
RELATED WORKS,0.030821917808219176,"2
RELATED WORKS"
RELATED WORKS,0.03424657534246575,"Numerous approaches (Sutton et al., 1999; Bacon et al., 2017; Florensa et al., 2017; Hausman et al.,
2018; Haarnoja et al., 2018; Eysenbach et al., 2018; Shankar et al., 2019; Shankar & Gupta, 2020;
Co-Reyes et al., 2018; Sharma et al., 2019) have explored on learning reusable skills in RL to solve
challenging long-horizon or sparse reward problems. (Sutton et al., 1999) pioneered a way to control
higher-level abstraction by introducing an option-framework, which learns low-level primitives in a
top-down manner. (Bacon et al., 2017) proposed an option-critic architecture that learns sub-policies
of options. Also, several works (Florensa et al., 2017; Hausman et al., 2018; Haarnoja et al., 2018)
introduced to learn skills with multiple tasks in a bottom-up manner. However, designing reward
functions still requires expert knowledge and such task-speciﬁc rewards may limit a generalization
ability of the agent to the downstream tasks. To overcome this issue, recent works (Eysenbach et al.,
2018; Achiam et al., 2018; Co-Reyes et al., 2018; Sharma et al., 2019; Campos et al., 2020) proposed
an unsupervised framework that does not require a hand-speciﬁed reward function."
RELATED WORKS,0.03767123287671233,"Model-based RL methods (Levine et al., 2016; Nagabandi et al., 2018; Chua et al., 2018; Ha &
Schmidhuber, 2018) aim to learn a dynamics model of the environment. While these works are
capable of solving unlearned tasks without the needs of an additional learning via planning through
the dynamics model, they are often at the risk of falling into over-ﬁtting due to a huge capacity of
the required data to explore the environment. Instead of learning the underlying dynamics, some
methods (Co-Reyes et al., 2018; Sharma et al., 2019) attempted to combine the model-free and
model-based RL for learning a skill-based predictive model and a skill-based policy. Despite the
improved results, they still suffer from the lack of the interpretability of the skills."
RELATED WORKS,0.0410958904109589,"Learning disentangled latent representations of factors of variation within dataset is beneﬁcial to
a variety of downstream tasks such as few-shot classiﬁcation and data generation, thanks to the
interpretability of the disentangled factors. (Higgins et al., 2016) proposed β-VAE, an unsupervised
method to learn the disentangled representations by modifying the weight of the KL-divergence
term of the VAE (Kingma & Welling, 2013; Rezende et al., 2014) greater than one. Afterwards,
while several variants (Kim & Mnih, 2018; Chen et al., 2018) improved the β-VAE by introducing a
total correlation (TC) term, (Locatello et al., 2019a) pointed out the inherent limitation of the purely
unsupervised approaches and emphasized the need of an inductive bias. Recent works (Locatello
et al., 2019b; Shu et al., 2019; Locatello et al., 2020; Margonis et al., 2020) proposed various forms
of weak supervision to encourage the inductive bias to learn the disentangled representations. While
there are various categories on the weak labels, we used them in terms of ones that 1) are roughly
divided into fewer classes and 2) can be obtained with programming by using the knowledge on the
factors without the need for manual labeling."
RELATED WORKS,0.04452054794520548,Under review as a conference paper at ICLR 2022
PRELIMINARIES,0.04794520547945205,"3
PRELIMINARIES"
PRELIMINARIES,0.05136986301369863,"Consider a Markov decision process (MDP) (S, A, P, r, ρ0, γ), where S is a set of states, A is a set
of action, P : S × A × S →R+ is a transition probability distribution, r : S × A →R is a reward
function, ρ0 : S →R+ is an initial state distribution and γ ∈(0, 1) is a discount factor. We denote
a stochastic policy as π : S × A →R+. RL has a goal of maximizing the expected discounted sum
of rewards for an episode horizon HE:"
PRELIMINARIES,0.0547945205479452,"η(π) = Eπ[ HE
X"
PRELIMINARIES,0.05821917808219178,"t=0
γtr(st, at)]
(1)"
PRELIMINARIES,0.06164383561643835,"Variational autoencoder (VAE) optimizes variational the lower bound of the marginal likelihood of
dataset. Given an observed datapoint x, the variational lowerbound is deﬁned as :"
PRELIMINARIES,0.06506849315068493,"log pθ(x) ≥L(θ, φ ; x) = Eqφ(z|x)[log pθ(x|z)] −DKL(qφ(z|x)∥p(z)),
(2)"
PRELIMINARIES,0.0684931506849315,"where p(z) is a prior distribution of a latent variable z, the decoder pθ(x|z) is a generative model
given a latent z parameterized by θ, and the encoder qφ(z|x) is an approximate posterior distribution
parameterized by φ. In Equation 2, the ﬁrst term is the reconstruction term of the autoencoder, and
the second term is the KL divergence regularization. In our work, we will focus on the aspect of the
generative model of the decoder."
WEAKLY SUPERVISED LEARNING OF DISENTANGLED AND,0.07191780821917808,"4
WEAKLY SUPERVISED LEARNING OF DISENTANGLED AND
INTERPRETABLE SKILL (WEDIS)"
WEAKLY SUPERVISED LEARNING OF DISENTANGLED AND,0.07534246575342465,"Our framework consists of three stages; 1) generating trajectory training data with factors of interest
2) training the WET-VAE model, whose decoder is used for the predictive model and 3) training a
policy network to generate the similar trajectories with the predictive model conditioned on skills.
The generation process of the trajectory dataset is explained in Appendix A.1.1 due to the lack of
space. As a notation, we will use superscript for factors and subscript for time steps. The WEDIS
algorithm is summarized in Figure 2."
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.07876712328767123,"4.1
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY ⋯"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.0821917808219178,"Encoder
Decoder ⋯ ⋮ ⋯ ⋯ ⋮ ⋮"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.08561643835616438,"Figure 1: Computation graph for the WET-
VAE model. For weak supervision, we add a
set of weak labels {y1, ..., yM } to the model.
These labels encourage the model to learn a
disentangled trajectory representation z that
consists of corresponding factors. We assume
the ﬁxed initial state s0 at the origin."
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.08904109589041095,"To learn the temporally extended behaviors, (Co-
Reyes et al., 2018) proposed a trajectory VAE
model consisting of the RNN architecture. The tra-
jectory VAE learns latent representations of trajec-
tories, which will be used as skills for a policy.
However, this model, which learns the represen-
tations in the unsupervised manner, does not con-
sider which factors of variation of a trajectory are
embedded in the latent space.
Thus, the factors
that are often entangled make the interpretation of
the representations difﬁcult, exposing limitations in
further applicability of the learned skills. To ad-
dress this, we propose a weakly-supervised trajec-
tory VAE (WET-VAE) model that leverages an in-
ductive bias in the form of weak supervision (Mar-
gonis et al., 2020) to explicitly enforce the model to
learn the disentangled representations consisting of
desired factors, yielding interpretable skills."
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.09246575342465753,"Consider a latent-variable generative model p(τ|z)
to generate a trajectory τ given a latent variable z. We assume the ﬁxed initial state s0 at the ori-
gin as when given other initial states we can obtain the next states with a linear translation based
on the initial states such that p(s|s0, z) = p(s −s0|z). Considering M factors of interest to gen-
erate trajectories, the weak supervision can be provided by simply adding a set of M weak la-
bels y = {y1, ..., yM } to the generative model, where each label ym is one-hot encoded vector"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.0958904109589041,Under review as a conference paper at ICLR 2022
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.09931506849315068,"for each factor. The idea is that a latent representation z ∈RM , which can generate the trajecto-
ries based on the M disentangled generative factors, should also be able to reconstruct the factors.
Assuming that the trajectory and the factors that are represented as the multiple labels satisfy con-
ditional independence with respect to a given z, the generative model is extended with the labels
p(τ, y|z) = p(τ|z)p(y1|z)· · ·p(yM |z). Then, the variational lower bound of the marginal joint
distribution p(τ, y) can be formulated as follows:"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.10273972602739725,"L(θ, φ ; τ, y) = Eqφ(z|τ,y)[log pθ(τ, y|z)] −DKL(qφ(z|τ, y)∥p(z))"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.10616438356164383,"= Eqφ(z|τ,y)[ T
X"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.1095890410958904,"t=1
log pθ(st|s1:t−1, z) + M
X"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.11301369863013698,"m=1
log pθ(ym|z)] −DKL(qφ(z|τ, y)∥p(z)),"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.11643835616438356,"(3)
where pθ(τ|z) = pθ(s1|z)pθ(s2|s1, z) · · · pθ(sT|s1, s2, ..., sT−1, z). Since pθ(ym|z) can be under-
stood as a classiﬁer for each factor, the factors should be distinctly embedded in a latent representa-
tion z for high classiﬁcation probability. As a result, this enforces a disentangled representation of
the factors."
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.11986301369863013,"Practically, the scales of the values of the log-likelihoods of the states and labels are different due
to the difference in dimensionality. To ﬁll the gap, we introduce a balancing weight γ inspired by
(Margonis et al., 2020). We also use a weight β > 1 to emphasize the KL divergence term for better
disentanglement in the spirit of the β-VAE (Higgins et al., 2016). Then, the ﬁnal objective function
becomes:"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.1232876712328767,"L(θ, φ ; τ, y, β, γ)"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.1267123287671233,"= Eqφ(z|τ,y)[ T
X"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.13013698630136986,"t=1
log pθ(st|s1:t−1, z) + γ · M
X"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.13356164383561644,"m=1
log pθ(ym|z)] −β · DKL(qφ(z|τ, y)∥p(z))
(4)"
LEARNING DISENTANGLED AND INTERPRETABLE REPRESENTATIONS OF TRAJECTORY,0.136986301369863,"The WET-VAE model is trained to maximize Equation 4. To handle the sequential data, we use
the RNN architecture with LSTMs as in Figure 1. With the support of the weak supervision, this
model can learn the disentangled representations of trajectories that consist of factors of variation
contributing over different time steps."
LEARNING POLICY WITH LEARNED SKILLS,0.1404109589041096,"4.2
LEARNING POLICY WITH LEARNED SKILLS"
OPTIMIZATION OF POLICY NETWORK TO IMITATE PREDICTIVE MODEL,0.14383561643835616,"4.2.1
OPTIMIZATION OF POLICY NETWORK TO IMITATE PREDICTIVE MODEL"
OPTIMIZATION OF POLICY NETWORK TO IMITATE PREDICTIVE MODEL,0.14726027397260275,"After training of the WET-VAE, its decoder pθ(τ|z) is used as a skill-based predictive model of tra-
jectories. To learn the disentangled and interpretable skills, the policy network is trained to generate
similar trajectories with the predictive model based on the skills. It can be accomplished by opti-
mizing the policy to minimize the KL divergence between the distributions of trajectories generated
by the two networks.
min
ψ
Ep(z)[DKL(pψ(τ|z)∥pθ(τ|z))],
(5)"
OPTIMIZATION OF POLICY NETWORK TO IMITATE PREDICTIVE MODEL,0.1506849315068493,"where ψ is a parameter of the skill-based policy network πψ(a|τ, z) and pψ(τ|z) is the distribution
of the trajectories generated by the policy interacting with the environment, which can be computed
as pψ(τ|z) =
R
···
R"
OPTIMIZATION OF POLICY NETWORK TO IMITATE PREDICTIVE MODEL,0.1541095890410959,"a∈A[QT
t=1 p(st|st−1, at)πψ(at|s0:t−1, z)] da1· · ·daT. Since inferring pψ(τ|z)
is intractable due to the lack of knowledge on the transition probability distribution p(st|st−1, at)
of the underlying dynamics in the environment, Equation 5 cannot be optimized by direct backprop-
agation with respect to ψ. Instead, following (Co-Reyes et al., 2018), we optimize the skill-based
policy network with the RL method by rewriting (see Appendix A.2.2) the equation as follows:"
OPTIMIZATION OF POLICY NETWORK TO IMITATE PREDICTIVE MODEL,0.15753424657534246,"max
ψ
Epψ(τ,z)[log pθ(τ|z)] + H(pψ(τ|z)),
(6)"
OPTIMIZATION OF POLICY NETWORK TO IMITATE PREDICTIVE MODEL,0.16095890410958905,"where pψ(τ, z) = pψ(τ|z)p(z) and H(pψ(τ|z)) is the entropy of the trajectories generated by pol-
icy given skills. By using the log-likelihood log pθ(τ|z) calculated by the predictive model for a
trajectory explored by the policy as a reward function, we can optimize Equation 6 with conven-
tional model-free RL algorithms (Schulman et al., 2015; 2017; Haarnoja et al., 2017) with entropy
regularization. In our implementation, we adopted the soft actor-critic (SAC) (Haarnoja et al., 2017)
algorithm that includes the entropy regularization as a part of optimization."
OPTIMIZATION OF POLICY NETWORK TO IMITATE PREDICTIVE MODEL,0.1643835616438356,Under review as a conference paper at ICLR 2022
OPTIMIZATION OF POLICY NETWORK TO IMITATE PREDICTIVE MODEL,0.1678082191780822,"Note that in contrast to (Co-Reyes et al., 2018) that simultaneously optimizes both the trajectory
VAE and the policy network with trajectory samples collected from an exploration, our method
increases stability in the training since the pre-trained decoder provides reliably ﬁxed rewards."
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.17123287671232876,"4.2.2
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS"
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.17465753424657535,"Given a skill, a policy network needs to explore the trajectory similar to the predictive model to
receive a reward in Equation 6. However, it is very unlikely to ﬁnd all trajectories corresponding to
each skill by an exploration, which makes the training difﬁcult. To overcome this, we propose to
train the policy network with single-step transitions instead of the full trajectories, and perform the
trajectory-level behaviors at test time. This can be achieved by exploiting the known knowledge on
the factors since the factors of our disentangled skills are interpretable."
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.1780821917808219,"Consider a latent z ∈Z = (Zsingle, Zmulti) ⊆RM1+M2 that can be separated to z single ∈
Zsingle ⊆RM1 contributing to single-step transition and z multi ∈Zmulti ⊆RM2 contributing
over multiple time steps. For example, while speed and direction can be included in Zsingle, curva-
ture and acceleration can be included in Zmulti. As a trajectory consists of a sequence of single-step
transitions, we can generate the same trajectory by a latent z single in combination with z multi. That
is, with the known relations of the factors, we can compute z single of the next time step, which has
the same effect of the execution of the full latent z. To this end, we introduce relation functions f
to relate the relevant factors. For a mth factor z m of z single, the relation function for the factor can
be expressed as z m
t+1 = f m(zm
t , zmulti) and properly chosen by their relationships. For instance, we
can set a relation function for the speed factor together with the acceleration factor such as z speed
t+1
=
f speed(zspeed
t
, zacc) = z speed
t
+ weight × z acc, where the weight can be properly chosen by testing
the decoder and policy heuristically after training."
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.1815068493150685,"In this way, we train the policy network with z single over single-step transitions in Equation 6, and
make use of the full skill z with the relation functions at test time. As the single-step transition does
not require to handle the temporal information, we use a feedforward network for the policy instead
of a RNN."
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.18493150684931506,"Algorithm 1: WEDIS
Require: M generative factors, weak labeling criteria
Generate: Trajectory dataset by combination of the
factors D ←{τ}N
n=1 = {s0, ..., sT}N
n=1
Initialize: parameters φ (encoder), θ (decoder),
ψ (actor), ¯ψ (critic), ˆψ (value function)
while Training do
// WET-VAE training
Sample trajectory batch B ∼D
Compute labels {y1, ..., yM }B
Optimize φ and θ by Equation 4
end
Test: Check factors in z
while Training do
// policy training
Sample z single from prior
Set z = (z single, z multi) where z multi = (0, ..., 0)
Execute actions a ∼πψ(a|s, z single)
Collect the samples in replay buffer R
Sample transition batch {st, at, st+1}B ∼R
Compute reward r = log pθ(st+1|st, z)
Optimize ψ, ¯ψ and ˆψ with the SAC by Equation 6
end
Test: Find relation functions for each factor in z single"
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.18835616438356165,Imitating
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.1917808219178082,(a) Generation of Training Trajectories
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.1952054794520548,"Trajectory
Generator"
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.19863013698630136,"Factors of Interest
(e.g. Speed, Direction, Curvature)"
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.20205479452054795,"Trajectories
(Generated)"
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.2054794520547945,Dataset
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.2089041095890411,(b) Training of WET-VAE
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.21232876712328766,"Encoder
Decoder"
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.21575342465753425,"Latent
Representation"
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.2191780821917808,(Skill)
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.2226027397260274,(c) Training of Policy
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.22602739726027396,Trajectories
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.22945205479452055,(Actual)
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.2328767123287671,Policy
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.2363013698630137,Training Batch
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.23972602739726026,Conditioning
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.24315068493150685,"Figure 2: Illustration of WEDIS algorithm. Two networks are trained separately. After the training
procedure of the two networks, we check the embedded factors by the latent traversal and ﬁnd the
relation functions by heuristically testing the WET-VAE decoder and policy."
TRAINING POLICY WITH SINGLE-STEP TRANSITIONS,0.2465753424657534,Under review as a conference paper at ICLR 2022
PLANNING WITH TRAJECTORY SCALING,0.25,"5
PLANNING WITH TRAJECTORY SCALING"
PLANNING WITH TRAJECTORY SCALING,0.2534246575342466,Algorithm 2: MPC with trajectory scaling
PLANNING WITH TRAJECTORY SCALING,0.2568493150684932,"Require: predictive model pθ(τ|s, z), policy πψ(a|s, z single),
M relation functions f m for each z m in z single, reward function,
episode horizon HE, primitive horizon Hz, trajectory length T,
planning horizon HP, initial state s0, sample size N
for i ←1 to HE/(Hz × T) do"
PLANNING WITH TRAJECTORY SCALING,0.2602739726027397,"ˆs0 ←s0
Sample latent sequences {z1, .., zHP}N
n=1 from a distribution
for j ←1 to HP do
// for all N samples
τj = {s1, ..., sT} ∼pθ(τ|ˆs0, zj)
Compute distances between the states, {∆1, ..., ∆T}
τ Hz
j
= {s0 + Hz · ∆1, ..., s0 + Hz · (∆1 + · · · + ∆T)}
ˆs0 ←sHz
T
// the last state of τ Hz
j
end
Evaluate the rewards of the scaled trajectory sequences
Choose the ﬁrst latent z ∗
1 of the best trajectory
(z single, z multi) ←z ∗
1
for t ←1 to T do"
PLANNING WITH TRAJECTORY SCALING,0.2636986301369863,for k ←1 to Hz do
PLANNING WITH TRAJECTORY SCALING,0.2671232876712329,"Execute action a ∼πψ(a|s(t−1)·Hz+(k−1), z single)
end
{z m}M1
m=1 ←{f m(z m, z multi)}M1
m=1
z single ←(z m)M1
m=1
end
s0 ←sT ·Hz
end"
PLANNING WITH TRAJECTORY SCALING,0.2705479452054795,(a) Predicted trajectory for 𝑇𝑇=3
PLANNING WITH TRAJECTORY SCALING,0.273972602739726,"𝑝𝑝(𝜏𝜏|𝑠𝑠, 𝑧𝑧)"
PLANNING WITH TRAJECTORY SCALING,0.2773972602739726,× 𝐻𝐻𝑧𝑧
PLANNING WITH TRAJECTORY SCALING,0.2808219178082192,× 𝐻𝐻𝑧𝑧
PLANNING WITH TRAJECTORY SCALING,0.2842465753424658,× 𝐻𝐻𝑧𝑧
PLANNING WITH TRAJECTORY SCALING,0.2876712328767123,Scaling by 𝐻𝐻𝑧𝑧
PLANNING WITH TRAJECTORY SCALING,0.2910958904109589,(b) Scaled trajectory for planning
PLANNING WITH TRAJECTORY SCALING,0.2945205479452055,"𝜋𝜋(𝑎𝑎|𝑠𝑠, 𝑧𝑧0
𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠)"
PLANNING WITH TRAJECTORY SCALING,0.2979452054794521,"𝐻𝐻𝑧𝑧steps
𝜋𝜋(𝑎𝑎|𝑠𝑠, 𝑧𝑧1
𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠)
𝐻𝐻𝑧𝑧steps"
PLANNING WITH TRAJECTORY SCALING,0.3013698630136986,"𝜋𝜋(𝑎𝑎|𝑠𝑠, 𝑧𝑧2
𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠)
𝐻𝐻𝑧𝑧steps"
PLANNING WITH TRAJECTORY SCALING,0.3047945205479452,(c) Actual trajectory
PLANNING WITH TRAJECTORY SCALING,0.3082191780821918,"𝑧𝑧= [𝑧𝑧0
𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠, 𝑧𝑧𝑚𝑚𝑚𝑚𝑚𝑚𝑚𝑚𝑚𝑚] 𝑧𝑧𝑡𝑡"
PLANNING WITH TRAJECTORY SCALING,0.3116438356164384,"𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠= 𝑓𝑓(𝑧𝑧𝑡𝑡−1
𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠, 𝑧𝑧𝑚𝑚𝑚𝑚𝑚𝑚𝑚𝑚𝑚𝑚)"
PLANNING WITH TRAJECTORY SCALING,0.3150684931506849,Executing with 𝑧𝑧 𝑧𝑧= 𝑧𝑧1
PLANNING WITH TRAJECTORY SCALING,0.3184931506849315,"𝑧𝑧𝑀𝑀1
𝑧𝑧𝑀𝑀1+1 ⋯
⋯"
PLANNING WITH TRAJECTORY SCALING,0.3219178082191781,𝑧𝑧𝑀𝑀1+𝑀𝑀2
PLANNING WITH TRAJECTORY SCALING,0.3253424657534247,𝑧𝑧𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠
PLANNING WITH TRAJECTORY SCALING,0.3287671232876712,𝑧𝑧𝑚𝑚𝑚𝑚𝑚𝑚𝑚𝑚𝑚𝑚
PLANNING WITH TRAJECTORY SCALING,0.3321917808219178,"Figure 3: Illustration of trajectory scaling. This trajectory scaling provides large scale planning that
is beneﬁcial to solving long-horizon problems."
PLANNING WITH TRAJECTORY SCALING,0.3356164383561644,"After the sequential training of the predictive model and policy network, we can solve hierarchical
RL problems without any additional learning at test time via model-based planning. For the model-
based planning, we employ the model-predictive control (MPC) method (Garcia et al., 1989). With
a dynamics model pθ(st+1 | st, a) of the environment, the MPC planner generates several numbers
of trajectory samples τ = {s0, a1, ..., sHP} for a ﬁnite planning horizon HP, and then evaluates
each trajectory according a reward function given for a task. After choosing the ﬁrst action of the
best trajectory maximizing the planning rewards, the agent executes the chosen action and the MPC
planner repeats iteratively this procedure on the next state until the episode horizon HE. Using the
predictive model pθ(τ | z), we can follow the MPC strategy over the latent space Z instead of the
action space A. In this strategy, we ﬁrst sample sequences of latents {z1, z2, ..., zHP} and evaluate
the latent sequences based on rewards of the trajectories generated by the predictive model given the
latents, where each latent generates sub-trajectory of length T."
PLANNING WITH TRAJECTORY SCALING,0.339041095890411,"Even though we can perform the trajectory-level planning based on this predictive model, the scale
of the movement lengths from actions of an agent is limited due to its inherent design speciﬁcation,
which generates trivial trajectories with small scales. To perform planning with a meaningful scale
of trajectories, we propose a trajectory scaling method. In contrast to a RNN policy that processes
temporal information at every time step, our feedforward policy network can consistently perform
the single-step transition given a skill z single from z. By using this, we hold on z single for Hz steps
and change it by the relation functions at every H th
z
step, which generates scaled trajectories by Hz
times. In the case of the predicted trajectories pθ(τ|z) that are simulated for planning, we can simply
scale the trajectories by scaling each transition distance. This trajectory scaling method provides a
large-scale planning strategy that can plan HP ×Hz ×T steps and execute actions over Hz ×T steps
for each skill, which is beneﬁcial to solving long-horizon problems with high sample-efﬁciency by
reducing the maximum planning horizon to HE/(Hz ×T). Figure 3 summarizes the MPC procedure
with trajectory scaling."
PLANNING WITH TRAJECTORY SCALING,0.3424657534246575,Under review as a conference paper at ICLR 2022
EXPERIMENTS,0.3458904109589041,"6
EXPERIMENTS"
EXPERIMENTS,0.3493150684931507,"In this section, we ﬁrst provide training details and qualitative results of the WET-VAE and the
policy. Then, we test our algorithm on goal navigation tasks in mazes in the Mujoco (Todorov et al.
(2012); Brockman et al. (2016)) Ant environment (Figure 14), which are challenging hierarchical
RL problems. For details of the generation process of the trajectory dataset and labeling criteria,
please see Appendix A.1.1. The videos of the learned skills and maze navigation are available at
https://sites.google.com/view/iclr2022-wedis."
QUALITATIVE RESULTS,0.3527397260273973,"6.1
QUALITATIVE RESULTS"
TRAINING OF THE WET-VAE NETWORK,0.3561643835616438,"6.1.1
TRAINING OF THE WET-VAE NETWORK"
TRAINING OF THE WET-VAE NETWORK,0.3595890410958904,"(a) 𝑇𝑇= 1
(b) 𝑇𝑇= 5
(c) 𝑇𝑇= 10
(d) 𝑇𝑇= 5"
TRAINING OF THE WET-VAE NETWORK,0.363013698630137,"𝑧𝑧1 (Direction)
𝑧𝑧2 (Speed)
𝑧𝑧3 (Curvature)"
TRAINING OF THE WET-VAE NETWORK,0.3664383561643836,"𝑧𝑧2 (Speed)
𝑧𝑧3 (S+D+C)
𝑧𝑧1 (No Effect)"
TRAINING OF THE WET-VAE NETWORK,0.3698630136986301,"Without weak supervision
With weak supervision"
TRAINING OF THE WET-VAE NETWORK,0.3732876712328767,"Figure 4: The latent traversals for each skill. (a) ∼(c) show the results of the WET-VAE model,
and (d) shows the results the trajectory VAE that does not use any weak supervision, where both
models are trained on trajectories with T = 5. Each row represents the trajectories generated by
latent variables changing values of corresponding dimensions of the latent variable from -1.5 to 1.5,
while keeping the others to zeros."
TRAINING OF THE WET-VAE NETWORK,0.3767123287671233,"Using the trajectory dataset generated with T = 5, we ﬁrst trained the WET-VAE with a three-
dimensional continuous latent variable z∈R3. We set the prior distribution of the latent variable as an
isotropic unit Gaussian distribution p(z) = N(0, 1). Also, for the posterior, we set the distribution
as a Gaussian distribution with a diagonal covariance matrix."
TRAINING OF THE WET-VAE NETWORK,0.3801369863013699,"To demonstrate the beneﬁt of the weak supervision in training the WET-VAE, we plot the latent
traversals of trajectories of the decoder in Figure 4. For each traversal, the latents are sampled by
changing values of one dimension from -1.5 to 1.5, while keeping values of the other dimensions to
zeros. Figure 4a shows single-step transitions based on each factor. While z 1 and z 2 clearly capture
the factors on the direction and speed, it looks like that z 3 has almost no effect. Since z 3 involves
the factor of the curvature, this result is reasonable. On the other hand, it is shown that z 3 controls
the curvature of trajectories when the trajectory is generated with T = 5 in Figure 4b. These results
imply that the three factors are suitably disentangled according to each dimension of the latent z.
Furthermore, even when the trajectory length for generation becomes greater than the length of the
training data, the contributions of the learned factors consistently remain as shown in Figure 4c with
T = 10. Note that the weak supervision can successfully disentangle factors that contribute over"
TRAINING OF THE WET-VAE NETWORK,0.3835616438356164,Under review as a conference paper at ICLR 2022
TRAINING OF THE WET-VAE NETWORK,0.386986301369863,"different time steps, where the factors of speed and direction affect at the each single step, and the
curvature factor affects across the multiple time-steps."
TRAINING OF THE WET-VAE NETWORK,0.3904109589041096,"On the other hand, Figure 4d shows that some factors of skills learned from the trajectory VAE,
which is trained without weak supervision, are entangled. While the speed factor seems to be disen-
tangled in the second dimension z 2, all factors seems to be still entangled in the third dimension z 3.
Moreover, no factor is embedded in the ﬁrst dimension z 1 as shown in the ﬁrst row, implying that
this element has no effect on the generation of the trajectories."
TRAINING OF THE POLICY NETWORK,0.3938356164383562,"6.1.2
TRAINING OF THE POLICY NETWORK"
TRAINING OF THE POLICY NETWORK,0.3972602739726027,"The policy network is trained in the Mujoco Ant environment with the rewards calculated by the
WET-VAE decoder, acting as the predictive model. Since the latent z consists of the factors of
speed, direction and curvature, it is separated to z single = (z speed, z dir) and z multi = z cur.
Thus in Equation 6, the policy is conditioned on z single and the predictive model is conditioned
on z = (z single, 0) to provide log-likelihoods for T = 1. Also, instead of the full states of the
agent, we restrict the states to compute the rewards to two dimensional x −y coordinates (Sharma
et al., 2019), which enables the policy to be trained with the predictive model trained with 2D trajec-
tories. For the relation functions, we set an identity function as f speed(zspeed
t
, zcur) for speed and
f dir(z dir
t
, z cur) = z dir
t
−0.2 · z cur for direction, where we found the weight by heuristic test after
training both networks."
TRAINING OF THE POLICY NETWORK,0.4006849315068493,"In Figure 5, we plot latent traversals of trajectories based on each skill, where each row show the
trajectories generated by the predictive model and the policy network, respectively. We plot the
speed and direction trajectories with HZ = 100 and T = 1, and the curvature trajectory with HZ =
40 and T = 5. We compare our algorithm against unsupervised skill learning methods (SeCTAR
(Co-Reyes et al., 2018), DADS (Sharma et al., 2019)), which are also model-based methods over the
latent space. We set HZ = 100 for DADS, and T = 50 for SeCTAR. According to the algorithmic
design, DADS ﬁxed a trajectory length T = 1, and SeCTAR ﬁxed a horizon HZ = 1. For WEDIS,
given each skill, it is shown that the actual trajectories are similar to the corresponding predictive
trajectories, which implies that our policy acquired disentangled and interpretable skills. On the
other hand, for SeCTAR and DADS, the interpretation of each dimension of the skill is unclear."
TRAINING OF THE POLICY NETWORK,0.4041095890410959,"Predicted Path
Actual Path"
TRAINING OF THE POLICY NETWORK,0.4075342465753425,"𝑧𝑧1 (Direction)
𝑧𝑧2 (Speed)
𝑧𝑧3 (Curvature)
𝑧𝑧1
𝑧𝑧2"
TRAINING OF THE POLICY NETWORK,0.410958904109589,"WEDIS (Ours)
DADS"
TRAINING OF THE POLICY NETWORK,0.4143835616438356,"𝑧𝑧1
𝑧𝑧2
𝑧𝑧3"
TRAINING OF THE POLICY NETWORK,0.4178082191780822,SeCTAR
TRAINING OF THE POLICY NETWORK,0.4212328767123288,"Figure 5: The latent traversals of the decoder for each skill. (Top) Predicted trajectories by the
predictive model. (Bottom) Actual trajectories of the agent by the policy network. The colors of
(red, green, blue, cyan, yellow) correspond to the values of (-1, -0.5, 0, 0.5, 1) of latents, respectively."
QUANTITATIVE RESULTS,0.4246575342465753,"6.2
QUANTITATIVE RESULTS"
QUANTITATIVE RESULTS,0.4280821917808219,"Maze 1
Maze 2"
QUANTITATIVE RESULTS,0.4315068493150685,"Figure 6: Two navigation tasks. The
goals are denoted as the red circles."
QUANTITATIVE RESULTS,0.4349315068493151,"To evaluate the performance on the hierarchical RL prob-
lems, we set two challenging maze navigation tasks as
shown in Figure 6, which cannot be solved with a single
skill, but require to appropriately combine several skills.
Also, due to the existence of traps that are close to the goals
to some extent, these problems require long-horizon reason-
ing even for dense rewards cases. In addition to SeCTAR
and DADS, we compare with two ablations, single-step
transition (WEDIS-S, T = 1) and no trajectory scaling (WEDIS-NTS, Hz = 1). All of these algo-
rithms can solve the hierarchical RL problems with zero-shot via the MPC over the latent space. The"
QUANTITATIVE RESULTS,0.4383561643835616,Under review as a conference paper at ICLR 2022
QUANTITATIVE RESULTS,0.4417808219178082,"task reward is given by negative distance to goal position r(s) = −∥s −g∥2. With the task reward
and an additional collision penalty, we set the planning reward as rd(s) = r(s) −wp · 1(s=collision)
for dense reward and rs(s) = wr · 1(|r(s)|<ϵ) −wp · 1(s=collision) for sparse reward, where 1 is
an indicator function that outputs one if the condition is true and zero otherwise. wr and wp are a
reward weight and a penalty weight, respectively, and ϵ is an acceptable error."
NAVIGATION VIA MODEL-BASED PLANNING,0.4452054794520548,"6.2.1
NAVIGATION VIA MODEL-BASED PLANNING
In the MPC planning, we evaluated the performance on both dense reward and sparse reward cases.
As an evaluation metric, we used the averaged distance between the goal and the ﬁnal position over
ten trials of planning. In Figure 7, we plot the evaluation results according to sample size used for
the MPC for comparing the sample-efﬁciency. WEDIS shows the outstanding results for all the
cases, even with less planning samples. Especially, the results on the sparse reward demonstrate
that WEDIS is effective in solving long-horizon problems. WEDIS-S and DADS are superior than
WEDIS-NTS, implying a larger scale is required for an effective planning, despite of the beneﬁt
of the trajectory-level prediction. In addition, while both perform temporally-extended behaviors
over single-step transitions, WEDIS-S outperforms DADS, which implies beneﬁts of the disentan-
glement. For example, the controllability of speed can be beneﬁcial to avoiding collisions to the
wall. For SeCTAR, it has poor performance since the skills do not follow predictions well. Some
examples of the MPC results are shown in Figure 8, where WEDIS plots smooth trajectories over
large scales. For the more details of the planning parameters, please see Appendix A.1.4."
NAVIGATION VIA MODEL-BASED PLANNING,0.4486301369863014,"Figure 7: The evaluation results of the MPC on the navigation problems. The dashed gray lines
denote goal-distances from the origin. WEDIS outperforms the unsupervised skill learning methods."
NAVIGATION VIA MODEL-BASED PLANNING,0.4520547945205479,"WEDIS-S (𝑻𝑻= 𝟏𝟏, 𝑯𝑯𝒛𝒛= 𝟒𝟒𝟒𝟒)
DADS (𝑻𝑻= 𝟏𝟏, 𝑯𝑯𝒛𝒛= 𝟐𝟐𝟎𝟎)
SeCTAR (𝑻𝑻= 𝟒𝟒𝟒𝟒, 𝑯𝑯𝒛𝒛=1)
WEDIS-NTS (𝑻𝑻= 𝟐𝟐𝟎𝟎, 𝑯𝑯𝒛𝒛= 𝟏𝟏) WEDIS (𝑻𝑻= 𝟓𝟓, 𝑯𝑯𝒛𝒛= 𝟒𝟒𝟒𝟒)"
NAVIGATION VIA MODEL-BASED PLANNING,0.4554794520547945,"Figure 8: Examples of the MPC results on sparse rewards (Top) Maze 1. (Bottom) Maze 2. The
blue and red lines represent the predictive paths and the actual paths, respectively, and the cross
marks indicate the goal positions. The dashed gray lines denote error between the last positions of
predictive and actual trajectories at each planning step."
CONCLUSION,0.4589041095890411,"7
CONCLUSION"
CONCLUSION,0.4623287671232877,"This work has introduced a method to learn continuous skills from the disentangled and interpretable
representations of trajectories. To do that, we proposed a WET-VAE model by extending the trajec-
tory VAE with weak labels. Using the interpretability, we proposed to train the policy network with
single-step transitions and perform the trajectory-level behaviors at test time, which simpliﬁes the
exploration problem and provides an effective large-scale planning strategy. In the experiments of
challenging navigation tasks, we demonstrated that our method outperforms the unsupervised skill
learning methods with higher sample-efﬁciency."
CONCLUSION,0.4657534246575342,Under review as a conference paper at ICLR 2022
REPRODUCIBILITY STATEMENT,0.4691780821917808,"8
REPRODUCIBILITY STATEMENT"
REPRODUCIBILITY STATEMENT,0.4726027397260274,"For
the
reproducibility
of
the
proposed
method,
we
will
open
our
code
at
https://sites.google.com/view/iclr2022-wedis.
We also provide the full hyperparameters in
Appendix A.1."
REFERENCES,0.476027397260274,REFERENCES
REFERENCES,0.4794520547945205,"Joshua Achiam, Harrison Edwards, Dario Amodei, and Pieter Abbeel. Variational option discovery
algorithms. arXiv preprint arXiv:1807.10299, 2018."
REFERENCES,0.4828767123287671,"Pierre-Luc Bacon, Jean Harb, and Doina Precup. The option-critic architecture. In Proceedings of
the AAAI Conference on Artiﬁcial Intelligence, volume 31, 2017."
REFERENCES,0.4863013698630137,"Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas Schneider, John Schulman, Jie Tang, and
Wojciech Zaremba. Openai gym, 2016."
REFERENCES,0.4897260273972603,"V´ıctor Campos, Alexander Trott, Caiming Xiong, Richard Socher, Xavier Gir´o-i Nieto, and Jordi
Torres. Explore, discover and learn: Unsupervised discovery of state-covering skills. In Interna-
tional Conference on Machine Learning, pp. 1317–1327. PMLR, 2020."
REFERENCES,0.4931506849315068,"Ricky TQ Chen, Xuechen Li, Roger Grosse, and David Duvenaud. Isolating sources of disentangle-
ment in variational autoencoders. arXiv preprint arXiv:1802.04942, 2018."
REFERENCES,0.4965753424657534,"Kurtland Chua, Roberto Calandra, Rowan McAllister, and Sergey Levine.
Deep rein-
forcement learning in a handful of trials using probabilistic dynamics models.
In
S. Bengio, H. Wallach, H. Larochelle, K. Grauman, N. Cesa-Bianchi, and R. Garnett
(eds.), Advances in Neural Information Processing Systems, volume 31. Curran Asso-
ciates, Inc., 2018. URL https://proceedings.neurips.cc/paper/2018/file/
3de568f8597b94bda53149c7d7f5958c-Paper.pdf."
REFERENCES,0.5,"John Co-Reyes, YuXuan Liu, Abhishek Gupta, Benjamin Eysenbach, Pieter Abbeel, and Sergey
Levine. Self-consistent trajectory autoencoder: Hierarchical reinforcement learning with trajec-
tory embeddings. In International Conference on Machine Learning, pp. 1009–1018. PMLR,
2018."
REFERENCES,0.5034246575342466,"Thomas G Dietterich. Hierarchical reinforcement learning with the maxq value function decompo-
sition. Journal of artiﬁcial intelligence research, 13:227–303, 2000."
REFERENCES,0.5068493150684932,"Benjamin Eysenbach, Abhishek Gupta, Julian Ibarz, and Sergey Levine. Diversity is all you need:
Learning skills without a reward function. arXiv preprint arXiv:1802.06070, 2018."
REFERENCES,0.5102739726027398,"Carlos Florensa, Yan Duan, and Pieter Abbeel. Stochastic neural networks for hierarchical rein-
forcement learning. arXiv preprint arXiv:1704.03012, 2017."
REFERENCES,0.5136986301369864,"Carlos E Garcia, David M Prett, and Manfred Morari. Model predictive control: Theory and prac-
tice—a survey. Automatica, 25(3):335–348, 1989."
REFERENCES,0.5171232876712328,"David Ha and J¨urgen Schmidhuber.
Recurrent world models facilitate policy evolution.
In S. Bengio, H. Wallach, H. Larochelle, K. Grauman, N. Cesa-Bianchi, and R. Gar-
nett (eds.), Advances in Neural Information Processing Systems, volume 31. Curran Asso-
ciates, Inc., 2018. URL https://proceedings.neurips.cc/paper/2018/file/
2de5d16682c3c35007e4e92982f1a2ba-Paper.pdf."
REFERENCES,0.5205479452054794,"Tuomas Haarnoja, Aurick Zhou, Pieter Abbeel, and Sergey Levine. Soft actor-critic: Off-policy
maximum entropy deep reinforcement learning with a stochastic actor. 2017."
REFERENCES,0.523972602739726,"Tuomas Haarnoja, Kristian Hartikainen, Pieter Abbeel, and Sergey Levine. Latent space policies
for hierarchical reinforcement learning. In International Conference on Machine Learning, pp.
1851–1860. PMLR, 2018."
REFERENCES,0.5273972602739726,Under review as a conference paper at ICLR 2022
REFERENCES,0.5308219178082192,"Karol Hausman, Jost Tobias Springenberg, Ziyu Wang, Nicolas Heess, and Martin Riedmiller.
Learning an embedding space for transferable robot skills. In International Conference on Learn-
ing Representations, 2018."
REFERENCES,0.5342465753424658,"Irina Higgins, Loic Matthey, Arka Pal, Christopher Burgess, Xavier Glorot, Matthew Botvinick,
Shakir Mohamed, and Alexander Lerchner.
beta-vae: Learning basic visual concepts with a
constrained variational framework. 2016."
REFERENCES,0.5376712328767124,"Hyunjik Kim and Andriy Mnih.
Disentangling by factorising.
In International Conference on
Machine Learning, pp. 2649–2658. PMLR, 2018."
REFERENCES,0.541095890410959,"Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint
arXiv:1412.6980, 2014."
REFERENCES,0.5445205479452054,"Diederik P Kingma and Max Welling.
Auto-encoding variational bayes.
arXiv preprint
arXiv:1312.6114, 2013."
REFERENCES,0.547945205479452,"Sergey Levine, Chelsea Finn, Trevor Darrell, and Pieter Abbeel. End-to-end training of deep visuo-
motor policies. The Journal of Machine Learning Research, 17(1):1334–1373, 2016."
REFERENCES,0.5513698630136986,"Timothy P Lillicrap, Jonathan J Hunt, Alexander Pritzel, Nicolas Heess, Tom Erez, Yuval Tassa,
David Silver, and Daan Wierstra. Continuous control with deep reinforcement learning. arXiv
preprint arXiv:1509.02971, 2015."
REFERENCES,0.5547945205479452,"Francesco Locatello, Stefan Bauer, Mario Lucic, Gunnar Raetsch, Sylvain Gelly, Bernhard
Sch¨olkopf, and Olivier Bachem. Challenging common assumptions in the unsupervised learning
of disentangled representations. In international conference on machine learning, pp. 4114–4124.
PMLR, 2019a."
REFERENCES,0.5582191780821918,"Francesco Locatello, Michael Tschannen, Stefan Bauer, Gunnar R¨atsch, Bernhard Sch¨olkopf,
and Olivier Bachem.
Disentangling factors of variation using few labels.
arXiv preprint
arXiv:1905.01258, 2019b."
REFERENCES,0.5616438356164384,"Francesco Locatello, Ben Poole, Gunnar R¨atsch, Bernhard Sch¨olkopf, Olivier Bachem, and Michael
Tschannen. Weakly-supervised disentanglement without compromises. In International Confer-
ence on Machine Learning, pp. 6348–6359. PMLR, 2020."
REFERENCES,0.565068493150685,"Vasilis Margonis, Athanasios Davvetas, and Iraklis A Klampanos. Wela-vae: Learning alternative
disentangled representations using weak labels. arXiv preprint arXiv:2008.09879, 2020."
REFERENCES,0.5684931506849316,"Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Alex Graves, Ioannis Antonoglou, Daan Wier-
stra, and Martin Riedmiller.
Playing atari with deep reinforcement learning.
arXiv preprint
arXiv:1312.5602, 2013."
REFERENCES,0.571917808219178,"Anusha Nagabandi, Gregory Kahn, Ronald S Fearing, and Sergey Levine. Neural network dynamics
for model-based deep reinforcement learning with model-free ﬁne-tuning. In 2018 IEEE Interna-
tional Conference on Robotics and Automation (ICRA), pp. 7559–7566. IEEE, 2018."
REFERENCES,0.5753424657534246,"Danilo Jimenez Rezende, Shakir Mohamed, and Daan Wierstra. Stochastic backpropagation and ap-
proximate inference in deep generative models. In International conference on machine learning,
pp. 1278–1286. PMLR, 2014."
REFERENCES,0.5787671232876712,"John Schulman, Sergey Levine, Pieter Abbeel, Michael Jordan, and Philipp Moritz. Trust region
policy optimization. In International conference on machine learning, pp. 1889–1897, 2015."
REFERENCES,0.5821917808219178,"John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal policy
optimization algorithms. arXiv preprint arXiv:1707.06347, 2017."
REFERENCES,0.5856164383561644,"Tanmay Shankar and Abhinav Gupta. Learning robot skills with temporal variational inference. In
International Conference on Machine Learning, pp. 8624–8633. PMLR, 2020."
REFERENCES,0.589041095890411,"Tanmay Shankar, Shubham Tulsiani, Lerrel Pinto, and Abhinav Gupta. Discovering motor programs
by recomposing demonstrations. In International Conference on Learning Representations, 2019."
REFERENCES,0.5924657534246576,Under review as a conference paper at ICLR 2022
REFERENCES,0.5958904109589042,"Archit Sharma, Shixiang Gu, Sergey Levine, Vikash Kumar, and Karol Hausman. Dynamics-aware
unsupervised discovery of skills. arXiv preprint arXiv:1907.01657, 2019."
REFERENCES,0.5993150684931506,"Rui Shu, Yining Chen, Abhishek Kumar, Stefano Ermon, and Ben Poole. Weakly supervised disen-
tanglement with guarantees. arXiv preprint arXiv:1910.09772, 2019."
REFERENCES,0.6027397260273972,"David Silver, Aja Huang, Chris J Maddison, Arthur Guez, Laurent Sifre, George Van Den Driessche,
Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, et al. Mastering
the game of go with deep neural networks and tree search. nature, 529(7587):484–489, 2016."
REFERENCES,0.6061643835616438,"Richard S Sutton, Doina Precup, and Satinder Singh. Between mdps and semi-mdps: A frame-
work for temporal abstraction in reinforcement learning. Artiﬁcial intelligence, 112(1-2):181–
211, 1999."
REFERENCES,0.6095890410958904,"Emanuel Todorov, Tom Erez, and Yuval Tassa. Mujoco: A physics engine for model-based control.
In 2012 IEEE/RSJ International Conference on Intelligent Robots and Systems, pp. 5026–5033.
IEEE, 2012."
REFERENCES,0.613013698630137,"A
APPENDIX"
REFERENCES,0.6164383561643836,"A.1
IMPLEMENTATION DETAILS"
REFERENCES,0.6198630136986302,"A.1.1
TRAJECTORY DATASET AND WEAK LABELS"
REFERENCES,0.6232876712328768,"To encourage the disentangled representation learning, we created a trajectory dataset that consists
of one-hundred thousand numbers of synthetically generated trajectories. Each trajectory is gener-
ated from the combination of several generative factors of interest that we intend the model to learn.
For 2D navigation, the trajectories consist of sequences of two-dimensional data points of x and y
coordinates. As the factors, we set three factors of speed, direction, and curvature of the trajectories.
For the speed, we limited the length of each single-step transition up to one, maintaining it consis-
tently over multiple steps. To allow for only the positive speed and direction, we limited the direction
ranging the angles of a right-sided semicircle. For the curvature, we rotated the paths with an angle
ranging from -30 to 30 degrees at each transition step. Also, to include straight lines together, we
set the angle for curvature to zero with 0.2 probability. Finally, we set the trajectory length T = 5,
which means a sequence of ﬁve transition steps that are composed of six points including an initial
point. The details of the factors to generate trajectories used in the main experiments and additional
experiments in the appendices are summarized in Table 1."
REFERENCES,0.6267123287671232,"Factors
Sampling Distribution"
REFERENCES,0.6301369863013698,"Speed
U (−1, 1) (1D) , U (0, 1) (2D)
Direction
U (−π/2, π2) (semi) , U (−π, π) (full)
Curvature
U (−π/6, π/6)
Acceleration
U (−s/5, s/5), s = sampled speed"
REFERENCES,0.6335616438356164,Table 1: The generative Factors
REFERENCES,0.636986301369863,"While the training proceeds, weak labels are assigned to the batches as one-hot encoded vectors
for each factor, which are computed by programming based on the knowledge of the factors. We
roughly deﬁne the labeling criteria to divide the factors (speed, direction, and curvature) into four
(0.25 interval), four (45 degree interval), and three (straight, right, left) segments. For instance,
given a trajectory with (speed = 0.1, direction = 40 degree, curvature angle = -10 degree), then the
trajectory is assigned with label values of one, two, and three for each factor."
REFERENCES,0.6404109589041096,"A.1.2
WET-VAE"
REFERENCES,0.6438356164383562,"We used one hidden layer with size of (64, 64) for all units in Figure 1. At each transition step, all
of the state and one-hot encoded multiple labels are concatenated as an input. To consider state-
agnostic transitions, we infer distances from the current states and next states instead of directly"
REFERENCES,0.6472602739726028,Under review as a conference paper at ICLR 2022
REFERENCES,0.6506849315068494,"Samples of the trajectory dataset
Direction
Curvature
Speed 1 2 3 4"
REFERENCES,0.6541095890410958,Figure 9: The labeling criteria and the trajectories in the dataset.
REFERENCES,0.6575342465753424,"predicting next states. Therefore, we feed the distances as state inputs for the encoding LSTM, and
the state decoder also outputs mean and variance for the distances. For training losses, we used the
negative log-likelihood for the state outputs and the cross-entropy for the label outputs. For activa-
tion functions of the output layers, we used linear functions for the mean and log-variance of the
state decoder, and softmax functions for the label decoders. In Equation 4, we set the hyperparame-
ters as γ = 10, β = 9. We trained the model using Adam optimizer (Kingma & Ba, 2014) with the
ﬁxed learning rate of 2e-4, the batch size of 2048, and 300 epochs."
REFERENCES,0.660958904109589,"A.1.3
POLICY NETWORK"
REFERENCES,0.6643835616438356,"For the policy optimization, we used the SAC algorithm (Haarnoja et al., 2017). To learn the
position-agnostic behaviors, we used the state input s to the policy π(a|s, z), excluding the po-
sitional information of (x, y) coordinates in Ant and x coordinate in Half-Cheetah as in DADS
(Sharma et al., 2019). While we trained the WET-VAE with the maximum speed of one, we com-
puted the log-likelihood log pθ(τ|z) for the reward by reducing the mean by 1/10 and the variance
by 1/20 in Equation 6, considering the allowable length of one-step movement of the Ant. For
Half-Cheetah, we reduced them by 1/5 and 1/20, respectively. In the SAC, we used the entropy tem-
perature of 0.01. We trained the model using Adam optimizer (Kingma & Ba, 2014) with the ﬁxed
learning rate of 3e-4, the batch size of 256, and 64 iterations per epoch for totally 30000 epochs. For
other hyperparameters, we used the discount factor of 0.99, target smoothing coefﬁcient of 0.01, the
latent sampling distribution as the unit Gaussian distribution, and two hidden layers of (512, 512)
for all of the actor, critic and value function in Ant, and (256, 256) in Half-Cheetah."
REFERENCES,0.6678082191780822,"A.1.4
PLANNING"
REFERENCES,0.6712328767123288,"We set primitive horizons Hz = 20 for DADS and Hz = 40 for WEDIS and WEDIS-S, which
are determined by comparing the average speed. For SeCTAR and WEDIS-NTS, we set trajectory
lengths as T = 40 and T = 20, respectively. According to the primitive horizons and trajectory
lengths, we set episode horizons as HE = 300 for DADS and HE = 600 for others. For dense
reward tasks, we used planning horizons HP = 4 for all methods except for HP = 3 of WEDIS.
In contrast, for sparse reward tasks we used the maximum planning horizons HE/(Hz × T) for all
methods. These planning parameters are summarized in Table 2."
REFERENCES,0.6746575342465754,"For sampling distribution of the skills, DADS that was trained from the uniform distribution used a
uniform distribution from -1 to 1, and others that were trained from the normal Gaussian distribution
used a uniform distribution from -1.5 to 1.5 except for the dimension of speed factor of WEDIS and
its ablations. For WEDIS and the ablations, we limit the minimum speed as the one sampled from
zero since too low speed is useless for the navigation. Note that this strategy is also an advantage of
our method thanks to the disentanglement and interpretability of the skills. For the predictions, we
used the mean output from the WET-VAE decoder as the trajectories without sampling. The actions
of an agent were sampled from the distributions given by the policy."
REFERENCES,0.678082191780822,"We used the collision penalty weight wp = 100, the reward weight wr = 5, and the acceptable error
ϵ = 5 in the sparse reward cases. In Figure 6, the goals are positioned on the Cartesian coordinate of
(24, 12). As the straight paths are blocked on the walls in the mazes, the effective distance to goals
is 36."
REFERENCES,0.6815068493150684,Under review as a conference paper at ICLR 2022
REFERENCES,0.684931506849315,"Algorithms
HE
Hz
T
Steps / Skill
HP (Dense / Sparse)
Sampling Distribution"
REFERENCES,0.6883561643835616,"SeCTAR
600
1
40
40
4 / 15
U (−1, 1)
DADS
300
20
1
20
4 / 15
U (−1.5, 1.5)
WEDIS-S
600
40
1
40
4 / 15
U (−1.5, 1.5), Uspeed(−1.5, 0)
WEDIS-NTS
600
1
20
20
4 / 30
U (−1.5, 1.5), Uspeed(−1.5, 0)
WEDIS
600
40
5
200
3 / 3
U (−1.5, 1.5), Uspeed(−1.5, 0)"
REFERENCES,0.6917808219178082,Table 2: The MPC parameters
REFERENCES,0.6952054794520548,"A.2
DERIVATION"
REFERENCES,0.6986301369863014,"A.2.1
VARIATIONAL LOWER BOUND"
REFERENCES,0.702054794520548,"log pθ(τ, y) = log
Z"
REFERENCES,0.7054794520547946,"z
pθ(τ, y, z)dz"
REFERENCES,0.708904109589041,"= log
Z"
REFERENCES,0.7123287671232876,"z
pθ(τ, y|z)p(z)dz"
REFERENCES,0.7157534246575342,"= log
Z z"
REFERENCES,0.7191780821917808,"pθ(τ, y|z)p(z)"
REFERENCES,0.7226027397260274,"qφ(z|τ, y)
qφ(z|τ, y)dz ≥
Z"
REFERENCES,0.726027397260274,"z
qφ(z|τ, y) log pθ(τ, y|z)p(z)"
REFERENCES,0.7294520547945206,"qφ(z|τ, y)
dz =
Z"
REFERENCES,0.7328767123287672,"z
qφ(z|τ, y) log pθ(τ, y|z)dz +
Z"
REFERENCES,0.7363013698630136,"z
qφ(z|τ, y) log
p(z)
qφ(z|τ, y)dz"
REFERENCES,0.7397260273972602,"= Eqφ(z|τ,y)[log pθ(τ, y|z)] −DKL(qφ(z|τ, y)∥p(z)) = L(θ, φ ; τ, y), (7)"
REFERENCES,0.7431506849315068,"where the inequality is from Jensen’s inequality. The log-likelihood log pθ(τ, y|z) is decomposed
as below."
REFERENCES,0.7465753424657534,"log pθ(τ, y|z) = log [pθ(τ|z)pθ(y|z)]"
REFERENCES,0.75,"= log [pθ(s1, ..., sT|z)pθ(y1, ..., yM |z)]"
REFERENCES,0.7534246575342466,"= log [pθ(s1|z)pθ(s2|s1, z) · · · pθ(sT|s1:T−1, z)pθ(y1|z) · · · pθ(yM |z)]"
REFERENCES,0.7568493150684932,"= log [ T
Y"
REFERENCES,0.7602739726027398,"t=1
pθ(st|s1:t−1, z) M
Y"
REFERENCES,0.7636986301369864,"m=1
pθ(ym|z)] = T
X"
REFERENCES,0.7671232876712328,"t=1
log pθ(st|s1:t−1, z) + M
X"
REFERENCES,0.7705479452054794,"m=1
log pθ(ym|z) (8)"
REFERENCES,0.773972602739726,"Therefore, the objective function of WET-VAE becomes"
REFERENCES,0.7773972602739726,"L(θ, φ ; τ, y) = Eqφ(z|τ,y)[log pθ(τ, y|z)] −DKL(qφ(z|τ, y)∥p(z))"
REFERENCES,0.7808219178082192,"= Eqφ(z|τ,y)[ T
X"
REFERENCES,0.7842465753424658,"t=1
log pθ(st|s1:t−1, z) + M
X"
REFERENCES,0.7876712328767124,"m=1
log pθ(ym|z)] −DKL(qφ(z|τ, y)∥p(z)) (9)"
REFERENCES,0.791095890410959,"By adding the additional weights to this equation, we ﬁnally obtain Equation 4."
REFERENCES,0.7945205479452054,Under review as a conference paper at ICLR 2022
REFERENCES,0.797945205479452,"A.2.2
POLICY REWARD"
REFERENCES,0.8013698630136986,"Ep(z)[DKL(pψ(τ|z)∥pθ(τ|z))] = Ep(z)[
Z"
REFERENCES,0.8047945205479452,"τ
pψ(τ|z) log pψ(τ|z)"
REFERENCES,0.8082191780821918,"pθ(τ|z) dτ] =
Z"
REFERENCES,0.8116438356164384,"z
p(z)
Z"
REFERENCES,0.815068493150685,"τ
pψ(τ|z) log pψ(τ|z)"
REFERENCES,0.8184931506849316,"pθ(τ|z) dτdz =
Z z Z"
REFERENCES,0.821917808219178,"τ
p(z)pψ(τ|z) log pψ(τ|z)"
REFERENCES,0.8253424657534246,"pθ(τ|z) dτdz =
Z z Z"
REFERENCES,0.8287671232876712,"τ
p(z)pψ(τ|z)[log pψ(τ|z) −log pθ(τ|z)]dτdz =
Z z Z"
REFERENCES,0.8321917808219178,"τ
p(z)pψ(τ|z) log pψ(τ|z)dτdz −
Z z Z"
REFERENCES,0.8356164383561644,"τ
p(z)pψ(τ|z) log pθ(τ|z)dτdz =
Z"
REFERENCES,0.839041095890411,"z
p(z)
Z"
REFERENCES,0.8424657534246576,"τ
pψ(τ|z) log pψ(τ|z)dτdz −
Z z Z"
REFERENCES,0.8458904109589042,"τ
pψ(τ, z) log pθ(τ|z)dτdz"
REFERENCES,0.8493150684931506,"= −H(pψ(τ|z)) −Epψ(τ,z)[log pθ(τ|z)]
(10)"
REFERENCES,0.8527397260273972,"As the above equation is an objective function for a minimization problem, we can obtain Equation
6 by changing the sign."
REFERENCES,0.8561643835616438,"A.3
ADDITIONAL EXPERIMENTAL RESULTS"
REFERENCES,0.8595890410958904,"A.3.1
WET-VAE"
REFERENCES,0.863013698630137,"In this section, we ﬁrst check the effects of the two weights, β and γ in Equation 4. Then, we
show the results of the three additional experiments to learn other representations; 1) learning polar
coordinate representation and Cartesian coordinate representation using proper weak labels for each
representation in 2D. 2) disentanglement of speed and acceleration in 1D. 3) disentanglement of
four factors of speed, direction, curvature and acceleration in 2D. For each of the three additional
experiments, we generated the trajectory dataset again by following Table 1."
REFERENCES,0.8664383561643836,"Each column in Figure 10 shows the latent traversals of models with all the same hyper-parameters
except for β and γ. All models are trained with same dataset used in Section 6.1.1. For the model in
(e), we did not reuse the model in Section 6.1.1, but reproduced it again for this experiment. These
results imply that the proper choices of both β and γ are required for the training of the WET-VAE."
REFERENCES,0.8698630136986302,"Figure 11 shows the latent traversals of representations of a two-dimensional latent variable z ∈R2
learned with the polar coordinate and Cartesian coordinate. For the polar coordinate representation,
we used weak labels of radius divided into four segments with 0.25 interval from zero to one, and
angle divided into four segments with an interval of 90 degrees from zero to 360 degrees. For the
Cartesian coordinate representation, we used weak labels of x and y coordinates divided into four
segments with 0.5 interval from -1 to 1. For comparison, we also provide the results of learning
Cartesian coordinate in an unsupervised manner without weak labels. The three models in Figure
11 are trained with the same trajectory dataset generated by the combination of the radius (speed)
and angle (direction). It is worthy of noting that the uses of different (x and y coordinates) or no
labels can result in different representations from the true generative factors (radius and angle). This
implies the importance of the inductive bias to learn the desired factors."
REFERENCES,0.8732876712328768,"To disentangle speed and acceleration factors in 1D, we set the weak labels divided into four seg-
ments from -1 to 1 for speed, and three segments of zero, positive and negative values the ac-
celeration. Figure 12 shows that the WET-VAE learns the disentangled representation of a two-
dimensional latent variable z ∈R2 with speed and direction factors in 1D. In this case, the factor
contributing to single-step transition z single is the speed factor z speed, and the factor contributing
over multiple time-steps z multi is the acceleration factor z acc. On the other hand, when there is no
weak supervision, the model does not learn the meaningful representations."
REFERENCES,0.8767123287671232,"In Figure 13, it is shown that the WET-VAE can learn the disentangled representations with multiple
factors in both z single and z multi, where z single = (z speed, z dir) and z multi = (z acc, z cur). In this"
REFERENCES,0.8801369863013698,Under review as a conference paper at ICLR 2022
REFERENCES,0.8835616438356164,"case, the model learns the four-dimensional latent representations z ∈R4 with weak labels for each
factor, where we set the full-circle range for the direction."
REFERENCES,0.886986301369863,"As shown in Figure 11 and Figure 13, even if the model was trained with dataset of the full-circle
angles with the weak supervision, the empty regions appear at some angles. The empty regions
were also shown differently at each training even with the same hyperparameters and dataset. In
this reason, we trained the model with the semicircle angles in the main experiments to completely
cover the only positive directions even though the model trained with full circle angles can cover the
larger range of the direction."
REFERENCES,0.8904109589041096,"(e) 𝛽𝛽= 9, 𝛾𝛾= 10
(d) 𝛽𝛽= 1, 𝛾𝛾= 10
(c) 𝛽𝛽= 9, 𝛾𝛾= 1
(b) 𝛽𝛽= 1, 𝛾𝛾= 1
(a) 𝛽𝛽= 1, 𝛾𝛾=0"
REFERENCES,0.8938356164383562,"𝑧𝑧1
𝑧𝑧2
𝑧𝑧3"
REFERENCES,0.8972602739726028,"Figure 10: The latent traversals from -1.5 to 1.5. (a) ∼(e) show the results from the models trained
with all the same hyper-parameters except for β and γ. The trajectories in all ﬁgures are plotted with
T = 5."
REFERENCES,0.9006849315068494,"Polar coordinate
Cartesian coordinate
Without weak supervision"
REFERENCES,0.9041095890410958,"𝑧𝑧1
𝑧𝑧2"
REFERENCES,0.9075342465753424,"𝑇𝑇= 1
𝑇𝑇= 1
𝑇𝑇= 1"
REFERENCES,0.910958904109589,"Figure 11: The latent traversals from -1.5 to 1.5 (Left) polar coordinate representation (Middle)
Cartesian coordinate representation (Right) representation learned without weak supervision."
REFERENCES,0.9143835616438356,Under review as a conference paper at ICLR 2022
REFERENCES,0.9178082191780822,"𝑇𝑇= 1
𝑇𝑇= 5"
REFERENCES,0.9212328767123288,"𝑧𝑧1 (Speed)
𝑧𝑧2 (Acceleration)"
REFERENCES,0.9246575342465754,With weak supervision 𝑇𝑇= 5
REFERENCES,0.928082191780822,Without weak supervision
REFERENCES,0.9315068493150684,"Figure 12: The latent traversals from -1 to 1. WET-VAE can learn the disentangled representations
of the acceleration and speed in 1D. For visibility, we represent the values of the latents at the y axis
and use different colors at each time-step for T = 5. Since the speed is zero for z 1 = 0, the ﬁrst
two ﬁgures of the second rows are plotted with z 1 = −1."
REFERENCES,0.934931506849315,"𝑧𝑧1 (Curvature)
𝑧𝑧2 (Acceleration)
𝑧𝑧3 (Direction)
𝑧𝑧4 (Speed) 𝑇𝑇= 5"
REFERENCES,0.9383561643835616,"Figure 13: The latent traversals from -1.5 to 1.5. WET-VAE can learn the disentangled represen-
tations of the curvature, acceleration, direction and speed. For visibility, we plot the acceleration
ﬁgure with the points with different colors for each time-step, instead of the arrowed lines."
REFERENCES,0.9417808219178082,"A.3.2
POLICY NETWORK ON ANT OF FULL CIRCLE ANGLES AND HALF-CHEETAH"
REFERENCES,0.9452054794520548,"Half-Cheetah
Ant"
REFERENCES,0.9486301369863014,Figure 14: Mujoco environments. (Left) Ant (Right) Half-Cheetah
REFERENCES,0.952054794520548,"We present the additional experimental results for the Ant and the Half-Cheetah of Mujoco in Figure
14. Figure 15 shows that the Ant learns the disentangled skills of the speed and direction of the full
circle angles in 2D. In Figure 16, it is shown that the Half-Cheetah learns the disentangled speed-
acceleration skills in 1D."
REFERENCES,0.9554794520547946,"To train the policy network for the Half-Cheetah, the 1D speed-acceleration model in Figure 12 is
used as the predictive model. After training, the relation function was set as f speed(z speed
t
, z acc) ="
REFERENCES,0.958904109589041,"z speed
t
−0.1 ·
z speed
t
|z speed
t
| · z acc."
REFERENCES,0.9623287671232876,"A.3.3
MORE PLANNING EXAMPLES"
REFERENCES,0.9657534246575342,"We provide the additional MPC results of the main experiment for the Maze1 and Maze 2 in Figure
17. Additionally, we presents more results to show that our method is sample-efﬁcient with the
examples in S-shaped maze and obstacles in Figure 18. In each planning procedure, we used a
sequence of just two skills for the maze and just a single skill for the obstacle, respectively."
REFERENCES,0.9691780821917808,Under review as a conference paper at ICLR 2022
REFERENCES,0.9726027397260274,"𝑧𝑧1 (Speed)
𝑧𝑧2 (Direction)"
REFERENCES,0.976027397260274,"Figure 15: The latent traversals in Ant trained with speed and the direction ranging the full circle
angles."
REFERENCES,0.9794520547945206,𝑧𝑧1 (Speed)
REFERENCES,0.9828767123287672,𝑧𝑧2 (Acceleration)
REFERENCES,0.9863013698630136,"𝑇𝑇= 1
𝑇𝑇= 6
𝑇𝑇= 6"
REFERENCES,0.9897260273972602,"Figure 16: The latent traversals from -1 to 1 in Half-Cheetah. (Top) predicted trajectories by the
predictive model. (Bottom) actual trajectories by the Half-Cheetah. For visibility, we represent the
values of the latents at the y axis and use different colors at each time-step for T = 6."
REFERENCES,0.9931506849315068,Figure 17: Additional MPC results. (Top) Maze1. (Bottom) Maze2.
REFERENCES,0.9965753424657534,"Figure 18: Additional MPC results. (Top) S-shaped maze. We use T = 6 and Hz = 50 for a
sequence of two skills. (Bottom) Obstacles. T = 5 and Hz = 50 for single skill."
