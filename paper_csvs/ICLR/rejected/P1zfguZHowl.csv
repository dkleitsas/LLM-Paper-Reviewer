Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.002617801047120419,"Most value function learning algorithms in reinforcement learning are based on the
mean squared (projected) Bellman error. However, squared errors are known to be
sensitive to outliers, both skewing the solution of the objective and resulting in high-
magnitude and high-variance gradients. Typical strategies to control these high-
magnitude updates in RL involve clipping gradients, clipping rewards, rescaling
rewards, and clipping errors. Clipping errors is related to using robust losses,
like the Huber loss, but as yet no work explicitly formalizes and derives value
learning algorithms with robust losses. In this work, we build on recent insights
reformulating squared Bellman errors as a saddlepoint optimization problem, and
propose a saddlepoint reformulation for a Huber Bellman error and Absolute
Bellman error. We show that the resulting solutions have signiﬁcantly lower error
for certain problems and are otherwise comparable, in terms of both absolute and
squared value error. We show that the resulting gradient-based algorithms are more
robust, for both prediction and control, with less stepsize sensitivity."
INTRODUCTION,0.005235602094240838,"1
INTRODUCTION"
INTRODUCTION,0.007853403141361256,"Learning value functions from off-policy data remains an open challenge due to high-variance samples
and the inability to optimize the objective of interest. Progress towards this goal has been made over
years of algorithm development, by reducing the variance for temporal difference (TD) algorithms
(Precup et al., 2000; Munos et al., 2016; Mahmood et al., 2017); following approximate gradients of
a proxy objective—the mean squared Bellman error (MSBE)—which upper bounds our objective
of interest (Dai et al., 2017; 2018; Feng et al., 2019); and following an approximate gradient of
a projected version of the MSBE (Sutton et al., 2009; Maei et al., 2009; Mahadevan et al., 2014;
Liu et al., 2016; Ghiassian et al., 2020). For many years, however, there was only a limited set of
choices—mainly vanilla TD algorithms. Because it was unclear precisely what objective TD was
optimizing (Baird, 1995; Antos et al., 2008), it was difﬁcult to extend the algorithm. The known
alternative—optimizing the MSBE—suffers from an issue of double sampling in the absence of a
simulator (Baird, 1995; Scherrer, 2010)."
INTRODUCTION,0.010471204188481676,"Driving the recent innovations are two key advances for objectives in RL. The ﬁrst is the formalization
of the objective underlying TD, called the mean squared projected Bellman error (MSPBE) (Antos
et al., 2008; Sutton et al., 2009), which projects the Bellman error into the space spanned by the
function approximator. Many algorithms are built on the originally introduced variants, GTD2 and
TD with gradient corrections (TDC) (Sutton et al., 2009). These algorithms, however, are limited to
linear function approximation because the MSPBE is deﬁned only for the linear case."
INTRODUCTION,0.013089005235602094,"The second advance is the introduction of a conjugate form for the MSBE to handle the double
sampling problem (Dai et al., 2017). By transforming the MSBE using biconjugate functions, the
double sampling problem instead became a better understood saddlepoint optimization problem. The
SBEED algorithm (Dai et al., 2018) later extended the conjugate MSBE to control using a smoothed
Bellman optimality operator and parameterizing both the policy and value function estimates. By
transforming the MSBE into an objective for which we can obtain unbiased sample gradients, the
conjugate MSBE allowed a natural extension to nonlinear function approximation."
INTRODUCTION,0.015706806282722512,"A natural next step is to use these advances to revisit deﬁning and optimizing statistically robust
losses for value functions. The MSBE and MSPBE are built on squared errors, which are known to
be sensitive to outliers. In the RL setting, this translates into overemphasizing states for which the
Bellman residual is high, at the cost of obtaining accurate estimates in other states. For example,
consider the CliffWorld domain (Sutton and Barto, 2018) where the agent must navigate alongside"
INTRODUCTION,0.01832460732984293,Under review as a conference paper at ICLR 2022
INTRODUCTION,0.020942408376963352,"a cliff to reach a rewarding goal state. Should the agent step into the cliff, the agent is sent back to
the start state with a large negative reward. In order to represent the optimal policy, the agent must
learn that actions which lead to the cliff yield negative return, while actions that lead towards the goal
yield positive return (or at least less negative). Perfectly representing the exact magnitude of negative
returns for stepping in the cliff is not useful, as it is sufﬁcient to only know that these actions are
more negative than actions leading towards the goal. Further, because the agent bootstraps off these
value estimates in the states near the goal, squared errors tend to magnify these inaccuracies across
all states visited in the episode. In general, the ability to replace squared errors with alternatives,
like absolute errors or the Huber loss (Huber, 1964), provides another dimension to improve our
algorithms and, to the best of our knowledge, has yet to be explored."
INTRODUCTION,0.02356020942408377,"Issues with squared errors have been noted in the RL literature and addressed heuristically in control
using clipping. DQN uses clipped TD errors by default to avoid large magnitude updates (Mnih
et al., 2015), likewise, Dueling DQN (Wang et al., 2016) directly clips its gradients. There is a close
relationship between clipping TD errors and using a Huber loss in the linear function approximation
setting. However, even for linear Q-learning or TD-learning, clipping TD errors does not correspond
to minimizing a Huber loss for the Bellman error. Rather, it takes a non-gradient update and applies
clipping to that update to mimic the Huber loss which results in a bias similar to residual TD methods
(Baird, 1995; Sutton and Barto, 2018)."
INTRODUCTION,0.02617801047120419,"In this work, we develop practical algorithms that can use absolute and Huber errors instead of
squared errors for the BE. To do so, we develop a uniﬁed perspective of the mean absolute Bellman
Error (MABE), mean squared Bellman Error (MSBE), and mean Huber Bellman Error (MHBE)
which smoothly interpolates between these other two. We rely on the insight that the MSBE can
be reformulated into a saddlepoint problem with the introduction of an auxiliary learned variable;
using the same strategy, we derive a biconjugate form for the MHBE and MABE amenable to simple
gradient-descent techniques. The resulting approach is a simple modiﬁcation of existing gradient TD
algorithms, using a different update for the auxiliary variable, making it straightforward to use either
of these losses. We show that the MHBE and MABE can signiﬁcantly change the solution quality,
improving accuracy in terms of the mean squared value error, as well as the mean absolute value error.
We then show that gradient algorithms for the MHBE tend to perform similar to those for the MSBE,
but provide signiﬁcant robustness improvements in certain cases, particularly under bad state aliasing.
Finally, we show that in control with nonlinear function approximation, gradient-based algorithms
minimizing the MHBE often outperform those using squared losses or those using non-gradient
updates."
PROBLEM FORMULATION,0.028795811518324606,"2
PROBLEM FORMULATION"
PROBLEM FORMULATION,0.031413612565445025,"We model the agent’s interactions with its environment as a Markov Decision Process (MDP),
(S, A, P, R, γ). At each time-step t, the agent observes states St ∈S, selects an action At ∈A
according to policy π : S →∆(A), transitions to the next state St+1 ∈S according to transition
function P : S × A →∆(S), and receives a scalar reward signal Rt+1 and discount γt+1 ∈[0, 1].
The discount depends on the state, and encodes termination when γt+1 = 0 (White, 2017)."
PROBLEM FORMULATION,0.034031413612565446,"For the prediction setting, the agent’s goal is to estimate the value function vπ for a given policy. The
value function can be deﬁned recursively, using the Bellman operator"
PROBLEM FORMULATION,0.03664921465968586,"(T v)(s)
def= E[Rt+1 + γt+1v(St+1) | St = s]"
PROBLEM FORMULATION,0.03926701570680628,"where the expectation is taken with respect to the policy π and transition dynamics P. The true values
vπ are the ﬁxed point for this operator: T vπ = vπ. Our goal is to approximate vπ, with vθ ∈F for
some (parameterized) function space F. Typically, the quality of this approximation is evaluated
under the value error, either mean squared value error (MSVE) or mean absolute value error (MAVE)"
PROBLEM FORMULATION,0.041884816753926704,"MSVE(vθ)
def=
X"
PROBLEM FORMULATION,0.04450261780104712,"s∈S
d(s) (vθ(s) −vπ(s))2
MAVE(vθ)
def=
X"
PROBLEM FORMULATION,0.04712041884816754,"s∈S
d(s)|V (s) −vπ(s)|"
PROBLEM FORMULATION,0.049738219895287955,"where d : S →[0, 1] is typically the visitation distribution under a behavior policy.1"
PROBLEM FORMULATION,0.05235602094240838,"1For exposition, we assume discrete states and actions throughout this paper. The connection to continuous
state-actions is straightforward and we will explicitly call out where this connection is less obvious."
PROBLEM FORMULATION,0.0549738219895288,Under review as a conference paper at ICLR 2022
PROBLEM FORMULATION,0.05759162303664921,One objective used to learn approximation vθ is the mean squared Bellman error (MSBE)
PROBLEM FORMULATION,0.060209424083769635,"MSBE(θ)
def=
X"
PROBLEM FORMULATION,0.06282722513089005,"s∈S
d(s)((T vθ)(s) −vθ(s))2 =
X"
PROBLEM FORMULATION,0.06544502617801047,"s∈S
d(s)E[δ(θ) | S = s]2
(1)"
PROBLEM FORMULATION,0.06806282722513089,"where δ(θ)
def= Rt+1 + γt+1vθ(St+1) −vθ(St). If vπ ∈F, then there exists a θ such that vθ = vπ
and MSBE(θ) = 0. Otherwise, if vπ /∈F, then this objective trades-off Bellman error across states."
PROBLEM FORMULATION,0.07068062827225131,"The trade-off in errors across states is impacted by both the weighting d as well as the fact that a
squared error is used. The function approximator focuses on states with high weighting d, which is
sensible. However, by using a squared error, it heavily emphasizes states with higher error which
may not be desirable. In the next section, we develop an approach to use robust losses—the absolute
error and the Huber error—in place of this squared error."
PROBLEM FORMULATION,0.07329842931937172,"The same approach as above can also be used for control to approximate the optimal action-values q∗.
These values can similarly be deﬁned using a Bellman optimality operator"
PROBLEM FORMULATION,0.07591623036649214,"(T ∗q)(s, a)
def= E

Rt+1 + γt+1 max
a′∈A q(St+1, a′) | St = s, At = a
"
PROBLEM FORMULATION,0.07853403141361257,"with T ∗q∗= q∗. The corresponding mean squared Bellman error for learning approximate qθ is
X"
PROBLEM FORMULATION,0.08115183246073299,"s∈S,a∈A
d(s, a) [(T ∗qθ)(s, a) −qθ(s, a)]2"
PROBLEM FORMULATION,0.08376963350785341,"where we overload d to be a state-action weighting, which typically corresponds to the state-action
visitation frequency under a policy."
ROBUST BELLMAN ERRORS,0.08638743455497382,"3
ROBUST BELLMAN ERRORS"
ROBUST BELLMAN ERRORS,0.08900523560209424,"In this section, we provide reformulations of the MABE and the MHBE which avoid the double
sampling issue by using their biconjugates. For some intuition on how these objectives differ from
the MSVE and MSBE, we visualize them in Figure 1."
ROBUST BELLMAN ERRORS,0.09162303664921466,"Figure 1:
Objective values and
ﬁxed-points on the HardAlias-2
MDP (deﬁned in Section 5). The
ﬁxed-points of the absolute and Hu-
ber objectives are much better prox-
ies for the squared value error than
the ﬁxed-point of the squared Bell-
man error. The dotted vertical lines
indicate minima of each objective."
ROBUST BELLMAN ERRORS,0.09424083769633508,"The absolute Bellman error is straightforward to specify for
a state, |E[δ(θ) | S = s] |, as is the Huber Bellman error,
pτ (E[δ(θ) | S = s]), where the Huber function is"
ROBUST BELLMAN ERRORS,0.0968586387434555,"pτ (a)
def=
a2
if |a| ≤τ
2τ|a| −τ 2
otherwise"
ROBUST BELLMAN ERRORS,0.09947643979057591,"for some τ ≥0. A common choice in RL is τ = 1.0, which
corresponds to using squared error when the magnitude of the
error is below 1, and absolute error otherwise."
ROBUST BELLMAN ERRORS,0.10209424083769633,"The difﬁculty, however, is obtaining a sample of the gradient
of this objective for the same reason as the MSBE: the double
sampling problem. To see why, let us examine the gradient of
the MSBE"
ROBUST BELLMAN ERRORS,0.10471204188481675,"∇MSBE(θ)=
X"
ROBUST BELLMAN ERRORS,0.10732984293193717,"s∈S
d(s)E[δ(θ) | S =s] ∇E[δ(θ) | S =s] ."
ROBUST BELLMAN ERRORS,0.1099476439790576,"To sample this gradient requires a sample of δ(θ) for the ﬁrst expectation and an independent sample
of δ(θ) for the second expectation. Otherwise, using the same sample, we estimate the gradient of
E

δ(θ)2 | S = s

instead of E[δ(θ) | S = s]2. Due to the chain rule, both the MABE and MHBE
will suffer from the same issue as the MSBE."
ROBUST BELLMAN ERRORS,0.112565445026178,"The strategy is to reformulate the objectives using conjugates, introducing an auxiliary variable to
estimate part of the gradient. For a real-valued function f : R →R, the conjugate is f ∗(h)
def=
supx∈R xh −f(x). This function f ∗also has a conjugate, f ∗∗, which is called the biconjugate of
f. Further, for any function f that is proper, convex, and lower semi-continuous, the biconjugate
f ∗∗(x) = f(x) for all x by the Fenchel-Moreau theorem (Fenchel, 1949; Moreau, 1970). Because
the three functions we want to reformulate—the absolute, huber, and square functions—are all proper,"
ROBUST BELLMAN ERRORS,0.11518324607329843,Under review as a conference paper at ICLR 2022
ROBUST BELLMAN ERRORS,0.11780104712041885,"convex, and lower semi-continuous, this equivalence allows us to reformulate these losses using
biconjugates to avoid the double sampling issue without changing the solutions to these losses."
ROBUST BELLMAN ERRORS,0.12041884816753927,"To rewrite existing results in our notation and provide some intuition, we ﬁrst write the reformulation
for the MSBE. The conjugate of the squared error f(x) = 1"
ROBUST BELLMAN ERRORS,0.12303664921465969,2x2 is f ∗(h) = maxx∈R hx−1
ROBUST BELLMAN ERRORS,0.1256544502617801,"2x2, which
is in fact again the squared error: f ∗(h) = 1"
ROBUST BELLMAN ERRORS,0.12827225130890052,"2h2 (this result is well known, but for completeness
we include the proof in Appendix A). The biconjugate is f ∗∗(x) = maxh∈R xh −1"
ROBUST BELLMAN ERRORS,0.13089005235602094,"2h2 and f(x) =
f ∗∗(x). We can use this to get that, for x = E[δ(θ) | S = s],"
ROBUST BELLMAN ERRORS,0.13350785340314136,"E[δ(θ) | S = s]2 = max
h∈R 2E[δ(θ) | S = s] h −h2."
ROBUST BELLMAN ERRORS,0.13612565445026178,If we have function space Fall—the set of all possible functions h : S →R—then we get that
ROBUST BELLMAN ERRORS,0.1387434554973822,"MSBE(θ) =
X"
ROBUST BELLMAN ERRORS,0.14136125654450263,"s∈S
d(s) max
h∈R (2E[δ(θ) | S = s] h −h2)"
ROBUST BELLMAN ERRORS,0.14397905759162305,"= max
h∈Fall X"
ROBUST BELLMAN ERRORS,0.14659685863874344,"s∈S
d(s)(2E[δ(θ) | S = s] h(s) −h(s)2)"
ROBUST BELLMAN ERRORS,0.14921465968586387,"where the maximization comes out of the sum using the interchangeability property (Shapiro et al.,
2014; Dai et al., 2017) and h(s) is a function that allows us to independently pick a maximizer for
every state in the summation."
ROBUST BELLMAN ERRORS,0.1518324607329843,"If we have the maximizing function h∗(s), it is straightforward to sample the gradient. Because h∗(s)
itself is not directly a function of θ, then the gradient is ∇θ
X"
ROBUST BELLMAN ERRORS,0.1544502617801047,"s∈S
d(s)(2E[δ(θ) | St =s] h∗(s)−h∗(s)2) =
X"
ROBUST BELLMAN ERRORS,0.15706806282722513,"s∈S
2d(s)h∗(s)E[γ∇θv(S′) −∇θv(s)) | St =s] ."
ROBUST BELLMAN ERRORS,0.15968586387434555,"Drawing samples S ∼d(·), A ∼π(·|S), and S′ ∼P(·|S, A), we can easily compute a stochastic
sample of the gradient. In practice, we simply optimize the resulting saddlepoint problem with a
minimization over θ and maximization over h. Note the optimal h∗(s) = E[δ(θ) | St = s]."
ROBUST BELLMAN ERRORS,0.16230366492146597,"We can use the same procedure for the Huber error and the absolute error. We derive the biconjugate
form for the Huber error in the following proposition. Though it is a relatively straightforward result
to obtain, to the best of our knowledge, it is new and so worth providing formally."
ROBUST BELLMAN ERRORS,0.1649214659685864,Proposition 3.1 The biconjugate of the Huber function is
ROBUST BELLMAN ERRORS,0.16753926701570682,"p∗∗
τ (x) =
max
h∈[−τ,τ] xh −1"
ROBUST BELLMAN ERRORS,0.17015706806282724,"2h2.
(2)"
ROBUST BELLMAN ERRORS,0.17277486910994763,"Due to space restrictions, we provide a complete proof in Appendix A."
ROBUST BELLMAN ERRORS,0.17539267015706805,"The absolute value has biconjugate maxh∈[−1,1] xh. As in the squared error case, this is a well
known result but we include the proof for completeness in Appendix A. Notice again the constrained
optimization problem for this biconjugate, as in the case of the Huber biconjugate function."
ROBUST BELLMAN ERRORS,0.17801047120418848,We can now provide the forms for MABE and MHBE:
ROBUST BELLMAN ERRORS,0.1806282722513089,"MABE(θ)
def= max
h∈Fsign X"
ROBUST BELLMAN ERRORS,0.18324607329842932,"s∈S
d(s)h(s)E[δ(θ)|S = s]"
ROBUST BELLMAN ERRORS,0.18586387434554974,"MHBE(θ)
def= max
h∈Fclipτ X"
ROBUST BELLMAN ERRORS,0.18848167539267016,"s∈S
d(s)(2h(s)E[δ(θ)|S = s] −h(s)2)"
ROBUST BELLMAN ERRORS,0.19109947643979058,"Fsign is the set of all functions hsign :S →{−1, 1} and Fclipτ the set of all functions hclipτ :S →[−τ, τ]."
ROBUST BELLMAN ERRORS,0.193717277486911,"For all of these reformulations, in practice we will have parameterized functions h, and so
only approximate the objective.
For example, for the MSBE, we may use linear functions
Fh = {h | h(s) = θh
⊤x(s), θh ∈Rd} where x : S →Rd is a d-dimensional feature generat-"
ROBUST BELLMAN ERRORS,0.19633507853403143,"ing function. For the MHBE, we might use Fh = {h | h(s) = clipτ

θh
⊤x(s)

, θh ∈Rd}."
ROBUST BELLMAN ERRORS,0.19895287958115182,"For the conjugate reformulation of the MSBE, limiting vθ and h(s) to both be linear functions of
the same features results in the mean squared Projected Bellman error, as noted by Dai et al. (2017)."
ROBUST BELLMAN ERRORS,0.20157068062827224,Under review as a conference paper at ICLR 2022
ROBUST BELLMAN ERRORS,0.20418848167539266,"There are no equivalent existing projected Bellman errors for these new absolute and Huber variants.
We note, however, that when the function space is constrained to only functions of our features x(s),
these conjugate reformulations do not suffer from the same identiﬁability issue raised for the MSBE
(Sutton and Barto, 2018; Scherrer, 2010) as we show in Appendix B."
ROBUST BELLMAN ERRORS,0.20680628272251309,"The ﬁnal form of the MHBE highlights a connection to a recently proposed gradient TD algorithm
that seemed to signiﬁcantly improve stability over vanilla gradient TD methods. The algorithm, called
TD with Regularized Corrections (TDRC), adds a regularizer to the parameters for h (Ghiassian et al.,
2020). This regularizer has the effect of constraining h(s) to be closer to zero, and so could be seen as
providing some of the same robustness beneﬁts as a Huber loss. Of course, the correspondence is by
no means exact. Regularizing with ℓ2 on the parameters is different than restricting between −1 and
1. Further, as shown in that work, TDRC does not alter the ﬁxed-point of its mean squared objective.
Using the Huber error in place of the squared error, however, will likely alter the ﬁxed-point."
ROBUST BELLMAN ERRORS,0.2094240837696335,"Finally, we show that the MHBE bounds the MAVE. It is well-known that absolute errors are hard to
optimize and so the Huber error acts as a smooth approximation to the absolute error. Theorem 3.2
ﬁrst shows that minimizing the MABE acts as a proxy for minimizing the MAVE. Then, by bounding
the absolute value error with the Huber error, we get that the MHBE acts as an approximation of
the MABE implying that minimizing the MHBE likewise minimizes the MAVE. Because of this
approximation, the MHBE has an irreducible error term which is controlled by the Huber parameter
τ. We provide a complete proof of Theorem 3.2 in Appendix A.1."
ROBUST BELLMAN ERRORS,0.21204188481675393,"Theorem 3.2 Let τcap = min(τ, 1), then for arbitrary v ∈Rd and 0 < ϵ < τ 2
cap we have"
ROBUST BELLMAN ERRORS,0.21465968586387435,"∥vπ −v∥1 ≤∥(I −Pπ,γ)−1∥1∥T v −v∥1 ≤∥(I −Pπ,γ)−1∥1 d
X s=0 √ϵ"
ROBUST BELLMAN ERRORS,0.21727748691099477,"2ϵ pτ (T vs −vs) +
√ϵ 2 
."
OPTIMIZING THE OBJECTIVES,0.2198952879581152,"4
OPTIMIZING THE OBJECTIVES"
OPTIMIZING THE OBJECTIVES,0.22251308900523561,"The gradient of all the reformulated objectives in terms of θ, for a given h, is actually the same:
P"
OPTIMIZING THE OBJECTIVES,0.225130890052356,"s∈S d(s)h(s)E[∇δ(θ)|S = s]. This means that the job of selecting between the absolute, squared,
and Huber Bellman errors rests solely on how we approximate the secondary variable, h(s). There
are many ways to estimate the h for the MHBE and MABE. A natural starting point would be to use
the same estimate, ˜hθh(s) ≈E[δ | S = s], as in the mean squared case, then apply the corresponding
non-linear function to ˜h—sign or clipping. This gives the following updates for the objectives."
OPTIMIZING THE OBJECTIVES,0.22774869109947643,"▷MABE
▷MHBE
▷MSBE"
OPTIMIZING THE OBJECTIVES,0.23036649214659685,"h(st) = sign(˜hθh,t(st))
h(st) = clipτ

˜hθh,t(st)

h(st) = ˜hθh,t(st)"
OPTIMIZING THE OBJECTIVES,0.23298429319371727,"θh,t+1 = θh,t + αh

δt −˜hθh,t(st)

∇θh,t˜hθh,t(st)
(3)"
OPTIMIZING THE OBJECTIVES,0.2356020942408377,"θt+1 = θt + αvh(st) (∇θtv(st) −γt+1∇θtv(St+1))
(4)"
OPTIMIZING THE OBJECTIVES,0.23821989528795812,"Notice if we speciﬁcally parameterize ˜hθh(s) = θh
⊤x(s) and v(s) = θ⊤x(s), then we recover the
GTD2 algorithm with linear function approximation (Sutton et al., 2009). Because the update for the
primary weights is exactly the same as GTD2 and because the clip function encodes box-constraints
on the secondary weights (and so is closed and convex), convergence of the GTD2-like algorithm for
the MHBE follows directly from Nemirovski et al. (2009)."
OPTIMIZING THE OBJECTIVES,0.24083769633507854,"However, this parameterization is likely not ideal for either MABE or MHBE, because the func-
tion approximation does not ﬁnd the best h under the constraints. Another strategy is to pick a
parameterized function class that encodes the constraints. For instance, in the case of the MABE
the function, h(s) is effectively a 2-class classiﬁer for the sign of E[δ | S = s], which can be easily
parameterized using a logistic regressor for example. Likewise, for the MHBE, the clipping function
can be approximated using a rescaled logistic function clipτ (x) ≈τ tanh( 1"
OPTIMIZING THE OBJECTIVES,0.24345549738219896,"τ x), which we will use for
the nonlinear control algorithm in Section 6. Despite being approximations, directly parameterizing
the sign and clip functions may provide some advantages such as being a smooth approximation
to the sign function or a twice differentiable approximation to the clip function; improving their
optimization surface."
OPTIMIZING THE OBJECTIVES,0.24607329842931938,Under review as a conference paper at ICLR 2022
OPTIMIZING THE OBJECTIVES,0.2486910994764398,"Several past works have reported a large performance difference between the GTD2 saddlepoint
algorithm and the TDC gradient-correction algorithm (White and White, 2016; Ghiassian et al., 2018).
The primary parameter vector in gradient-correction methods depends directly on a sample of the TD
error, δ, thus beneﬁts from a direct unbiased error signal. Assuming linear function approximation,
the update is δx(st) −γt+1h(st)x(st+1). The saddlepoint algorithms, on the other hand, rely fully
on h—as in the updates above—providing a low-variance but possibly highly biased update."
OPTIMIZING THE OBJECTIVES,0.2513089005235602,Manipulating GTD2 update shows the relationship between the saddlepoint and gradient-correction
OPTIMIZING THE OBJECTIVES,0.25392670157068065,"−∇θδ(θ)h(st) = h(st)∇θv(st) −γh(st)∇θv(St+1)
= (h(st) −δ(θ) + δ(θ))∇θv(st) −γh(st)∇θv(St+1)"
OPTIMIZING THE OBJECTIVES,0.25654450261780104,"= δ(θ)∇θv(st) −γh(st)∇θv(S′)
|
{z
}
TDC update"
OPTIMIZING THE OBJECTIVES,0.2591623036649215,"+ (h(st) −δ(θ))∇θv(st)
|
{z
}
extra term"
OPTIMIZING THE OBJECTIVES,0.2617801047120419,"where we end up with a gradient that looks similar to the update for TDC, but with an extra term that
accounts for the deviation between δ and our estimate, h(s). In fact, in the case of linear function
approximation, and when h is the best linear approximation, the expected value of this additional term
over all states is zero, making TDC an unbiased estimate of the true gradient as shown in Appendix C."
OPTIMIZING THE OBJECTIVES,0.2643979057591623,"Similarly, we can construct a corresponding gradient correction update to optimize the robust
objectives, but at the cost of some additional bias in the approximate gradient because the extra term
does not go away in expectation for the MHBE or MABE. As in the original TDC algorithm, the
update for the secondary parameters θh remains the same."
OPTIMIZING THE OBJECTIVES,0.2670157068062827,θt+1 = θt + αv (δ(st)∇θtv(st) −γt+1h(st)∇θtv(St+1))
OPTIMIZING THE OBJECTIVES,0.2696335078534031,"We report the bias of the gradient for this update, for both the MABE and MHBE, in Appendix C.
We empirically investigate both updates for all three objectives in Section 5."
PREDICTION EXPERIMENTS,0.27225130890052357,"5
PREDICTION EXPERIMENTS"
PREDICTION EXPERIMENTS,0.27486910994764396,"We ﬁrst investigate the quality of the ﬁxed-points of each objective on several linear prediction
tasks. The goal is to demonstrate the large advantage of the robust objectives in some settings, while
maintaining reasonable performance across settings. We then investigate two families of online
stochastic algorithms to optimize these objectives. We demonstrate that the Huber objective can often
improve—and never harms—the optimization procedure for online learning."
PREDICTION EXPERIMENTS,0.2774869109947644,Environments
PREDICTION EXPERIMENTS,0.2801047120418848,"We investigate six different problem settings, each chosen to highlight particular challenges for each
objective. The ﬁrst two use a challenging state representation with features that aggressively alias
across states. The robust objectives perform favorably on these problem settings, while the MSBE
ﬁnds solutions that tradeoff accuracy in the aliased states poorly. HardAlias-1 is an 8-state random
walk where the ﬁrst, third, and ﬁnal states share a common feature, and the remaining ﬁve states
share three features. HardAlias-2 is the 2-state problem from Tsitsiklis and Van Roy (1997), which
was originally designed to highlight the insufﬁciency of minimizing the squared Bellman Residual.
We lightly modify the reward function of the MDP so the optimal value function cannot be perfectly
represented allowing each objective to have different minima."
PREDICTION EXPERIMENTS,0.28272251308900526,"The next investigated problem setting (Outlier) is designed to highlight the advantages of the MHBE
by creating a single outlier state with a large magnitude return among a large set of states with
approximately normally distributed returns. To emulate a more realistic learning scenario, we use a
randomly initialized frozen neural network to generate ﬁve features to describe 50 state. The agent
starts in a state that has an ϵ = 0.01 chance of terminating immediately with -1000 reward, or a 1 −ϵ
chance of entering the middle state of a 49-state random walk."
PREDICTION EXPERIMENTS,0.28534031413612565,"The next pair of investigated problems are chosen to highlight a scenario where the MSBE ﬁnds
favorable solutions compared to the robust objectives. In these problem settings, the returns are
distributed approximately normally across states and states are lightly aliased. We use two random
walks, the ﬁrst with N = 5 states (SmallChain) and the other with N = 19 states (BigChain), with
a randomly initialized neural network representation of size N"
PREDICTION EXPERIMENTS,0.2879581151832461,"2 . The agent receives a reward of −1 or
+1 on the left and right-most states respectively."
PREDICTION EXPERIMENTS,0.2905759162303665,Under review as a conference paper at ICLR 2022
PREDICTION EXPERIMENTS,0.2931937172774869,"Figure 2:
Evaluating the quality of the ﬁxed-points of
each objective function according to the MSVE and MAVE
across several prediction problems. Error is plotted relative
to the best representable value function. The robust losses
are better in the hard aliasing domains, the MHBE is slightly
better in Outlier, and the MSBE is better on the classic
random walks. Note: the error for the MSBE is clipped in
HardAlias-2 (approx. 25 MAVE)."
PREDICTION EXPERIMENTS,0.29581151832460734,"Figure 3: MSVE averaged over 100 independent trials, for each stepsize in prediction domains. The
mean squared algorithms generally performed well across environments—even the adversarially
chosen environments—suggesting the difﬁculty in minimizing the MABE. The Huber algorithms
performed best across many environments, often displaying less sensitivity to the choice of stepsize."
PREDICTION EXPERIMENTS,0.29842931937172773,"The ﬁnal investigated problem setting (Baird) is the well-known star MDP from Baird (1999). We use
this domain to investigate optimization performance in a high-variance off-policy setting where TD
diverges. Because the true values are representable, the ﬁxed-points of each objective are equivalent."
PREDICTION EXPERIMENTS,0.3010471204188482,Investigating the ﬁxed-points
PREDICTION EXPERIMENTS,0.3036649214659686,"In this section, we seek to understand the quality of the solution of each proposed objective function
according to the MSVE and MAVE metrics. We ﬁrst assume access to a perfect model of each
problem setting, then analytically compute the batch gradient for each objective and perform gradient
descent using the ADAM optimizer (Kingma and Ba, 2015) and iterate averaging. We additionally
assume access to the true underlying state for each MDP and that partial observability due to state
aliasing occurs from poor feature selection. This setting allows us to understand the properties of
our feature generating functions, our MDPs, and our policies for which certain losses—such as the
MSBE—may suffer. For problem settings with randomly initialized feature representations, we
perform this procedure for 1000 randomly generated representations and report the average error."
PREDICTION EXPERIMENTS,0.306282722513089,"Figure 2 shows the relative MSVE and MAVE for each ﬁxed-point across problems. For MSVE,
the robust objective ﬁxed-points are consistently either the best or only off by a comparatively small
margin from the squared objective ﬁxed-points. The squared objective ﬁxed-points, however, can
have catastrophically bad performance, even on small problems like HardAlias-2."
PREDICTION EXPERIMENTS,0.3089005235602094,Investigating the optimization algorithms
PREDICTION EXPERIMENTS,0.31151832460732987,"We investigate the effectiveness of the optimization algorithms proposed in Section 4 on a subset of
the linear prediction problem settings. We choose one representative problem setting that favored the
MABE and one that favored the MSBE when evaluating the ﬁxed-points. We perform ten thousand
update steps for every algorithm on each problem, except on HardAlias-1 where we use one hundred
thousand to ensure learning has slowed for every algorithm."
PREDICTION EXPERIMENTS,0.31413612565445026,"We look at performance across a wide range of stepsizes, α ∈{2−16, 2−15, . . . , 2−1}, and report
the mean and standard error over 100 independent trials for each stepsize, algorithm, and problem
setting. To choose the secondary stepsize for each algorithm, we sweep over ratios η =
α
αv ∈
{2−4, 2−3, . . . , 23, 24} and report performance using the best secondary stepsize for every point."
PREDICTION EXPERIMENTS,0.31675392670157065,"In Figure 3 we show stepsize sensitivities for each problem and algorithm measured using the MSVE.
Due to the similarity in conclusions, we relegate the MAVE sensitivities to Appendix D. The mean
absolute TDC variant appears to suffer as a result of biased gradient estimates and generally performs
worse across stepsizes than its GTD2-based counterpart. Generally the robust GTD2 algorithms and
the Huber TDC algorithm show wider stepsize sensitivities and often the MHBE algorithms show
marginally better performance for their best choice of stepsize."
PREDICTION EXPERIMENTS,0.3193717277486911,Under review as a conference paper at ICLR 2022
NONLINEAR CONTROL EXPERIMENTS,0.3219895287958115,"6
NONLINEAR CONTROL EXPERIMENTS"
NONLINEAR CONTROL EXPERIMENTS,0.32460732984293195,"Our experiments so far focused on prediction with linear function approximation. However, one of the
primary motivating factors of using conjugate Bellman errors is the natural and theoretically sound
extension to nonlinear function approximation and control. In this section, we empirically investigate
a Huber algorithm for nonlinear control, where we estimate qθ and h using neural networks."
NONLINEAR CONTROL EXPERIMENTS,0.32722513089005234,The QRC-Huber Algorithm
NONLINEAR CONTROL EXPERIMENTS,0.3298429319371728,"To estimate the secondary parameters of the MHBE for control, we use a two-headed neural network
where each head has one output for every action. The ﬁrst head estimates qθ(s, a) and the second
head estimates ˜h(s, a). We block gradients from being passed back from the second head of the
network, allowing the network’s full function approximation resources to be used for predicting
qθ(s, a) as accurately as possible. This parameterization was used for an algorithm called QRC, an
extension of the TDRC algorithm to control (Ghiassian et al., 2020). As discussed in Ghiassian et al.
(2020)—and reconﬁrmed in our own experiments in Appendix D—using the saddlepoint update rule
leads to poor performance in control, so we choose to use the gradient correction update."
NONLINEAR CONTROL EXPERIMENTS,0.3324607329842932,This results in the following update rules
NONLINEAR CONTROL EXPERIMENTS,0.33507853403141363,"θh,t+1 = θh,t + α

δ −˜h(s, a)

∇θh,t˜h(s, a) −αβθh,t"
NONLINEAR CONTROL EXPERIMENTS,0.337696335078534,"θt+1 = θt + α(δ∇θQ(s, a) −γh(s, a)∇θ max
a
Q(S′, a))"
NONLINEAR CONTROL EXPERIMENTS,0.3403141361256545,"where θ refers to all of the parameters of the neural network, except the parameters for the secondary
head, and β is the regularization parameter from Ghiassian et al. (2020). Unlike in the prediction
setting, we choose to use a twice differentiable approximation of the clipping function to allow easier
optimization with pseudo-second order methods like ADAM (Kingma and Ba, 2015). We accomplish
this using the tanh function h(s, a) = τ tanh( 1"
NONLINEAR CONTROL EXPERIMENTS,0.34293193717277487,"τ ˜h(s, a))."
NONLINEAR CONTROL EXPERIMENTS,0.34554973821989526,Experiments in Classic Control Domains
NONLINEAR CONTROL EXPERIMENTS,0.3481675392670157,"For the nonlinear control experiments, we investigate three classic control problems—Mountain Car,
Cart-pole, and Acrobot—from the Gym suite (Brockman et al., 2016), a larger domain with a heavily
shaped reward—Lunar Lander—and one additional domain designed to be particularly challenging
for squared error algorithms, Cliff World. For all domains, discount factor γ = 0.99 and ϵ = 0.1 for
the ϵ-greedy policy. The episode is cutoff if the agent fails to reach a terminal state in a pre-speciﬁed
number of steps. When cut off, the agent is teleported back to the start state and does not update its
value function, thus preventing the agent from bootstrapping over the teleportation transition."
NONLINEAR CONTROL EXPERIMENTS,0.3507853403141361,"For all environments and algorithms, we sweep a broad range of stepsizes and report results for every
swept stepsize in Appendix D.. For QRC-Huber, we ﬁx the Huber threshold parameter τ = 1 for all
domains except Mountain Car, where we use τ = 2. We further ablate the impact of this decision
in Appendix D. For the QRC methods, we chose not to use target networks—a frozen, infrequently
updated set of weights for the bootstrapping target—so that we can highlight the stability provided
by using true gradient-based methods with robust losses. DQN uses targets networks and sweeps
over multiple refresh rates and additionally sweeps over its clipping parameter. In total, QRC and
QRC-Huber tune over 6 meta-parameter combinations while DQN tunes over 120."
NONLINEAR CONTROL EXPERIMENTS,0.35340314136125656,"To demonstrate the stability of each algorithm, we report the full distribution of the performance
metric over 100 independent trials for the best stepsize on each domain. We use the average return
achieved over the last 25% of steps as our performance metric. We expect algorithms which exhibit
stable performance to have a narrow, approximately normal distribution centered around higher
return, while algorithms which are unstable we expect to have wide performance distributions or even
multi-modal distributions. We also report standard learning curves, in Figure 5."
NONLINEAR CONTROL EXPERIMENTS,0.35602094240837695,"Figure 4: Subplots show the distribution over 100 random seeds. The performance measure is the
average return over the last 25% of steps for the best stepsize meta-parameter chosen per-domain.
QRC-Huber consistently has approximately normal and narrow distributions around high-performance
returns. DQN has highly inconsistent behavior over random seeds, with bimodal performance on
Mountain Car and Lunar Lander, and very long-tailed performance on Acrobot and Cartpole."
NONLINEAR CONTROL EXPERIMENTS,0.3586387434554974,Under review as a conference paper at ICLR 2022
NONLINEAR CONTROL EXPERIMENTS,0.3612565445026178,"Figure 5: Learning curves for the best meta-parameter conﬁguration for each domain, averaged over
100 random seeds. Shaded regions indicate one standard error. In Acrobot and Cart Pole, QRC-Huber
and QRC have similar performance. In Acrobot and Cliff World, DQN and QRC-Huber have similar
performance. However, in Mountain Car and Lunar Lander, QRC-Huber has signiﬁcantly better
performance than both competitors. QRC-Huber is the only algorithm to reliably solve all domains."
NONLINEAR CONTROL EXPERIMENTS,0.36387434554973824,"Figure 4 shows the performance distributions of each tested algorithm. QRC-Huber exhibits narrow
and approximately normal performance distributions for every domain, suggesting the stability of the
algorithm over random seeds. The QRC algorithm performs reasonably on the Acrobot and Cart-pole
domains, but performs quite poorly on the Cliff World domain. Because QRC is based on the mean
squared Bellman error, the poor performance on Cliff World is exactly as expected, since this domain
was chosen adversarially to highlight challenges with mean squared errors. While DQN is based on a
clipped loss function that appears similar to the mean Huber Bellman error, it does not seem to enjoy
the same stability as QRC-Huber, with average performance far worse than QRC-Huber on four of
ﬁve domains due to high bimodality or long-tailed performance distributions. The learning curves in
Figure 5 further highlight that QRC-Huber is the most robust of the three, across all ﬁve problem
setting, either having comparable or notably better performance."
NONLINEAR CONTROL EXPERIMENTS,0.36649214659685864,Experiments on Minatar
NONLINEAR CONTROL EXPERIMENTS,0.36910994764397903,"Finally, we demonstrate that QRC-Huber can scale to larger domains using more complex neural
network architectures. We use the Minatar suite of ﬁve miniaturized Atari games which retain
much of the complexity of the full Atari games, while considerably reducing the computational
requirements and cost (Young and Tian, 2019). We allow all three control algorithms to sweep over a
small range of stepsizes and allow only DQN to sweep over target network refresh rates, as both QRC
and QRC-Huber do not require target networks. We set the discount factor γ = 0.99 for all domains
and use the same neural network architecture and default parameters as Young and Tian (2019)."
NONLINEAR CONTROL EXPERIMENTS,0.3717277486910995,"To avoid domain overﬁtting and reduce the cost of meta-parameter tuning, we treat the entire Minatar
suite as a single problem setting. As such, each algorithm must pick one meta-parameter setting to
use across all ﬁve games; favoring algorithms which are stable and insensitive to parameter choices.
We scale the expected returns from each domain using probabilistic performance proﬁles (Jordan
et al., 2020; Barreto et al., 2010), then report the average scaled performance across the entire suite
with 95% conﬁdence intervals. We run each algorithm with its best meta-parameter setting for 30 runs
on each domain for a total of 150 runs. Additional procedural details can be found in Appendix E."
NONLINEAR CONTROL EXPERIMENTS,0.3743455497382199,Table 1: Average return on Minatar
NONLINEAR CONTROL EXPERIMENTS,0.3769633507853403,"QRC-Huber
0.53 ± 0.03
QRC
0.47 ± 0.02
DQN
0.36 ± 0.06"
NONLINEAR CONTROL EXPERIMENTS,0.3795811518324607,"In Table 1, we report the average scaled return across games
in the Minatar suite. QRC-Huber outperforms both QRC
and DQN on average across domains. Despite having four
times the number of meta-parameter combinations and the
ability to use target networks, DQN performs considerably
worse than either gradient-based algorithm. That QRC and
QRC-Huber perform similarly is unsurprising as the largest possible reward in any Minatar game
is +1, a design decision made in part because many algorithms—such as DQN—are unstable when
learning from large rewards. Additional results on the Minatar suite are included in Appendix D."
CONCLUSION,0.38219895287958117,"7
CONCLUSION"
CONCLUSION,0.38481675392670156,"In this work, we extended the saddlepoint reformulation of the mean squared Bellman error, intro-
ducing a novel pair of robust losses, the mean absolute Bellman error and the mean Huber Bellman
error. We demonstrated that the solutions to these robust objectives are comparable to the MSBE, and
in some scenarios are signiﬁcantly better according to the value error. The resultant gradient-based
algorithms are less sensitive to choice of stepsize in prediction and have more stable performance
distributions in control."
CONCLUSION,0.387434554973822,Under review as a conference paper at ICLR 2022
REFERENCES,0.3900523560209424,REFERENCES
REFERENCES,0.39267015706806285,"András Antos, Csaba Szepesvári, and Rémi Munos. Learning near-optimal policies with Bellman-
residual minimization based ﬁtted policy iteration and a single sample path. Machine Learning,
2008."
REFERENCES,0.39528795811518325,"Leemon Baird. Residual Algorithms: Reinforcement Learning with Function Approximation. Ma-
chine Learning Proceedings, 1995."
REFERENCES,0.39790575916230364,"Leemon C. Baird. Reinforcement Learning through Gradient Descent. PhD thesis, Brown University,
1999."
REFERENCES,0.4005235602094241,"André M.S. Barreto, Heder S. Bernardino, and Helio J.C. Barbosa. Probabilistic performance proﬁles
for the experimental evaluation of stochastic algorithms. Conference on Genetic and Evolutionary
Computation, 2010."
REFERENCES,0.4031413612565445,"Andrew G. Barto, Richard S. Sutton, and Charles W. Anderson. Neuronlike adaptive elements that can
solve difﬁcult learning control problems. IEEE Transactions on Systems, Man, and Cybernetics,
1983."
REFERENCES,0.40575916230366493,"Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas Schneider, John Schulman, Jie Tang, and
Wojciech Zaremba. Openai gym. arXiv preprint arXiv:1606.01540, 2016."
REFERENCES,0.4083769633507853,"Bo Dai, Niao He, Yunpeng Pan, Byron Boots, and Le Song. Learning from Conditional Distributions
via Dual Embeddings. International Conference on Artiﬁcial Intelligence and Statistics, 2017."
REFERENCES,0.4109947643979058,"Bo Dai, Albert Shaw, Lihong Li, Lin Xiao, Niao He, Zhen Liu, Jianshu Chen, and Le Song. SBEED:
Convergent Reinforcement Learning with Nonlinear Function Approximation. International
Conference on Machine Learning, 2018."
REFERENCES,0.41361256544502617,"Werner Fenchel. On conjugate convex functions. Canadian Journal of Mathematics, 1949."
REFERENCES,0.4162303664921466,"Yihao Feng, Lihong Li, and Qiang Liu. A Kernel Loss for Solving the Bellman Equation. Advances
in Neural Information Processing Systems 32, 2019."
REFERENCES,0.418848167539267,"Sina Ghiassian, Andrew Patterson, Martha White, Richard S. Sutton, and Adam White. Online
Off-policy Prediction. arXiv:1811.02597, 2018."
REFERENCES,0.4214659685863874,"Sina Ghiassian, Andrew Patterson, Shivam Garg, Dhawal Gupta, Adam White, and Martha White.
Gradient Temporal-Difference Learning with Regularized Corrections. International Conference
on Machine Learning, 2020."
REFERENCES,0.42408376963350786,"Charles R. Harris, K. Jarrod Millman, Stéfan J. van der Walt, Ralf Gommers, Pauli Virtanen,
David Cournapeau, Eric Wieser, Julian Taylor, Sebastian Berg, and Nathaniel J. Smith. Array
programming with NumPy. Nature, 2020."
REFERENCES,0.42670157068062825,"Matteo Hessel, Hubert Soyer, Lasse Espeholt, Wojciech Czarnecki, Simon Schmitt, and Hado
van Hasselt. Multi-task Deep Reinforcement Learning with PopArt. Proceedings of the AAAI
Conference on Artiﬁcial Intelligence, 2018."
REFERENCES,0.4293193717277487,"Peter J. Huber. Robust estimation of a location parameter. In Breakthroughs in Statistics. Springer,
1964."
REFERENCES,0.4319371727748691,"Scott M. Jordan, Yash Chandak, Daniel Cohen, Mengxue Zhang, and Philip S. Thomas. Evaluating
the Performance of Reinforcement Learning Algorithms. International Conference on Machine
Learning, 2020."
REFERENCES,0.43455497382198954,"Diederik P Kingma and Jimmy Ba. Adam: A Method for Stochastic Optimization. International
Conference on Learning Representations, 2015."
REFERENCES,0.43717277486910994,"Bo Liu, Ji Liu, Mohammad Ghavamzadeh, Sridhar Mahadevan, and Marek Petrik. Proximal Gradient
Temporal Difference Learning Algorithms. International Joint Conference on Artiﬁcial Intelligence,
2016."
REFERENCES,0.4397905759162304,Under review as a conference paper at ICLR 2022
REFERENCES,0.4424083769633508,"Hamid Reza Maei, Csaba Szepesvári, Shalabh Bhatnagar, Doina Precup, David Silver, and Richard S
Sutton. Convergent Temporal-Difference Learning with Arbitrary Smooth Function Approximation.
Advances in Neural Information Processing Systems, 2009."
REFERENCES,0.44502617801047123,"Sridhar Mahadevan, Bo Liu, Philip Thomas, Will Dabney, Steve Giguere, Nicholas Jacek, Ian Gemp,
and Ji Liu. Proximal Reinforcement Learning: A New Theory of Sequential Decision Making in
Primal-Dual Spaces. arXiv:1405.6757, 2014."
REFERENCES,0.4476439790575916,"Ashique Rupam Mahmood, Huizhen Yu, and Richard S. Sutton. Multi-step Off-policy Learning
Without Importance Sampling Ratios. arXiv:1702.03006, 2017."
REFERENCES,0.450261780104712,"Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A. Rusu, Joel Veness, Marc G. Belle-
mare, Alex Graves, Martin Riedmiller, Andreas K. Fidjeland, and Georg Ostrovski. Human-level
control through deep reinforcement learning. Nature, 2015."
REFERENCES,0.45287958115183247,"Andrew William Moore. Efﬁcient Memory-Based Learning for Robot Control. PhD thesis, University
of Cambridge, 1990."
REFERENCES,0.45549738219895286,"Jean Jacques Moreau. Inf-convolution, sous-additivité, convexité des fonctions numériques. Journal
de Mathématiques Pures et Appliquées, 1970."
REFERENCES,0.4581151832460733,"Remi Munos, Tom Stepleton, Anna Harutyunyan, and Marc Bellemare. Safe and Efﬁcient Off-Policy
Reinforcement Learning. Advances in Neural Information Processing Systems, 2016."
REFERENCES,0.4607329842931937,"Arkadi Nemirovski, Anatoli Juditsky, Guanghui Lan, and Alexander Shapiro. Robust stochastic
approximation approach to stochastic programming. SIAM Journal on optimization, 2009."
REFERENCES,0.46335078534031415,"Johan S. Obando-Ceron and Pablo Samuel Castro. Revisiting Rainbow: Promoting more insightful
and inclusive deep reinforcement learning research. International Conference on Machine Learning,
2021."
REFERENCES,0.46596858638743455,"Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor
Killeen, Zeming Lin, Natalia Gimelshein, and Luca Antiga. Pytorch: An imperative style, high-
performance deep learning library. arXiv preprint arXiv:1912.01703, 2019."
REFERENCES,0.468586387434555,"Doina Precup, Richard S Sutton, and Satinder Singh. Eligibility Traces for Off-Policy Policy
Evaluation. International Conference on Machine Learning, 2000."
REFERENCES,0.4712041884816754,"Bruno Scherrer. Should one compute the Temporal Difference ﬁx point or minimize the Bellman
Residual? the uniﬁed oblique projection view. International Conference on Machine Learning,
2010."
REFERENCES,0.4738219895287958,"Alexander Shapiro, Darinka Dentcheva, and Andrzej Ruszczy´nski. Lectures on Stochastic Program-
ming: Modeling and Theory. SIAM, 2014."
REFERENCES,0.47643979057591623,"Richard S. Sutton. Generalization in reinforcement learning: Successful examples using sparse coarse
coding. Advances in Neural Information Processing Systems, 1996."
REFERENCES,0.4790575916230366,"Richard S. Sutton and Andrew G. Barto. Reinforcement Learning: An Introduction. MIT Press, 2018."
REFERENCES,0.4816753926701571,"Richard S. Sutton, Hamid Reza Maei, Doina Precup, Shalabh Bhatnagar, David Silver, Csaba
Szepesvári, and Eric Wiewiora. Fast gradient-descent methods for temporal-difference learning
with linear function approximation. International Conference on Machine Learning, 2009."
REFERENCES,0.48429319371727747,"J.N. Tsitsiklis and B. Van Roy. An analysis of temporal-difference learning with function approxima-
tion. IEEE Transactions on Automatic Control, 1997."
REFERENCES,0.4869109947643979,"Ziyu Wang, Tom Schaul, Matteo Hessel, Hado van Hasselt, Marc Lanctot, and Nando de Freitas.
Dueling Network Architectures for Deep Reinforcement Learning. International Conference on
Machine Learning, 2016."
REFERENCES,0.4895287958115183,"Adam White and Martha White. Investigating practical linear temporal difference learning. Interna-
tional Conference on Autonomous Agents and Multi-Agent Systems, 2016."
REFERENCES,0.49214659685863876,Under review as a conference paper at ICLR 2022
REFERENCES,0.49476439790575916,"Martha White. Unifying Task Speciﬁcation in Reinforcement Learning. International Conference on
Machine Learning, 2017."
REFERENCES,0.4973821989528796,"Kenny Young and Tian Tian. MinAtar: An Atari-Inspired Testbed for Thorough and Reproducible
Reinforcement Learning Experiments. arXiv:1903.03176, 2019."
REFERENCES,0.5,Under review as a conference paper at ICLR 2022
REFERENCES,0.5026178010471204,"A
BICONJUGATE FORMS"
REFERENCES,0.5052356020942408,Proposition A.1 The biconjugate of the square function f(x) = 1
REFERENCES,0.5078534031413613,2x2 is f ∗∗(x) = maxh∈R hx−1 2h2.
REFERENCES,0.5104712041884817,Proof: Recall the deﬁnition of the convex conjugate and correspondingly the biconjugate:
REFERENCES,0.5130890052356021,"f ∗(x) = sup
h∈R
{hx −f(h)}"
REFERENCES,0.5157068062827225,"f ∗∗(x) = sup
h∈R
{hx −f ∗(h)}."
REFERENCES,0.518324607329843,"Then the conjugate of the square function with dual parameter a,"
REFERENCES,0.5209424083769634,"f ∗(x) = sup
a∈R
xa −1 2a2."
REFERENCES,0.5235602094240838,Applying the convex conjugate again and we obtain
REFERENCES,0.5261780104712042,"f ∗∗(x) = sup
h∈R"
REFERENCES,0.5287958115183246,"
xh −sup
a∈R"
REFERENCES,0.5314136125654451,"
ha −1"
REFERENCES,0.5340314136125655,"2a2

."
REFERENCES,0.5366492146596858,"Clearly, the inner supremum is achieved at a∗= h, so plugging in the maximizing value of a, we
obtain"
REFERENCES,0.5392670157068062,"f ∗∗(x) = sup
h∈R"
REFERENCES,0.5418848167539267,"
xh −h2 + 1 2h2
"
REFERENCES,0.5445026178010471,"= max
h∈R"
REFERENCES,0.5471204188481675,"
xh −1"
REFERENCES,0.5497382198952879,"2h2

."
REFERENCES,0.5523560209424084,"Finally multiplying by two, 2f(x) = x2 and 2f ∗∗(x) = maxh∈R
 
2xh −h2
, arriving at the
biconjugate of the square function used in Dai et al. (2017) and Dai et al. (2018).
□"
REFERENCES,0.5549738219895288,"Proposition A.2 The biconjugate of the absolute value function f(x) = |x| is f ∗∗(x) =
maxh∈[−1,1] xh."
REFERENCES,0.5575916230366492,"Proof: The proof follows the same format as the proof of the biconjugate for the square function.
Deﬁning the conjugate and biconjugate respectively,"
REFERENCES,0.5602094240837696,"f ∗(x) = sup
a∈R
xa −|a| =
0
when |x| ≤1
∞
otherwise."
REFERENCES,0.56282722513089,"f ∗∗(x) = sup
h∈R
xh −f ∗(h)."
REFERENCES,0.5654450261780105,"Simplifying the biconjugate form, we get"
REFERENCES,0.5680628272251309,"f ∗∗(x) = sup
h∈R"
REFERENCES,0.5706806282722513,"xh
when |h| ≤1
xh −∞
otherwise."
REFERENCES,0.5732984293193717,"= sup
|h|≤1
xh
▷−∞is not feasible"
REFERENCES,0.5759162303664922,"=
sup
h∈[−1,1]
xh."
REFERENCES,0.5785340314136126,"Finally, considering the maximizing values of h, we get h = −1 when x < 0 and h = 1 with x > 0
so the biconjugate simpliﬁes to"
REFERENCES,0.581151832460733,f ∗∗(x) = sign(x)x = |x| = f(x)
REFERENCES,0.5837696335078534,"thus completing the proof.
□"
REFERENCES,0.5863874345549738,"Proposition A.3 The biconjugate of the huber function is f ∗∗
τ (x) = maxh∈[−τ,τ] xh −1 2h2."
REFERENCES,0.5890052356020943,Under review as a conference paper at ICLR 2022
REFERENCES,0.5916230366492147,Proof: Let the huber function be deﬁned as
REFERENCES,0.5942408376963351,"pτ (a) =
 1"
REFERENCES,0.5968586387434555,"2a2
if |a| ≤τ
τ|a| −1"
REFERENCES,0.599476439790576,"2τ 2
otherwise."
REFERENCES,0.6020942408376964,Then the convex conjugate is
REFERENCES,0.6047120418848168,"f ∗(x) = sup
a∈R
xa −pτ (a)"
REFERENCES,0.6073298429319371,"= sup
a∈R"
REFERENCES,0.6099476439790575,xa −1
REFERENCES,0.612565445026178,"2a2
if |a| ≤τ
xa −τ|a| + 1"
REFERENCES,0.6151832460732984,"2τ 2
otherwise."
REFERENCES,0.6178010471204188,"Resolving the supremum, consider ﬁrst the case that |x| ≤τ, then"
REFERENCES,0.6204188481675392,"sup
|a|≤τ
xa −1 2a2"
REFERENCES,0.6230366492146597,= xa∗−1
REFERENCES,0.6256544502617801,"2a∗2
▷a∗= x"
REFERENCES,0.6282722513089005,= x2 −1 2x2 = 1 2x2
REFERENCES,0.6308900523560209,"for the ﬁrst case of the piecewise, and for the second case, ﬁrst consider 0 ≤x ≤τ, then"
REFERENCES,0.6335078534031413,"sup
|a|>τ
xa −τ|a| −1 2τ 2"
REFERENCES,0.6361256544502618,"= sup
a>τ(x −τ)a −1 2τ 2 = −∞"
REFERENCES,0.6387434554973822,"because x −τ ≤0, and when −τ ≤x < 0, we have"
REFERENCES,0.6413612565445026,"sup
|a|>τ
xa −τ|a| −1 2τ 2"
REFERENCES,0.643979057591623,"= sup
a<−τ xa −τ|a| −1 2τ 2"
REFERENCES,0.6465968586387435,= −xτ −τ 2 −1
REFERENCES,0.6492146596858639,"2τ 2
▷a∗= −τ"
REFERENCES,0.6518324607329843,= −xτ −3 2τ 2.
REFERENCES,0.6544502617801047,"Finally, because −τ ≤x < 0 we have −xτ −3"
REFERENCES,0.6570680628272252,2τ 2 ≤1
REFERENCES,0.6596858638743456,"2x2, so the maximum is 1 2x2."
REFERENCES,0.662303664921466,"Next consider the second case that |x| > τ, then we need not consider all sub-cases because when
x > τ, then"
REFERENCES,0.6649214659685864,"sup
|a|>τ
xa −τ|a| −1 2τ 2"
REFERENCES,0.6675392670157068,"= sup
a>τ(x −τ)a −1 2τ 2 = ∞"
REFERENCES,0.6701570680628273,and when x < −τ then
REFERENCES,0.6727748691099477,"sup
|a|>τ
xa −τ|a| −1 2τ 2"
REFERENCES,0.675392670157068,"= sup
a<−τ xa −τ|a| −1 2τ 2 = ∞"
REFERENCES,0.6780104712041884,Under review as a conference paper at ICLR 2022
REFERENCES,0.680628272251309,and the supremum will be ∞when |x| > τ.
REFERENCES,0.6832460732984293,Thus the conjugate function is
REFERENCES,0.6858638743455497,"f ∗(x) =
 1"
REFERENCES,0.6884816753926701,"2x2
if |x| ≤τ
∞
otherwise."
REFERENCES,0.6910994764397905,"Using this to compute the biconjugate, we obtain
f ∗∗(x) = sup
h∈R
hx −f ∗(h)"
REFERENCES,0.693717277486911,"= sup
h∈R"
REFERENCES,0.6963350785340314,hx −1
REFERENCES,0.6989528795811518,"2h2
if |h| ≤τ
hx −∞
otherwise"
REFERENCES,0.7015706806282722,"=
max
h∈[−τ,τ] hx −1 2h2"
REFERENCES,0.7041884816753927,where again the constraints on the maximization come from encoding the infeasibility of |h| > τ. □
REFERENCES,0.7068062827225131,"A.1
PROOF OF THEOREM 3.2"
REFERENCES,0.7094240837696335,"We start by showing that the mean absolute Bellman error bounds the mean absolute value error. We
then show in Lemma A.5 that the Huber function is a close approximation of the absolute function,
and so emits an upper-bound with some approximation error controlled by the Huber parameter τ.
Putting these together, then, we show that the mean Huber Bellman error upper bounds the mean
absolute value error with a small non-vanishing approximation term."
REFERENCES,0.7120418848167539,"Lemma A.4 For any vector v ∈Rd, then
∥vπ −v∥1 ≤∥(I −Pπ,γ)∥−1
1 ∥T v −v∥1."
REFERENCES,0.7146596858638743,"Proof: First notice that vπ −(I −Pπ,γ)−1rπ where rπ is the expected reward function with respect
to policy π. Then we have
T v −v = rπ −Pπ,γv −v
▷by deﬁnition of T v
= rπ −(I −Pπ,γ)v
▷rearrange terms to group v
= (I −Pπ,γ)vπ −(I −Pπ,γ)v
▷rπ = (I −Pπ,γ)vπ
= (I −Pπ,γ)(vπ −v)
▷rearrange terms
Bringing the (I −Pπ,γ) term to the left side, then
(I −Pπ,γ)−1(T v −v) = vπ −v.
Finally, because the matrix norm induced by the 1-norm is compatible, we get that
∥(I −Pπ,γ)−1∥1∥T v −v∥1 ≥∥vπ −v∥1
thus completing the proof.
□"
REFERENCES,0.7172774869109948,"Lemma A.5 Let τcap = min(τ, 1) and τ > 0, then for any vector a ∈Rd and 0 < ϵ ≤τ 2
cap"
REFERENCES,0.7198952879581152,"∥a∥1 ≤ d
X i=0 √ϵ"
REFERENCES,0.7225130890052356,"2ϵ pτ (ai) +
√ϵ 2 ."
REFERENCES,0.725130890052356,"Proof:
Our goal is to show |a| ≤Cpτ (a) for any a ∈R. First notice that if |a| ≥τcap, then
pτ (a) ≥τcap|a| by deﬁnition of the Huber function and so we are done with this case. However, if
|a| < τcap, then pτ (a) = a2. Should we try to ﬁnd some constant C such that |a| ≤Ca2, then we
easily ﬁnd that C ≥
1
|a| which goes to inﬁnity as a goes to zero. Instead, we can ﬁnd |a| ≤C(a2 + ϵ)"
REFERENCES,0.7277486910994765,"for arbitrary ϵ > 0, which yields C ≥
|a|
a2+ϵ which is bounded. To ﬁnd C, we have"
REFERENCES,0.7303664921465969,"C = max
|a|≤τcap
|a|
a2 + ϵ"
REFERENCES,0.7329842931937173,"=
max
0≤a≤τcap
a
a2 + ϵ =
√ϵ 2ϵ"
REFERENCES,0.7356020942408377,Under review as a conference paper at ICLR 2022
REFERENCES,0.7382198952879581,"because the maximum is obtained at a = √ϵ. We now have that, for |a| < τcap and C =
√ϵ"
REFERENCES,0.7408376963350786,"2ϵ then
|a| ≤Cpτ (a). Choosing C ≥1 to satisfy the |a| ≥τcap case, and C =
√ϵ"
REFERENCES,0.743455497382199,"2ϵ otherwise, we thus obtain
our restriction on τcap = min(τ, 1) completing the proof.
□"
REFERENCES,0.7460732984293194,"B
PROJECTED BELLMAN ERRORS"
REFERENCES,0.7486910994764397,"In Section 3, we described a conjugate form of the Bellman error. This conjugate Bellman error
depends on ﬁnding the maximizing function h : S →R from the set of all functions h ∈Fall. As is
highlighted in Sutton and Barto (2018, Chapter 8), the MSBE is not identiﬁable; an issue inherited
by the conjugate form of the Bellman error. This identiﬁability issue stems from the fact that the
mean Bellman error is deﬁned with respect to a non-observable quantity, the states. When states are
aliased together due to partial observability, then the agent can see only part of the statespace while
optimizing θ while seeing the entire statespace for optimizing h ∈Fall. Clearly this is not a realistic
setting. Modifying modifying this example such that the optimization procedure for h has the same
partial observability leads towards an identiﬁable form of the conjugate Bellman error"
REFERENCES,0.7513089005235603,"Identiﬁable BE(θ)
def= max
h∈Fh E

2E[δ(θ) | S] h(S) −h(S)2"
REFERENCES,0.7539267015706806,"where Fh
def= {h = f ◦x} such that h : S →R are all functions deﬁned with respect to features
x : S →Rd. Because Fh ⊆Fall, then the solution to the Identiﬁable BE may be different from the
solution to the conjugate BE due to a more constrained optimization on h."
REFERENCES,0.756544502617801,"As shown in Section 3, the optimal function h∗(s) = E[δ(S) | S = s]. In the ﬁnite state setting, we
can represent this function as a vector u ∈R|S| composed of entries E[δ(S) | S = s]; thus the vector
u = T ˆv −ˆv. We can deﬁne a projection operator on u as"
REFERENCES,0.7591623036649214,"ΠFh,du
def= arg min
h∈Fh
∥u −h∥d"
REFERENCES,0.7617801047120419,"where d : S →[0, 1] is a weighting over states. Then assuming that Fh is a convex set, we can
decompose u = ΠFh,du+ ˜u = h+ ˜u where ˜u is the component in u that is orthogonal to h = ΠFh,du
in the weighted space h⊤D˜u = 0 for D
def= diag(d). From this projection operator, we can deﬁne the
mean squared Projected Bellman Error"
REFERENCES,0.7643979057591623,"PBE
def= max
h∈Fh X"
REFERENCES,0.7670157068062827,"s∈S
d(s)(2E[δ | s] h(s) −h(s)2)"
REFERENCES,0.7696335078534031,"= max
h∈Fh X"
REFERENCES,0.7722513089005235,"s∈S
d(s)(2u(s)h(s) −h(s)2) =
X"
REFERENCES,0.774869109947644,"s∈S
d(s)(2u(s)h(s) −h(s)2) ▷h = ΠFh,du =
X"
REFERENCES,0.7774869109947644,"s∈S
d(s)(2(h(s) + ˜u(s))h(s) −h(s)2) =
X"
REFERENCES,0.7801047120418848,"s∈S
d(s)(2h(s)2 −h(s)2) + 2
X"
REFERENCES,0.7827225130890052,"s∈S
d(s)˜u(s)h(s) =
X"
REFERENCES,0.7853403141361257,"s∈S
d(s)h(s)2 + 2
X"
REFERENCES,0.7879581151832461,"s∈S
d(s)˜u(s)h(s) =
X"
REFERENCES,0.7905759162303665,"s∈S
d(s)h(s)2"
REFERENCES,0.7931937172774869,"= ∥ΠFh,d(T ˆv −ˆv)∥2
d"
REFERENCES,0.7958115183246073,where the second to last step is because h is orthogonal to ˜u under weighting d.
REFERENCES,0.7984293193717278,"This connection to projected Bellman errors provides some insight for the role of approximating
the function h, as well as for the robust objectives discussed in Section 3. Each choice of function
space Fh results in a different linear projection on the vector u describing the Bellman error in
every state, with each projection producing its own orthogonal component ˜u which is ignored in the
resulting projected objective function. For instance, consider a low-rank projection operator ΠFh,d."
REFERENCES,0.8010471204188482,Under review as a conference paper at ICLR 2022
REFERENCES,0.8036649214659686,"The resulting projected Bellman error could project potentially high-error states to zero error, thus
allowing no function approximation resources to be used to represent the value function in that state.
When no projection is used, equivalently when ΠFh,d = I|S| the trivial projection, then no errors
are projected and the values are learned to directly minimize the Bellman error. And when the space
Fh = F with h ∈Fh and ˆv ∈F, then we recover the original mean squared projected Bellman error
of Sutton et al. (2009)."
REFERENCES,0.806282722513089,"C
BIAS OF TDC GRADIENT"
REFERENCES,0.8089005235602095,"In this section, we discuss the biased gradient estimate used by gradient-correction methods such as
TDC or QRC-Huber. We show that in the case of linear function approximation, when h is the best
linear approximation of E[δ | s], then the gradient is unbiased for the MSBE. However, this is no
longer the case when considering the robust objectives nor is it the case when h must be approximated
online. As has been seen in past results (White and White, 2016; Ghiassian et al., 2018; 2020), this
biased gradient does not seem to harm TDC’s performance—and in fact the lower variance gradient
estimate seems to improve empirical performance—however, our own experiments in Section 5
suggest that for the MABE the biased gradient estimates can often prevent the gradient-correction
algorithm from learning."
REFERENCES,0.8115183246073299,"Manipulating the gradient of the conjugate Bellman error, we get"
REFERENCES,0.8141361256544503,−∇θδ(θ)h(s) = h(s)∇θv(s) −γh(s)∇θv(S′)
REFERENCES,0.8167539267015707,"= δ(θ)∇θv(s) + (h(s) −δ(θ))∇θv(s)
|
{z
}
extra term
−γh(s)∇θv(S′)."
REFERENCES,0.819371727748691,"Let h∗= E

xx⊤−1 E[xδ] be the optimal linear regression solution for h and let both h and v be
parameterized with linear function approximation. Then because ∇θv(s) = x(s), we have"
REFERENCES,0.8219895287958116,E[(h∗−δ)∇θ(s) | s]
REFERENCES,0.824607329842932,"= E

x(x⊤h∗−δ) | s
"
REFERENCES,0.8272251308900523,= x(x⊤h∗−E[δ | s])
REFERENCES,0.8298429319371727,= xx⊤h∗−xE[δ | s]
REFERENCES,0.8324607329842932,and in expectation across all states
REFERENCES,0.8350785340314136,E[(h(S) −δ)∇θ(S)]
REFERENCES,0.837696335078534,"= E

xx⊤
h∗−E[xδ]"
REFERENCES,0.8403141361256544,"= E

xx⊤
E

xx⊤−1 E[xδ] −E[xδ]"
REFERENCES,0.8429319371727748,= E[xδ] −E[xδ] = 0
REFERENCES,0.8455497382198953,where x = x(s).
REFERENCES,0.8481675392670157,"Unfortunately, consider the case of the robust objectives. Instead of the (h(s) −δ) term, we apply a
nonlinear transformation to only h(s). Intuitively, in the case of the MABE the difference between
sign(h(s))−δ can be arbitrarily large. In the case of the MHBE, the bias due to ignoring this additional
term is a function of the clipping parameter τ. Clearly as τ →∞, then clipτ (h(s)) →h(s) and the
same argument applies as in the MSBE case."
REFERENCES,0.8507853403141361,"The bias of the gradient estimate used by gradient-correction methods for the MHBE in the case of
linear function approximation is"
REFERENCES,0.8534031413612565,"E[∥(clipτ (h∗(s)) −δ(θ))x∥∞]
= E[|clipτ (h∗(s)) −δ(θ)|∥x∥∞] ≤
X"
REFERENCES,0.856020942408377,"s∈S
d(s)
0
when |h∗(s)| ≤τ
|τsign(h∗(s)) −δ(θ)|∥x∥∞
otherwise =
X"
REFERENCES,0.8586387434554974,"|h∗(s)|>τ
d(s)|τsign(h∗(s)) −δ(θ)|∥x∥∞."
REFERENCES,0.8612565445026178,Under review as a conference paper at ICLR 2022
REFERENCES,0.8638743455497382,"Because when |h∗(s)| ≤τ, then |clipτ (h∗(s)) | = |h∗(s)| and we are again in the case of the
gradient of the MSBE. However, when |h∗(s)| ≥τ, then |clipτ (h∗(s)) | = τ and we accumulate
some bias based on how far δ is from τ. When E[δ] = 0, then likewise h∗(s) = 0 because the zero
vector is always representable by a linear function approximator (by deﬁnition of linearity). Because
τ > 0, then clipτ (h∗(s)) = 0 and the bias is zero, so the ﬁxed point of the algorithm remains
unchanged."
REFERENCES,0.8664921465968587,"D
ADDITIONAL RESULTS"
REFERENCES,0.8691099476439791,"In this section we include supplementary results to the main body of the paper. We ﬁrst investigate
the relative ordering of the proposed optimization algorithms when measuring the MAVE instead
of the MSVE. We then motivate empirically why we built our nonlinear control algorithm based
on a gradient-correction method instead of a saddlepoint method by investigating the performance
of nonlinear GQ on our benchmark control domains. Finally, we end with two ablation studies
investigating the impact of the Huber threshold parameter on each domain as well as a second
ablation investigating the impact of the choice to exclude target networks in the main body of the
paper, especially for DQN."
REFERENCES,0.8717277486910995,"Figure 6: MAVE averaged over 100 independent trials, for each swept stepsize in key prediction
domains. The mean squared algorithms generally performed well across environments—even the
adversarially chosen environments—suggesting the difﬁculty in minimizing the MABE. The Huber
algorithms performed best across many environments, often displaying less sensitivity to the choice
of stepsize.
In Figure 6, we investigate the stepsize sensitivity of each algorithm on four representative linear
prediction problems. The robust algorithms generally have similar best performance as the MSBE
algorithms, but with less sensitivity to choice of stepsize. The ℓ1-TDC algorithm often fails to learn a
meaningful value function estimate in the given number of training steps. We hypothesize that this is
due to the bias in the gradient estimate for gradient-correction methods, which is pronounced in the
case of the MABE but not in the case of the other objectives. The results in Figure 6 are averaged
over 100 independent trials for every choice of stepsize, algorithm, and domain. The shaded regions
correspond to standard errors, though error bars are excluded from the TDC algorithms for readability
and because the standard errors are negligible. The performance measure for each algorithm is the
average error over the last 25% of steps in each domain."
REFERENCES,0.8743455497382199,"Figure 7: Comparing the mean return over the last 25% of steps across several saddlepoint methods
against QRC-Huber. The saddlepoint methods generally perform very poorly, frequently ﬁnding
a policy only slightly better than the random policy. These results are consistent with the ﬁndings
of Ghiassian et al. (2020) and motivate building on gradient-correction methods for nonlinear
control. Like QRC-Huber, GQ-Huber uses a twice differentiable estimate of the clip function and all
algorithms use the ADAM optimizer."
REFERENCES,0.8769633507853403,Under review as a conference paper at ICLR 2022
REFERENCES,0.8795811518324608,"Figure 8: Ablating the impact of the threshold parameter for the Huber loss function for the QRC-
Huber algorithm across the benchmark domains. For three of the domains, QRC-Huber is robust to
the choice of threshold parameter with a default value of τ = 1 being a good choice. However, the
Mountain Car domain shows high-bimodality in performance distribution across multiple random
initializations of the neural network for smaller values of the threshold parameter."
REFERENCES,0.8821989528795812,"Figure 9:
Ablating the impact of target networks on the performance of the nonlinear control
algorithms on benchmark domains. The gradient-based methods receive much less beneﬁt from using
target networks than DQN, which requires target networks to achieve above random performance
on Cart-pole and to reduce the bimodality of its performance on Mountain Car. Even with target
networks, DQN still exhibits large skew and bimodality in its performance distributions, indicating
instability."
REFERENCES,0.8848167539267016,"Figure 10: Comparing algorithms on benchmark control domains with the area under the learning
curve as the performance metric. Unlike Figure 4, early learning is included in the performance metric,
giving a sense of the sample complexity of each algorithm. QRC-Huber tends to perform favorably
across all four domains compared to QRC and DQN, exhibiting much more narrow performance
distributions that are often centered around higher rewards than the competitor algorithms."
REFERENCES,0.887434554973822,"Figure 7 investigates the saddlepoint optimization algorithm for nonlinear control across our four
benchmark domains. Generally, the Greedy-GQ algorithm performs considerably worse than gradient-
correction algorithms; a motivating factor for building on gradient-correction methods (Dai et al.,
2018; Ghiassian et al., 2020). A possible explanation for this poor performance is the dependency of
the representation learning process on having an accurate estimate of h(s), which itself depends on
having a well-learned representation. This circular dependency is less obviously present in gradient-
correction methods, which depend on a sample of the error signal instead of an estimate of the error"
REFERENCES,0.8900523560209425,Under review as a conference paper at ICLR 2022
REFERENCES,0.8926701570680629,"Figure 11: Evaluating the performance of each control
algorithm on the Minatar suite of games. The learning
curves show the scaled performance metric averaged
across domains with 95% bootstrapped conﬁdence inter-
vals about the mean. Because each point in the learning
curve has less underlying structure than the aggregate
performance metric, the conﬁdence intervals are signiﬁ-
cantly more pessimistic than reported in Table 1. As such,
the sample mean performance of QRC-Huber is slightly
higher than QRC during early learning, but not statisti-
cally signiﬁcantly so in this result. Both gradient-based
algorithms considerably outperform DQN with statistical
signiﬁcance, indicating both less domain-sensitivity to
meta-parameters as well as better absolute performance."
REFERENCES,0.8952879581151832,"signal for the primary learning process. Improving the performance of saddlepoint optimization
methods for nonlinear control is important future work."
REFERENCES,0.8979057591623036,"D.1
ABLATING DESIGN DECISIONS"
REFERENCES,0.900523560209424,"One of the proposed robust objectives depends on a new meta-parameter—τ the threshold for the
Huber function—which was not present in previous extensions of the conjugate Bellman error to
nonlinear control. While for most of our domains we could reasonably pick a default value of τ = 1
and avoid allowing our proposed algorithm more opportunities to tune meta-parameters, this choice
impacted the claims made in the main body of the paper. The choice of τ depends on the magnitude
of the TD errors experienced by the algorithm during optimization, which is driven in-part by the
magnitude of the rewards, and thus is domain-dependent. To decrease this dependency, we could
consider scaling the magnitude of rewards in a domain-independent way, for instance using PopArt
(Hessel et al., 2018)."
REFERENCES,0.9031413612565445,"In Figure 8, we ablate over several choices of threshold parameter for the QRC-Huber algorithm. We
likewise investigated the sensitivity of DQN to choice of threshold parameter, but due to the general
instability of DQN it was less clear which values of τ were generally best. Allowing DQN to select
its best τ for each domain does not change the conclusions in Figure 4, so for simplicity we choose
to maintain consistency between DQN and QRC-Huber. We see long-tail performance distributions
as the threshold parameter is made smaller, likely due to the optimization process spending more
time in the mean absolute region of the Huber loss. On the Mountain Car domain, both QRC-Huber
and DQN were signiﬁcantly impacted by τ < 2 and saw strongly bimodal performance distributions."
REFERENCES,0.9057591623036649,"The poor performance of DQN in Figure 4—especially on the Cart-pole domain—is surprising;
however recent work has also shown that DQN has shockingly poor performance on a wide variety of
domains (Obando-Ceron and Castro, 2021). A potential explanatory factor for the poor performance
could be the choice to exclude target networks from our investigation, which could adversely affect
DQN disproportionately compared to the gradient-based algorithms. To understand the impact of our
choice to not use target networks, we ablate over the number of steps taken between synchronizing
the weights of the target network."
REFERENCES,0.9083769633507853,"Figure 9 shows the number of steps between target network synchronization for QRC-Huber, QRC,
and DQN, where one step of synchronization refers to not using target networks at all. For Acrobot and
Cartpole, increasing the number of steps between synchronization appears to harm the performance
of the gradient-based methods, likely due to artiﬁcially reducing the speed that the bootstrapping
targets receive new information. DQN, on the other hand, beneﬁts from the reduced variance in the
bootstrapping targets and tends to perform better across all three domains as the target networks are
updated less frequently; though even with 500 steps between synchronization, DQN performs poorly
on Mountain Car."
REFERENCES,0.9109947643979057,Under review as a conference paper at ICLR 2022
REFERENCES,0.9136125654450262,"E
EXPERIMENTAL DETAILS"
REFERENCES,0.9162303664921466,"E.1
ENVIRONMENTS"
REFERENCES,0.918848167539267,"In this section we provide further details for the environments and problem settings used in Sections 5
and 6."
REFERENCES,0.9214659685863874,"HardAlias-1 is an 8-state random walk where the agent starts in the far left state and moves right with
90% probability. The episode terminates on taking the move right action in the far right state. The
agent receives −1 reward per step with a discount factor of γ = 0.99. The ﬁrst, third, and ﬁnal states
all share a common feature, and the remaining ﬁve states use the dependent feature representation
from Sutton et al. (2009), resulting in a feature vector of size d = 4 for each state."
REFERENCES,0.9240837696335078,"The second hard aliasing problem, HardAlias-2, is the 2-state problem from Tsitsiklis and Van Roy
(1997). We lightly modify the reward function of the MDP so the optimal value function cannot
be perfectly represented, thus allowing each objective to have different minima. The agent receives
a reward of +1 after transitioning from the ﬁrst state to the second, and a reward of 0 for all other
transitions."
REFERENCES,0.9267015706806283,"Outlier is a large 49-state random walk with an additional “entry” state, where the agent has an
ϵ = 0.01 chance of terminating immediately with -1000, or a 1 −ϵ chance of entering the middle
state of the random walk. To emulate a more realistic learning scenario, we use a randomly initialized
frozen neural network with ReLU activations and two hidden layers of sizes ten and ﬁve respectively
to generate ﬁve features to describe 50 states. Taking the left action in the far left state of the random
walk results in termination and a reward of −1 and correspondingly the right action in the right state
results in termination with a reward of +1. The discount factor is set to γ = 0.99 and the left action
was chosen with probability ϵ in every state."
REFERENCES,0.9293193717277487,"For the two random walks, the ﬁrst with N = 5 states (SmallChain) and the other with N = 19
states (BigChain), we use a randomly initialized neural network representation with ReLU activations
and three hidden layers of sizes h1 = 4N, h2 = N, and h3 = N"
REFERENCES,0.9319371727748691,"2 units respectively, resulting in a
feature representation of size d = h3. These problems are off-policy with the target policy taking the
left action with 90% probability and the behavior policy taking both actions with equal probability.
The discount is γ = 0.99 for both problems."
REFERENCES,0.9345549738219895,"Finally, Baird is the well-known star MDP from Baird (1999). It is used to investigate optimization
performance in a high-variance off-policy setting where TD diverges. We do not use it to evaluate the
quality of ﬁxed points, because the linear function approximation can represent the true values, and
so the ﬁxed-points of each objective are equal in quality."
REFERENCES,0.93717277486911,"In the nonlinear experiments, for all domains we use a discount factor of γ = 0.99 and an ϵ-greedy
policy with ϵ = 0.1. In Mountain Car, Acrobot, and Cliff World, the agent receives a reward of -1 per
step until termination and in Cart-pole the agent receives a reward of +1 per step. Every environment
has an episode cutoff if the agent fails to reach a terminal state with a pre-speciﬁed number of steps.
When cut off, the agent is teleported back to the start state and does not update its value function,
thus preventing the agent from bootstrapping over the teleportation transition. All algorithms are run
for one hundred thousand steps in total across all episodes, except in Lunar Lander where algorithms
are run for 250k steps."
REFERENCES,0.9397905759162304,"In the Mountain Car environment (Moore, 1990; Sutton, 1996), the goal is to drive an underpowered
car to the top of a hill. The agent receives as state the position and velocity of the car, and can choose
to accelerate forward, backward, or to do nothing on each timestep. The episode terminates when
the agent reaches the top of the hill, or is cut off when the agent reaches a maximum 1000 steps.
In the Cart-pole domain (Barto et al., 1983), the agent balances a pole attached to a cart which can
move along a single axis. The agent receives as state the position and velocity of the cart, as well
as the angle and angular velocity of the pole. The episode ends when the pole falls or if the agent
reaches the maximum of 500 steps. Finally, the Acrobot domain (Sutton, 1996) has the agent swing a
double-jointed arm above a threshold by moving only the inner joint. The agent receives as state the
current angle and velocity of the joints and can take as action, swing left or swing right. The episode
terminates when the speciﬁed height is achieved, or is cut off after 500 steps."
REFERENCES,0.9424083769633508,"The Cliff World environment—lightly adapted from Sutton and Barto (2018)—is a discrete gridworld
with 20 states. The agent starts in the bottom left state and seeks to reach the goal state in the bottom"
REFERENCES,0.9450261780104712,Under review as a conference paper at ICLR 2022
REFERENCES,0.9476439790575916,"right. Along the bottom of the grid lies a cliff, where the agent receives a large penalty of -1000
reward for stepping into the pit and is teleported back to the initial state without terminating the
episode. The episode terminates only when the agent reaches the goal state, or is cut off when the
agent reaches a maximum of 500 steps."
REFERENCES,0.9502617801047121,"For all environments, we ﬁx meta-parameters other than the stepsize to their default values. For
QRC-Huber, we ﬁx regularizer parameter β = 1 and secondary stepsize ratio η = 1. For both mean
Huber algorithms, we ﬁx the Huber threshold parameter τ = 1 for all domains except Mountain Car,
where we use τ = 2. We further ablate the impact of this decision in Section D. We sweep over the
stepsize parameter for all algorithms and environments and report results for every swept stepsize."
REFERENCES,0.9528795811518325,"E.2
FINDING FIXED-POINTS"
REFERENCES,0.9554973821989529,"To ﬁnd the ﬁxed-points of the objectives in Section 5, we used an iterative optimization procedure
that assumed access to the underlying dynamics of each MDP to compute exact expected gradients
for each update to the primary variable. We use ﬁrst order stopping conditions to ensure that the
optimization procedure has reached a ﬁxed-point; i.e. when the norm of the gradient is near zero
(speciﬁcally less than 10−7). We use ADAM parameters of β1 = 0.99 and β2 = 0.999 along with a
moving iterate average with exponential moving average parameter β = 0.9 to reduce oscillation of
the gradients and iterates around the ﬁxed-point (especially for the mean absolute objective, where
we performed subgradient descent). We decay the global stepsize according to α =
1
√"
REFERENCES,0.9581151832460733,"t where t is the
number of update steps taken so far. 2"
REFERENCES,0.9607329842931938,"E.3
LINEAR PREDICTION"
REFERENCES,0.9633507853403142,"For the prediction problems comparing optimization methods in Section 5, we swept over the primary
and secondary stepsize for all algorithms allowing each to be tuned independently. We swept values
of the primary stepsize α ∈{2−1, 2−2, . . . , 2−10} and the ratio between the primary and secondary
stepsize η =
αθ
αh ∈{2−6, 2−4, . . . , 20, . . . , 26}. All algorithms have the same number of meta-
parameter combinations, so comparison between each algorithm remains fair. Reported results use
SGD with a constant stepsize, though results using RMSProp yielded similar conclusions and thus
were omitted. All algorithms were evaluated after 10k updates for each domain except the random
walk which required 100k updates to reasonably converge."
REFERENCES,0.9659685863874345,"E.4
NONLINEAR CONTROL"
REFERENCES,0.9685863874345549,"For all of the nonlinear control algorithms and domains, we used neural network function approxima-
tion with two hidden layers and ReLU activation units. For Acrobot, Mountain Car, and Cliff World
we used 32 hidden units in both layers, and in Cart Pole we noticed signiﬁcantly better performance
for all algorithms when using 64 hidden units (consistent with the ﬁndings of Obando-Ceron and
Castro (2021) which suggested Cart Pole needs considerably more parameters for good performance),
ﬁnally for Lunar Lander we used 128 hidden units in both layers. We use experience replay buffers
to store the 4000 (10k for Lunar Lander) most recent transitions and draw 32 samples to compute
mini-batch updates on every timestep. We use the ADAM optimizer with default parameters for all
algorithms (β1 = 0.9 and β2 = 0.999), but notice little difference in conclusions when using SGD or
RMSProp optimizers. All agents are trained using ϵ-greedy behavior policies, with ϵ = 0.1 for every
domain. Agents are trained for a ﬁxed 100k steps for Acrobot, Mountain Car, and Cart Pole. Cliff
World only required 50k steps to achieve good policies, and Lunar Lander required 250k steps."
REFERENCES,0.9712041884816754,"For the Minatar games, we used the same function approximation architecture and meta-parameter
settings as in Young and Tian (2019). Speciﬁcally the neural network uses a single convolutional
layer with 16 channels, a stride-width of 1, and a kernel-width of 3 followed by a ReLU activation, the
output of the convolutional layer is then ﬂattened and sent to a single fully-connected layer with 128
hidden units and ReLU activation. We use the ADAM optimizer (Kingma and Ba, 2015) with default
parameters and sweep over stepsizes in α ∈{2−13, 2−12, . . . , 2−8}. For DQN only, we additionally"
REFERENCES,0.9738219895287958,"2We note that the MSBE ﬁxed-point can easily be computed analytically using a least-squares solver. For
consistency, we use the iterative solver even for the MSBE. Reported results and conclusions are unchanged
when using the analytical solutions."
REFERENCES,0.9764397905759162,Under review as a conference paper at ICLR 2022
REFERENCES,0.9790575916230366,"sweep over target network refresh rates in {1, 8, 32, 64} steps. Experiments are run for 5M steps for
each domain and a replay buffer of size 100k is used."
REFERENCES,0.981675392670157,"E.5
MINATAR EXPERIMENTAL PROCEDURE"
REFERENCES,0.9842931937172775,"For the Minatar demonstration, we treat the Minatar domain suite as a single problem setting. In doing
so, we can take advantage of lower variance performance metrics by averaging performance over each
of the domains, allowing us to report statistically signiﬁcant claims using far fewer computational
resources. The procedure is as follows."
REFERENCES,0.9869109947643979,1. We ﬁrst swept over several choices of stepsize using only ﬁve runs for each game.
REFERENCES,0.9895287958115183,"2. We then scaled the AUC for each individual run using probabilistic performance proﬁles
(Barreto et al., 2010) to a value between [0, 1]."
WE PICKED THE BEST PERFORMING STEPSIZE FOR EACH ALGORITHM BY AVERAGING THE SCALED AUC,0.9921465968586387,"3. We picked the best performing stepsize for each algorithm by averaging the scaled AUC
across runs and across games.
4. Finally we ran an additional 30 runs for each algorithm on each game using that algorithm’s
best stepsize for a total of 150 runs and report the average scaled performance in Table 1 as
well as the average scaled performance over time in Figure 11."
WE PICKED THE BEST PERFORMING STEPSIZE FOR EACH ALGORITHM BY AVERAGING THE SCALED AUC,0.9947643979057592,"E.6
COMPUTATIONAL RESOURCES"
WE PICKED THE BEST PERFORMING STEPSIZE FOR EACH ALGORITHM BY AVERAGING THE SCALED AUC,0.9973821989528796,"For this paper, we used approximately eight CPU years of compute on a general purpose CPU cluster
with modern hardware. We did not use GPUs for any experiment, nor other specialized hardware for
training our models. We used the Torch library (Paszke et al., 2019) for deﬁning neural networks and
autodifferentiation for the nonlinear control experiments, and used the numpy library (Harris et al.,
2020) for the linear prediction experiments."
