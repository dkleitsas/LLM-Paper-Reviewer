Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.003937007874015748,"Realistic models of physical world rely on differentiable symmetries that, in turn,
correspond to conservation laws. Recent works on Lagrangian and Hamiltonian
neural networks show that the underlying symmetries of a system can be easily
learned by a neural network when provided with an appropriate inductive bias.
However, these models still suffer from issues such as inability to generalize to ar-
bitrary system sizes, poor interpretability, and most importantly, inability to learn
translational and rotational symmetries, which lead to the conservation laws of
linear and angular momentum, respectively. Here, we present a momentum con-
serving Lagrangian neural network (MCLNN) that learns the Lagrangian of a
system, while also preserving the translational and rotational symmetries. We test
our approach on linear and non-linear spring systems, and a gravitational system,
demonstrating the energy and momentum conservation. We also show that the
model developed can generalize to systems of any arbitrary size. Finally, we dis-
cuss the interpretability of the MCLNN, which directly provides physical insights
into the interactions of multi-particle systems."
INTRODUCTION AND RELATED WORK,0.007874015748031496,"1
INTRODUCTION AND RELATED WORK"
INTRODUCTION AND RELATED WORK,0.011811023622047244,"Realistic modeling of the time-evolution of multi-particle physical systems lie at the heart of several
ﬁelds of science and engineering (Goldstein, 2011; Park et al., 2021; Roehrl et al., 2020; Lutter
et al., 2019). Examples include multiple bodies connected by springs, bodies interacting under
gravitational forces, or even systems at the atomic and mesoscale such as proteins or colloidal gels,
which range several orders (≈1020) of length and timescales from atomic systems to planetary
systems (Park et al., 2021; Cranmer et al., 2020b). Traditionally, the trajectory of these systems are
obtained by solving the associated differential equations numerically. These differential equations,
in turn, are derived based on the invariant or conserved quantities of a system. Recent studies on
Lagrangian (LNN) and Hamiltonian neural networks show that one of these invariant quantities,
energy, can be learned directly from the data enabling realistic simulation of systems (Cranmer
et al., 2020a; Finzi et al., 2020; Lutter et al., 2019; Greydanus et al., 2019; Zhong et al., 2021;
2019; Zhong & Leonard, 2020). However, these approaches fail to model multi-particle interactions
effectively due to the following limitations."
INTRODUCTION AND RELATED WORK,0.015748031496062992,"• Conservation of momentum: Invoking Noether’s theorem (Noether, 1971), “a differentiable
symmetry in action results in a conserved quantity”. Conversely, “every conserved quantity can be
derived from an underlying symmetry in action”. It can be shown that an interacting multi-particle
system, that is closed, respects three conservation laws, namely, energy, linear momentum and an-
gular momentum (Noether, 1971; Goldstein, 2011). While the ﬁrst is a consequence of symmetry
of the system with respect to time, the second and third is a consequence of symmetry with respect
to translation and rotation in space, respectively. Thus, the Lagrangian of such a system remains
invariant under the translation and rotation operations on the Cartesian coordinates. For example,
three balls connected by a spring will have the same Lagrangian (and hence the interaction forces)
when the system as a whole is subjected to rotation or translation. That is, as long as the relative
positions of the balls are preserved, translation or rotation by any magnitude will not have an effect
on the system dynamics. While LNNs have been demonstrated to learn the symmetry in time by
conserving the energy (Cranmer et al., 2020a), they have not been designed to respect the other two
conservation laws with respect to momentum. Learning these symmetries directly from the data is
an extremely hard problem and may require large amounts of data. Furthermore, as we will show"
INTRODUCTION AND RELATED WORK,0.01968503937007874,Under review as a conference paper at ICLR 2022
INTRODUCTION AND RELATED WORK,0.023622047244094488,"in Sec. 4, even when trained on large volumes of training data, the LNNs fail to generalize well on
unseen data. This questions the realistic nature of the dynamics simulated by LNNs."
INTRODUCTION AND RELATED WORK,0.027559055118110236,"• Generalizability to unseen system sizes: LNNs lack the ability to generalize to system sizes
beyond the training set. For instance, an LNN trained on three balls connected by a spring cannot
model a system of four balls connected by a spring despite having the same conserved quantities
and interactions. This limits the broader applicability of LNNs to realistic physical systems."
INTRODUCTION AND RELATED WORK,0.031496062992125984,"• Interpretability: LNN (Cranmer et al., 2020a) directly learns (and predicts) the Lagrangian of
a system as a function of the position and velocities of all the particles in the system. Owing to
this design, it is not possible to recover the inter-particle dynamics within a multi-particle system
in the form of pairwise potential energy or forces. This limits the interpretability of the LNN as the
contribution of positions and velocities towards the total Lagrangian of the system is represented
using a black-box deep neural network."
INTRODUCTION AND RELATED WORK,0.03543307086614173,"In this paper, we address the above limitations. Speciﬁcally, our contributions are as follows:"
INTRODUCTION AND RELATED WORK,0.03937007874015748,"• Problem Formulation and Architecture Design: We reformulate LNN (Cranmer et al., 2020a)
with a relational inductive bias by applying a transformation on the Cartesian coordinates of the
system and decoupling the terms of the Lagrangian. Armed with this reformulation, we develop
a momentum conserving LNN called MCLNN. MCLNN introduces several key innovations. (1)
First, MCLNN preserves the rotational and translation symmetries. (2) Second, MCLNN gener-
alizes to unseen system sizes. (3) Third, MCLNN generates interpretable models with the output
characterizing pair-wise interactions of the bodies in the system, and thereby providing physical
insights into the system dynamics.
• Theoretical Characterization: We rigorously establish that MCLNN conserves energy, linear
and angular momentum. Furthermore, in contrast to LNN (Cranmer et al., 2020a), we show that
MCLNN can directly learn trajectories (positions) of systems without requiring training on accel-
eration. This is a desirable property. In many cases including experimental systems, access to
acceleration of each entity at every time instant may not be possible. While position of particles
is a direct observable, acceleration is a derived quantity.
• Empirical Evaluation: We perform in-depth evaluation across three multi-particle systems
namely, balls connected by linear and non-linear springs, and gravitational system. Our exper-
iments establish that MCLNN performs signiﬁcantly better than LNN with long-term stability,
generalizes to arbitrary-sized multi-particle systems, and is capable of learning interaction dy-
namics with 3-4 orders of magnitude lower volume of training data."
PRELIMINARIES AND PROBLEM FORMULATION,0.04330708661417323,"2
PRELIMINARIES AND PROBLEM FORMULATION"
PRELIMINARIES AND PROBLEM FORMULATION,0.047244094488188976,"In this section, we introduce the preliminary concepts central to our work and formulate the problem.
As notational convention, vectors are represented with an overhead arrow (Ex. ⃗v) and higher-order
tensors, such as matrices, in bold. A summary notations used is provided in the appendix A.7.
Deﬁnition 1 (Multi-particle System) An N-body multi-particle system contains N particles P =
{n1, · · · , nN }. At any given time t, particle ni is characterized by its position ⃗q t
i and velocity ˙⃗q t
i .
The positions of particles in an N-body system are not static. They change due to various interaction
forces at play (Ex: a gravitational system). These positional changes are captured in the form of
trajectories.
Deﬁnition 2 (Multi-particle Trajectory) The trajectory of an N-body multi-particle system P
over a time horizon T = [ts, te] is the sequence of position and velocity vectors (q t, ˙q t) | t ∈T},
where q t = {⃗q t
i | ni ∈P} and ˙qt = { ˙⃗q t
i | ni ∈P}.
In physics, the time-evolution or trajectory of interacting particles is obtained by solving the dif-
ferential equations of motion. The numerical solution to these equations provide the acceleration
of the particle, which can then be used to obtain the updated velocity and positions. Indeed, the
acceleration of particles can be directly learned by neural networks as a function of its position and
velocities. However, it fails to learn the underlying symmetries, which in turn leads to the laws of
conservation of energy and momenta."
PRELIMINARIES AND PROBLEM FORMULATION,0.051181102362204724,"Recent approaches to predict trajectories by learning the Lagrangian through an LNN (Cranmer et al.,
2020a; Finzi et al., 2020; Zhong et al., 2021; Zhong & Leonard, 2020) has been shown to be effective
in learning the symmetry in time (Cranmer et al., 2020a; Zhong et al., 2021). Lagrangian, deﬁned as
L(q, ˙q) = T(˙q)−V (q), is a scalar functional of kinetic energy (T(˙q)) and potential energy (V (q)),"
PRELIMINARIES AND PROBLEM FORMULATION,0.05511811023622047,Under review as a conference paper at ICLR 2022
PRELIMINARIES AND PROBLEM FORMULATION,0.05905511811023622,Figure 1: MCLNN framework.
PRELIMINARIES AND PROBLEM FORMULATION,0.06299212598425197,"that depends on both the set of positions q, and velocities ˙q of the particles in the system (Goldstein,
2011). LNN bypasses the necessity to learn accelerations for each particle and directly predicts the
scalar Lagrangian for a system. Additionally, the trajectory predicted using Euler-Lagrange (EL)
equation conserves energy resulting in an overall better prediction of the system dynamics."
PRELIMINARIES AND PROBLEM FORMULATION,0.06692913385826772,"Theoretically, although learning the Lagrangian of a system is enough to predict its dynamics, the
Lagrangian itself exhibits some symmetries that are not imposed by the EL equation. Lagrangian
of a system exhibits translational and rotational symmetry. Speciﬁcally, the Lagrangian of a system
L(q, ˙q) and L(q′, ˙q), where q′ = {⃗qi + ⃗ϵ | ni ∈P} for any ﬁnite value of ⃗ϵ are equivalent.
Similarly, L(q, ˙q) and L(Qq, ˙q), where Q is an orthogonal tensor representing a rotation, are
equivalent. These symmetries are not provided as an inductive bias in the LNN framework."
PRELIMINARIES AND PROBLEM FORMULATION,0.07086614173228346,"Further, LNNs are trained by giving the coordinates as input and minimizing the loss between the
actual acceleration and acceleration predicted by LNN through EL equations. This requires a priori
access to the actual acceleration, which may not be available in many cases, for example, experi-
mental trajectory of colloidal gels visualized by video camera."
PRELIMINARIES AND PROBLEM FORMULATION,0.07480314960629922,"Here, we aim to address these open challenges by reformulating the LNN with a relational inductive
bias, resulting in Momentum Conserving LNN (MCLNN). Speciﬁcally, we aim to learn the dynamics
of multi-particle interacting systems purely from the trajectory of the constituent particles.
Problem 1 (Momentum Conserving LNN for Trajectory Prediction) Let T be a set of trajecto-
ries of N-body systems. Furthermore, let there be a hidden joint distribution of physics-constrained
conﬁgurational and temporal space from which T has been sampled. Our goal is to learn this hidden
distribution. Towards that end, we want to learn:"
PRELIMINARIES AND PROBLEM FORMULATION,0.07874015748031496,"i. A generative model p(T) that maximizes the likelihood of generating T.
ii. The generative model must respect the laws of physics such as conservation of energy and
momenta.
Once learned, this generative model can be used to predict trajectories of unseen N-body systems."
THEORY,0.08267716535433071,"3
THEORY"
THEORY,0.08661417322834646,"The ﬂowchart of MCLNN is shown in Fig. 1. In this approach, the positions and velocities at any
time t is used to predict the trajectory of the system, while respecting the conservation laws of
energy and momenta. We analyze the performance of MCLNN on three systems, namely, linear
spring, non-linear spring, and gravitational system to predict the accurate dynamics of these multi-
particle interacting systems."
EULER-LAGRANGE EQUATION,0.09055118110236221,"3.1
EULER-LAGRANGE EQUATION
Consider a system of N-particles interacting with each other under a potential. Let us deﬁne func-
tional, namely, “action”, S as:
S =
Z t1"
EULER-LAGRANGE EQUATION,0.09448818897637795,"t0
L dt
(1)"
EULER-LAGRANGE EQUATION,0.0984251968503937,"where L is the Lagrangian of the system. Then trajectory taken by this system to move from the
position q0 to q1 in time t0 to t1 is the one that makes the “action” S stationary. This leads to the"
EULER-LAGRANGE EQUATION,0.10236220472440945,Under review as a conference paper at ICLR 2022
EULER-LAGRANGE EQUATION,0.1062992125984252,"equation of motion governing the dynamics of system, namely, the EL equation as:
d
dt
∂L
∂˙q = ∂L"
EULER-LAGRANGE EQUATION,0.11023622047244094,"∂q
(2)"
EULER-LAGRANGE EQUATION,0.1141732283464567,"The acceleration of particles in the system, ¨q = {¨⃗qi | ni ∈P} can be computed directly from the
EL equation (see Appendix A.3) as:
¨q = (∇˙q ˙qL)−1 [∇qL −(∇˙qqL) ˙q]
(3)"
EULER-LAGRANGE EQUATION,0.11811023622047244,"This acceleration can then be used to compute the updated positions and velocities of particles. Note
that EL equation leads to the conservation of Hamiltonian, deﬁned as: H(q, ˙q) = T(˙q) + V (q),
which also represents the total energy of the system."
MOMENTUM CONSERVING LAGRANGIAN NEURAL NETWORK,0.1220472440944882,"3.2
MOMENTUM CONSERVING LAGRANGIAN NEURAL NETWORK
As mentioned earlier, Lagrangians exhibit translational and rotational symmetry. Learning this di-
rectly from the positions of particles is extremely challenging. To address this challenge, we refor-
mulate the LNN. Consider ﬁve balls connected by linear springs. We will use this running example
to explain MCLNN. The input for the MCLNN is the position and velocities at any time t. Further,
we identify the set of all the pairs of particles in the system as (i, j). For a given set, we compute the
difference between the positions followed by computing the l2 norm to obtain the pairwise distances
qij, which corresponds to the length of the spring. Thus,"
MOMENTUM CONSERVING LAGRANGIAN NEURAL NETWORK,0.12598425196850394,"qij =
q"
MOMENTUM CONSERVING LAGRANGIAN NEURAL NETWORK,0.12992125984251968,"(⃗qi −⃗qj) · (⃗qi −⃗qj)
(4)"
MOMENTUM CONSERVING LAGRANGIAN NEURAL NETWORK,0.13385826771653545,"The qij is given as the input to a neural network which outputs a scalar Vij. Note that the Vij may
be considered to be the pair-wise potential energy of a spring connecting two particles i and j. Vij
summed over all the pairs of particles gives the V (q), the total potential energy of the system. For
multi-particle systems, the kinetic energy of a particle ni is the function of its velocity ˙⃗qi, can deﬁned
as (Goldstein, 2011; Zhong et al., 2021):"
MOMENTUM CONSERVING LAGRANGIAN NEURAL NETWORK,0.1377952755905512,Ti( ˙⃗qi) = 1
MOMENTUM CONSERVING LAGRANGIAN NEURAL NETWORK,0.14173228346456693,"2mi ˙⃗q 2
i .
(5)"
MOMENTUM CONSERVING LAGRANGIAN NEURAL NETWORK,0.14566929133858267,"Here, we invoke this expression of kinetic energy, which when summed over all the particles provide
the total kinetic energy, T. Then, T and V are used to obtain the L as in Eq. 7. The L when
substituted into the EL equation (Eq. 2), provides the acceleration and the updated position and
velocities of the system using the velocity-Verlet integration (Rapaport, 2004). The loss function
of MCLNN is on the predicted and actual positions at time t + 1, t + 2, . . . , t + n, which is then
back-propagated to train the neural network. Speciﬁcally, the loss function is as follows. L = 1 |T| X ∀T ∈T  1 |T |"
MOMENTUM CONSERVING LAGRANGIAN NEURAL NETWORK,0.14960629921259844,"|T |
X t=2"
N,0.15354330708661418,"1
N N
X i=1"
N,0.15748031496062992," 
T .q t
i −p
 
T .q t
i
2
! 
(6)"
N,0.16141732283464566,"Here, p(T .q t
i ) is the predicted position for the ith particle in T at time t and T .q t
i is the true
position. |T | denotes the last time step in trajectory T . The updated expression for Lagrangian for
an N-particle system can be written as:"
N,0.16535433070866143,"L(q, ˙q) = n
X i=1"
N,0.16929133858267717,"1
2mi ˙⃗q 2
i − n−1
X i=1 n
X"
N,0.1732283464566929,"j=i+1
Vij(qij)
(7)"
N,0.17716535433070865,"It should be noted that the speciﬁc form of kinetic energy T does not limit the applicability of the
present approach (Zhong et al., 2021). Since, the focus of the work is to model multi-particle systems
and it is well-known that the kinetic energy of the system generally follows Eq. 5, we choose this
expression to simplify the problem. In cases where the expression for kinetic energy is not known or
is different, the function can be replaced by an additional neural network with an approach similar
to that for V ."
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.18110236220472442,"3.3
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN"
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.18503937007874016,"Theorem 1 MCLNN exhibits translational and rotational symmetry.
PROOF. Consider, the Lagrangian of the system of N-particles as L(q, ˙q) = T(˙q) −V (q). First,
we focus on the translational symmetry and next on rotational symmetry."
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.1889763779527559,Under review as a conference paper at ICLR 2022
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.19291338582677164,"Lemma 1 MCLNN exhibits translational symmetry.
PROOF. When the particles are subjected to a translation ⃗ϵ, the updated positions are given by
q′ == {⃗qi + ⃗ϵ | ni ∈P}. The updated Lagrangian of the system is given by L(q′, ˙q). To prove
L(q′, ˙q) = L(q, ˙q), we need to prove V (q′) = V (q) as the other term in the Lagrangian remains
unaffected. Applying the transformation on the positions and computing the l2 norm,"
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.1968503937007874,"q′
ij =
q"
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.20078740157480315,"[(⃗qi + ⃗ϵ) −(⃗qj + ⃗ϵ)] · [(⃗qi + ⃗ϵ) −(⃗qj + ⃗ϵ)]) =
q"
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.2047244094488189,(⃗qi −⃗qj) · (⃗qi −⃗qj)
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.20866141732283464,"=qij
(8)"
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.2125984251968504,"which implies V (q′) = V (q). Therefore, L(q′, ˙q) = L(q, ˙q)."
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.21653543307086615,"Lemma 2 MCLNN exhibits rotational symmetry.
PROOF. When the system is subjected to pure rotation, the positions are transformed as Qq, where
Q is an orthogonal tensor representing a rotation. Correspondingly, the Lagrangian is modiﬁed as
L(Qq, ˙q). As in the case of translation, we need only to prove that V (Qq) = V (q). To prove this,
it is worth recalling that, for an orthogonal tensor Q, QQ t = Q tQ = I . Now, the proof can be
obtained by computing q′
ij as:
q′
ij =
q"
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.2204724409448819,"(Q⃗qi −Q⃗qj) · (Q⃗qi −Q⃗qj) =
q"
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.22440944881889763,"Q(⃗qi −⃗qj) · Q(⃗qi −⃗qj) =
q"
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.2283464566929134,"QQ T (⃗qi −⃗qj) · (⃗qi −⃗qj) =
q"
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.23228346456692914,(⃗qi −⃗qj) · (⃗qi −⃗qj)
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.23622047244094488,"= qij
(9)"
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.24015748031496062,"This implies that V (Qq) = V (q) and hence, L(q, ˙q) = L(Qq, ˙q). Thus, we demonstrate that the
Lagrangian in MCLNN exhibits both translational and rotational symmetry. Invoking Noether’s the-
orem, it can be proven that the Lagrangian preserving these symmetries will consequently conserve
of linear and angular momenta, respectively. (For proof, see App. A.4 and A.5)."
TRANSLATIONAL AND ROTATIONAL SYMMETRY OF MCLNN,0.2440944881889764,"Combining Lemma 1 and Lemma 2, we get that the MCLNN will respect the laws of conservation
energy, linear momentum, and angular momentum.
□"
GENERALIZABILITY AND INTERPRETABILITY,0.24803149606299213,"3.4
GENERALIZABILITY AND INTERPRETABILITY
The MCLNN exhibits a granular structure, which applies the computations on individual or pair-
wise entities that are aggregated to obtain the total Lagrangian of the system. This structure, by
design, allows model generalizability to unseen system sizes. Once trained on an n-body system,
the MCLNN can be applied on an m-body system (m ̸= n) directly by replacing n with m in Eq. 7."
GENERALIZABILITY AND INTERPRETABILITY,0.25196850393700787,"Finally, we discuss interpretability of MCLNN. The main function learned by MCLNN is the Vij,
which depends on qij. Since, Vij adds to form the total potential energy V (q) of the system, it is
reasonable to assume that Vij represents the pair-wise potential energy. As we demonstrate later in
Sec. 4.4, we show that Vij indeed corresponds to the pair-wise potential energy of the ground truth."
EXPERIMENTS,0.2559055118110236,"4
EXPERIMENTS"
EXPERIMENTS,0.25984251968503935,"In this section, we benchmark MCLNN and establish:
• Accuracy:
MCLNN is more accurate in modeling trajectories of N-body systems than
LNN (Cranmer et al., 2020a).
• Conservation of Physics: Consistent with the theoretical analysis in Sec. 3.3, MCLNN preserves
the laws of physics more comprehensively than LNN
• Generalizability and Interpretability: MCLNN generalizes to unseen data better than LNN and
enables higher interpretability due to predicting the potential energy instead of the Lagrangian
directly."
EXPERIMENTS,0.2637795275590551,"The codebase along with all baselines used and the datasets are available at the anonymous reposi-
tory https://anonymous.4open.science/r/nbodyMCLNN-2618/."
EXPERIMENTS,0.2677165354330709,Under review as a conference paper at ICLR 2022
EXPERIMENTAL SETUP,0.27165354330708663,"4.1
EXPERIMENTAL SETUP
We use JAX (Bradbury et al., 2020), a high-performance numerical computing python package and
JAX MD (Schoenholz & Cubuk, 2020), a JAX based molecular dynamics package for the n-body
simulations."
TASKS,0.2755905511811024,"4.1.1
TASKS
To benchmark the performance of MCLNN, we conduct experiments on three multi-body systems,
namely, linear and non-linear springs, and gravitational systems."
TASKS,0.2795275590551181,"• Linear spring. We simulate the dynamics of three particles (e.g.: balls with volume tending to
zero) connected with each other by linear springs. The initial conditions of the simulations include
the positions and velocities of the three particles and the stiffness of the spring. The potential energy
of two balls connected by a spring is given by Vij = 1"
TASKS,0.28346456692913385,"2k(qij −q0)2, where qij is the instantaneous
distance between the springs and q0 is the equilibrium distance, and k is the stiffness of the spring.
The force between connected pair of particles is computed as Fij = −dVij"
TASKS,0.2874015748031496,"dqij = −k(qij −q0). Note
that the value of k is kept constant for all the springs."
TASKS,0.29133858267716534,"• Non-linear spring. We simulate the dynamics of three particles connected by non-linear springs.
The initial conditions of the simulations include the positions and velocities of the three particles.
The potential energy of two particles connected by a non-linear spring is given by Vij = 1"
TASKS,0.2952755905511811,"2k(qij −
q0)4, where qij is the instantaneous distance between the springs and q0 is the equilibrium distance,
and k is the stiffness of the spring. The force between connected pair of particles is computed as
Fij = −2k(qij −q0)3. The value of k is kept constant for all the springs."
TASKS,0.2992125984251969,"• Gravitational system. We simulate the dynamics of four particles interacting with each other
under the gravitational force. The initial conditions of the simulations include the positions and
velocities of the four masses. The potential energy of a pair of particles with mass m1 and m2 if
given by Vij = −Gm1m2"
TASKS,0.3031496062992126,"qij
, where G is universal gravitational constant and qij is the instantaneous
distance between the pair of particles. The force between the pair of particles is computed as Fij =
Gm1m2"
TASKS,0.30708661417322836,"q2
ij
. Note that the mass m of all the particles are kept constant."
TASKS,0.3110236220472441,"Data Generation: We use forward simulation of N particles to generate training data corresponding
to each task. First, an N-body conﬁguration with given initial positions and velocities are consid-
ered. The potential energy of the system is computed from the positions using analytical expressions
associated with each task as described above. The force on each particle is then calculated using as
the gradient of potential energy, which is used to compute the acceleration. Finally, the velocity-
Verlet algorithm is used for time integration to obtain the updated positions of the particles. Please
see the appendix (A.6) for conﬁgurations (including the number of particles, initial conﬁguration,
and time step) of each of the tasks."
BASELINE,0.31496062992125984,"4.1.2
BASELINE"
BASELINE,0.3188976377952756,"The original LNN takes both the positions and velocities of all the particles as input and gives the
total Lagrangian as the output. In the present case, we make the assumption on the functional form
of kinetic energy (see Eq.5). As such, to ensure a fair comparison, a slightly modiﬁed version of
the original LNN is considered here as the baseline. For this baseline, the positions are given as
input to the neural network which gives the potential energy V (⃗q) as output. The kinetic energy is
computed using the functional form, from which the Lagrangian is computed. All the remaining
training procedures are maintained same as in the original LNN. It should be noted that decoupling
the T and V terms and providing the expression for T should make the learning easier for the LNN
and hence should give improved performance in comparison to the original LNN. This model will
be referred to as baseline or baseline LNN, henceforth."
METRICS,0.3228346456692913,"4.1.3
METRICS"
METRICS,0.32677165354330706,"To analyze the performance of the MCLNN in comparison to the baseline, the choice of the ap-
propriate metrics is crucial. Since the systems considered here are chaotic, slight differences in the
initial conditions or predictions will lead to differences in the trajectories. More importantly, given
the current state of a system, multiple “correct” trajectories may exist as long as they represent the
degenerate or equivalent conﬁgurational states of the system. As such, purely computing the error
in trajectory with respect to the ground truth may not be representative of the performance of the
model. Learning and predicting the Lagrangian ensures that the state of the system is represented ac-"
METRICS,0.33070866141732286,Under review as a conference paper at ICLR 2022
METRICS,0.3346456692913386,"Figure 2: Results of the forward simulation of linear spring system from the same initial conﬁg-
uration using ground truth (continuous line), baseline LNN (dashed and dotted line) and MCLNN
(dashed lines). (a) The evolution of Lagrangian, Hamiltonian (total energy), linear and momentum
for all the systems. (b) The error in Lagrangian, Hamiltonian (total energy), linear and momentum
predicted by the baseline LNN and MCLNN with respect to the ground truth."
METRICS,0.33858267716535434,"curately, resulting in the prediction of the same or equivalent trajectories of the system. Further, the
trajectories should respect the spatial and temporal symmetries resulting in conservation of Hamil-
tonian (total energy), linear, and angular momenta. Thus, we focus on the Mean Absolute Error
(MAE) between predicted (1) Lagrangian, (2) Hamiltonian (total energy), (3) linear and (4) angular
momenta, with respect to the ground truth."
TRAINING,0.3425196850393701,"4.1.4
TRAINING"
TRAINING,0.3464566929133858,"For training MCLNN, 100 different trajectories, each having 20 points with ﬁxed time intervals, are
used for all three tasks. Each trajectory has different initial conditions and hence represent different
conﬁgurations that are accessible to the system. The model performance is evaluated by comparing
the predicted trajectory with respect to the ground truth for the same initial state."
TRAINING,0.35039370078740156,"For training LNN, we sample 10,000 data points (set of (q, ˙q) as input) and ¨q as output) from for-
ward simulations. The training is performed using the mean squared error between the acceleration
predicted by the EL equation and the ground truth. The detailed conﬁgurations and parameters
associated with simulation and training of each task is provided in App. A.6."
INFERENCE,0.3543307086614173,"4.1.5
INFERENCE"
INFERENCE,0.35826771653543305,"To asses the long term stability of models, we perform forward simulations using trained LNN
and MCLNN models for a prolonged time interval for each task. The initial condition and other
parameters are kept same for both LNN and MCLNN. Furthermore, the initial conditions of the
trajectories during inference are different from those encountered during the training. Consequently,
all trajectories during evaluation are unseen. We record Lagrangian, Hamiltonian, linear momentum
and angular momentum for the whole trajectory. The predicted forward simulation is compared with
the ground truth data as generated in Sec. 4.1.1."
ACCURACY,0.36220472440944884,"4.2
ACCURACY
First, we focus on the linear spring system with three particles. Figure 2(a.1)-(a.4) shows the La-
grangian, Hamiltonian (total energy), linear, and angular momenta of the system. The error in these
quantities predicted by the baseline LNN and MCLNN are shown in Figure 2(b.1)-(b.4). We observe
that the Lagrangian predicted by the baseline LNN starts diverging after 30 time steps of the forward
simulation. We notice that the divergence in the Lagrangian is accompanied by a divergence in the
linear momentum as well. Up on further simulation, the angular momentum also starts diverging.
In contrast, the Lagrangian predicted by the MCLNN follows the ground truth with very little error.
Further, the Hamiltonian, and linear and angular momenta remain conserved in the MCLNN. This
suggests that the trajectory predicted by the MCLNN is accurate and stable with no long term drift
or divergence. It is worth noting that, for the baseline LNN, despite the poor predictions of the La-
grangian at higher values of time steps, the total energy remain conserved. This points to the fact
that the energy conservation is a constraint enforced by the EL equation and is not a reﬂection on
the quality Lagrangian. Any value of Lagrangian can still yield a constant Hamiltonian (energy),
provided the constraints as imposed by the EL equations on the Lagrangian are satisﬁed. As such,
LNNs should be evaluated considering multiple metrics as demonstrated here."
ACCURACY,0.3661417322834646,Under review as a conference paper at ICLR 2022
ACCURACY,0.3700787401574803,"Figure 3: Results of the forward simulation of non-linear spring, and gravitational system from the
same initial conﬁguration using ground truth (continuous line) and MCLNN (dashed lines). (a) The
evolution of Lagrangian, Hamiltonian (total energy), linear and momentum for all the systems. (b)
The error in Lagrangian, Hamiltonian (total energy), linear and momentum predicted by the baseline
LNN and MCLNN with respect to the ground truth."
ACCURACY,0.37401574803149606,"Now, we focus on the non-linear spring and the gravitational system. Figure 3(a) and (c) shows the
Lagrangian, Hamiltonian (total energy), linear, and angular momenta of the non-linear spring and
gravitational systems. The error in these quantities predicted by the baseline LNN and MCLNN are
shown in Figure 2(b) and (d). As in the case of the linear spring system, we observe that there is a
long term drift in the Lagrangian predicted by the baseline LNN. Similarly, the linear and angular
momenta of the baseline also diverge in a few time steps. In contrast, the Lagrangian predicted
by the MCLNN exhibits a good match with the ground truth. It should be noted that the multi-
particle interacting systems are chaotic in nature and hence the exact trajectory of the ground truth
and simulated system may vary. However, the low values of error in the Lagrangian along with the
long-term stability of both non-linear spring and gravitational system suggests the realistic nature of
the trajectory predicted by MCLNN. In addition, we observe that the linear and angular momenta
of the system remain conserved in the MCLNN. Altogether, the results conﬁrm that the MCLNN
can successfully learn the generative model p(T) that can sample the trajectory effectively from the
physics-constrained conﬁgurational and temporal space."
GENERALIZABILITY TO UNSEEN SYSTEM SIZES,0.3779527559055118,"4.3
GENERALIZABILITY TO UNSEEN SYSTEM SIZES
To demonstrate the generalizability of MCLNN, we use the generative model p(T) for each of
the tasks learned during the training. The models are then used to predict trajectories of systems"
GENERALIZABILITY TO UNSEEN SYSTEM SIZES,0.38188976377952755,"Figure 4: Results of the forward simulation of (a) linear spring with 6 particles, (b) non-linear spring
with 6 particles, and (b) gravitational system with 8 particles from the same initial conﬁguration
using ground truth (continuous line) and MCLNN (dashed lines). The evolution of Lagrangian for
all the systems are plotted."
GENERALIZABILITY TO UNSEEN SYSTEM SIZES,0.3858267716535433,Under review as a conference paper at ICLR 2022
GENERALIZABILITY TO UNSEEN SYSTEM SIZES,0.38976377952755903,"Figure 5: Variation of Vij with respect to qij as learned by the MCLNN (dashed line) in comparison
to the ground truth (continuous line) for (a) linear spring, (b) non-linear spring, and (c) gravitational
potential. The shaded region represents the range of qij values in the training set. Non-shaded region
between two shaded region corresponds to interpolation; otherwise, it represents extrapolation."
GENERALIZABILITY TO UNSEEN SYSTEM SIZES,0.3937007874015748,"with different number of particles. Figure 4 shows the trajectories for linear and non-linear springs
with six particles (MCLNN trained on three particles), and gravitational system with eight particles
(MCLNN trained on four particles), predicted by the MCLNN in comparison to the ground truth. We
observe that the Lagrangian predicted by the MCLNN exhibits excellent match with the ground truth.
In addition, all other quantities such as energy and momenta remain conserved (see Appendix Fig. 7).
This suggests that once the generative model p(T) has been learned, MCLNN can generalize it to
predict the trajectory of systems with any number of particles. Note that the baseline LNN cannot
simulate systems of different sizes as the positions of all the particles are given simultaneously as
the input to the neural network."
INTERPRETABILITY,0.39763779527559057,"4.4
INTERPRETABILITY"
INTERPRETABILITY,0.4015748031496063,"Figure 5 shows the Vij predicted by the MCLNN in comparison to the pair-wise potential energy
obtained analytically from ground truth. The shaded region represents the qij values that were
present in the training set. We observe that the MCLNN is able to learn the pairwise potential energy
function accurately for the qij values in the training set. Further, the MCLNN is able to interpolate
values excellently and extrapolate reasonably. It is worth noting that the MCLNN is trained only on
the trajectories of the system. Hence, no information regarding the potential energy, force, or even
acceleration is given to the neural network during training. This suggests that MCLNN is indeed
able to learn the physics of the problem by training purely on the trajectory."
CONCLUSION,0.40551181102362205,"5
CONCLUSION"
CONCLUSION,0.4094488188976378,"We introduced a new framework, namely, momentum conserving Lagrangian neural networks
(MCLNN), for incorporating physics-based priors in neural networks for accurate simulations of
multi-particle systems. We demonstrated that the MCLNN respects the symmetries in space and
time, leading to conservation of energy, and linear and angular momentum. We showed that the
incorporation of these additional conservation laws of momenta makes the Lagrangian of the system
stable by avoiding any long-term drift in it. This, in turn, results in a realistic simulation of multi-
body systems. Further, we showed that the MCLNN once trained, can generalize to systems of any
size. Finally, we demonstrated that the MCLNN is highly interpretable and provides direct insights
into the interaction laws governing the dynamics of multi-particle systems. This, in turn, allows one
to verify the realistic nature of the function learned by the MCLNN."
CONCLUSION,0.41338582677165353,"At this juncture, it is worth discussing some of the open questions and shortcomings of MCLNN that
can be addressed as part of future works. (i) MCLNN assumes interaction between all the particles
in the system. A graph-based MCLNN with contrastive loss can potentially address this challenge
by incorporating the topology of the particle system along with differential importance for nearby
particles. (ii) MCLNN considers only pair-wise interactions for computing the Vij. However, there
could be additional interactions involving three (Vijk), four (Vijkl) or even higher particles. This
could be addressed by feature engineering or graph-based MCLNN. (iii) Similarly, simulations in-
volving different types of interacting particles is challenging in MCLNN as it may lead to non-unique
solutions. (iv) In addition, present work can be extended to address more challenging problems, for
instance, to learn the Lagrangian of system with non-conservative forces, and to learn generalized
kinetic energy functions, while maintaining the granularity and generalizability."
CONCLUSION,0.41732283464566927,Under review as a conference paper at ICLR 2022
REPRODUCIBILITY STATEMENT,0.421259842519685,"6
REPRODUCIBILITY STATEMENT"
REPRODUCIBILITY STATEMENT,0.4251968503937008,"Please
ﬁnd
all
codes
and
experiments
at
the
following
anonymous
link:
https:
//anonymous.4open.science/r/nbodyMCLNN-2618/.
In Appendix A.6, we have given addi-
tional details to make the work completely reproducible. In particular, we have: (1) additional
derivations and proofs in App. A.3,A.4,A.5, (2) initial conditions, task conﬁgurations, and param-
eters for the training of neural networks used for each task in App. A.6, (3) detailed notation in
App. A.7. The dataset generation (using simulations) step is added to the code before training step
and hence there are no additional dataset ﬁles are provided."
REFERENCES,0.42913385826771655,REFERENCES
REFERENCES,0.4330708661417323,"James Bradbury, Roy Frostig, Peter Hawkins, Matthew James Johnson, Chris Leary, Dougal
Maclaurin, and Skye Wanderman-Milne. Jax: composable transformations of python+ numpy
programs, 2018. URL http://github. com/google/jax, 4:16, 2020."
REFERENCES,0.43700787401574803,"Miles Cranmer, Sam Greydanus, Stephan Hoyer, Peter Battaglia, David Spergel, and Shirley Ho.
Lagrangian neural networks. In ICLR 2020 Workshop on Integration of Deep Neural Models and
Differential Equations, 2020a. URL https://openreview.net/forum?id=iE8tFa4Nq."
REFERENCES,0.4409448818897638,"Miles Cranmer, Alvaro Sanchez Gonzalez, Peter Battaglia, Rui Xu, Kyle Cranmer, David Spergel,
and Shirley Ho. Discovering symbolic models from deep learning with inductive biases. Advances
in Neural Information Processing Systems, 33, 2020b."
REFERENCES,0.4448818897637795,"Marc Finzi, Ke Alexander Wang, and Andrew G Wilson. Simplifying hamiltonian and lagrangian
neural networks via explicit constraints. In H. Larochelle, M. Ranzato, R. Hadsell, M. F. Bal-
can, and H. Lin (eds.), Advances in Neural Information Processing Systems, volume 33, pp.
13880–13889. Curran Associates, Inc., 2020. URL https://proceedings.neurips.cc/paper/2020/
ﬁle/9f655cc8884fda7ad6d8a6fb15cc001e-Paper.pdf."
REFERENCES,0.44881889763779526,"Herbert Goldstein. Classical mechanics. Pearson Education India, 2011."
REFERENCES,0.452755905511811,"Samuel Greydanus, Misko Dzamba, and Jason Yosinski. Hamiltonian neural networks. Advances
in Neural Information Processing Systems, 32:15379–15389, 2019."
REFERENCES,0.4566929133858268,"Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR (Poster),
2015. URL http://arxiv.org/abs/1412.6980."
REFERENCES,0.46062992125984253,"Michael Lutter, Christian Ritter, and Jan Peters. Deep lagrangian networks: Using physics as model
prior for deep learning. In International Conference on Learning Representations, 2019. URL
https://openreview.net/forum?id=BklHpjCqKm."
REFERENCES,0.4645669291338583,"Emmy Noether. Invariant variation problems. Transport theory and statistical physics, 1(3):186–
207, 1971."
REFERENCES,0.468503937007874,"Cheol Woo Park, Mordechai Kornbluth, Jonathan Vandermause, Chris Wolverton, Boris Kozinsky,
and Jonathan P Mailoa. Accurate and scalable graph neural network force ﬁeld and molecular
dynamics with direct force architecture. npj Computational Materials, 7(1):1–9, 2021."
REFERENCES,0.47244094488188976,"Dennis C Rapaport. The art of molecular dynamics simulation. Cambridge university press, 2004."
REFERENCES,0.4763779527559055,"Manuel A Roehrl, Thomas A Runkler, Veronika Brandtstetter, Michel Tokic, and Stefan Obermayer.
Modeling system dynamics with physics-informed neural networks based on lagrangian mechan-
ics. IFAC-PapersOnLine, 53(2):9195–9200, 2020."
REFERENCES,0.48031496062992124,"Samuel Schoenholz and Ekin Dogus Cubuk. Jax md: a framework for differentiable physics. Ad-
vances in Neural Information Processing Systems, 33, 2020."
REFERENCES,0.484251968503937,"Yaofeng Desmond Zhong and Naomi Leonard. Unsupervised learning of lagrangian dynamics from
images for prediction and control. Advances in Neural Information Processing Systems, 33, 2020."
REFERENCES,0.4881889763779528,"Yaofeng Desmond Zhong, Biswadip Dey, and Amit Chakraborty. Symplectic ode-net: Learning
hamiltonian dynamics with control. In International Conference on Learning Representations,
2019."
REFERENCES,0.4921259842519685,Under review as a conference paper at ICLR 2022
REFERENCES,0.49606299212598426,"Yaofeng Desmond Zhong, Biswadip Dey, and Amit Chakraborty. Benchmarking energy-conserving
neural networks for learning dynamics from data. In Learning for Dynamics and Control, pp.
1218–1229. PMLR, 2021."
REFERENCES,0.5,Under review as a conference paper at ICLR 2022
REFERENCES,0.5039370078740157,"A
APPENDIX"
REFERENCES,0.5078740157480315,"A.1
BASELINE LNN"
REFERENCES,0.5118110236220472,"Figure 6 shows the predicted force with respect to the actual force for the training data of baseline
for the three tasks."
REFERENCES,0.515748031496063,"Figure 6: Predicted force for (a) linear spring, (b) non-linear spring, and (c) gravitational system
with respect to the measured forces on the test dataset of baseline LNN."
REFERENCES,0.5196850393700787,"A.2
GENERALIZABILITY TO UNSEEN SYSTEM SIZES"
REFERENCES,0.5236220472440944,"Figure 7 shows the generalizability of the MCLNN to unseen system sizes for the three tasks consid-
ered. For all the three tasks, the number of particles considered are twice that of the training system
size. We observe that the Lagrangian for the unseen system is predicted in excellent agreement to
the ground truth for all the three tasks. In addition, the Hamiltonian (total energy), and momenta are
conserved in all the three tasks, conﬁrming the realistic nature of the simulations by MCLNN."
REFERENCES,0.5275590551181102,"Figure 7: Results of the forward simulation of (a) linear spring, (b) non-linear spring, and (b) gravita-
tional system from the same initial conﬁguration using ground truth (continuous line) and MCLNN
(dashed lines). The evolution of Lagrangian, Hamiltonian (total energy), linear and angular mo-
menta for all the systems with different number of particles than that was present in the training set
are plotted."
REFERENCES,0.531496062992126,Under review as a conference paper at ICLR 2022
REFERENCES,0.5354330708661418,"A.3
COMPUTING ACCELERATION FROM EULER-LAGRANGE EQUATIONS"
REFERENCES,0.5393700787401575,The acceleration of particles can be obtained from the Euler-Lagrange equations as follows.
REFERENCES,0.5433070866141733,"∂
∂˙q
dL"
REFERENCES,0.547244094488189,dt = ∂L
REFERENCES,0.5511811023622047,"∂q
∂
∂˙q ∂L ∂q
dq"
REFERENCES,0.5551181102362205,dt + ∂L
REFERENCES,0.5590551181102362,"∂˙q
d˙q dt"
REFERENCES,0.562992125984252,"
= ∂L"
REFERENCES,0.5669291338582677,"∂q
∂
∂˙q ∂L"
REFERENCES,0.5708661417322834,∂q ˙q + ∂L
REFERENCES,0.5748031496062992,"∂˙q ¨q

= ∂L"
REFERENCES,0.5787401574803149,"∂q
∂
∂˙q
∂L
∂q ˙q + ∂"
REFERENCES,0.5826771653543307,"∂˙q
∂L
∂˙q ¨q = ∂L"
REFERENCES,0.5866141732283464,"∂q
∂
∂˙q
∂L
∂˙q ¨q = ∂L ∂q −∂"
REFERENCES,0.5905511811023622,"∂˙q
∂L
∂q ˙q"
REFERENCES,0.594488188976378,"¨q =
 ∂"
REFERENCES,0.5984251968503937,"∂˙q
∂L
∂˙q"
REFERENCES,0.6023622047244095,−1 ∂L ∂q −∂
REFERENCES,0.6062992125984252,"∂˙q
∂L
∂q ˙q
"
REFERENCES,0.610236220472441,¨q = (∇˙q ˙qL)−1 [∇qL −(∇˙qqL) ˙q]
REFERENCES,0.6141732283464567,"A.4
TRANSLATIONAL SYMMETRY"
REFERENCES,0.6181102362204725,"The conservation of linear momentum can be derived from translational symmetry of Lagrangian as
follows."
REFERENCES,0.6220472440944882,"L(q, ˙q) = L(q + ϵ, ˙q)"
REFERENCES,0.6259842519685039,"q
′ = q + ϵ"
REFERENCES,0.6299212598425197,"=⇒∂q
′"
REFERENCES,0.6338582677165354,∂q = 1 X ∂L
REFERENCES,0.6377952755905512,"∂q =
X ∂L"
REFERENCES,0.6417322834645669,"∂q
′ =
X ∂L"
REFERENCES,0.6456692913385826,"∂q
∂q
∂q
′ =
X ∂L ∂q .1"
REFERENCES,0.6496062992125984,"δL =
X
δq∂L ∂q"
REFERENCES,0.6535433070866141,"δL =
X
ϵ∂L ∂q"
REFERENCES,0.65748031496063,"δL = ϵ
X ∂L ∂q"
REFERENCES,0.6614173228346457,Under review as a conference paper at ICLR 2022
REFERENCES,0.6653543307086615,"since,"
REFERENCES,0.6692913385826772,δL = 0
REFERENCES,0.6732283464566929,"=⇒
X ∂L"
REFERENCES,0.6771653543307087,∂q = 0 X ∂L
REFERENCES,0.6811023622047244,∂q = 0 X d
REFERENCES,0.6850393700787402,"dt
∂L
∂˙q = 0 d
dt X ∂L"
REFERENCES,0.6889763779527559,∂˙q = 0 X ∂L
REFERENCES,0.6929133858267716,"∂˙q = constant
X
pi = constant (linear momentum)"
REFERENCES,0.6968503937007874,where pi = ∂L ∂˙qi
REFERENCES,0.7007874015748031,"A.5
ROTATIONAL SYMMETRY"
REFERENCES,0.7047244094488189,"The conservation of angular momentum can be derived from rotational symmetry of Lagrangian as
follows."
REFERENCES,0.7086614173228346,Under an inﬁnitesimal rotation δθ
REFERENCES,0.7125984251968503,δ⃗qi = δθ × ⃗qi and
REFERENCES,0.7165354330708661,δ⃗˙qi = δθ × ⃗˙qi
REFERENCES,0.7204724409448819,"since, Lagrangian does not change with inﬁnitesimal rotation δθ"
REFERENCES,0.7244094488188977,"δL =
X i"
REFERENCES,0.7283464566929134,"∂L
∂⃗qi
δ⃗qi +
X i ∂L"
REFERENCES,0.7322834645669292,"∂˙⃗qi
δ ˙⃗qi = 0"
REFERENCES,0.7362204724409449,using generalized momentum ∂L
REFERENCES,0.7401574803149606,"∂˙⃗qi
= ⃗pi"
REFERENCES,0.7440944881889764,Under review as a conference paper at ICLR 2022
REFERENCES,0.7480314960629921,then EL equation gives
REFERENCES,0.7519685039370079,"d
dt⃗pi −∂L"
REFERENCES,0.7559055118110236,"∂⃗qi
= 0"
REFERENCES,0.7598425196850394,˙⃗pi = ∂L
REFERENCES,0.7637795275590551,"∂⃗qi
=⇒δL =
X"
REFERENCES,0.7677165354330708,"i
˙⃗pi · δ⃗qi +
X"
REFERENCES,0.7716535433070866,"i
⃗pi · δ ˙⃗qi = 0 X"
REFERENCES,0.7755905511811023,"i
˙⃗pi· (δθ × ⃗qi) + ⃗pi · (δθ × ⃗˙qi) = 0 X"
REFERENCES,0.7795275590551181,"i
δθ· (⃗qi × ˙⃗pi) + δθ· ( ˙⃗qi × ⃗pi) = 0 X"
REFERENCES,0.7834645669291339,"i
δθ· [(⃗qi × ⃗˙pi) + (⃗˙qi × ⃗pi)] = 0 X"
REFERENCES,0.7874015748031497,"i
δθ· d"
REFERENCES,0.7913385826771654,dt(⃗qi × ⃗pi) = 0
REFERENCES,0.7952755905511811,"because δθ is arbitrary, then
X i"
REFERENCES,0.7992125984251969,"d
dt(⃗ri × pi) = 0"
REFERENCES,0.8031496062992126,"d
dt(
X"
REFERENCES,0.8070866141732284,"i
⃗ri × pi) = 0"
REFERENCES,0.8110236220472441,"angular momentum =
X"
REFERENCES,0.8149606299212598,"i
(⃗ri × ⃗pi) = constant"
REFERENCES,0.8188976377952756,"A.6
INITIAL CONDITIONS AND TASK CONFIGURATION"
REFERENCES,0.8228346456692913,"The number of hidden units are chosen from hyperparamter search given in Table 1. The activation
function for all hidden units are square plus f(x) = (x+
√"
REFERENCES,0.8267716535433071,"x2+4)
2
which is similar to soft plus (Cran-
mer et al., 2020a). We use ADAM (Kingma & Ba, 2015) optimiser for model training with learning
rate given in respective conﬁguration tables. We use velocity-Verlet for time integration during
trajectory evolution. Mass of all the particles are maintained as 1.0 units."
REFERENCES,0.8307086614173228,"A.6.1
LINEAR SPRING SYSTEM"
REFERENCES,0.8346456692913385,Initial position =
REFERENCES,0.8385826771653543,""" 0.486657678894505
0.755041888583519
0.0
−0.681737994414464
0.293660233197210
0.0
−0.022596327468640
−0.612645601255358
0.0 #"
REFERENCES,0.84251968503937,Initial velocity =
REFERENCES,0.8464566929133859,"""−0.182709864466916
0.363013287999004
0.0
−0.579074922540872
−0.748157481446087
0.0
0.761784787007641
0.385144193447218
0.0 #"
REFERENCES,0.8503937007874016,"Table 1: Train and validation loss for each NN architecture for the linear spring task for MCLNN.
Note that for hyperparamter search (i.e. number of hidden units), minimum train loss was set to
1.0e-8 as stopping criteria."
REFERENCES,0.8543307086614174,"Hidden Layers
Linear Spring"
REFERENCES,0.8582677165354331,"2, 2
0.0012 , 0.0015
4, 4
7.98e-09, 2.36e-08
8, 8
9.86e-09, 3.80e-08
16, 16
9.76e-09, 3.02e-08"
REFERENCES,0.8622047244094488,Under review as a conference paper at ICLR 2022
REFERENCES,0.8661417322834646,"dt = 0.01
mass = 1.0
stride = 10
runs = 20 = points per trajectory
lr = 1.0e −3
layers = [10, 10]
epochs = 100000
samples = 100 = number of trajectories
seed = 100
time step = dt × stride = 0.1"
REFERENCES,0.8700787401574803,"A.6.2
NON-LINEAR SPRING SYSTEM"
REFERENCES,0.8740157480314961,Initial position =
REFERENCES,0.8779527559055118,""" 0.486657678894505
0.755041888583519
0.0
−0.681737994414464
0.293660233197210
0.0
−0.022596327468640
−0.612645601255358
0.0 #"
REFERENCES,0.8818897637795275,Initial velocity =
REFERENCES,0.8858267716535433,"""−0.182709864466916
0.363013287999004
0.0
−0.579074922540872
−0.748157481446087
0.0
0.761784787007641
0.385144193447218
0.0 #"
REFERENCES,0.889763779527559,"dt = 0.01
mass = 1.0
stride = 10
runs = 20 = points per trajectory
lr = 1.0e −3
layers = [10, 10]
epochs = 100000
samples = 100 = number of trajectories
seed = 100
time step = dt × stride = 0.1"
REFERENCES,0.8937007874015748,"A.6.3
GRAVITATIONAL SYSTEM"
REFERENCES,0.8976377952755905,Initial position =  
REFERENCES,0.9015748031496063,"1.0
0.0
0.0
9.0
0.0
0.0
11.0
0.0
0.0
−1.0
0.0
0.0  "
REFERENCES,0.905511811023622,Initial velocity =  
REFERENCES,0.9094488188976378,"0.0
0.05
0.0
0.0
−0.05
0.0
0.0
0.65
0.0
0.0
−0.65
0.0  "
REFERENCES,0.9133858267716536,"dt = 0.01
mass = 1.0
stride = 10
runs = 20 = points per trajectory
lr = 1.0e −3
layers = [10, 10]
epochs = 100000
samples = 100 = number of trajectories
seed = 100
time step = dt × stride = 0.1"
REFERENCES,0.9173228346456693,Under review as a conference paper at ICLR 2022
REFERENCES,0.9212598425196851,"A.7
DEFAULT NOTATION"
REFERENCES,0.9251968503937008,"a
A scalar (integer or real)"
REFERENCES,0.9291338582677166,"⃗a
A vector"
REFERENCES,0.9330708661417323,"A
A matrix"
REFERENCES,0.937007874015748,"In
Identity matrix with n rows and n columns"
REFERENCES,0.9409448818897638,"I
Identity matrix with dimensionality implied by context"
REFERENCES,0.9448818897637795,"e(i)
Standard basis vector [0, . . . , 0, 1, 0, . . . , 0] with a 1 at po-
sition i"
REFERENCES,0.9488188976377953,"⃗ai
Vector corresponding to particle i"
REFERENCES,0.952755905511811,"Ai,j
Element i, j of matrix A"
REFERENCES,0.9566929133858267,"Ai,:
Row i of matrix A"
REFERENCES,0.9606299212598425,"A:,i
Column i of matrix A"
REFERENCES,0.9645669291338582,"Ai,j,k
Element (i, j, k) of a 3-D tensor A"
REFERENCES,0.968503937007874,"A:,:,i
2-D slice of a 3-D tensor
dy
dx
Derivative of y with respect to x"
REFERENCES,0.9724409448818898,"∂y
∂x
Partial derivative of y with respect to x"
REFERENCES,0.9763779527559056,"∇⃗xL
Gradient of L with respect to ⃗x"
REFERENCES,0.9803149606299213,"∇Xy
Matrix derivatives of y with respect to X
∂f
∂x
Jacobian matrix J ∈Rm×n of f : Rn →Rm"
REFERENCES,0.984251968503937,"Z
f(x)dx
Deﬁnite integral over the entire domain of x
Z"
REFERENCES,0.9881889763779528,"S
f(x)dx
Deﬁnite integral with respect to x over the set S"
REFERENCES,0.9921259842519685,"P(a)
A probability distribution over a discrete variable"
REFERENCES,0.9960629921259843,"p(a)
A probability distribution over a continuous variable, or
over a variable whose type has not been speciﬁed"
