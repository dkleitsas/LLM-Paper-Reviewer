Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.0026109660574412533,"Synthesizing optimal controllers for dynamical systems often involves solving op-
timization problems with hard real–time constraints. These constraints determine
the class of numerical methods that can be applied: computationally expensive
but accurate numerical routines are replaced by fast and inaccurate methods, trad-
ing inference time for solution accuracy. This paper provides techniques to im-
prove the quality of optimized control policies given a ﬁxed computational bud-
get. We achieve the above via a hypersolvers (Poli et al., 2020a) approach, which
hybridizes a differential equation solver and a neural network. The performance
is evaluated in direct and receding–horizon optimal control tasks in both low and
high dimensions, where the proposed approach shows consistent Pareto improve-
ments in solution accuracy and control performance."
INTRODUCTION,0.005221932114882507,"1
INTRODUCTION"
INTRODUCTION,0.007832898172323759,"Optimal control of complex, high–dimensional systems requires computationally expensive numer-
ical methods for differential equations (Pytlak, 2006; Rao, 2009). Here, real–time and hardware
constraints preclude the use of accurate and expensive methods, forcing instead the application of
cheaper and less accurate algorithms. While the paradigm of optimal control has successfully been
applied in various domains (Vadali et al., 1999; Lewis et al., 2012; Zhang et al., 2016), improving
accuracy while satisfying computational budget constraints is still a great challenge (Ross & Fahroo,
2006; Baoti´c et al., 2008). To alleviate computational overheads, we detail a procedure for ofﬂine
optimization and subsequent online application of hypersolvers (Poli et al., 2020a) to optimal con-
trol problems. These hybrid solvers achieve the accuracy of higher–order methods by augmenting
numerical results of a base solver with a learning component trained to approximate local truncation
residuals. When the cost of a single forward–pass of the learning component is kept sufﬁciently
small, hypersolvers improve the computation–accuracy Pareto front of low–order explicit solvers
(Butcher, 1997). However, direct application of hybrid solvers to controlled dynamical system in-
volves learning truncation residuals on the higher–dimensional spaces of state and control inputs. To
extend the range of applicability of hypersolvers to controlled dynamical systems, we propose two
pretraining strategies designed to improve, in the set of admissible control inputs, on the average or
worst–case hypersolver solution. With the proposed methodology, we empirically show that Pareto
front improvements of hypersolvers hold even for optimal control tasks. In particular, we then carry
out performance and generalization evaluations in direct and model predictive control tasks. Here,
we conﬁrm Pareto front improvements in terms of solution accuracy and subsequent control per-
formance, leading to higher quality control policies and lower control losses. In high–dimensional
regimes, we obtain the same control policy as the one obtained by accurate high–order solvers with
more than 3× speedup."
INTRODUCTION,0.010443864229765013,Published as a conference paper at ICLR 2022
INTRODUCTION,0.013054830287206266,"{𝑥𝑥0, 𝑢𝑢0}"
INTRODUCTION,0.015665796344647518,Hypersolver Training
INTRODUCTION,0.018276762402088774,"Distribution 𝜉𝜉(𝑥𝑥, 𝑢𝑢) of possible states and controller values"
INTRODUCTION,0.020887728459530026,"Hypersolver 𝒈𝒈𝒘𝒘(𝑥𝑥, 𝑢𝑢) with base solver 𝜓𝜓"
INTRODUCTION,0.02349869451697128,"Calculate ℓ(𝑅𝑅, 𝒈𝒈𝒘𝒘(𝑥𝑥, 𝑢𝑢))"
INTRODUCTION,0.02610966057441253,and backpropagate
INTRODUCTION,0.028720626631853787,"𝑅𝑅←𝛷𝛷𝑥𝑥, 𝑢𝑢−𝜓𝜓𝑥𝑥, 𝑢𝑢−𝑥𝑥
𝜖𝜖𝑝𝑝+1"
INTRODUCTION,0.031331592689295036,Pre-trained 𝒈𝒈𝒘𝒘
INTRODUCTION,0.033942558746736295,"Sample batches from 𝜉𝜉(𝑥𝑥, 𝑢𝑢)"
INTRODUCTION,0.03655352480417755,"Calculate residuals
𝒈𝒈
ℓ
𝒙𝒙 𝒖𝒖"
INTRODUCTION,0.0391644908616188,"{𝑥𝑥1, 𝑢𝑢1}
{𝑥𝑥2, 𝑢𝑢2}
{𝑥𝑥𝑛𝑛, 𝑢𝑢𝑛𝑛}"
INTRODUCTION,0.04177545691906005,Optimal Control
INTRODUCTION,0.044386422976501305,"Cost function 𝐽𝐽(𝑥𝑥, 𝑢𝑢)"
INTRODUCTION,0.04699738903394256,Initial condition 𝑥𝑥0
INTRODUCTION,0.04960835509138381,Solve optimization problem
INTRODUCTION,0.05221932114882506,where 𝑥𝑥𝑘𝑘+1 = 𝑥𝑥𝑘𝑘+ 𝜖𝜖𝜖𝜖+ 𝜖𝜖𝑝𝑝+1 𝒈𝒈𝒘𝒘
INTRODUCTION,0.05483028720626632,Apply control inputs 𝑢𝑢0 𝑢𝑢1 𝑢𝑢2 𝑢𝑢3
INTRODUCTION,0.057441253263707574,Solve optimization problem
INTRODUCTION,0.06005221932114883,"𝒈𝒈
𝒈𝒈𝒘𝒘
𝒙𝒙𝒌𝒌 𝒖𝒖𝒌𝒌"
INTRODUCTION,0.06266318537859007,"min
𝑢𝑢
෍"
INTRODUCTION,0.06527415143603134,"𝑘𝑘
𝐽𝐽(𝑥𝑥𝑘𝑘, 𝑢𝑢𝑘𝑘) , 𝑘𝑘∈(0, 𝑇𝑇−1)"
INTRODUCTION,0.06788511749347259,Feed-forward hypersolver
INTRODUCTION,0.07049608355091384,Shift the receding
INTRODUCTION,0.0731070496083551,horizon forward 𝜖𝜖 𝑥𝑥0 𝑥𝑥0
INTRODUCTION,0.07571801566579635,"Figure 1: Overview of the proposed method. [Left] The hypersolver is trained to approximate residuals given
a distribution of control inputs and states. [Right] The pre–trained hypersolver model is then used to accelerate
and improve the accuracy of numerical solutions used during optimization of control policies, leading to higher–
quality controllers."
NUMERICAL OPTIMAL CONTROL,0.0783289817232376,"2
NUMERICAL OPTIMAL CONTROL"
NUMERICAL OPTIMAL CONTROL,0.08093994778067885,We consider control of general nonlinear systems of the form
NUMERICAL OPTIMAL CONTROL,0.0835509138381201,"˙x(t) = f(t, x(t), uθ(t))
x(0) = x0
(1)"
NUMERICAL OPTIMAL CONTROL,0.08616187989556136,"with state x ∈X ⊂Rnx, input uθ ∈U ⊂Rnu deﬁned on a compact time domain T := [t0, T]
where θ is a ﬁnite set of free parameters of the controller. Solutions of (1) are denoted with x(t) =
Φ(x(s), s, t) for all s, t ∈T . Given some objective function J : X ×U →R; x0, uθ 7→J(x0, uθ(t))
and a distribution ρ0(x0) of initial conditions with support in X, we consider the following nonlinear
program, constrained to the system dynamics:"
NUMERICAL OPTIMAL CONTROL,0.08877284595300261,"min
uθ(t)
Ex0∼ρ0(x0) [J(x0, uθ(t))]"
NUMERICAL OPTIMAL CONTROL,0.09138381201044386,"subject to
˙x(t) = f(t, x(t), uθ(t))
x(0) = x0
t ∈T (2)"
NUMERICAL OPTIMAL CONTROL,0.09399477806788512,"where the controller parameters θ are optimized. We will henceforth omit the subscript θ and write
u(t) = uθ(t). Since analytic solutions of (2) exist only for limited classes of systems and objectives,
numerical solvers are often applied to iteratively ﬁnd a solution. For these reasons, problem 2 is often
referred to as numerical optimal control."
NUMERICAL OPTIMAL CONTROL,0.09660574412532637,"Direct optimal control
If the problem (2) is solved ofﬂine by directly optimizing over complete
trajectories, we call it direct optimal control. The inﬁnite–dimensional optimal control problem is
time–discretized and solved numerically: the obtained control policy is then applied to the real target
system without further optimization."
NUMERICAL OPTIMAL CONTROL,0.09921671018276762,"Model predictive control
Also known in the literature as receding horizon control, Model Pre-
dictive Control (MPC) is a class of ﬂexible control algorithms capable of taking into consideration
constraints and nonlinearities (Mayne & Michalska, 1988; Garcia et al., 1989). MPC considers ﬁ-
nite time windows which are then shifted forward in a receding manner. The control problem is
then solved for each window by iteratively forward–propagating trajectories with numerical solvers
i.e. predicting the set of future trajectories with a candidate controller u(t) and then adjusting it it-
eratively to optimize the cost function J (further details on the MPC formulation in Appendix B.2).
The optimization is reiterated online until the end of the control time horizon."
NUMERICAL OPTIMAL CONTROL,0.10182767624020887,Published as a conference paper at ICLR 2022
SOLVER RESIDUALS,0.10443864229765012,"2.1
SOLVER RESIDUALS"
SOLVER RESIDUALS,0.10704960835509138,"Given nominal solutions Φ of (1) we can deﬁne the residual of a numerical ODE solver as the
normalized error accumulated in a single step size of the method, i.e."
SOLVER RESIDUALS,0.10966057441253264,"Rk = R(tk, x(tk), u(tk)) =
1
ϵp+1"
SOLVER RESIDUALS,0.1122715404699739,"h
Φ(x(tk), tk, tk+1) −x(tk) −ϵψϵ(tk, x(tk), u(tk))
i
(3)"
SOLVER RESIDUALS,0.11488250652741515,"where ϵ is the step size and p is the order of the numerical solver corresponding to ψϵ. From the
deﬁnition of residual in (3), we can deﬁne the local truncation error ek :=
ϵp+1Rk

2 which is the
error accumulated in a single step; while the global truncation error Ek = ∥x(tk) −xk∥2 represents
the error accumulated in the ﬁrst k steps of the numerical solution. Given a p–th order explicit
solver, we have ek = O(ϵp+1) and Ek = O(ϵp) (Butcher, 1997)."
HYPERSOLVERS FOR OPTIMAL CONTROL,0.1174934725848564,"3
HYPERSOLVERS FOR OPTIMAL CONTROL"
HYPERSOLVERS FOR OPTIMAL CONTROL,0.12010443864229765,"We extend the range of applicability of hypersolvers (Poli et al., 2020a) to controlled dynamical sys-
tems. In this Section we discuss the proposed hypersolver architectures and pre–training strategies
of the proposed hypersolver methodology for numerical optimal control of controlled dynamical
systems."
HYPERSOLVERS,0.1227154046997389,"3.1
HYPERSOLVERS"
HYPERSOLVERS,0.12532637075718014,"Given a p–order base solver update map ψϵ, the corresponding hypersolver is the discrete iteration"
HYPERSOLVERS,0.1279373368146214,"xk+1 = xk + ϵψϵ (tk, xk, uk)
|
{z
}
base solver step"
HYPERSOLVERS,0.13054830287206268,"+ϵp+1 gω (tk, xk, uk)
|
{z
}
approximator
(4)"
HYPERSOLVERS,0.13315926892950392,"where gω (tk, xk, uk) is some o(1) parametric function with free parameters ω. The core idea is to
select gω as some function with universal approximation properties and ﬁt the higher-order terms of
the base solver by explicitly minimizing the residuals over a set of state and control input samples.
This procedure leads to a reduction of the overall local truncation error ek, i.e. we can improve the
base solver accuracy with the only computational overhead of evaluating the function gω. It is also
proven that, if gω is a δ–approximator of R, i.e. ∀k ∈N≤K
∥R (tk, x(tk), u(tk)) −gω (tk, x(tk), u(tk))∥2 ≤δ
(5)"
HYPERSOLVERS,0.13577023498694518,"then ek ≤o(δϵp+1), where δ > 0 depends on the hypersolver training results (Poli et al., 2020a,
Theorem 1). This result practically guarantees that if gω is a good approximator for R, i.e. δ ≪1,
then the overall local truncation error of the hypersolved ODE is signiﬁcantly reduced with guaran-
teed upper bounds."
NUMERICAL OPTIMAL CONTROL WITH HYPERSOLVERS,0.13838120104438642,"3.2
NUMERICAL OPTIMAL CONTROL WITH HYPERSOLVERS"
NUMERICAL OPTIMAL CONTROL WITH HYPERSOLVERS,0.1409921671018277,"Our approach relies on the pre–trained hypersolver model for obtaining solutions to the trajectories
of the optimal control problem (2). After the initial training stage, control policies are numerically
optimized to minimize the cost function J (see Appendix B.3 for further details). Figure 1 shows an
overview of the proposed approach consisting in pre–training and system control."
NUMERICAL OPTIMAL CONTROL WITH HYPERSOLVERS,0.14360313315926893,"4
HYPERSOLVER PRE–TRAINING AND ARCHITECTURES"
NUMERICAL OPTIMAL CONTROL WITH HYPERSOLVERS,0.1462140992167102,"We introduce in Section 4.1 loss functions which are used in the proposed pre–training methods
of Section 4.2 and Section 4.3. We also check the generalization properties of hypersolvers with
different architectures in Section 4.4. In Section 4.5 we introduce multi–stage hypersolvers in which
an additional ﬁrst–order learned term is employed for correcting errors in the vector ﬁeld."
LOSS FUNCTIONS,0.14882506527415143,"4.1
LOSS FUNCTIONS"
LOSS FUNCTIONS,0.1514360313315927,"Residual ﬁtting
Training the hypersolver on a single nominal trajectory {x(tk)}k results in a
supervised learning problem where we minimize point–wise the Euclidean distance between the"
LOSS FUNCTIONS,0.15404699738903394,Published as a conference paper at ICLR 2022
LOSS FUNCTIONS,0.1566579634464752,"−20
0
20
u [N] 10−8 10−5 10−2 101"
LOSS FUNCTIONS,0.15926892950391644,Mean Residual R
LOSS FUNCTIONS,0.1618798955613577,ϵ = 0.01 [s]
LOSS FUNCTIONS,0.16449086161879894,"−20
0
20
u [N]"
LOSS FUNCTIONS,0.1671018276762402,ϵ = 0.03 [s]
LOSS FUNCTIONS,0.16971279373368145,"−20
0
20
u [N]"
LOSS FUNCTIONS,0.17232375979112272,ϵ = 0.1 [s]
LOSS FUNCTIONS,0.17493472584856398,"−20
0
20
u [N]"
LOSS FUNCTIONS,0.17754569190600522,ϵ = 0.3 [s]
LOSS FUNCTIONS,0.1801566579634465,"−20
0
20
u [N]"
LOSS FUNCTIONS,0.18276762402088773,ϵ = 1.0 [s]
LOSS FUNCTIONS,0.185378590078329,HyperEuler Euler
LOSS FUNCTIONS,0.18798955613577023,Midpoint RK4
LOSS FUNCTIONS,0.1906005221932115,"Figure 2: Mean local residuals of the spring–mass system of (17) as a function of control inputs at different step
sizes ϵ. HyperEuler (see Appendix A.1 for its explicit formulation) improves on the local residuals compared
to the baseline Euler and even compared to higher-order ODE solvers at larger step sizes."
LOSS FUNCTIONS,0.19321148825065274,"residual (3) and the output of gω, resulting in an optimization problem minimizing a loss function ℓ
of the form"
LOSS FUNCTIONS,0.195822454308094,"ℓ(t, x, u) = 1 K K−1
X"
LOSS FUNCTIONS,0.19843342036553524,"k=0
∥R (tk, x(tk), u(tk)) −gω (tk, x(tk), u(tk))∥2
(6)"
LOSS FUNCTIONS,0.2010443864229765,which is also called residual ﬁtting since the target of gw is the residual R.
LOSS FUNCTIONS,0.20365535248041775,"Trajectory ﬁtting
The optimization can also be carried out via trajectory ﬁtting as following"
LOSS FUNCTIONS,0.206266318537859,"ℓ(t, x, u) = 1 K K−1
X"
LOSS FUNCTIONS,0.20887728459530025,"k=0
∥x(tk+1), xk+1∥2
(7)"
LOSS FUNCTIONS,0.21148825065274152,"where x(tk+1) corresponds to the exact one–step trajectory and xk+1 is its approximation, derived
via (4) for standard hypersolvers or via (11) for their multi–stage counterparts. This method can also
be used to contain the global truncation error in the T domain. We will refer to ℓas a loss function
of either residual or trajectory ﬁtting types; we note that these loss functions may also be combined
depending on the application. The goal is to train the hypersolver network to explore the state–
control spaces so that it can effectively minimize the truncation error. We propose two methods
with different purposes: stochastic exploration aiming at minimizing the average truncation error
and active error minimization whose goal is to reduce the maximum error i.e., due to control inputs
yielding high losses."
STOCHASTIC EXPLORATION,0.21409921671018275,"4.2
STOCHASTIC EXPLORATION"
STOCHASTIC EXPLORATION,0.21671018276762402,"Stochastic exploration aims to minimize the average error of the visited state–controller space i.e.,
to produce optimal hypersolver parameters ω∗as the solution of a nonlinear program"
STOCHASTIC EXPLORATION,0.2193211488250653,"ω∗= arg min
ω
Eξ(x,u)[ℓ(t, x, u)]
(8)"
STOCHASTIC EXPLORATION,0.22193211488250653,"where ξ(x, u) is a distribution with support in X × U of the state and controller spaces and ℓis
the training loss function. In order to guarantee sufﬁcient exploration of the state–controller space,
we use Monte Carlo sampling (Robert & Casella, 2013) from the given distribution. In particular,
batches of initial conditions {xi
0}, {ui
0} are sampled from ξ and the loss function ℓis calculated with
the given system and step size ϵ. We then perform backpropagation for updating the parameters of
the hypersolver using a stochastic gradient descent (SGD) algorithm e.g., Adam (Kingma & Ba,
2017) and repeat the procedure for every training epoch. Figure 2 shows pre–training results with
stochastic exploration for different step sizes (see Appendix C.2). We notice how higher residual
values generally correspond to higher absolute values of control inputs. Many systems in practice
are subject to controls that are constrained in magnitude either due to physical limitations of the
actuators or safety restraints of the workspace. This property allows us to design an exploration
strategy that focuses on worst-case scenarios i.e. largest control inputs."
STOCHASTIC EXPLORATION,0.2245430809399478,Published as a conference paper at ICLR 2022
STOCHASTIC EXPLORATION,0.22715404699738903,"−4π−2π 0
2π 4π
p −10 0 10 q"
STOCHASTIC EXPLORATION,0.2297650130548303,Without Hypersolver
STOCHASTIC EXPLORATION,0.23237597911227154,Euler Residuals
STOCHASTIC EXPLORATION,0.2349869451697128,"−4π−2π 0
2π 4π
p Tanh"
STOCHASTIC EXPLORATION,0.23759791122715404,"x →ex−e−x
ex+e−x"
STOCHASTIC EXPLORATION,0.2402088772845953,"−4π−2π 0
2π 4π
p"
STOCHASTIC EXPLORATION,0.24281984334203655,"ReLU
x →max(0, x)"
STOCHASTIC EXPLORATION,0.2454308093994778,"−4π−2π 0
2π 4π
p"
STOCHASTIC EXPLORATION,0.24804177545691905,"SIREN
x →sin(Wix + bi)"
STOCHASTIC EXPLORATION,0.2506527415143603,"−4π−2π 0
2π 4π
p"
STOCHASTIC EXPLORATION,0.25326370757180156,"Snake
x →x + 1
a sin2(ax) 15 30 45 60 75"
STOCHASTIC EXPLORATION,0.2558746736292428,Mean Residual
STOCHASTIC EXPLORATION,0.2584856396866841,"Figure 4: Generalization outside of the training region (red rectangle) in the state space of an inverted pendu-
lum model with different hypersolver activation functions. Architectures containing activation functions with
periodic components achieve better extrapolation properties compared to the others."
ACTIVE ERROR MINIMIZATION,0.26109660574412535,"4.3
ACTIVE ERROR MINIMIZATION 0.0 2.5 5.0 7.5 MAE ×10−4"
ACTIVE ERROR MINIMIZATION,0.26370757180156656,"0.0
0.1
0.2
0.3
Time [s] 0.0 2.5 5.0 7.5 MAE ×10−4"
ACTIVE ERROR MINIMIZATION,0.26631853785900783,Stochastic Exploration
ACTIVE ERROR MINIMIZATION,0.2689295039164491,Active Error Minimization
ACTIVE ERROR MINIMIZATION,0.27154046997389036,Midpoint
ACTIVE ERROR MINIMIZATION,0.2741514360313316,"Figure 3:
Mean Absolute Error (MAE) along tra-
jectories with different pre–training techniques on the
spring–mass system of (17). [Top] Stochastic explo-
ration performs better on average i.e. u ∈[−100, 100].
[Bottom] Active error minimization achieves better re-
sults in limit situations as in the case of a bang–bang
controller i.e. u ∈{−100, 100}, in which controllers
yielding the highest residuals have been minimized."
ACTIVE ERROR MINIMIZATION,0.27676240208877284,"The goal of active error minimization is to ac-
tively reduce the highest losses in terms of the
control inputs, i.e., to obtain w∗as the solution
to a minmax problem:"
ACTIVE ERROR MINIMIZATION,0.2793733681462141,"w∗= arg min
ω
max
u∈U ℓ(t, x, u)
(9)"
ACTIVE ERROR MINIMIZATION,0.2819843342036554,"Similarly to stochastic exploration, we create
distribution ξ(x, u) with support in X × U and
perform Monte Carlo sampling of n batches
{(xi, ui)}, from ξ. Then, losses are computed
pair–wisely for each state xj, j = 0, . . . , n −1
with each control input uk, k = 0, . . . , n −1.
We then take the ﬁrst n controllers {ui′
0 } yield-
ing the maximum loss for each state.
The
loss is recalculated using these controller values
with their respective states and SGD updates
to hypersolver parameters are performed. Fig-
ure 3 shows a comparison of the pre–training
techniques (further experimental details in Ap-
pendix C.2). The propagated error on trajecto-
ries for the hypersolver pre–trained via stochas-
tic exploration is lower on average with ran-
dom control inputs compared with the one pre–
trained with active error minimization.
The
latter accumulates lower error for controllers
yielding high residuals."
ACTIVE ERROR MINIMIZATION,0.2845953002610966,Different exploration strategies may be used depending on the down–stream control task.
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.28720626631853785,"4.4
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES"
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.2898172323759791,"We have assumed the state and controller spaces to be bounded and that training be performed
by sampling for their known distributions. While this is sufﬁcient for optimal control problems
given a priori known bounds, we also investigate how the system generalizes to unseen states and
control input values. In particular, we found that activation functions have an impact on the end
result of generalization beyond training boundaries. We take into consideration two commonly
used activation functions, Tanh : x →ex−e−x"
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.2924281984334204,"ex+e−x and ReLU : x →max(0, x), along with network
architectures which employ activation functions containing periodic components: SIREN : x →
sin (Wx + b) (Sitzmann et al., 2020) and Snake : x →x + 1"
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.2950391644908616,"a sin2(ax) (Ziyin et al., 2020). We
train hypersolver models with the different activation functions for the inverted pendulum model
of (18) with common experimental settings (see Appendix C.3). Figure 4 shows generalization"
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.29765013054830286,Published as a conference paper at ICLR 2022
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.3002610966057441,"outside the training states (see Figure 9 in Appendix C.3 for generalization of controllers and step
sizes). We notice that while Tanh and ReLU perform well on the training set of interest, performance
degrades rapidly outside of it. On the other one hand, SIREN and Snake manage to extrapolate the
periodicity of the residual distribution even outside of the training region, thus providing further
empirical evidence of the universal extrapolation theorem (Ziyin et al., 2020, Theorem 3)."
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.3028720626631854,Activation function choice plays an important role in Hypersolver performance and generalization.
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.30548302872062666,"4.5
MULTI–STAGE HYPERSOLVERS"
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.30809399477806787,"We have so far considered the case in which the vector ﬁeld (1) fully characterizes the system dy-
namics. However, if the model does not completely describe the actual system dynamics, ﬁrst–order
errors are introduced. We propose Multi-Stage Hypersolvers to correct these errors: an
additional term is introduced in order to correct the inaccurate dynamics f. The resulting procedure
is a modiﬁed version of (4) in which the base solver ψϵ (tk, xk, uk) does not iterate over the modeled
vector ﬁeld f but over its corrected version f ⋆:"
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.31070496083550914,"f ⋆(tk, xk, uk) = f (tk, xk, uk)
|
{z
}
partial dynamics"
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.3133159268929504,"+ hw (tk, xk, uk)
|
{z
}
inner stage (10)"
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.31592689295039167,"where hw is a function with universal approximation properties. While the inner stage hw is a ﬁrst–
order error approximator, the outer stage gω further reduces errors approximating the p–th order
residuals:"
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.3185378590078329,xk+1 = xk + ϵψϵ 
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.32114882506527415,"
tk, xk, uk, f ⋆(tk, xk, uk)
|
{z
}
corrected dynamics "
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.3237597911227154,"
+
ϵp+1 gω (tk, xk, uk)
|
{z
}
outer stage
(11)"
GENERALIZATION PROPERTIES OF DIFFERENT ARCHITECTURES,0.3263707571801567,"We note that f ⋆is continuously adjusted due to the optimization of hw. For this reason, it is not
possible to derive the analytical expression of the residuals to train the stages with the residual ﬁtting
loss function (6). Instead, both stages can be optimized at the same time via backpropagation calcu-
lated on one–step trajectory ﬁtting loss (7) which does not require explicit residuals calculation."
EXPERIMENTS,0.3289817232375979,"5
EXPERIMENTS"
EXPERIMENTS,0.33159268929503916,"We introduce the experimental results divided for each system into hypersolver pre–training and sub-
sequent optimal control. We use as accurate adaptive step–size solvers the Dormand/Prince method
dopri5 (Dormand & Prince, 1980) and an improved version of it by Tsitouras tsit5 (Tsitouras,
2011) for training the hypersolvers and to test the control performance at runtime."
DIRECT OPTIMAL CONTROL OF A PENDULUM,0.3342036553524804,"5.1
DIRECT OPTIMAL CONTROL OF A PENDULUM"
DIRECT OPTIMAL CONTROL OF A PENDULUM,0.3368146214099217,"Hypersolver pre–training
We consider the inverted pendulum model with a torsional spring
described in (18).
We select ξ(x, u) as a uniform distribution with support in X × U where
X = [−2π, 2π] × [−2π, 2π] and U = [−5, 5] to guarantee sufﬁcient exploration of the state-
controller space. Nominal solutions are calculated using tsit5 with absolute and relative tolerances
set to 10−5. We train the hypersolver on local residuals via stochastic exploration using the Adam
optimizer with learning rate of 3 × 10−4 for 3 × 105 epochs."
DIRECT OPTIMAL CONTROL OF A PENDULUM,0.3394255874673629,"Direct optimal control
The goal is to stabilize the inverted pendulum in the vertical position
x⋆= [0, 0]. We choose t ∈[0, 3] and a step size ϵ = 0.2 s for the experiment. The control
input is assumed continuously time–varying. The neural controller is optimized via SGD with Adam
with learning rate of 3 × 10−3 for 1000 epochs. Figure 5 shows nominal controlled trajectories
of HyperEuler and other baseline ﬁxed–step size solvers. Trajectories obtained with the controller
optimized with HyperEuler reach ﬁnal positions q = (1.6 ± 17.6) × 10−2 while Midpoint and RK4
ones q = (−0.6 ± 12.7) × 10−2 and q = (1.1 ± 12.8) × 10−2 respectively. On the other hand,
the controller optimized with the Euler solver fails to control some trajectories obtaining a ﬁnal"
DIRECT OPTIMAL CONTROL OF A PENDULUM,0.34203655352480417,Published as a conference paper at ICLR 2022
DIRECT OPTIMAL CONTROL OF A PENDULUM,0.34464751958224543,"q = (6.6 ± 19.4) × 10−1. HyperEuler considerably improved on the Euler baseline while requiring
only 1.2% more Floating Point Operations (FLOPs) and 49.5% less compared to Midpoint. Further
details are available in Appendix C.3."
DIRECT OPTIMAL CONTROL OF A PENDULUM,0.3472584856396867,"−3
3
q
−5 0 5 p"
DIRECT OPTIMAL CONTROL OF A PENDULUM,0.34986945169712796,HyperEuler
DIRECT OPTIMAL CONTROL OF A PENDULUM,0.3524804177545692,"−3
3
q Euler"
DIRECT OPTIMAL CONTROL OF A PENDULUM,0.35509138381201044,"−3
3
q"
DIRECT OPTIMAL CONTROL OF A PENDULUM,0.3577023498694517,Midpoint
DIRECT OPTIMAL CONTROL OF A PENDULUM,0.360313315926893,"−3
3
q RK4"
DIRECT OPTIMAL CONTROL OF A PENDULUM,0.3629242819843342,"Figure 5: Direct optimal control of the inverted pendulum in phase space. While the controller optimized with
the Euler solver fails to control the system for some trajectories, the one obtained with HyperEuler improves
the performance while introducing a minimal overhead with results comparable to higher–order solvers."
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.36553524804177545,"5.2
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM"
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.3681462140992167,"Hypersolver pre–training
We consider the partial dynamics of the cart–pole system of (19) with
wrong parameters for the frictions between cart and track as well as the one between cart and pole.
We employ the multi–stage hypersolver approach to correct the ﬁrst–order error in the vector ﬁeld
as well as base solver residual. We select ξ(x, u) as a uniform distribution with support in X × U
where X = [−2π, 2π] × [−2π, 2π] × [−2π, 2π] × [−2π, 2π] and U = [−10, 10]. Nominal solutions
are calculated on the accurate system using RungeKutta 4 instead of adaptive–step solvers due
faster training times. We train our multi–stage Hypersolver (i.e. a multi–stage hypersolver with
the second–order Midpoint as base solver with the partial dynamics) on nominal trajectories of the
accurate system via stochastic exploration using the Adam optimizer for 5 × 104 epochs, where we
set the learning rate to 10−2 for the ﬁrst 3 ×104 epochs, then decrease it to 10−3 for 104 epochs and
to 10−4 for the last 104."
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.370757180156658,"Model predictive control
The goal is to stabilize the cart–pole system in the vertical position
around the origin, e.g. x⋆= [0, 0, 0, 0]. We choose t ∈[0, 3] and a step size ϵ = 0.05 s for
the experiment. The control input is assumed piece-wise constant during MPC sampling times.
The receding horizon is chosen as 1 s. The neural controller is optimized via SGD with Adam
with learning rate of 3 × 10−3 for a maximum of 200 iterations at each sampling time. Figure 6
shows nominal controlled trajectories of multi–stage Hypersolver and other baseline solvers. The
Midpoint solver on the inaccurate model fails to stabilize the system at the origin position x =
(39.7 ± 97.7) cm, while multi–stage Hypersolver manages to stabilize the cart–pole system and
improve on ﬁnal positions x = (7.8 ± 3.0) cm. Further details are available in Appendix C.4."
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.3733681462140992,"0
1
2
3
Time [s] −1 0 1 2 x [m]"
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.37597911227154046,"0
1
2
3
Time [s] 0 π
2 π"
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.3785900783289817,θ [rad]
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.381201044386423,"0
1
2
3
Time [s] −30 0 30"
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.3838120104438642,Control input [N]
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.38642297650130547,"0
1
2
3
Time [s] 0 50 100"
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.38903394255874674,Abs. energy input [J]
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.391644908616188,"Multistage Hypersolver (inaccurate model)
Midpoint (inaccurate model)
Euler (nominal model)
Midpoint (nominal model)
Figure 6: Model Predictive Control with constrained inputs on the cart–pole model. MPC with the Midpoint
solver iterating on the partial dynamic model successfully swings up the pole but fails to reach the target
position. Multi–stage Hypersolver with the Midpoint base solver has knowledge restricted to the inaccurate
system, yet it manages to obtain a similar control performance compared to controllers with access to the
nominal dynamics while also needing less control effort and absolute energy inﬂow compared to its base solver."
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.39425587467362927,Multi–stage Hypersolvers can correct ﬁrst–order errors on dynamic models and base solver residuals.
MODEL PREDICTIVE CONTROL OF A CART-POLE SYSTEM,0.3968668407310705,Published as a conference paper at ICLR 2022
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.39947780678851175,"5.3
MODEL PREDICTIVE CONTROL OF A QUADCOPTER"
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.402088772845953,"Hypersolver pre–training
We consider the quadcopter model of (20). We select ξ(x, u) as a
uniform distribution with support in X × U where X is chosen as a distribution of possible visited
states and each of the four motors i ∈[0, 3] has control inputs ui ∈[0, 2.17] × 105 rpm. Nominal
solutions are calculated on the accurate system using dopri5 with relative and absolute tolerances
set to 10−7 and 10−9 respectively. We train HyperEuler on local residuals via stochastic exploration
using the Adam optimizer with learning rate of 10−3 for 105 epochs."
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.4046997389033943,"Model predictive control
The control goal is to reach a ﬁnal positions [x, y, z]⋆= [8, 8, 8] m.
We choose t ∈[0, 3] and a step size ϵ = 0.02 s for the experiment. The control input is assumed
piece–wise constant during MPC sampling times. The receding horizon is chosen as 0.5 s. The
neural controller is optimized via SGD with Adam with learning rate of 10−2 for 20 iterations at each
sampling time. Figure 7 shows local residual distribution and control performance on the quadcopter
over 30 experiments starting at random initial conditions which are kept common for the different
ODE solvers. HyperEuler requires a single function evaluation per step as for the Euler solver
compared to two function evaluations per step for Midpoint and four for RK4. Controlled trajectories
optimized with Euler, Midpoint and RK4 collect an error on ﬁnal positions of (1.09 ± 0.37) m,
(0.71 ± 0.17) m, (0.70 ± 0.19) m respectively while HyperEuler achieves the lowest terminal error
value of (0.66 ± 0.24) m. Additional experimental details are available in Appendix C.5."
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.4073107049608355,"HyperEuler
Euler
Midpoint
RK4 10−5 10−4 10−3 10−2 10−1 100 101 102"
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.40992167101827676,Mean Residual R x [m]
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.412532637075718,"0
2
4
6
8
10 y [m] 0 2 4 6 8 10 z [m]"
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.4151436031331593,"0
2
4
6
8 10"
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.4177545691906005,HyperEuler Euler
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.42036553524804177,Midpoint RK4
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.42297650130548303,Initial Position
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.4255874673629243,"Target
HyperEuler
Euler
Midpoint
RK4 100"
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.4281984334203655,3 × 10−1
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.4308093994778068,4 × 10−1
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.43342036553524804,6 × 10−1
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.4360313315926893,2 × 100
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.4386422976501306,Final Position Error
MODEL PREDICTIVE CONTROL OF A QUADCOPTER,0.4412532637075718,"Figure 7: [Left] Local residual distribution for the quadcopter model for ϵ = 0.02 s. [Center] Trajectories
of controlled quadcopters with MPC whose receding horizon controller is optimized by solving the ODE with
different methods. [Right] Final positions error distribution. The proposed approach with HyperEuler achieves
lower average error compared to other baseline solvers while requiring a low overhead compared to higher–
order solvers due to a smaller number of dynamics function evaluations."
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.44386422976501305,"5.4
BOUNDARY CONTROL OF A TIMOSHENKO BEAM"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4464751958224543,"Hypersolver pre–training
We consider the ﬁnite element discretization of the Timoshenko beam
of (22). We create ξ(x, u) as a distribution with support in X × U which is generated at training
time via random walks from known boundary conditions in order to guarantee both physical feasi-
bility and sufﬁcient exploration of the state-controller space (see Appendix C.6 for further details).
Nominal solutions are calculated using tsit5 with absolute and relative tolerances set to 10−5. We
train the hypersolver on local residuals via stochastic exploration using the Adam optimizer for 105
epochs, where we set the learning rate to 10−3 for the ﬁrst 8 × 104 epochs, then decrease it to 10−4
for 104 epochs and to 10−5 for the last 104."
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4490861618798956,"Boundary direct optimal control
The task is to stabilize the beam in the straight position, i.e.
each of its elements i have velocities vi
t, vi
r and displacements σi
t, σi
r equal to 0. We choose t ∈[0, 3]
and step size ϵ = 5 ms for the experiment. The control input is assumed continuously time–
varying. The neural controller is optimized via SGD with Adam with learning rate of 10−3 for 1000
epochs. Figure 8 shows nominal controlled trajectories for HyperEuler and other baseline ﬁxed–
step size solvers. Control policies trained with Euler and Midpoint obtain averaged ﬁnal states of
(−2.8±4.2)×10−1 and (−0.04±4.6)×10−1 thus failing to stabilize the beam, while HyperEuler
and RK4 obtain (−0.6±4.9)×10−3 and (−0.5±3.3)×10−3 respectively. HyperEuler considerably
improves on both the Euler and Midpoint baselines obtaining a very similar performance to RK4,
while requiring 72.9% less FLOPs; the mean runtime per training iteration was cut from 8.24 s for
RK4 to just 2.53 s for HyperEuler. Further details on this experiment are available in Appendix C.6."
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4516971279373368,Published as a conference paper at ICLR 2022
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.45430809399477806,"t
0
1
2
3 x
0.0 0.5 1.0"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.45691906005221933,"σt(x, t) −1 0 1"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4595300261096606,HyperEuler
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4621409921671018,"t
0
1
2
3 x
0.0 0.5 1.0"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.46475195822454307,"σt(x, t) −1 0 1 Euler"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.46736292428198434,"t
0
1
2
3 x
0.0 0.5 1.0"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4699738903394256,"σt(x, t) −1 0 1"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4725848563968668,Midpoint
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4751958224543081,"t
0
1
2
3 x
0.0 0.5 1.0"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.47780678851174935,"σt(x, t) −1 0 1 RK4"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4804177545691906,"t
0
1
2
3 x
0.0 0.5 1.0"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4830287206266319,"σr(x, t) −1 0 1"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4856396866840731,"t
0
1
2
3 x
0.0 0.5 1.0"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.48825065274151436,"σr(x, t) −1 0 1"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4908616187989556,"t
0
1
2
3 x
0.0 0.5 1.0"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4934725848563969,"σr(x, t) −1 0
1"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.4960835509138381,"t
0
1
2
3 x
0.0 0.5 1.0"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.49869451697127937,"σr(x, t) −1 0 1"
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.5013054830287206,"Figure 8: Displacement variables σt and σr of the discretized Timoshenko beam as a function of position x of
the ﬁnite elements and time t. The controller optimized with HyperEuler manages to stabilize the beam while
the baseline solvers Euler and Midpoint fail, yet requiring less than a third in terms of runtime compared to
RK4."
BOUNDARY CONTROL OF A TIMOSHENKO BEAM,0.5039164490861618,Hypersolvers are even more impactful in complex high–dimensional controlled systems.
RELATED WORK,0.5065274151436031,"6
RELATED WORK"
RELATED WORK,0.5091383812010444,"This work is rooted in the broader literature on surrogate methods for speeding up simulations and
solutions of dynamical systems (Grzeszczuk et al., 1998; James & Fatahalian, 2003; Gorissen et al.,
2010). Differently from these approaches, we investigate a methodology to enable faster solution
during a downstream, online optimization problem involving a potential mismatch compared to data
seen during pre–training. We achieve this through the application of the hypersolver (Poli et al.,
2020a) paradigm. Modeling mismatches between approximate and nominal models is explored in
(Saveriano et al., 2017) where residual dynamics are learned efﬁciently along with the control policy
while (Fisac et al., 2018; Taylor et al., 2019) model systems uncertainties in the context of safety–
critical control. In contrast to previous work, we model uncertainties with the proposed multi–stage
hypersolver approach by closely interacting with the underlying ODE base solvers and their residu-
als to improve solution accuracy. The synergy between machine learning and optimal control con-
tinues a long line of research on introducing neural networks in optimal control (Hunt et al., 1992),
applied to modeling (Lin & Cunningham, 1995), identiﬁcation (Chu et al., 1990) or parametrization
of the controller itself (Lin et al., 1991). Existing surrogate methods for systems (Grzeszczuk et al.,
1998; James & Fatahalian, 2003) pay a computational cost upfront to accelerate downstream sim-
ulation. However, ensuring transfer from ofﬂine optimization to the online setting is still an open
problem. In our approach, we investigate several strategies for an accurate ofﬂine–online transfer
of a given hypersolver, depending on desiderata on its performance in terms of average residuals
and error propagation on the online application. Beyond hypersolvers, our approach further lever-
ages the latest advances in hardware and machine learning software (Paszke et al., 2019) by solving
thousands of ODEs in parallel on graphics processing units (GPUs)."
CONCLUSION,0.5117493472584856,"7
CONCLUSION"
CONCLUSION,0.5143603133159269,"We presented a novel method for obtaining fast and accurate control policies. Hypersolver mod-
els were ﬁrstly pre–trained on distributions of states and controllers to approximate higher–order
residuals of base ﬁxed–step ODE solvers. The obtained models were then employed to improve the
accuracy of trajectory solutions over which control policies were optimized. We veriﬁed that our
method shows consistent improvements in the accuracy of ODE solutions and thus on the quality
of control policies optimized through numerical solutions of the system. We envision the proposed
approach to beneﬁt the control ﬁeld and robotics in both simulated and potentially real–world envi-
ronments by efﬁciently solving high–dimensional space–continuous problems."
CONCLUSION,0.5169712793733682,Published as a conference paper at ICLR 2022
CONCLUSION,0.5195822454308094,CODE OF ETHICS
CONCLUSION,0.5221932114882507,"We acknowledge that all the authors of this work have read and commit to adhering to the ICLR
Code of Ethics."
REPRODUCIBILITY STATEMENT,0.5248041775456919,REPRODUCIBILITY STATEMENT
REPRODUCIBILITY STATEMENT,0.5274151436031331,"We share the code used in this paper and make it publicly available on Github1. The following ap-
pendix also supplements the main text by providing additional clariﬁcations. In particular, Appendix
A provides further details on the considered hypersolver models. We provide additional information
on optimal control policy in Appendix B while in Appendix C we provide details on on the system
dynamics, architectures and other experimental details. Additional explanations are also provided
as comments in the shared code implementation."
REFERENCES,0.5300261096605744,REFERENCES
REFERENCES,0.5326370757180157,"Martin Alnæs, Jan Blechta, Johan Hake, August Johansson, Benjamin Kehlet, Anders Logg, Chris
Richardson, Johannes Ring, Marie E Rognes, and Garth N Wells. The fenics project version 1.5.
Archive of Numerical Software, 3(100), 2015."
REFERENCES,0.5352480417754569,"Mato Baoti´c, Francesco Borrelli, Alberto Bemporad, and Manfred Morari. Efﬁcient on-line compu-
tation of constrained optimal control. SIAM Journal on Control and Optimization, 47(5):2470–
2489, 2008."
REFERENCES,0.5378590078328982,"Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas Schneider, John Schulman, Jie Tang, and
Wojciech Zaremba. Openai gym, 2016."
REFERENCES,0.5404699738903395,"John
Butcher.
Numerical
methods
for
differential
equations
and
applications.
http://www.math.auckland.ac.nz/Research/Reports/view.php?id=370, 22, 12 1997."
REFERENCES,0.5430809399477807,"Ricky T. Q. Chen, Yulia Rubanova, Jesse Bettencourt, and David Duvenaud. Neural ordinary dif-
ferential equations, 2019."
REFERENCES,0.5456919060052219,"S Reynold Chu, Rahmat Shoureshi, and Manoel Tenorio. Neural networks for system identiﬁcation.
IEEE Control systems magazine, 10(3):31–35, 1990."
REFERENCES,0.5483028720626631,"J. R. Dormand and P. J. Prince. A family of embedded runge-kutta formulae. Journal of Computa-
tional and Applied Mathematics, 6:19–26, 1980."
REFERENCES,0.5509138381201044,"Jaime F. Fisac, Anayo K. Akametalu, Melanie N. Zeilinger, Shahab Kaynama, Jeremy Gillula, and
Claire J. Tomlin. A general safety framework for learning-based control in uncertain robotic
systems, 2018."
REFERENCES,0.5535248041775457,R˘azvan Florian. Correct equations for the dynamics of the cart-pole system. 08 2005.
REFERENCES,0.556135770234987,"C. E. Garcia, D. M. Prett, and M. Morari. Model predictive control: Theory and practice - a survey.
Autom., 25:335–348, 1989."
REFERENCES,0.5587467362924282,"Dirk Gorissen, Ivo Couckuyt, Piet Demeester, Tom Dhaene, and Karel Crombecq. A surrogate
modeling and adaptive sampling toolbox for computer based design. The Journal of Machine
Learning Research, 11:2051–2055, 2010."
REFERENCES,0.5613577023498695,"Radek Grzeszczuk, Demetri Terzopoulos, and Geoffrey Hinton. Neuroanimator: Fast neural net-
work emulation and control of physics-based models. In Proceedings of the 25th annual confer-
ence on Computer graphics and interactive techniques, pp. 9–20, 1998."
REFERENCES,0.5639686684073107,"K.J. Hunt, D. Sbarbaro, R. ˙Zbikowski, and P.J. Gawthrop.
Neural networks for control sys-
tems—a survey. Automatica, 28(6):1083–1112, 1992. ISSN 0005-1098. doi: https://doi.org/
10.1016/0005-1098(92)90053-I. URL https://www.sciencedirect.com/science/
article/pii/000510989290053I."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.566579634464752,"1Supporting reproducibility code is at
https : //github.com/DiffEqML/diffeqml −research/tree/master/hypersolvers −control"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.5691906005221932,Published as a conference paper at ICLR 2022
SUPPORTING REPRODUCIBILITY CODE IS AT,0.5718015665796344,"Doug L James and Kayvon Fatahalian. Precomputing interactive dynamic deformable scenes. ACM
Transactions on Graphics (TOG), 22(3):879–887, 2003."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.5744125326370757,"Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization, 2017."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.577023498694517,"Frank L Lewis, Draguna Vrabie, and Vassilis L Syrmos. Optimal control. John Wiley & Sons, 2012."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.5796344647519582,"Chin-Teng Lin, C. S. George Lee, et al. Neural-network-based fuzzy logic control and decision
system. IEEE Transactions on computers, 40(12):1320–1336, 1991."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.5822454308093995,"Yinghua Lin and George A Cunningham. A new approach to fuzzy-neural system modeling. IEEE
Transactions on Fuzzy systems, 3(2):190–198, 1995."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.5848563968668408,"Alessandro Macchelli and Claudio Melchiorri. Modeling and control of the timoshenko beam. the
distributed port hamiltonian approach. SIAM J. Control. Optim., 43:743–767, 2004."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.587467362924282,"Stefano Massaroli, Michael Poli, Sho Sonoda, Taji Suzuki, Jinkyoo Park, Atsushi Yamashita, and
Hajime Asama. Differentiable multiple shooting layers. CoRR, abs/2106.03885, 2021. URL
https://arxiv.org/abs/2106.03885."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.5900783289817232,"David Q Mayne and Hannah Michalska. Receding horizon control of nonlinear systems. In Pro-
ceedings of the 27th IEEE Conference on Decision and Control, pp. 464–465. IEEE, 1988."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.5926892950391645,"Jacopo Panerati, Hehui Zheng, Siqi Zhou, James Xu, Amanda Prorok, and Angela P. Schoellig.
Learning to ﬂy - a gym environment with pybullet physics for reinforcement learning of multi-
agent quadcopter control. CoRR, abs/2103.02142, 2021. URL https://arxiv.org/abs/
2103.02142."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.5953002610966057,"Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor
Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, et al. Pytorch: An imperative style, high-
performance deep learning library. arXiv preprint arXiv:1912.01703, 2019."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.597911227154047,"Michael Poli, Stefano Massaroli, Atsushi Yamashita, Hajime Asama, and Jinkyoo Park. Hyper-
solvers: Toward fast continuous-depth models. In H. Larochelle, M. Ranzato, R. Hadsell, M. F.
Balcan, and H. Lin (eds.), Advances in Neural Information Processing Systems, volume 33, pp.
21105–21117. Curran Associates, Inc., 2020a. URL https://proceedings.neurips.
cc/paper/2020/file/f1686b4badcf28d33ed632036c7ab0b8-Paper.pdf."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6005221932114883,"Michael Poli, Stefano Massaroli, Atsushi Yamashita, Hajime Asama, and Jinkyoo Park. Torchdyn:
A neural differential equations library, 2020b."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6031331592689295,"Radoslaw Pytlak. Numerical methods for optimal control problems with state constraints. Springer,
2006."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6057441253263708,"Anil V Rao. A survey of numerical methods for optimal control. Advances in the Astronautical
Sciences, 135(1):497–528, 2009."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.608355091383812,"Christian Robert and George Casella. Monte Carlo statistical methods. Springer Science & Business
Media, 2013."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6109660574412533,"I Michael Ross and Fariba Fahroo. Issues in the real-time computation of optimal control. Mathe-
matical and computer modelling, 43(9-10):1172–1188, 2006."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6135770234986945,"Matteo Saveriano, Yuchao Yin, Pietro Falco, and Dongheui Lee. Data-efﬁcient control policy search
using residual dynamics learning. In 2017 IEEE/RSJ International Conference on Intelligent
Robots and Systems (IROS), pp. 4709–4715, 2017. doi: 10.1109/IROS.2017.8206343."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6161879895561357,"Vincent Sitzmann, Julien N. P. Martel, Alexander W. Bergman, David B. Lindell, and Gordon Wet-
zstein. Implicit neural representations with periodic activation functions, 2020."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.618798955613577,"Andrew Taylor, Andrew Singletary, Yisong Yue, and Aaron Ames.
Learning for safety-critical
control with control barrier functions, 2019."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6214099216710183,Published as a conference paper at ICLR 2022
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6240208877284595,"Ch. Tsitouras. Runge–kutta pairs of order 5(4) satisfying only the ﬁrst column simplifying assump-
tion. Computers Mathematics with Applications, 62(2):770–775, 2011. ISSN 0898-1221. doi:
https://doi.org/10.1016/j.camwa.2011.06.002. URL https://www.sciencedirect.com/
science/article/pii/S0898122111004706."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6266318537859008,"S Vadali, Hanspeter Schaub, and K Alfriend. Initial conditions and fuel-optimal control for forma-
tion ﬂying of satellites. In Guidance, Navigation, and Control Conference and Exhibit, pp. 4265,
1999."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6292428198433421,"Yue J Zhang, Andreas A Malikopoulos, and Christos G Cassandras. Optimal control and coordina-
tion of connected and automated vehicles at urban trafﬁc intersections. In 2016 American Control
Conference (ACC), pp. 6227–6232. IEEE, 2016."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6318537859007833,"Liu Ziyin, Tilman Hartwig, and Masahito Ueda. Neural networks fail to learn periodic functions
and how to ﬁx it, 2020."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6344647519582245,Published as a conference paper at ICLR 2022
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6370757180156658,"A
ADDITIONAL HYPERSOLVER MATERIAL"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.639686684073107,"A.1
EXPLICIT HYPEREULER FORMULATION"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6422976501305483,"Our analysis in the experiments takes into consideration the hypersolved version of the Euler
scheme, namely HyperEuler.
Since Euler is a ﬁrst–order method, it requires the least number
of function evaluations (NFE) of the vector ﬁeld f in (1) and yields a second order local trun-
cation error ek :=
ϵ2Rk

2.
This error is larger than other ﬁxed–step solvers and thus has
the most room for potential improvements. The base solver scheme ψϵ of (4) can be written as
ψϵ (tk, xk, uk) = f (tk, xk, uk), which is approximating the next state by adding an evaluation of
the vector ﬁeld multiplied by the step size ϵ. We can write the HyperEuler update explicitly as
xk+1 = xk + ϵf(tk, xk, uk) + ϵ2gw (tk, xk, uk)
(12)
while we write its residual as"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6449086161879896,"R (x(tk), u(tk))) = 1"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6475195822454308,"ϵ2 (Φ(x(tk), tk, tk+1) −x(tk) −ϵf(tk, xk, uk))
(13)"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6501305483028721,"A.2
HYPERSOLVERS FOR TIME–INVARIANT SYSTEMS"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6527415143603134,"A time–invariant system with time–invariant controller can be described as following
˙x(t) = f(x(t), u(x(t)))
x(0) = x0
(14)"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6553524804177546,"in which f and u do not explicitly depend on time. The models considered in the experiments satisfy
this property."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6579634464751958,"B
CONTROL POLICY DETAILS"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.660574412532637,"B.1
OPTIMAL CONTROL COST FUNCTION"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6631853785900783,The general form of the integral cost functional can be written as follows
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6657963446475196,"J(x(t), u(t)) = [x⊤(tf) −x⋆]P[x(tf) −x⋆] +
Z tf t0"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6684073107049608," 
[x⊤(t)x⋆]Q[x(t) −x⋆] + u⊤(t)Ru(t)

dt"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6710182767624021,"(15)
where matrix P is a penalty on deviations from the target x⋆of the last states, Q penalizes all
deviations from the target of intermediate states while R is a regulator for the control inputs. Eval-
uation of (15) usually requires numerical solvers such as the proposed hypersolvers of this work.
Discretizations of the cost functional are also called cost function in the literature."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6736292428198434,"B.2
MODEL PREDICTIVE CONTROL FORMULATION"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6762402088772846,The following problem is solved online and iteratively until the end of the time span
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6788511749347258,"min
uk"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6814621409921671,"T −1
X"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6840731070496083,"k=0
J (xk, uk)"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6866840731070496,"subject to
˙x(t) = f(t, x(t), u(t))
x(0) = x0
t ∈T (16)"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6892950391644909,"where J is a cost function and T ∈T is the receding horizon over which predicted future trajectories
are optimized."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6919060052219321,"B.3
NEURAL OPTIMAL CONTROL"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6945169712793734,"We parametrize the control policy of problem (2) as uθ : t, x 7→uθ(t, x) where θ is a ﬁnite set of
free parameters. Speciﬁcally, we consider the case of neural optimal control in which controller uθ
is a multi–layer perceptron. The optimal control task is to minimize the cost function J described in
(15) and we do so by optimizing the parameters θ via SGD; in particular, we use the Adam (Kingma
& Ba, 2017) optimizer for all the experiments."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6971279373368147,Published as a conference paper at ICLR 2022
SUPPORTING REPRODUCIBILITY CODE IS AT,0.6997389033942559,"C
EXPERIMENTAL DETAILS"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7023498694516971,"In this section we include additional modeling and experimental details divided into the different
dynamical systems."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7049608355091384,"C.1
HYPERSOLVER NETWORK ARCHITECTURE"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7075718015665796,"We design the hypersolver networks gw as feed–forward neural networks. Table 1 summarizes the
parameters used for the considered controlled systems, where Activation denotes the activation func-
tions, i.e. SoftPlus: x 7→log(1 + ex), Tanh: x 7→ex−e−x"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7101827676240209,ex+e−x and Snake : x →x + 1
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7127937336814621,"a sin2(ax)
(Ziyin et al., 2020). We also use the vector ﬁeld f as an input of the hypersolver, which does not"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7154046997389034,Table 1: Hyper–parameters for the hypersolver networks in the experiments.
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7180156657963447,"Spring–Mass
Inverted
Pendulum 2
Cart–Pole3
Quadcopter
Timoshenko
Beam
Input Layer
5
5
9
28
322
Hidden Layer 1
32
32
32
64
256
Activation 1
Softplus
Softplus
Snake
Softplus
Snake
Hidden Layer 2
32
32
32
64
256
Activation 2
Tanh
Tanh
Snake
Softplus
Snake
Output Layer
2
2
4
12
160"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.720626631853786,"require a further evaluation since it is pre–evaluated at runtime by the base solver ψ. We empha-
size that the size of the network should depend on the application: a too–large neural network may
require more computations than just increasing the numerical solver’s order: Pareto optimality of hy-
persolvers also depends on their complexity. Keeping their neural network small enough guarantees
that evaluating the hypersolvers is cheaper than resorting to more complex numerical routines."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7232375979112271,"C.2
SPRING-MASS SYSTEM"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7258485639686684,"System Dynamics
The spring-mass system considered is described in the Hamiltonian formula-
tion by

˙q
˙p"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7284595300261096,"
=

0
1/m
−k
0"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7310704960835509," 
q
p"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7336814621409922,"
+

0
1"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7362924281984334,"
u
(17)"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7389033942558747,where m = 1 [Kg] and k = 0.5 [N/m].
SUPPORTING REPRODUCIBILITY CODE IS AT,0.741514360313316,"Pre-training methods comparison
We select ξ(x, u) as a uniform distribution with support in
X × U where X = [−20, 20] × [−20, 20] while U = [−100, 100]. Nominal solutions are calculated
on the accurate system using dopri5 with relative and absolute tolerances set to 10−7 and 10−9
respectively. We train two separate HyperEuler models with different training methods on local
residual for step size ϵ = 0.03 s: stochastic exploration and active error minimization. The optimizer
used is Adam with learning rate of 10−3 for 104 epochs."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7441253263707572,"Hypersolvers with different step sizes
We select ξ(x, u) as a uniform distribution with support
in X × U where X = [−5, 5] × [−5, 5] while U = [−20, 20]. Nominal solutions are calculated
on the accurate system using dopri5 with relative and absolute tolerances set to 10−7 and 10−9
respectively. We train separate HyperEuler models with stochastic exploration with different step
sizes ϵ. The optimizer used is Adam with learning rate of 10−3 for 104 epochs."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7467362924281984,"2This architecture refers to the optimal control experiment. Details on hypersolver models for the general-
ization experiment on the inverted pendulum are available in Appendix C.3.
3In the multi–stage hypersolver experiment we consider both the inner stage hw and the outer stage gω with
the same architecture and jointly trained (more information and ablation study in Appendix C.4)."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7493472584856397,Published as a conference paper at ICLR 2022
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7519582245430809,"−20
0
20
u [N] 10−2 10−1 100 101"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7545691906005222,Mean Residual R Euler
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7571801566579635,Midpoint RK4
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7597911227154047,Tanh [HE]
SUPPORTING REPRODUCIBILITY CODE IS AT,0.762402088772846,ReLU [HE]
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7650130548302873,SIREN [HE]
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7676240208877284,Snake [HE]
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7702349869451697,Training Region
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7728459530026109,"10−4
10−3
10−2
10−1
100 ϵ [s] 10−3 10−2 10−1 100 101"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7754569190600522,Mean Residual R Euler
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7780678851174935,Midpoint RK4
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7806788511749347,Tanh [HE]
SUPPORTING REPRODUCIBILITY CODE IS AT,0.783289817232376,ReLU [HE]
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7859007832898173,SIREN [HE]
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7885117493472585,Snake [HE]
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7911227154046997,Training Step
SUPPORTING REPRODUCIBILITY CODE IS AT,0.793733681462141,"Figure 9: Generalization with different hypersolver activation functions (HyperEuler models are marked with
”HE”) on the inverted pendulum. [Left] Generalization for the controller space outside of the training region
(red area). The architecture with Snake can to generalize better compared to other hypersolvers. [Right]
Generalization for different time steps outside of the training step ϵ = 0.1 s (red line). HyperEuler is able to
improve the baseline Euler solver performance even for unseen ϵ."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7963446475195822,"C.3
INVERTED PENDULUM"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.7989556135770235,"System Dynamics
We model the inverted pendulum with elastic joint with Hamiltonian dynamics
via the following:

˙q
˙p"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8015665796344648,"
=

0
1/m
−k
−β/m"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.804177545691906," 
q
p"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8067885117493473,"
−

0
mgl sin q"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8093994778067886,"
+

0
1"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8120104438642297,"
u
(18)"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.814621409921671,"where m = 1 [Kg], k = 0.5 [N/ rad], r = 1 [m], β = 0.01 [Ns/ rad], g = 9.81 [m/s2]."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8172323759791122,"Pre–training for the generalization study
We perform sampling via stochastic exploration from
the uniform distribution ξ(x, u) with support in X × U with X = [−2π, 2π] × [−2π, 2π] and
U = [−10, 10] for the different architectures. We choose as a common time step ϵ = 0.1 s; the
networks are trained for 100000 epochs with the Adam optimizer and learning rate of 10−3. The
network architectures share the same parameters as the inverted pendulum ones in 1, while the
activation functions are substituted by the ones in Figure 4. The SIREN architecture is chosen with
2 hidden layers of size 64. Figure 9 provides an additional empirical results on generalization
properties across controller values and step sizes: we notice how Snake can generalize to unseen
control values better compared to other hypersolvers."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8198433420365535,"Additional visualization
Figure 10 provides an additional visualization of the inverted pendulum
controlled trajectories from Figure 5 with positions q and momenta p over time. −4 0 4 q(t)"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8224543080939948,"HyperEuler
Euler
Midpoint
RK4"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.825065274151436,"0
1
2
3
4
5
t −5 0 5 p(t)"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8276762402088773,"0
1
2
3
4
5
t"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8302872062663186,"0
1
2
3
4
5
t"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8328981723237598,"0
1
2
3
4
5
t
Figure 10: Controlled trajectories of the inverted pendulum with controllers optimized via different solvers."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.835509138381201,"C.4
CART-POLE"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8381201044386423,"System Dynamics
We consider a continuous version of a cart–pole system additionally taking into
account the full dynamic model in Florian (2005). This formulation considers the friction coefﬁcient"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8407310704960835,Published as a conference paper at ICLR 2022
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8433420365535248,"between the track and the cart µc inducing a force opposing the linear motion as well as the friction
generated between the cart and the pole µp, whose generated torque opposes the angular motion.
The full cart–pole model is described by the four variables x, ˙x, θ, ˙θ and the accelerations update is
as following"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8459530026109661,"Nc = (mc + mp) g −mpl

¨θ sin θ + ˙θ2 cos θ
"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8485639686684073,"¨θ =
g sin θ + cos θ
h
−u−mpl ˙θ2(sin θ+µc sgn(Nc ˙x) cos θ)"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8511749347258486,"mc+mp
+ µcg sgn(Nc ˙x)
i
−µp ˙θ mpl"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8537859007832899,"l
h
4
3 −mp cos θ"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.856396866840731,"mc+mp (cos θ −µc sgn(Nc ˙x))
i"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8590078328981723,"¨x =
u + mpl

˙θ2 sin θ −¨θ cos θ

−µcNc"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8616187989556136,mc + mp (19)
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8642297650130548,"where mc = 1 [Kg], mp = 0.1 [Kg], l = 0.5 [m] and g = 9.81 [m/s2]. Nc represents the
normal force acting on the cart. For simulation purposes, we consider its sign to be always positive
when evaluating the sign (sgn) function as the cart should normally not jump off the track. Setting
µc, µp to 0 results in the same dynamic model used in the OpenAI Gym (Brockman et al., 2016)
implementation."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8668407310704961,"MS joint training
MS separated training
MS no inner stage
MS no outer stage
Residual dynamics
Euler (nominal)
Midpoint (nominal) Midpoint (inaccurate) 10−3 10−2 10−1"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8694516971279374,One Step MAE
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8720626631853786,"Figure 11: One step Mean Absolute Error (MAE) for multi–stage hypersolvers and different solvers as well
as correction schemes in the ablation study. Multi–stage Hypersolver (MS) with joint training and Midpoint
base solver iterating on an inaccurate vector ﬁeld agnostic of friction forces outperforms the Midpoint solver
with full knowledge of the vector ﬁeld."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8746736292428199,"Multistage training strategies
We study two different training strategies for the inner and outer
networks hw and gω in (11). We ﬁrst consider a joint training strategy in which both stages are
trained at the same time via stochastic exploration. Secondly, we do a separated training in which
only the inner stage network hw is trained ﬁrst and then the outer stage network gω is added and
only its parameters are trained in a ﬁnetuning process. We ﬁnd that, as shown in Figure 11, joint
training yields slightly better results. A further advantage of jointly training both stages is that only
a single training procedure is required."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8772845953002611,"Ablation study
We consider the same model as our Multi–stage Hypersolver with base Midpoint
solver but no ﬁrst–stage hw, which corresponds to learning the residual dynamics only, and we train
this model with stochastic exploration. We show in Figure 11 that while the residual dynamics model
can improve the one–step error compared to the base solver on the inaccurate dynamics, it performs
worse the Multi–stage Hypersolver scheme. We additionally study the contribution of each stage in
the prediction error improvements by separately zeroing out the contributions of the inner and outer
stage. While iterating over the inner stage only improves on the base–solver error, including the
outer stage further contributes in improving the error. We notice how the excluding the inner–stage
yields higher errors: this may be due to the fact that the inner–stage specializes in correcting the
ﬁrst–order vector ﬁeld inaccuracies while the outer–stage corrects the one step base solver residual."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8798955613577023,"Additional experimental details
For the Multi–stage Hypersolver control experiment, we pre–
train both inner and outer stage networks hw and gω in (11) at the same time using stochastic
exploration. The base solver is chosen as the second–order Midpoint iterating on the partial dy-
namics (19) with µc, µp set to 0. The nominal dynamics considers non–null friction forces: we set
the cart friction coefﬁcient to µc = 0.1 and the one of the pole to µp = 0.03. We note how the
friction coefﬁcients make the vector ﬁeld (19) non–smooth: simulation through adaptive–step size"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8825065274151436,Published as a conference paper at ICLR 2022
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8851174934725848,"solvers as tsit5 results experimentally time–consuming, hence we resort to RK4 for training the
hypersolver networks. Nonetheless, as shown in the error propagation of Figure 12, this does not
degrade the performance of the trained multi–stage hypersolver scheme. All neural networks in the
experiements, including the ablation study, are trained with the Adam optimizer for 5 × 104 epochs,
where we set the learning rate to 10−2 for the ﬁrst 3 × 104 epochs, then decrease it to 10−3 for 104
epochs and to 10−4 for the last 104."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8877284595300261,"C.5
QUADCOPTER"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8903394255874674,"System Dynamics
The quadcopter model is a suitably modiﬁed version of the explicit dynamics
update in (Panerati et al., 2021) for batched training in PyTorch. The following accelerations update
describes the dynamic model"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8929503916449086,"¨x =

R · [0, 0, kF
P3
i=0ω2
i ] −[0, 0, mg]

m−1"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8955613577023499,"¨
ψ = J−1 
τ(l, kF , kT , [ω2
0, ω2
1, ω2
2, ω2
3]) −˙ψ ×

J ˙ψ

(20)"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.8981723237597912,"mwhere x = [x, y, z] corresponds to the drone positions and ψ = [φ, θ, ψ] to its angular positions;
R and J are its rotation and inertial matrices respectively, τ(·) is a function calculating the torques
induced by the motor speeds ωi, while arm length l, mass m, gravity acceleration constant g along
with kF and kT are scalar variables describing the quadcopter’s physical properties."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9007832898172323,"0
1
Time [s] 10−4 10−3 10−2 10−1 SMAPE"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9033942558746736,Position
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9060052219321149,"0
1
Time [s] 10−2 10−1 SMAPE"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9086161879895561,Velocity
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9112271540469974,"0
1
Time [s] 10−3 10−2 SMAPE"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9138381201044387,Angular Position
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9164490861618799,"0
1
Time [s] 10−2 10−1 SMAPE"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9190600522193212,Angular Velocity
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9216710182767625,"Multistage Hypersolver (inaccurate model)
Midpoint (inaccurate model)
Euler (nominal model)
Midpoint (nominal model)
Figure 12: Symmetric Mean Absolute Percentage Error (SMAPE) propagation along controlled trajectories
of the cart–pole system. The Multi–stage Hypersolver with knowledge limited to the inaccurate model manages
to outperform the Euler solver iterating on the accurate dynamics in terms of positions and angular positions."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9242819843342036,"C.6
TIMOSHENKO BEAM"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9268929503916449,"System Dynamics
We consider as a system from the theory of continuum dynamics the Tim-
oshenko beam with no dissipation described in (Macchelli & Melchiorri, 2004; Massaroli et al.,
2021). The system can be described in the coenergy formulation by the following partial differen-
tial equation (PDE)
 "
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9295039164490861,"ρA
0
0
0
0
Iρ
0
0
0
0
Cb
0
0
0
0
Cs  ∂ ∂t  
"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9321148825065274,"vt
vr
σr
σt  
=  "
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9347258485639687,"0
0
0
∂x
0
0
∂x
1
0
∂x
0
0
∂x
−1
0
0    
"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9373368146214099,"vt
vr
σr
σt "
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9399477806788512,"

(21)"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9425587467362925,"where ρ is the mass density, A is the cross section area, Iρ is the rotational inertia, Cs and Cb are the
shear and bending compliance; the discretized state variables vt, vr represent the translational and
rotational velocities respectively while σt, σr denote the translational and rotational displacements.
cantilever beam. In order to discretize the problem, we implement a software routine based on the
fenics (Alnæs et al., 2015) open–source software suite to obtain the ﬁnite–elements discretization
of the Timoshenko PDE of (21) given the number of elements, physical parameters of the model and
initial conditions of the beam. We choose a 40 elements discretization of the PDE for a total of 160
dimensions of the discretized state z = [vt, vr, σt, σr]⊤and we initialize the beam at time t = 0
as z(x, 0) = [sin(πx), sin(3πx), 0, 0]. The system can thus be reduced to the following controlled"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9451697127937336,Published as a conference paper at ICLR 2022
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9477806788511749,linear system  
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9503916449086162,"˙vt
˙vr
˙σt
˙σr  =  "
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9530026109660574,"×
×
×
−M −1
ρA D⊤
1
×
×
−M −1
Iρ D⊤
2
−M −1
Iρ D⊤
0
×
M −1
Cb D2
×
×
M −1
Cs D1
M −1
Cs D0
×
×    "
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9556135770234987,"vt
vr
σt
σr  +  "
SUPPORTING REPRODUCIBILITY CODE IS AT,0.95822454308094,"×
M −1
ρA BF
M −1
Iρ BT
×
×
×
×
×  "
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9608355091383812,"
u1
∂
u2
∂ "
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9634464751958225,"(22)
where the mass matrices MρA, MIρ, MCb, MCs, matrices D0, D1, D2, vectors BF , BT are
computed through the fenics routine and boundary controllers u1
∂and u2
∂are the control torque
and the control force applied at the free end of the beam."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9660574412532638,"Stochastic exploration strategy via random walks
We pre–train the hypersolver model via
stochastic exploration of the state-controller space X × U. We restrict the boundary control input
values u = [u1
∂, u2
∂]⊤in [−1, 1] × [−1, 1]. As for the state space, naively generating a probability
distribution with box boundaries on each of the 160 dimensions of X would require an inefﬁcient
search over this high-dimensional space: in fact, not every combination is physically feasible due to
the Timoshenko beam’s structure. We solve this problem by propagating batched trajectories with
RK4 from the initial boundary condition z(x, 0) = [sin(πx), sin(3πx), 0, 0] with random control
actions sampled from a uniform distribution with support in [−1, 1] × [−1, 1] applied for a time
t1 ∼U[0.002, 1] s. We save the states {z(x, t1)i} and forward propagate from these states again
by sampling from the controller and time distributions. We repeat the process K times and obtain a
sequence [{z(x, t1)i}, . . . , {z(x, tK)i}] of batched initial conditions characterized by physical fea-
sibility. Finally, we train the hypersolver with stochastic exploration by sampling from the generated
distribution ξ(x, u) on local one–step residuals as described in Section 5.4. This initial state gener-
ation strategy is repeated every 100 epochs for guaranteeing an extensive exploration of all possible
boundary conditions. Figure 13 shows the error propagation over controlled trajectories: the trained
HyperEuler achieves the lowest error among baseline ﬁxed–step solvers."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9686684073107049,"0
1
2
3
t [s] 10−4 10−1 102 105 108 MAE vt"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9712793733681462,"Euler
HyperEuler
Midpoint
RK4"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9738903394255874,"0
1
2
3
t [s] vr"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9765013054830287,"0
1
2
3
t [s] σt"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.97911227154047,"0
1
2
3
t [s] σr"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9817232375979112,"Figure 13: Mean Absolute Error (MAE) propagation on velocities vt, vr and displacements σt, σr for the
ﬁnite elements of the discretized Timoshenko beam along controlled trajectories. While solutions from Euler
and Midpoint quickly diverge due to the system’s stiffness, HyperEuler manages not only to contain errors but
even outperform the fourth-order RK4 whilst requiring a fraction of the number of vector ﬁeld evaluations."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9843342036553525,"Additional details on the results
We report additional details regarding the runtime of the exper-
iments on the Timoshenko Beam. As for the training time, training the hypersolver for 105 epochs
takes around 80 minutes, where the time for each training epoch slightly varies depending on the
length of the sequence of initial condition batches obtained via random walks. As for the averaged
runtime per training epoch during the control policy optimization, HyperEuler takes (2.53 ± 0.09) s
per training iteration, Euler (2.01 ± 0.04) s, Midpoint (4.02 ± 0.08) s and RK4 (8.24 ± 0.14) s.
Experiments were run on the CPU of the machine described in Section C.7."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9869451697127938,"C.7
HARDWARE AND SOFTWARE"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9895561357702349,"Experiments were carried out on a machine equipped with an AMD RYZEN THREADRIPPER
3960X CPU with 48 threads and two NVIDIA RTX 3090 graphic cards. Software–wise, we
used PyTorch (Paszke et al., 2019) for deep learning and the torchdyn (Poli et al., 2020b) and"
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9921671018276762,Published as a conference paper at ICLR 2022
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9947780678851175,"torchdiffeq (Chen et al., 2019) libraries for ODE solvers. We additionally share the code used in
this paper and make it publicly available on Github4."
SUPPORTING REPRODUCIBILITY CODE IS AT,0.9973890339425587,"4Supporting reproducibility code is at
https : //github.com/DiffEqML/diffeqml −research/tree/master/hypersolvers −control"
