Section,Section Appearance Order,Paragraph
THE CHINESE UNIVERSITY OF HONG KONG,0.0,"1The Chinese University of Hong Kong
2University of California, Los Angeles
3Huawei Noah’s Ark Lab
4National University of Singapore
skhu@se.cuhk.edu.hk
ruocwang@ucla.edu
{honglanqing, Li.Zhenguo}@huawei.com
chohsieh@cs.ucla.edu
jshfeng@gmail.com"
ABSTRACT,0.0017513134851138354,ABSTRACT
ABSTRACT,0.0035026269702276708,"Efﬁcient performance estimation of architectures drawn from large search spaces
is essential to Neural Architecture Search. One-Shot methods tackle this chal-
lenge by training one supernet to approximate the performance of every archi-
tecture in the search space via weight-sharing, thereby drastically reducing the
search cost. However, due to coupled optimization between child architectures
caused by weight-sharing, One-Shot supernet’s performance estimation could be
inaccurate, leading to degraded search outcomes. To address this issue, Few-Shot
NAS reduces the level of weight-sharing by splitting the One-Shot supernet into
multiple separated sub-supernets via edge-wise (layer-wise) exhaustive partition-
ing. Since each partition of the supernet is not equally important, it necessitates
the design of a more effective splitting criterion. In this work, we propose a
gradient matching score (GM) that leverages gradient information at the shared
weight for making informed splitting decisions. Intuitively, gradients from differ-
ent child models can be used to identify whether they agree on how to update the
shared modules, and subsequently to decide if they should share the same weight.
Compared with exhaustive partitioning, the proposed criterion signiﬁcantly re-
duces the branching factor per edge. This allows us to split more edges (lay-
ers) for a given budget, resulting in substantially improved performance as NAS
search spaces usually include dozens of edges (layers). Extensive empirical evalu-
ations of the proposed method on a wide range of search spaces (NASBench-201,
DARTS, MobileNet Space), datasets (cifar10, cifar100, ImageNet) and search al-
gorithms (DARTS, SNAS, RSPS, ProxylessNAS, OFA) demonstrate that it sig-
niﬁcantly outperforms its Few-Shot counterparts while surpassing previous com-
parable methods in terms of the accuracy of derived architectures. Our code is
available at https://github.com/skhu101/GM-NAS."
INTRODUCTION,0.005253940455341506,"1
INTRODUCTION"
INTRODUCTION,0.0070052539404553416,"In recent years, there has been a surge of interest in Neural Architecture Search (NAS) (Stanley &
Miikkulainen, 2002; Zoph & Le, 2017; Pham et al., 2018; Real et al., 2019; Liu et al., 2019) for its
ability to identify high-performing architectures in a series of machine learning tasks. Pioneering
works in this ﬁeld require training and evaluating thousands of architectures from scratch, which
consume huge amounts of computational resources (Miikkulainen et al., 2019; Zoph & Le, 2017;
Zoph et al., 2018). To improve the search efﬁciency, One-Shot NAS (Pham et al., 2018; Liu et al.,
2019; Bender et al., 2018) proposes to train a single weight-sharing supernet (Shot) that encodes
every architecture in the search space as a sub-path, and subsequently uses this supernet to estimate
the performance of the underlying architectures efﬁciently. The supernet is represented as a directed
acyclic graph (DAG), where each edge is associated with a set of operations. In the One-Shot
supernet, child models share weight when their paths in the DAG overlap. This way, One-Shot
methods manage to cut the search cost down to training a single supernet model while still achieving
state-of-the-art performances."
INTRODUCTION,0.008756567425569177,∗Equal Contribution
INTRODUCTION,0.010507880910683012,Published as a conference paper at ICLR 2022
INTRODUCTION,0.012259194395796848,"(a) Few-Shot NAS (depth: 1, branching factor: 4)"
INTRODUCTION,0.014010507880910683,operation:
INTRODUCTION,0.01576182136602452,"(b) GM-NAS (depth: 2, branching factor: 2)"
INTRODUCTION,0.017513134851138354,"Gradient 
cosine similarity"
INTRODUCTION,0.01926444833625219,"supernet 1
supernet 2 0.7 0.8"
INTRODUCTION,0.021015761821366025,"0.1
0.2
0.3 0.1"
INTRODUCTION,0.02276707530647986,supernet 1
INTRODUCTION,0.024518388791593695,supernet 2 0.7 0.8
INTRODUCTION,0.02626970227670753,"0.1
0.2
0.3 0.1"
INTRODUCTION,0.028021015761821366,Min-cut edge:
INTRODUCTION,0.0297723292469352,Figure 1: An illustration of the supernet partitioning schema in Few-Shot NAS v.s. GM-NAS (ours)
INTRODUCTION,0.03152364273204904,"Despite the search efﬁciency, training the weight-sharing supernet also induces coupled optimization
among child models. Consequently, the supernet suffers from degenerated search outcomes due to
inaccurate performance estimation, especially on top architectures (Bender et al., 2018; Yu et al.,
2020b; Pourchot et al., 2020; Zhang et al., 2020b; Zhao et al., 2021b). To reduce the level of
weight-sharing, Few-Shot NAS (Zhao et al., 2021b) proposes to split the One-Shot supernet into
multiple independent sub-supernets via edge-wise exhaustive partitioning. Concretely, it assigns
every operation on the selected edges to a separated sub-supernet, with weight-sharing enabled only
within each sub-supernet (Figure 1 (a)). This way, architectures containing different operations on
the split edge are divided into different sub-supernets, thereby disabling weight-sharing between
them. Although the performance of Few-Shot NAS surpasses its One-Shot counterpart, its splitting
schema - naively assigning each operation on an edge to a separated sub-supernet - is not ideal.
Some operations might behave similarly to each other and thus can be grouped into the same sub-
supernet with little harm. In such cases, dividing them up could be a waste of precious search
budgets while bringing little beneﬁt to the performance. On the other hand, the gain from dividing
dissimilar operations considerably out-weights that of dividing similar ones."
INTRODUCTION,0.03327495621716287,"The above analysis necessitates the design of an effective splitting criterion to distinguish between
these two cases. Consider two child models that contain the same operations on all but the to-be-split
edge of the supernet. Intuitively, they should not use one copy of weight if their training dynamics at
the shared modules are dissimilar. Concretely, when these two networks produce mismatched gra-
dients for the shared weight, updating the shared module under them would lead to a zigzag SGD
trajectory. As a result, the performance estimation of these networks might not reﬂect their true
strength. This can be further motivated by viewing the supernet training as multi-criteria optimiza-
tion (Fliege & Svaiter, 2000; Brown & Smith, 2005), where each criterion governs the optimization
of one child model; Only similar update directions from different objectives could reduce the loss
of all child networks. Otherwise, the performance of some child networks (objectives) would dete-
riorate. Based on these inspirations, we propose to directly use the gradient matching score (GM)
as the supernet splitting criterion. The splitting decision can be made via graph clustering over the
sub-supernets, with graph links weighted by the GM scores (Figure 1 (b)). Utilizing the proposed
splitting schema, we generalize the supernet splitting of Few-Shot NAS to support arbitrary branch-
ing factors (number of children at each node of the partition tree). With a much lower branching
factor, we could afford to split three times more edges compared with Few-Shot NAS under the
same search budget, and achieve superior search performance."
INTRODUCTION,0.03502626970227671,"We conduct extensive experiments on multiple search spaces, datasets, and base methods to demon-
strate the effectiveness of the proposed method, codenamed GM-NAS. Despite its simplicity, GM-
NAS consistently outperforms its One-Shot and Few-Shot counterparts. On DARTS Space, we
achieve a test error of 2.34%, ranked top among SOTA methods. On the MobileNet Space, GM-
NAS reaches 19.7% Top-1 test error on ImageNet, surpassing previous comparable methods."
RELATED WORK,0.03677758318739054,"2
RELATED WORK"
RELATED WORK,0.03852889667250438,"One-Shot NAS with Weight-Sharing aims at addressing the high computational cost of early NAS
algorithms (Bender et al., 2018; Liu et al., 2019; Li & Talwalkar, 2020). Concretely, One-Shot NAS
builds one single supernet that includes all child models in the search space as sub-paths, and allows
the child models to share weight when their paths overlap. Architecture search can be conducted by"
RELATED WORK,0.040280210157618214,Published as a conference paper at ICLR 2022
RELATED WORK,0.04203152364273205,"training the supernet once and using it as the performance estimator to derive the best child model
from the supernet. As a result, One-Shot NAS reduces the search cost down to training one single
model (the supernet)."
RELATED WORK,0.043782837127845885,"Despite the search efﬁciency, Weight-sharing technique adopted by One-Shot NAS also posts a wide
range of inductive biases due to coupled optimization, such as operation co-adaptation (Bender
et al., 2018; Li et al., 2019a), poor generalization ability (Zela et al., 2020; Chen et al., 2021), and
distorted ranking correlations especially among top architectures (Zhang et al., 2020b; Bender et al.,
2018; Zhao et al., 2021b). As a result, the performance estimation of child models from the supernet
could be inaccurate, and thus degrades the search results."
RELATED WORK,0.04553415061295972,"Several lines of methods have been proposed to address the degenerated search performance
caused by weight-sharing. Search space pruning methods identify and progressively discard poor-
performing regions of the search space, so that other models do not need to share weight with
candidates from these regions (Liu et al., 2018; Li et al., 2019a; Chen et al., 2021; Li et al., 2020a;
Hu et al., 2020b). Distribution learning methods aim at inferring a sampling distribution that bi-
ases towards top performers (Xie et al., 2019; Chen et al., 2021; Hu et al., 2020a; Dong & Yang,
2019). Recently, there emerges a new orthogonal line of work that directly reduces the level of
weight-sharing by partitioning the search space into multiple sub-regions, with weight-sharing en-
abled only among models inside each sub-regions (Zhang et al., 2020b; Zhao et al., 2021b). Zhang
et al. (2020b) shows on a reduced search space that this treatment improves the ranking correlation
among child models. Zhao et al. (2021b) further proposes Few-Shot NAS: an edge-wise exhaustive
partitioning schema that splits the One-Shot supernet into multiple sub-supernets, and obtains sig-
niﬁcantly improved performance over One-Shot baselines. Our work generalizes Few-Shot NAS to
arbitrary branching factors by utilizing gradient matching score as the splitting criteria and formu-
lating the splitting as a graph clustering problem."
METHOD,0.047285464098073555,"3
METHOD"
FROM ONE-SHOT NAS TO FEW-SHOT NAS,0.04903677758318739,"3.1
FROM ONE-SHOT NAS TO FEW-SHOT NAS"
FROM ONE-SHOT NAS TO FEW-SHOT NAS,0.050788091068301226,"One-Shot NAS
One-Shot NAS represents the search space as a directed acyclic graph (DAG),
where each node denotes a latent feature map and each edge (e) contains operations o from the
set O(e). This way, every child model in the search space can be represented as one path in the
DAG (a.k.a. supernet). The search process is conducted by ﬁrst optimizing the supernet once and
subsequently using it as the performance estimator to derive the best architectures. One-Shot NAS
induces the maximum level of weight-sharing: a child model shares weights with every other model
in the search space as long as they include the same operation(s) on some edge(s). Although weight-
sharing supernet drastically reduces the search cost, it also leads to inaccurate performance estima-
tion of child models, as pointed out by several previous works (Zela et al., 2020; Bender et al., 2018;
Zhang et al., 2020b; Zhao et al., 2021b; Wang et al., 2021b)."
FROM ONE-SHOT NAS TO FEW-SHOT NAS,0.05253940455341506,"Few-Shot NAS
To address the aforementioned issue in One-Shot NAS, Zhao et al. (2021b) pro-
poses Few-Shot NAS that leverages supernet splitting to reduce the level of weight-sharing in One-
Shot supernet. Few-Shot NAS divides the One-Shot supernet into multiple sub-supernets (each cor-
responding to a “shot”), where weight-sharing occurs only among the child models that belong to
the same sub-supernet. Concretely, it adopts an edge-wise splitting schema: It ﬁrst randomly selects
a target compound edge from the supernet and then assigns each operation on the target edge into
a separated sub-supernet, while keeping the remaining edges unchanged. As a result, child models
containing different operations on the target edge are assigned to different sub-supernets, and there-
fore do not share weight with each other. As shown in Figure 1 (a), this supernet splitting schema
forms a partition tree of supernets, with a branching factor B equals to the number of operations on
the edge (|O(e)|)."
GENERALIZED SUPERNET SPLITTING WITH ARBITRARY BRANCHING FACTORS,0.0542907180385289,"3.2
GENERALIZED SUPERNET SPLITTING WITH ARBITRARY BRANCHING FACTORS"
GENERALIZED SUPERNET SPLITTING WITH ARBITRARY BRANCHING FACTORS,0.05604203152364273,"Due to the exhaustive splitting schema, Few-Shot NAS suffers from a high branching factor per split.
Suppose we perform splits on T edges, the number of leaf-node sub-supernets becomes |O(e)|T . On
DARTS Space, where the supernet contains 7 operations per edge and 14 edges per cell, splitting"
GENERALIZED SUPERNET SPLITTING WITH ARBITRARY BRANCHING FACTORS,0.05779334500875657,Published as a conference paper at ICLR 2022
GENERALIZED SUPERNET SPLITTING WITH ARBITRARY BRANCHING FACTORS,0.0595446584938704,"merely two edges lead to 72 = 49 sub-supernets. Consequently, conducting architecture search
over these many sub-supernets induces prohibitively large computational overhead. For this reason,
Few-Shot NAS could only afford to split very few edges (in fact, one single split in most of its
experiments). This could be suboptimal for many popular NAS search spaces as the supernets
usually contain multiple edges/layers (14 for DARTS Space and 22 for MobileNet Space), and the
decision on a single edge might not contribute much to the performance."
GENERALIZED SUPERNET SPLITTING WITH ARBITRARY BRANCHING FACTORS,0.06129597197898424,"Given a ﬁxed search budget, measured by the total number of leaf-node sub-supernets, there exists
a trade-off between the branching factor and the total number of splits. Exhaustive splitting can
be viewed as an extreme case with a maximum branching factor. However, naively separating all
operations on an edge might be unnecessary: Since some operations might behave similarly, splitting
them into separated sub-supernets wastes a lot of search budgets while enjoying little beneﬁt. In
such a case, we could group these operations into the same sub-supernet with minor sacriﬁce. This
reduces the branching factor, allowing us to split more edges for a predeﬁned budget and improve
the search performance on large NAS search spaces with many edges/layers. We term this splitting
schema as Generalized Supernet Splitting with arbitrary branching factors."
GENERALIZED SUPERNET SPLITTING WITH ARBITRARY BRANCHING FACTORS,0.06304728546409807,"We provide a formal formulation for this proposed splitting schema. At each split, we select an edge
e and divide the operations on it into B disjoint partitions: O(e) = S
be=1···B O(e)
be . B is thus the"
GENERALIZED SUPERNET SPLITTING WITH ARBITRARY BRANCHING FACTORS,0.0647985989492119,"branching factor. For Few-Shot NAS, B = |O(e)|, and O(e)
be is simply a unit set with one operation
from edge e. When B < |O(e)|, more than one operations on the target edge will be assigned to the
same sub-supernet, i.e. |O(e)
be | > 1. Let E denote the set of all edges and Et be the set of partitioned
edges after t splits, then any sub-supernet generated after the t-th split can be uniquely determined
by the partitioning set Pt =

(e, O(e)
be )|e ∈Et
	
, where Pt contains tuples (e, O(e)
be ) that record
which operations on edge e get assigned to this sub-supernet. Let APt denote a sub-supernet with
partition set Pt, then"
GENERALIZED SUPERNET SPLITTING WITH ARBITRARY BRANCHING FACTORS,0.06654991243432574,"APt =
 
["
GENERALIZED SUPERNET SPLITTING WITH ARBITRARY BRANCHING FACTORS,0.06830122591943957,"(e,O(e)
be )∈Pt"
GENERALIZED SUPERNET SPLITTING WITH ARBITRARY BRANCHING FACTORS,0.07005253940455342,"O(e)
be
 [  
["
GENERALIZED SUPERNET SPLITTING WITH ARBITRARY BRANCHING FACTORS,0.07180385288966724,"e∈E\Et
O(e)
.
(1)"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.07355516637478109,"3.3
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.07530647985989491,"Table 1: Comparison of different splitting schema
on NASBench-201 and CIFAR-10. We run each
method with four random seeds and report the
mean accuracy of derived architectures.
With
the same amount of supernets, the search per-
formance of random split with smaller branching
factor is worse than Few-Shot NAS’ exhaustive
splitting. However, replacing random split with
the proposed Gradient Matching criterion signiﬁ-
cantly improves the results (More on this later)."
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.07705779334500876,"Base
Split Criterion
Branch Factor
#Splits
#Supernets
Accuracy DARTS"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.07880910683012259,"Exhaustive
4
1 4"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.08056042031523643,"88.55%
Random
2
2
70.47%
Gradient (ours)
2
2
93.95% RSPS"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.08231173380035026,"Exhaustive
4
1 4"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.0840630472854641,"88.96%
Random
2
2
88.83%
Gradient (ours)
2
2
92.52%"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.08581436077057793,"Generalized Supernet Splitting necessitates the
design of a splitting criterion for grouping op-
erations, which leads to a question as to how
to decide which networks should or should not
share weight. A naive strategy is to perform the
random partition, with the underlying assump-
tion that the weight-sharing between all child
models are equally harmful. However, empiri-
cally we ﬁnd that this treatment merely matches
exhaustive splitting in terms of their perfor-
mance, and in some cases even worsens the re-
sults. To demonstrate this, we compare random
partition with the Few-Shot NAS (exhaustive)
on NASBench201 (Dong & Yang, 2020) with
four operations (skip, conv 1x1, conv 3x3, avg-
pool 3x3)1. For random partitioning, we split
two edges on its supernet (T = 2), and divide the operations on each edge into two groups randomly
(B = 2). This leads to four sub-supernets, same as Few-Shot NAS with one single split. As shown
in Table 1, random split degrades the search performance for both continuous and sampling-based
One-Shot NAS. The comparison result reveals that the weight-sharing between some child models
are much more harmful than others, and therefore need to be carefully distinguished."
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.08756567425569177,"If not all weight-sharing are equally harmful, how should we decide whether two models should
be split into separated sub-supernets? Intuitively, networks should not share weight if their training
dynamics mismatch at the shared modules. In other words, they disagree on how to update the"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.0893169877408056,1Using 4 operations allow us to match the number of supernets between random and exhaustive split.
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.09106830122591944,Published as a conference paper at ICLR 2022
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.09281961471103327,"shared weight. In this case, the angles between gradient directions produced by two networks at
the shared modules might be large, leading to a zigzag pattern of SGD trajectory. As a result, the
performance estimation of these models in the supernet could be inaccurate, thereby degrading the
performance of downstream architecture search task."
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.09457092819614711,"To show this, we evaluate the performance of a single model A when updated together with another
network Asim that produces similar gradients at shared weight, and compare the performance with
the same model updated together with a network Adissim that produces dissimilar gradients. We
generate (A, Asim, Adissim) by sampling from the NASBench-201 search space, in a way that they
have the same operation (and thus share weights) on all but one edges (More on this in Appendix
B.2). We then proceed to train (A, Asim) together and similarly (A, Adissim) together via Random
Sampling with Parameter Sharing (RSPS) (Li & Talwalkar, 2020), and record A’s performance un-
der these two cases. As shown in Table 2, A achieves a much lower loss when updated together with
Asim, where gradients from two child models are similar at the shared module. The result indicates
that weight-sharing could be more harmful between networks with dissimilar training dynamics."
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.09632224168126094,"Table 2: Performance of a network when updated
with a model with similar training dynamics v.s.
with a model with dissimilar training dynamics at
their shared weight. The network achieves a much
lower loss in the ﬁrst case."
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.09807355516637478,"Weight Sharing
Grad Similarity
Train Loss (A1)
Valid Loss (A1)
(A, Asim)
0.76 ± 0.17
0.74 ± 0.18
0.86 ± 0.10
(A, Adissim)
0.12 ± 0.06
0.82 ± 0.03
0.99 ± 0.03"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.09982486865148861,"Inspired by the above analysis, we propose to
measure the harmfulness of weight-sharing be-
tween child models (hence sub-supernets) di-
rectly via gradient matching (GM). Concretely,
consider two operations from an edge; if these
operations, when enabled separately, lead to
drastically different gradients on the shared
edges, we give them higher priority for being
split into different sub-supernets during the su-
pernet partitioning. The entire splitting schema can be formulated as a graph clustering problem:
Given a (sub-)supernet APt−1, we evaluate the gradient of the supernet when each operation o is
enabled on edge et separately, and then compute the cosine similarity between every pair of these
gradients:"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.10157618213660245,"GM(APt−1|et=o, APt−1|et=o′) = COS

∇wsL(APt−1|et=o; ws), ∇wsL(APt−1|et=o′; ws)

(2)"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.10332749562171628,"where APt−1|et=o means to enable operation o on edge et of supernet APt−1, and ws is the shared
weight. This leads to a densely connected graph (Figure 1 (b)) where the vertices are operations on
et and links between them are weighted by GM score computed in Eqn. (2). Therefore, supernet
partitioning can be conducted by performing graph clustering on this graph, with the number of
clusters equal to the desired branching factor. There exist many applicable algorithms for solving
this problem, but |O(⌉)| is usually small, we perform graph min-cut via brute-force search to divide
the operations (supernets) into B balanced groups. For B = 2, it can be written as:"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.10507880910683012,"U = arg min
U⊆O(e) X"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.10683012259194395,"o∈U,o′∈O(e)\U
GM(APt−1|et=o, APt−1|et=o′),
(3)"
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.1085814360770578,s.t. ⌊|O(e)|/2⌋≤|U| ≤⌈|O(e)|/2⌉.
SUPERNET SPLITTING VIA GRAPH MIN-CUT WITH GRADIENT MATCHING SCORE,0.11033274956217162,"where {U, O(e) \ U} are the obtained partitions. The proposed splitting schema substantially im-
proves the search performance over exhaustive split and random split, as evidenced by Table 1."
THE COMPLETE ALGORITHM,0.11208406304728546,"3.4
THE COMPLETE ALGORITHM"
THE COMPLETE ALGORITHM,0.1138353765323993,"Edge selection using gradient matching score
Apart from smartly selecting which operations
should be grouped within an edge, we can also use the gradient matching score to select which
edge to split next. More speciﬁcally, the graph min-cut algorithm produces a cut cost for each edge
- the sum of gradient matching scores of the cut links on the gradient similarity graph. This can
serve as an edge importance measure for determining which edge to split on next, as a lower cut
cost indicates that splitting on this edge ﬁrst might relieve the adverse effect of weight-sharing to a
larger extend. Empirically, we ﬁnd that this edge scoring measure reduces the variance over random
selection used in Few-Shot NAS, and also improves the performance (Section 5.1)."
THE COMPLETE ALGORITHM,0.11558669001751314,"Supernet splitting with restart
During the supernet splitting phase, we warmup the supernet’s
weight (w) for a few epochs before each split, in order to collect more accurate gradient information"
THE COMPLETE ALGORITHM,0.11733800350262696,Published as a conference paper at ICLR 2022
THE COMPLETE ALGORITHM,0.1190893169877408,"along the optimization trajectory. Since the effect of weight-sharing has already kicked in during this
phase, we re-initialize all the leaf-node sub-supernets after the ﬁnal split is completed, and conduct
architecture search over them from scratch. The complete algorithm is summarized in Algorithm 1
in the Appendix."
EXPERIMENTS,0.12084063047285463,"4
EXPERIMENTS"
EXPERIMENTS,0.12259194395796848,"In this section, we conduct extensive empirical evaluations of the proposed method across various
base methods (DARTS, RSPS, SNAS, ProxylessNAS, OFA) and search spaces (NASBench-201,
DARTS, and MobileNet Space). Experimental results demonstrate that the proposed GM-NAS con-
sistently outperforms its Few-Shot and One-Shot counterparts."
EXPERIMENTS,0.1243432574430823,"4.1
NASBENCH-201"
EXPERIMENTS,0.12609457092819615,"We benchmark the proposed method on the full NASBench-201 Space (Dong & Yang, 2020) with
ﬁve operations (none, skip, conv 1x1, conv 3x3, avgpool 3x3). We run the search phase of each
method under four random seeds (0-3) and reports the mean accuracy of their derived architectures,
as well as the standard deviation to capture the variance of the search algorithms. For our method,
we split the operations on each edge into two groups (one group with three operations, another group
with two operations), and cut two edges in total, amounting to four sub-supernets. Note that this is
one supernet less than Few-Shot NAS, which uses ﬁve sub-supernets due to its exhaustive splitting
schema."
EXPERIMENTS,0.12784588441331,"Still, the proposed method improves over Few-Shot NAS by a large margin. As shown in Table 3,
the architectures derived from GM DARTS achieve an average accuracy of 93.72% on CIFAR-10,
leading to an improvement of 5.17% over Few-Shot DARTS and 39.24% over DARTS. To further
test the generality of the proposed method over various One-Shot NAS algorithms, we also compare
GM-NAS with Few-Shot NAS on sampling-based methods such as SNAS and RSPS. As before, our
method consistently out-performs Few-Shot NAS and the One-Shot base methods by a substantial
margin. Notably, when combined with the proposed method, SNAS matches the previous SOTA
result (DrNAS) on CIFAR-10 and CIFAR-100."
EXPERIMENTS,0.1295971978984238,Table 3: Comparison with state-of-the-art NAS methods on NASBench-201.
EXPERIMENTS,0.13134851138353765,"Method
CIFAR-10
CIFAR-100
ImageNet-16-120
validation
test
validation
test
validation
test
ResNet (He et al., 2016)
90.83
93.97
70.42
70.86
44.53
43.63
Random (baseline)
90.93 ± 0.36
93.70 ± 0.36
70.60 ± 1.37
70.65 ± 1.38
42.92 ± 2.00
42.96 ± 2.15
Reinforce (Zoph et al., 2018)
91.09 ± 0.37
93.85 ± 0.37
70.05 ± 1.67
70.17 ± 1.61
43.04 ± 2.18
43.16 ± 2.28
ENAS (Pham et al., 2018)
39.77 ± 0.00
54.30 ± 0.00
10.23 ± 0.12
10.62 ± 0.27
16.43 ± 0.00
16.32 ± 0.00
GDAS (Dong & Yang, 2019)
90.01 ± 0.46
93.23 ± 0.23
24.05 ± 8.12
24.20 ± 8.08
40.66 ± 0.00
41.02 ± 0.00
DSNAS (Hu et al., 2020a)
89.66 ± 0.29
93.08 ± 0.13
30.87 ± 16.40
31.01 ± 16.38
40.61 ± 0.09
41.07 ± 0.09
PC-DARTS (Xu et al., 2020)
89.96 ± 0.15
93.41 ± 0.30
67.12 ± 0.39
67.48 ± 0.89
40.83 ± 0.08
41.31 ± 0.22
DrNAS (Chen et al., 2021)
91.55 ± 0.00
94.36 ± 0.00
73.49 ± 0.00
73.51 ± 0.00
46.37 ± 0.00
46.34 ± 0.00
RSPS (Li & Talwalkar, 2020)
84.16 ± 1.69
87.66 ± 1.69
45.78 ± 6.33
46.60 ± 6.57
31.09 ± 5.65
30.78 ± 6.12
Few Shot + RSPS
85.40 ± 1.28
89.11 ± 1.37
58.59 ± 3.45
58.69 ± 3.75
34.24 ± 1.45
33.85 ± 2.33
GM + RSPS
89.09 ± 0.40
92.70 ± 0.53
68.36 ± 0.91
68.81 ± 1.28
42.65 ± 1.04
43.47 ± 1.02
DARTS (Liu et al., 2019)
39.77 ± 0.00
54.30 ± 0.00
38.57 ± 0.00
38.97 ± 0.00
18.87 ± 0.00
18.41 ± 0.00
Few Shot + DARTS
84.70 ± 0.44
88.55 ± 0.02
70.17 ± 2.66
70.16 ± 2.87
31.16 ± 3.93
30.09 ± 4.43
GM + DARTS
91.03 ± 0.24
93.72 ± 0.12
71.61 ± 0.62
71.83 ± 0.97
42.19 ± 0.00
42.60 ± 0.00
SNAS (Xie et al., 2019)
90.10 ± 1.04
92.77 ± 0.83
69.69 ± 2.39
69.34 ± 1.98
42.84 ± 1.79
43.16 ± 2.64
Few Shot + SNAS
90.47 ± 0.48
93.88 ± 0.25
71.28 ± 1.29
71.49 ± 1.41
46.17 ± 0.35
46.43 ± 0.19
GM + SNAS
91.55 ± 0.00
94.36 ± 0.00
73.49 ± 0.00
73.51 ± 0.00
46.37 ± 0.00
46.34 ± 0.00
optimal
91.61
94.37
73.49
73.51
46.77
47.31"
DARTS SPACE,0.1330998248686515,"4.2
DARTS SPACE"
DARTS SPACE,0.13485113835376533,"We further investigate the performance of the proposed method on the DARTS search space. To
encourage fair comparisons with prior arts, we follow the same search and retrain settings as the
original DARTS (Liu et al., 2019). Similar to the experiments on NASBench-201, we also run
the search phase of each method under four random seeds (0-3) and report the best and average
accuracy of all derived architectures, as well as the error bar to capture the variance of the search"
DARTS SPACE,0.13660245183887915,Published as a conference paper at ICLR 2022
DARTS SPACE,0.138353765323993,Table 4: Comparison with state-of-the-art NAS methods on CIFAR-10.
DARTS SPACE,0.14010507880910683,"Architecture
Test Error(%)
Param
(M)
Search Cost
(GPU Days)
Search
Method
Best
Avg
DenseNet-BC (Huang et al., 2017)
3.46
-
25.6
-
manual
NASNet-A (Zoph et al., 2018)
2.65
-
3.3
2000
RL
AmoebaNet-A (Real et al., 2019)
-
3.34 ± 0.06
3.2
3150
evolution
AmoebaNet-B (Real et al., 2019)
-
2.55 ± 0.05
2.8
3150
evolution
PNAS (Liu et al., 2018)
-
3.41 ± 0.09
3.2
225
SMBO
ENAS (Pham et al., 2018)
2.89
-
4.6
0.5
RL
NAONet (Luo et al., 2018)
3.53
-
3.1
0.4
NAO
GDAS (Dong & Yang, 2019)
2.93
-
3.4
0.3
gradient
BayesNAS (Zhou et al., 2019)
2.81 ± 0.04
-
3.4
0.2
gradient
ProxylessNAS (Cai et al., 2019)†
2.08
-
5.7
4.0
gradient
PARSEC (Casale et al., 2019)
2.81 ± 0.03
-
3.7
1
gradient
P-DARTS (Chen et al., 2019)
2.50
-
3.4
0.3
gradient
CNAS (Lim et al., 2019)
2.60 ± 0.06
-
3.7
0.3
gradient
ASNGNAS (Akimoto et al., 2019)
-
2.54 ± 0.05
3.3
0.1
gradient
PC-DARTS (Xu et al., 2020)
2.57 ± 0.07
-
3.6
0.1
gradient
SDARTS-ADV (Chen & Hsieh, 2020)
-
2.61 ± 0.02
3.3
1.3
gradient
MergeNAS (Wang et al., 2020b)
-
2.68 ± 0.01
2.9
0.6
gradient
ISTA-NAS (two stage) (Yang et al., 2020)
2.54 ± 0.05
-
3.3
0.1
gradient
NASP (Yao et al., 2020)
2.83 ± 0.09
-
3.3
0.9
gradient
SGAS (Li et al., 2020a)
2.39
2.66 ± 0.24
3.7
0.25
gradient
DrNAS (Chen et al., 2021)
2.54 ± 0.03
-
4.0
0.4
gradient
DARTS (1st) (Liu et al., 2019)
3.00 ± 0.14
-
3.3
0.4
gradient
Few Shot + DARTS (1st)
2.48⋆
2.60 ± 0.10⋆
3.6
1.1
gradient
GM + DARTS (1st)
2.35
2.46 ± 0.07
3.7
1.1
gradient
DARTS (2nd) (Liu et al., 2019)
2.76 ± 0.09
-
3.3
1.0
gradient
Few Shot + DARTS (2nd)
2.58⋆
2.63 ± 0.06⋆
3.8
2.8
gradient
GM + DARTS (2nd)
2.40
2.49 ± 0.08
3.7
2.7
gradient
SNAS (moderate) (Xie et al., 2019)
-
2.85 ± 0.02
2.8
1.5
gradient
Few Shot + SNAS
2.62
2.70 ± 0.05
2.9
1.1
gradient
GM + SNAS
2.34
2.55 ± 0.16
3.7
1.1
gradient"
DARTS SPACE,0.14185639229422067,"⋆Reproduced by running both search and retrain phase under four seeds. Few-Shot NAS adopts a different retrain
protocol than the commonly used DARTS protocol; The test accuracy of its released discovered architecture
under DARTS’ protocol is 2.44%, similar to our reproduced ”best” result on DARTS-1st (2.48%).
† Obtained on a different search space with PyramidNet (Han et al., 2017) as the backbone."
DARTS SPACE,0.1436077057793345,"algorithms 2. For GM-NAS, we select three edges (T = 3) in total based on the edge importance
measure introduced in Section 3.4 and split the operations on each selected edge into two groups
(B = 2). This leads to eight sub-supernets, comparable to the seven supernets used in the Few-
Shot NAS baseline. We also restrict our total search cost to match that of Few-Shot NAS for fair
comparisons. We refer the readers to Appendix C for more details about the settings."
DARTS SPACE,0.14535901926444833,"As shown in Table 4, GM-NAS consistently outperforms Few-Shot NAS on both variants of DARTS
and also SNAS. For instance, GM DARTS (1st) achieves a 2.35% test error rate, 0.13% lower
than Few-Shot DARTS (1st). In addition, GM-NAS also achieves signiﬁcantly better average test
accuracy (Avg column) than Few-Shot and One-Shot NAS, which shows the robustness of our search
algorithm under different random seeds. Notably, the best test error we obtain across different base
methods is 2.34% (GM-SNAS), ranking top among prior arts."
MOBILENET SPACE,0.14711033274956217,"4.3
MOBILENET SPACE"
MOBILENET SPACE,0.14886164623467601,"In addition to the cell-based search spaces, we also evaluate the effectiveness of GM-NAS on the
MobileNet Space. Following Few-Shot NAS, we apply GM-NAS to two sampling-based methods
- ProxylessNAS (Cai et al., 2019) and OFA (Cai et al., 2020). To match the total number of sub-
supernets of GM-NAS with Few-Shot NAS, we select two layers (T = 2) to perform the supernet
partitioning, and divide the operations into two groups (B = 2) for the ﬁrst edge, and three groups
(B = 3) on the second edge."
MOBILENET SPACE,0.15061295971978983,"The results are summarized in Table 5. When applied to ProxylessNAS, GM-NAS achieves a Top-1
test error rate of 23.4%, out-performing both Few-Shot and One-Shot versions by 0.7% and 1.5%, re-
spectively. On OFA, we obtain a 19.7% Top-1 test error, surpassing all comparable methods within
600-FLOPs latency. The strong empirical results demonstrate GM-NAS’ ability to effectively re-"
MOBILENET SPACE,0.15236427320490367,"2Note that previous methods usually pick the best architecture from up to 10 search runs and report the
standard deviation of only the evaluation phase. Such reporting schema does not capture the variance of the
search algorithm, and thus biases toward highly unstable methods."
MOBILENET SPACE,0.15411558669001751,Published as a conference paper at ICLR 2022
MOBILENET SPACE,0.15586690017513136,Table 5: Comparison with state-of-the-art image classiﬁers on ImageNet under mobile setting.
MOBILENET SPACE,0.15761821366024517,"Architecture
Test Error(%)
Params
(M)
Flops
(M)
Search Cost
(GPU days)
Search
Method
top-1
top-5
Inception-v1 (Szegedy et al., 2015)
30.1
10.1
6.6
1448
-
manual
MobileNet (Howard et al., 2017)
29.4
10.5
4.2
569
-
manual
ShufﬂeNet 2× (v1) (Zhang et al., 2018)
26.4
10.2
∼5
524
-
manual
ShufﬂeNet 2× (v2) (Ma et al., 2018)
25.1
-
∼5
591
-
manual
NASNet-A (Zoph et al., 2018)
26.0
8.4
5.3
564
2000
RL
PNAS (Liu et al., 2018)
25.8
8.1
5.1
588
225
SMBO
AmoebaNet-C (Real et al., 2019)
24.3
7.6
6.4
570
3150
evolution
MnasNet-92 (Tan et al., 2019)
25.2
8.0
4.4
388
-
RL
GDAS (Dong & Yang, 2019)
26.0
8.5
5.3
581
0.3
gradient
BayesNAS (Zhou et al., 2019)
26.5
8.9
3.9
-
0.2
gradient
PARSEC (Casale et al., 2019)
26.0
8.4
5.6
-
1
gradient
P-DARTS (CIFAR-10) (Chen et al., 2019)
24.4
7.4
4.9
557
0.3
gradient
SinglePathNAS (Guo et al., 2019)†
25.3
-
3.4
328
8.3
evolution
EfﬁcientNet-B1 (Tan & Le, 2019)†
20.9
5.6
7.8
700
-
grid search
DSNAS (Hu et al., 2020a)†
25.7
8.1
-
324
-
gradient
ISTA-NAS (Yang et al., 2020)†
24.0
7.1
5.7
638
-
gradient
PC-DARTS (ImageNet) (Xu et al., 2020)†
24.2
7.3
5.3
597
3.8
gradient
BigNASModel-L (Yu et al., 2020a)†
20.5
-
6.4
586
-
gradient
GAEA + PC-DARTS (Li et al., 2020b)†
24.0
7.3
5.6
-
3.8
gradient
DrNAS (Chen et al., 2021)†
23.7
7.1
5.7
604
4.6
gradient
DARTS (2nd) (Liu et al., 2019)
26.7
8.7
4.7
574
1.0
gradient
GM+DARTS (2nd)
24.5
7.3
5.1
574
2.7
gradient
SNAS (mild) (Xie et al., 2019)
27.3
9.2
4.3
522
1.5
gradient
GM+SNAS
24.6
7.4
5.2
583
1.1
gradient
ProxylessNAS (GPU) (Cai et al., 2019)†
24.9
7.5
7.1
465
8.3
gradient
Few Shot + ProxylessNAS (Zhao et al., 2021b)†
24.1
-
4.9
521
20.75 (11.7)∗
gradient
GM + ProxylessNAS†
23.4
7.0
4.9
530
24.9
gradient
OFA Net (Large) (Cai et al., 2020)†
20.3 (20.0)‡
5.1 (5.1)
9.1
595
1.7§
gradient
Few Shot + OFA Net (Large) (Zhao et al., 2021b)†
20.2 (19.5)‡
5.2 (-)
9.2
600
1.7§
gradient
GM + OFA Net (Large)†
19.7
5.0
9.3
587
1.7 §
gradient"
MOBILENET SPACE,0.159369527145359,"† The architecture is discovered on ImageNet directly, otherwise it is discovered on CIFAR-10 (Transfer Setting).
∗The search cost of Few-Shot ProxylessNAS (20.75) is estimated based on the code we obtained from the author, which is
different from the one reported in the original paper (11.7).
‡ ”x(y)”: x denotes the reproduced results and y is the one reported in the original papers. We refer the reader to Appendix"
MOBILENET SPACE,0.16112084063047286,"D.3 for discussions on reproducibility.
§ We follow OFA and Few-Shot OFA paper to report the search cost, which only includes the cost of evolutionary search."
MOBILENET SPACE,0.1628721541155867,"duce the harm of weight-sharing in One-Shot Algorithms on large-scale search spaces and datasets,
compared with Few-Shot NAS. We also evaluate the performance of transferring the searched archi-
tectures (GM-DARTS and GM-SNAS) in CIFAR-10 to the ImageNet task, which further validates
the effectiveness of our GM-NAS methods."
ABLATION STUDY,0.1646234676007005,"5
ABLATION STUDY"
ABLATION STUDY,0.16637478108581435,"In this section, we conduct extensive ablation studies on GM-NAS. Similar to Section 3, we use
CIFAR-10 and NASBench-201 space with four operations as it allows us to align the number of
supernets with Few-Shot NAS and establish proper comparisons."
THE EFFECT OF DIFFERENT COMPONENTS IN THE PROPOSED METHOD,0.1681260945709282,"5.1
THE EFFECT OF DIFFERENT COMPONENTS IN THE PROPOSED METHOD"
THE EFFECT OF DIFFERENT COMPONENTS IN THE PROPOSED METHOD,0.16987740805604204,"Table 6: Test Accuracy (%) of the derived ar-
chitectures from GM-NAS with different gradient
similarity measures on NASBench-201. Two vari-
ants of Cosine similarity perform similarly while
L2 distance is not as effective."
THE EFFECT OF DIFFERENT COMPONENTS IN THE PROPOSED METHOD,0.17162872154115585,"Measure
L2
Per-Filter-COS
COS
Accuracy
92.52 ± 0.93
93.87 ± 0.11
93.95 ± 0.08"
THE EFFECT OF DIFFERENT COMPONENTS IN THE PROPOSED METHOD,0.1733800350262697,"Gradient similarity measures
We examine
the effect of different similarity measures for
computing the gradient matching score on the
proposed method.
We compare cosine simi-
larity with l2 distance, as well as per-ﬁlter co-
sine similarity (Zhao et al., 2021a) that com-
putes cosine similarity for each convolution ﬁl-
ters separately. As shown in Table 6, per-ﬁlter
cosine similarity performs similarly to cosine
similarity while l2 distance is not as effective. We therefore adopt cosine similarity for its simplicity."
THE EFFECT OF DIFFERENT COMPONENTS IN THE PROPOSED METHOD,0.17513134851138354,"Edge selection using gradient matching score
Instead of randomly selecting edges to parti-
tion the supernet on, GM-NAS leverages the cut cost from graph min-cut to decide which edge
to partition on. Empirically, we ﬁnd that this technique reduces the variance and also improves"
THE EFFECT OF DIFFERENT COMPONENTS IN THE PROPOSED METHOD,0.17688266199649738,Published as a conference paper at ICLR 2022
THE EFFECT OF DIFFERENT COMPONENTS IN THE PROPOSED METHOD,0.1786339754816112,"the search performance compared with random selection. GM-NAS with random edge selection
obtains 93.58% mean accuracy with a standard derivation of 0.39 on NASBench-201. In contrast,
GM-NAS with the proposed edge selection achieves 93.95% accuracy with only a faction of the
variance (0.08)."
THE EFFECT OF DIFFERENT COMPONENTS IN THE PROPOSED METHOD,0.18038528896672504,"Figure 2: Test Accuracy (%) of the derived ar-
chitectures from GM-NAS with different super-
net warmup epochs during the supernet splitting
phase on NASBench-201.
The performance of
GM-NAS stays stable across different settings."
THE EFFECT OF DIFFERENT COMPONENTS IN THE PROPOSED METHOD,0.18213660245183888,"Warmup epochs during the Splitting phase
To obtain accurate gradient information, we
warmup the supernet for a few epochs during
the supernet partitioning phase. As shown in
Figure 2, our proposed method is robust to a
wide range of warmup epochs. Note that the
variance increases without warmup (warmup
epoch = 0) due to noisy gradients at initializa-
tion, indicating that proper supernet warmups
are necessary for GM-NAS."
THE EFFECT OF DIFFERENT COMPONENTS IN THE PROPOSED METHOD,0.18388791593695272,"Restart
After the ﬁnal split is completed, we
re-initialize the weights of sub-supernets be-
fore conducting architecture search on them.
Intuitively, restarting the sub-supernets elimi-
nate the negative effect of weight-sharing estab-
lished during the splitting phase. To verify this,
we test GM-NAS without restart while keeping
the number of supernet training epochs identical to the GM-NAS baseline. We obtain a mean accu-
racy of 91.04% on CIFAR-10, which is 2.91% lower than the original GM-NAS, which shows the
necessity of supernet restart."
RANKING CORRELATION,0.18563922942206654,"5.2
RANKING CORRELATION"
RANKING CORRELATION,0.18739054290718038,"We also evaluate the ranking correlation (measured by Spearman correlation) among top architec-
tures of the proposed method. This is a particularly important measure for effective NAS algorithms
as they have to navigate the region of top models to identify the best candidates (Abdelfattah et al.,
2021). For Few-Shot NAS, we split two edges, amounting to 42 = 16 sub-supernets. For GM-NAS,
due to a smaller branching factor (B = 2), we could afford to split four edges while keeping the
total number of supernet the same as Few-Shot NAS. We train each sub-supernet using Random
Sampling with Parameter Sharing (RSPS) (Li & Talwalkar, 2020), same as the original Few-Shot
NAS paper. Table 7 summarizes the results. The proposed method obtains 0.532 Spearman correla-
tion among top 1% architectures, much higher than Few-Shot NAS (0.117). The improved ranking
correlation also justiﬁes the superior performance of GM-RSPS over Few-Shot RSPS reported in
Section 4.1."
RANKING CORRELATION,0.18914185639229422,"Table 7: Ranking Correlation among top architectures from NASBench-201. The proposed splitting
schema leads to signiﬁcantly better ranking correlation than Few-Shot NAS."
RANKING CORRELATION,0.19089316987740806,"Method
Branching
Factor
#Splits
#Supernets
Spearman Correlation (ρ)
Top 0.2%
Top 0.5%
Top 1%
Few-Shot
4
2
16
0.024
0.032
0.117
GM (ours)
2
4
0.410
0.411
0.532"
CONCLUSION,0.19264448336252188,"6
CONCLUSION"
CONCLUSION,0.19439579684763572,"In this paper, we demonstrate that gradient similarity can effectively measure the harm of weight-
sharing among child models. We propose a novel Gradient Matching NAS (GM-NAS) - a general-
ized supernet splitting schema that utilizes gradient matching score as the splitting criterion and for-
mulates supernet partitioning as a graph clustering problem. Extensive empirical results across mul-
tiple prevailing search spaces, datasets, and base methods show that GM-NAS consistently achieves
stronger performance than its One-Shot and Few-Shot counterparts, revealing its potential to play
an important role in weight-sharing Neural Architecture Search methods."
CONCLUSION,0.19614711033274956,Published as a conference paper at ICLR 2022
ETHICS STATEMENT,0.1978984238178634,ETHICS STATEMENT
ETHICS STATEMENT,0.19964973730297722,We do not aware of any potential ethical concerns regarding our work.
ETHICS STATEMENT,0.20140105078809106,ACKNOWLEDGEMENT
ETHICS STATEMENT,0.2031523642732049,"This work is partially supported by NSF under IIS-2008173, IIS-2048280 and by Army Research
Laboratory under agreement number W911NF-20-2-0158."
REPRODUCIBILITY STATEMENT,0.20490367775831875,REPRODUCIBILITY STATEMENT
REPRODUCIBILITY STATEMENT,0.20665499124343256,"We provide a copy of our code in the supplementary material, including both search and retrain
phase for our method and the reproduced baseline, to ensure reproducibility on all search spaces.
Our experimental setting is stated in Section 4, and hyperparameters are described in the Appendix
D. Furthermore, we also include discussions on the reproducibility of relevant baselines on DARTS
and MobileNet Space in Appendix D."
REFERENCES,0.2084063047285464,REFERENCES
REFERENCES,0.21015761821366025,"Mohamed S. Abdelfattah, Abhinav Mehrotra, Łukasz Dudziak, and Nicholas D. Lane. Zero-cost
proxies for lightweight NAS. In ICLR, 2021."
REFERENCES,0.2119089316987741,"Youhei Akimoto, Shinichi Shirakawa, Nozomu Yoshinari, Kento Uchida, Shota Saito, and Kouhei
Nishida. Adaptive stochastic natural gradient method for one-shot neural architecture search. In
ICML, 2019."
REFERENCES,0.2136602451838879,"Gabriel Bender, Pieter-Jan Kindermans, Barret Zoph, Vijay Vasudevan, and Quoc Le. Understand-
ing and simplifying one-shot architecture search. In ICML, 2018."
REFERENCES,0.21541155866900175,"Martin Brown and Robert E Smith. Directed multi-objective optimization. International Journal of
Computers, Systems, and Signals, 6(1):3–17, 2005."
REFERENCES,0.2171628721541156,"Han Cai, Ligeng Zhu, and Song Han. ProxylessNAS: Direct neural architecture search on target
task and hardware. In ICLR, 2019."
REFERENCES,0.21891418563922943,"Han Cai, Chuang Gan, Tianzhe Wang, Zhekai Zhang, and Song Han.
Once-for-all: Train one
network and specialize it for efﬁcient deployment. In ICLR, 2020."
REFERENCES,0.22066549912434325,"Francesco Paolo Casale, Jonathan Gordon, and Nicolo Fusi. Probabilistic neural architecture search.
arXiv: 1902.05116, 2019."
REFERENCES,0.2224168126094571,"Xiangning Chen and Cho-Jui Hsieh. Stabilizing differentiable architecture search via perturbation-
based regularization. In ICML, 2020."
REFERENCES,0.22416812609457093,"Xiangning Chen, Ruochen Wang, Minhao Cheng, Xiaocheng Tang, and Cho-Jui Hsieh. DrNAS:
Dirichlet neural architecture search. In ICLR, 2021."
REFERENCES,0.22591943957968477,"Xin Chen, Lingxi Xie, Jun Wu, and Qi Tian. Progressive differentiable architecture search: Bridging
the depth gap between search and evaluation. In ICCV, 2019."
REFERENCES,0.2276707530647986,"Xuanyi Dong and Yi Yang. Searching for a robust neural architecture in four gpu hours. In CVPR,
2019."
REFERENCES,0.22942206654991243,"Xuanyi Dong and Yi Yang. NAS-Bench-201: Extending the scope of reproducible neural architec-
ture search. In ICLR, 2020."
REFERENCES,0.23117338003502627,"J¨org Fliege and Benar Fux Svaiter. Steepest descent methods for multicriteria optimization. Mathe-
matical Methods of Operations Research, 51(3):479–494, 2000."
REFERENCES,0.2329246935201401,"Zichao Guo, Xiangyu Zhang, Haoyuan Mu, Wen Heng, Zechun Liu, Yichen Wei, and Jian Sun.
Single path one-shot neural architecture search with uniform sampling. arXiv: 1904.00420, 2019."
REFERENCES,0.23467600700525393,Published as a conference paper at ICLR 2022
REFERENCES,0.23642732049036777,"Dongyoon Han, Jiwhan Kim, and Junmo Kim. Deep pyramidal residual networks. In CVPR, 2017."
REFERENCES,0.2381786339754816,"Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-
nition. In CVPR, 2016."
REFERENCES,0.23992994746059546,"Andrew G. Howard, Menglong Zhu, Bo Chen, Dmitry Kalenichenko, Weijun Wang, Tobias Weyand,
Marco Andreetto, and Hartwig Adam. MobileNets: Efﬁcient convolutional neural networks for
mobile vision applications. arXiv: 1704.04861, 2017."
REFERENCES,0.24168126094570927,"Shoukang Hu, Sirui Xie, Hehui Zheng, Chunxiao Liu, Jianping Shi, Xunying Liu, and Dahua Lin.
DSNAS: Direct neural architecture search without parameter retraining. In CVPR, 2020a."
REFERENCES,0.2434325744308231,"Yiming Hu, Yuding Liang, Zichao Guo, Ruosi Wan, Xiangyu Zhang, Yichen Wei, Qingyi Gu, and
Jian Sun. Angle-based search space shrinking for neural architecture search. In ECCV, 2020b."
REFERENCES,0.24518388791593695,"Gao Huang, Zhuang Liu, Laurens van der Maaten, and Kilian Q. Weinberger. Densely connected
convolutional networks. In CVPR, 2017."
REFERENCES,0.2469352014010508,"Kevin Jamieson and Ameet Talwalkar. Non-stochastic best arm identiﬁcation and hyperparameter
optimization. In AISTATS, 2016."
REFERENCES,0.2486865148861646,"Zohar Karnin, Tomer Koren, and Oren Somekh. Almost optimal exploration in multi-armed bandits.
In ICML, 2013."
REFERENCES,0.2504378283712785,"Guilin Li, Xing Zhang, Zitong Wang, Zhenguo Li, and Tong Zhang. StacNAS: Towards stable and
consistent differentiable neural architecture search. arXiv: 1909.11926, 2019a."
REFERENCES,0.2521891418563923,"Guohao Li, Guocheng Qian, Itzel C. Delgadillo, Matthias M¨uller, Ali K. Thabet, and Bernard
Ghanem. SGAS: sequential greedy architecture search. In CVPR, 2020a."
REFERENCES,0.2539404553415061,"Liam Li and Ameet Talwalkar. Random search and reproducibility for neural architecture search. In
UAI, 2020."
REFERENCES,0.25569176882662,"Liam Li, Mikhail Khodak, Maria-Florina Balcan, and Ameet Talwalkar. Geometry-aware gradient
algorithms for neural architecture search. arXiv: 2004.07802, 2020b."
REFERENCES,0.2574430823117338,"Lisha Li, Kevin Jamieson, Giulia DeSalvo, Afshin Rostamizadeh, and Ameet Talwalkar. Hyperband:
A novel bandit-based approach to hyperparameter optimization. arXiv:1903.11059, 2019b."
REFERENCES,0.2591943957968476,"Heechul Lim, Min-Soo Kim, and Jinjun Xiong. CNAS: Channel-level neural architecture search.
OpenReview, 2019. URL https://openreview.net/forum?id=rklfIeSFwS."
REFERENCES,0.2609457092819615,"Chenxi Liu, Barret Zoph, Maxim Neumann, Jonathon Shlens, Wei Hua, Li-Jia Li, Li Fei-Fei, Alan
Yuille, Jonathan Huang, and Kevin Murphy. Progressive neural architecture search. In ECCV,
2018."
REFERENCES,0.2626970227670753,"Hanxiao Liu, Karen Simonyan, and Yiming Yang. DARTS: Differentiable architecture search. In
ICLR, 2019."
REFERENCES,0.26444833625218916,"Renqian Luo, Fei Tian, Tao Qin, and Tie-Yan Liu.
Neural architecture optimization.
CoRR,
abs/1808.07233, 2018."
REFERENCES,0.266199649737303,"Ningning Ma, Xiangyu Zhang, Hai-Tao Zheng, and Jian Sun. ShufﬂeNet V2: Practical guidelines
for efﬁcient cnn architecture design. In ECCV, 2018."
REFERENCES,0.2679509632224168,"Risto Miikkulainen, Jason Liang, Elliot Meyerson, Aditya Rawal, Daniel Fink, Olivier Francon,
Bala Raju, Hormoz Shahrzad, Arshak Navruzyan, Nigel Duffy, and et al. Evolving deep neu-
ral networks. Artiﬁcial Intelligence in the Age of Neural Networks and Brain Computing, pp.
293–312, 2019. doi: 10.1016/b978-0-12-815480-9.00015-3. URL http://dx.doi.org/
10.1016/B978-0-12-815480-9.00015-3."
REFERENCES,0.26970227670753066,"Hieu Pham, Melody Guan, Barret Zoph, Quoc Le, and Jeff Dean. Efﬁcient neural architecture search
via parameters sharing. In ICML, 2018."
REFERENCES,0.2714535901926445,Published as a conference paper at ICLR 2022
REFERENCES,0.2732049036777583,"Alo¨ıs Pourchot, Alexis Ducarouge, and Olivier Sigaud. To share or not to share: A comprehensive
appraisal of weight-sharing. arXiv: 2002.04289, 2020."
REFERENCES,0.27495621716287216,"Esteban Real, Alok Aggarwal, Yanping Huang, and Quoc V. Le. Regularized evolution for image
classiﬁer architecture search. In AAAI, 2019."
REFERENCES,0.276707530647986,"Kenneth O. Stanley and Risto Miikkulainen. Evolving neural networks through augmenting topolo-
gies. Evolutionary Computation, 10(2):99–127, 2002."
REFERENCES,0.27845884413309985,"Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed, Dragomir Anguelov, Du-
mitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich. Going deeper with convolutions. In
CVPR, 2015."
REFERENCES,0.28021015761821366,"Mingxing Tan and Quoc Le. EfﬁcientNet: Rethinking model scaling for convolutional neural net-
works. In ICML, 2019."
REFERENCES,0.2819614711033275,"Mingxing Tan, Bo Chen, Ruoming Pang, Vijay Vasudevan, Mark Sandler, Andrew Howard, and
Quoc V. Le. MnasNet: Platform-aware neural architecture search for mobile. In CVPR, 2019."
REFERENCES,0.28371278458844135,Ulrike von Luxburg. A tutorial on spectral clustering. 2007.
REFERENCES,0.28546409807355516,"Bochao Wang, Hang Xu, Jiajin Zhang, Chen Chen, Xiaozhi Fang, Ning Kang, Lanqing Hong, Wei
Zhang, Yong Li, Zhicheng Liu, Zhenguo Li, Wenzhi Liu, and Tong Zhang. Vega: Towards an
end-to-end conﬁgurable automl pipeline, 2020a."
REFERENCES,0.287215411558669,"Ruochen Wang, Xiangning Chen, Minhao Cheng, Xiaocheng Tang, and Cho-Jui Hsieh. RANK-
NOSH: Efﬁcient predictor-based architecture search via non-uniform successive halving.
In
ICCV, 2021a."
REFERENCES,0.28896672504378285,"Ruochen Wang, Minhao Cheng, Xiangning Chen, Xiaocheng Tang, and Cho-Jui Hsieh. Rethinking
Architecture Selection in Differentiable NAS. In ICLR, 2021b."
REFERENCES,0.29071803852889666,"Xiaoxing Wang, Chao Xue, Junchi Yan, Xiaokang Yang, Yonggang Hu, and Kewei Sun. Mergenas:
Merge operations into one for differentiable architecture search. In IJCAI, 2020b."
REFERENCES,0.29246935201401053,"Sirui Xie, Hehui Zheng, Chunxiao Liu, and Liang Lin. SNAS: stochastic neural architecture search.
In ICLR, 2019."
REFERENCES,0.29422066549912435,"Yuhui Xu, Lingxi Xie, Xiaopeng Zhang, Xin Chen, Guo-Jun Qi, Qi Tian, and Hongkai Xiong. PC-
DARTS: Partial channel connections for memory-efﬁcient architecture search. In ICLR, 2020."
REFERENCES,0.29597197898423816,"Yibo Yang, Hongyang Li, Shan You, Fei Wang, Chen Qian, and Zhouchen Lin. Ista-nas: Efﬁcient
and consistent neural architecture search by sparse coding. arXiv: 2010.06176, 2020."
REFERENCES,0.29772329246935203,"Quanming Yao, Ju Xu, Wei-Wei Tu, and Zhanxing Zhu. Efﬁcient neural architecture search via
proximal iterations. In AAAI, 2020."
REFERENCES,0.29947460595446584,"Jiahui Yu, Pengchong Jin, Hanxiao Liu, Gabriel Bender, Pieter-Jan Kindermans, Mingxing Tan,
Thomas Huang, Xiaodan Song, Ruoming Pang, and Quoc Le. BigNAS: Scaling up neural archi-
tecture search with big single-stage models. In ECCV, 2020a."
REFERENCES,0.30122591943957966,"Kaicheng Yu, Christian Sciuto, Martin Jaggi, Claudiu Musat, and Mathieu Salzmann. Evaluating
the search phase of neural architecture search. In ICLR, 2020b."
REFERENCES,0.30297723292469353,"Arber Zela, Thomas Elsken, Tonmoy Saikia, Yassine Marrakchi, Thomas Brox, and Frank Hutter.
Understanding and robustifying differentiable architecture search. In ICLR, 2020."
REFERENCES,0.30472854640980734,"Miao Zhang, Huiqi Li, Shirui Pan, Xiaojun Chang, and Steven Su. Overcoming multi-model forget-
ting in one-shot nas with diversity maximization. In CVPR, 2020a."
REFERENCES,0.3064798598949212,"Xiangyu Zhang, Xinyu Zhou, Mengxiao Lin, and Jian Sun. ShufﬂeNet: An extremely efﬁcient
convolutional neural network for mobile devices. In CVPR, 2018."
REFERENCES,0.30823117338003503,Published as a conference paper at ICLR 2022
REFERENCES,0.30998248686514884,"Yuge Zhang, Zejun Lin, Junyang Jiang, Quanlu Zhang, Yujing Wang, Hui Xue, Chen Zhang,
and Yaming Yang. Deeper insights into weight sharing in neural architecture search. arXiv:
2001.01431, 2020b."
REFERENCES,0.3117338003502627,"Bo Zhao, Konda Reddy Mopuri, and Hakan Bilen. Dataset condensation with gradient matching. In
ICLR, 2021a."
REFERENCES,0.3134851138353765,"Yiyang Zhao, Linnan Wang, Yuandong Tian, Rodrigo Fonseca, and Tian Guo. Few-shot neural
architecture search. In ICML, 2021b."
REFERENCES,0.31523642732049034,"Hongpeng Zhou, Minghao Yang, Jun Wang, and Wei Pan. BayesNAS: A bayesian approach for
neural architecture search. In ICML, 2019."
REFERENCES,0.3169877408056042,"Barret Zoph and Quoc V. Le. Neural architecture search with reinforcement learning. In ICLR,
2017."
REFERENCES,0.318739054290718,"Barret Zoph, Vijay Vasudevan, Jonathon Shlens, and Quoc V. Le. Learning transferable architectures
for scalable image recognition. In CVPR, 2018."
REFERENCES,0.3204903677758319,Published as a conference paper at ICLR 2022
REFERENCES,0.3222416812609457,APPENDIX
REFERENCES,0.3239929947460595,"A
PSEUDOCODE FOR GM-NAS"
REFERENCES,0.3257443082311734,"Algorithm 1 summarizes the main pipeline of the proposed Generalized Supernet Splitting with Gra-
dient Matching (GM-NAS). The pseudocode for our partitioning algorithm is provided separately in
Algorithm 2 for ease of reference. Note that the main difference between GM-NAS and Few-Shot
NAS lies in the supernet splitting phase: Compared with Few-Shot NAS’ exhaustive partitioning,
GM-NAS leverages the well-motivated gradient matching score and the graph min-cut algorithm for
making much more informed splitting decisions."
REFERENCES,0.3274956217162872,"Algorithm 1: Main Pipeline
Input: The set of supernet A = {A}, warmup epochs warm epo for supernet splitting,
number of splits T, Branching factor B per split.
// supernet splitting phase"
REFERENCES,0.329246935201401,1 A = {A0};
REFERENCES,0.3309982486865149,"2 forall t = 1, · · · , T do"
REFERENCES,0.3327495621716287,"3
A′ = {};"
REFERENCES,0.3345008756567426,"4
forall A ∈A do"
REFERENCES,0.3362521891418564,"5
Train A for warm epo epochs;"
REFERENCES,0.3380035026269702,"6
A′
insert
←−−−−GM SPLIT(A, branch factor = B);"
END,0.3397548161120841,"7
end"
END,0.3415061295971979,"8
A = A′;"
END,0.3432574430823117,9 end
END,0.3450087565674256,// search phase
END,0.3467600700525394,10 reinitialize w in A;
END,0.34851138353765326,11 perform architecture search on A using corresponding base methods;
END,0.3502626970227671,"Algorithm 2: Supernet Splitting with Gradient Matching, GM SPLIT(A, B)
Input: Supernet A, Branching factor B"
FORALL UNSPLITTED EDGE E ON A DO,0.3520140105078809,1 forall unsplitted edge e on A do
FORALL OPERATION O ON E DO,0.35376532399299476,"2
forall operation o on e do"
FORALL OPERATION O ON E DO,0.3555166374781086,"3
temporarily enable o while disabling other operations on e;"
FORALL OPERATION O ON E DO,0.3572679509632224,"4
evaluate A’s gradient on other shared edges, averaged over M mini-batches;"
END,0.35901926444833626,"5
end"
END,0.3607705779334501,"6
calculate the gradient matching scores based on Eqn.(2);"
END,0.36252189141856395,"7
compute e’s importance score and operation partition based on Eqn.(3);"
END,0.36427320490367776,8 end
END,0.3660245183887916,9 Select the edge (e∗) with the best importance score to split A on;
END,0.36777583187390545,"10 From e∗, partition A into B sub-supernets {Ab}b=1···B;"
END,0.36952714535901926,11 return {Ab}b=1···B
END,0.3712784588441331,"B
COMPLEMENTARY ANALYSIS"
END,0.37302977232924694,"B.1
WHAT GRADIENT TELLS US ABOUT WHICH OPERATIONS SHOULD (NOT) SHARE
WEIGHTS?"
END,0.37478108581436076,"On NASBench-201, we ﬁnd that gradient matching score always decides to assign conv 1x1 and
conv 3x3 into one partition (sub-supernet), and Skip and AvgPool 3x3 into another. This behavior
is reasonable: High-performing architectures on NASBench-201 usually contains more parametric
operations; And weight-sharing between these high performers and the rest of poor architectures
could be quite harmful to the former. GM-NAS breaks the weight-sharing between high performers
and the rest of the architectures. This has been shown to improve the performance estimation of top
models, leading to better search performance (Zhang et al., 2020b)."
END,0.37653239929947463,Published as a conference paper at ICLR 2022
END,0.37828371278458844,"This is no longer the case on the more complex DARTS Space, where the number of parametric op-
erations is less correlated with the search performance. We observe that three of the four convolution
operations are usually assigned to one group, while the other group consists of three non-parametric
operations and one convolution. And the speciﬁc convolution operation assigned to the second group
varies."
END,0.38003502626970226,"For MobileNet space consisting of structured convolution blocks, we did not observe any particular
patterns in terms of how GM-NAS decides to partition the supernet. Still, the superior performance
of GM-NAS over Few-Shot NAS and One-Shot NAS in Table 5 demonstrates that GM-NAS can
make effective partitioning decisions on this search space."
END,0.38178633975481613,"B.2
MORE DETAILS ON THE PRELIMINARY EXPERIMENT IN TABLE 2"
END,0.38353765323992994,"We provide further details for the experiment in Table 2. Given a target architecture A, we construct
Asim (and Adissim) by changing the operation on a randomly selected edge of A to another opera-
tion so that the cosine similarity between gradients computed from A and from Asim (Adissim) at
shared weight are large (small). Concretely, cos(∇wsL(A; ws), ∇wsL(Asim; ws)) > 0.7 for Asim
and cos(∇wsL(A; ws), ∇wsL(Adissim; ws)) < 0.3 for Adissim, where ws is their shared weight.
Note that the gradient similarities are computed by averaging over 100 mini-batches after updating
A together with Asim (or Adissim) for 2 epochs, in order to obtain a more accurate estimation. We
then record and compare the training losses of A when 1) it is updated together with Asim and 2)
it is updated together with Adissim for 20 epochs. The above process is repeated for 50 randomly
sampled A, and the mean training losses and gradient similarities are reported in Table 2. As ex-
pected, the training loss of A is much lower in case (1) when A shares weights with Asim, since the
training dynamics of A and Asim are similar at the shared weight."
END,0.38528896672504376,"B.3
ABLATION STUDIES ON GRAPH CUT ALGORITHMS"
END,0.38704028021015763,"For all experiments in the main text, we adopt a simple graph cut algorithm with an explicit con-
straint for edge/layer partitioning. Notably, the constraint term in Eqn.(3) indicates that the opera-
tions are divided into roughly balanced groups. This corresponds to the balancing or normalization
factor in more complex graph clustering algorithms such as Ncut (von Luxburg, 2007). We do
not use unconstrained graph min-cut algorithms because they tend to degenerate to trivial solutions
where the algorithm simply splits one node from the rest (von Luxburg, 2007). Another reason for
adopting this constraint in NAS is that we want the sub-supernets to be more balanced, as they will
later be trained under identical settings. We also experiment with advanced clustering algorithms
such as Ncut, but ﬁnd that they mostly produce identical cuts to the algorithm described in Eqn.(3).
We conjecture that it is because empirically the gradient matching scores often lead to distinguish-
able clusters, making the result insensitive to the choice of cut algorithms."
END,0.38879159369527144,"C
SUPERNET SELECTION"
END,0.3905429071803853,"In this section, we address the problem of deriving the ﬁnal architecture from the set of partitioned
sub-supernets, which we term Supernet Selection. Recall that Few-Shot NAS (and our method) splits
the supernets into N sub-supernets, and then performs architecture search over these sub-supernets
by training them independently from scratch before deriving a single ﬁnal architecture from them."
END,0.3922942206654991,"Few-Shot NAS argues that the architecture selected from the sub-supernet with the lowest validation
loss is typically the best among architectures derived from all sub-supernets. However, empirically
we ﬁnd that this is often not the case, especially on irregular search spaces like the cell-based DARTS
Space. As shown in Table 8, for Few-Shot NAS, the architecture selected from the sub-supernet
with lowest validation loss (or accuracy) does not match the top architecture from all sub-supernets
(”max” entry in the Table). This result aligns with previous ﬁndings that the supernet’s performance
is unrelated to the ﬁnal subnetwork accuracy (Li et al., 2020a). There could be multiple potential
reasons for this behavior. For example, the sub-supernet that hosts the top child architecture might
also contain many mediocre architectures, so the performance of this sub-supernet as a whole might
not necessarily top other sub-supernets. Moreover, after the supernet splitting phase, architecture
search is performed on these sub-supernets independently, so their performance are also subject to
randomness in the search phase."
END,0.39404553415061294,Published as a conference paper at ICLR 2022
END,0.3957968476357268,"One could always evaluate each architecture derived from N sub-supernets and pick the best one out
of them, which leads to extra overhead as N increases. To solve this, we propose to adopt Successive
Halving (Karnin et al., 2013; Jamieson & Talwalkar, 2016; Li et al., 2019b) to reduce the supernet
selection cost. Successive Halving progressively discards half of the poor architectures following
a predeﬁned schedule, and stops until only one candidate is left. For DARTS Space, we set the
schedule to (30, 100, 600), so that the overhead of retraining N = 8 architectures is only 2.5× that
of retraining a single architecture (30 ∗8 + 70 ∗4 + 500 ∗2 = 1520 epochs). Empirically, we
ﬁnd that varying this schedule has a negligible effect on the recall of successive halving schedules,
which aligns with previous discoveries on other NAS search spaces (Wang et al., 2021a). As shown
in Table 8, successive halving produces essentially the same results for all methods. We summarize
the detailed successive halving procedure in Algorithm. 3."
END,0.3975481611208406,"Note that we only perform successive halving for the DARTS Space; and we apply it to both GM-
NAS and Few-Shot NAS for fair comparisons. For MobileNet Space, we follow Few-Shot NAS and
use the validation loss for supernet selection, as it produces good enough results and speedup the
experiments."
END,0.39929947460595444,"Table 8: Performance comparison among derived child networks using different supernet selection
criteria in Few-Shot NAS and GM-NAS"
END,0.4010507880910683,"Method
Supernet selection criterion
Test Error(%)
Best
Avg"
END,0.4028021015761821,Few-Shot DARTS (1st)
END,0.404553415061296,"validation accuracy
2.74
2.88±0.15
validation loss
2.53
2.73±0.21
max
2.48
2.60±0.10
successive halving
2.48
2.60±0.10
validation accuracy
2.45
2.73±0.17
validation loss
2.45
2.68±0.17
max
2.35
2.46±0.07
GM-DARTS (1st)"
END,0.4063047285464098,"successive halving
2.35
2.46±0.07"
END,0.4080560420315236,Few-Shot DARTS (2nd)
END,0.4098073555166375,"validation accuracy
2.83
3.00±0.16
validation loss
3.25
3.42±0.11
max
2.58
2.63±0.06
successive halving
2.58
2.63±0.06
validation accuracy
2.57
2.68±0.11
validation loss
2.59
2.68±0.08
max
2.40
2.49±0.08
GM-DARTS (2nd)"
END,0.4115586690017513,"successive halving
2.40
2.49±0.08"
END,0.4133099824868651,Few-Shot SNAS
END,0.415061295971979,"validation accuracy
2.49
3.15±0.24
validation loss
2.88
3.32±0.34
max
2.62
2.70±0.05
successive halving
2.62
2.70±0.05
validation accuracy
2.49
2.70±0.17
validation loss
2.49
2.72±0.20
max
2.34
2.55±0.16
GM-SNAS"
END,0.4168126094570928,"successive halving
2.34
2.55±0.17"
END,0.4185639229422067,Published as a conference paper at ICLR 2022
END,0.4203152364273205,"Algorithm 3: Supernet Selection via Successive Halving
Input: A candidate pool |P| with N child networks derived from N sub-supernets, checkpoint
schedules ckpts = {epo1, epo2, ..., epoT }
Result: a single network from P"
END,0.4220665499124343,1 epoch epo = 1;
END,0.4238178633975482,2 while |P| > 1 do
TRAIN EACH NETWORK IN P FOR ONE EPOCH,0.425569176882662,"3
train each network in P for one epoch"
TRAIN EACH NETWORK IN P FOR ONE EPOCH,0.4273204903677758,"4
epo += 1;"
TRAIN EACH NETWORK IN P FOR ONE EPOCH,0.4290718038528897,"5
if epo ∈ckpts then"
TRAIN EACH NETWORK IN P FOR ONE EPOCH,0.4308231173380035,"6
calculate the validation accuracy for each network in P;"
TRAIN EACH NETWORK IN P FOR ONE EPOCH,0.43257443082311736,"7
discard the bottom half of networks from P based on their validation accuracy;"
END,0.4343257443082312,8 end
END,0.436077057793345,9 return the architecture left in P;
END,0.43782837127845886,"D
IMPLEMENTATION DETAILS"
END,0.4395796847635727,"D.1
NASBENCH-201"
END,0.4413309982486865,"For experiments in Section 4.1, we set the warmup epoch to 15 for DARTS and SNAS, and 20 for
RSPS as its single path nature requires longer training (Zhang et al., 2020a). We then perform
architecture search on each sub-supernet for 30 epochs (50 for RSPS) following the same protocol
of the corresponding base algorithms. The search is conducted on three datasets separately for four
random seeds. For all methods, we select the best architecture from the sub-supernets as the ﬁnal
architecture."
END,0.44308231173380036,"D.2
DARTS SPACE"
END,0.4448336252189142,"Supernet Partition
During the supernet (with 8 cells) splitting phase, we set the warmup epoch
to 2, the number of splits to 3, and the branching factor to 2. After the supernet splitting phase is
ﬁnished, we conduct architecture search on the generated sub-supernets for 15 epochs. This way,
the total number of epochs is 2 ∗1 + 2 ∗2 + 2 ∗4 + 15 ∗8 = 134, similar to Few-Shot NAS (train
each of the 7 sub-supernets for 20-25 epochs according to the author)."
END,0.44658493870402804,"Supernet Selection
After searching architectures on each sub-supernet, we apply the successive
halving (Appendix C) to select the top-performed child network derived from eight sub-supernets."
END,0.44833625218914186,"Retraining settings (architecture evaluation)
To establish a fair comparison with prior arts, we
strictly follow the retrain settings of DARTS (Liu et al., 2019) to evaluate the searched architecture.
Concretely, we stack 20 cells to compose the ﬁnal derived architecture and set the initial channel
number as 36. The derived architecture is trained from scratch with a batch size 96 for 600 epochs.
We use SGD with an initial learning rate of 0.0025, a momentum of 0.9, and a weight decay of
3 × 10−4, and a cosine learning rate scheduler. In addition, we also deploy the cutout regularization
with length 16, drop-path with probability 0.3, and an auxiliary tower of weight 0.4."
END,0.4500875656742557,"Reproducing Few-Shot NAS Baseline
Since Few-Shot NAS does not release its search code for
the DARTS Space, we follow the search settings in the original Few-Shot NAS paper to reproduce
its result: We randomly select one edge and split the supernet into 7 sub-supernets, and conduct
architecture search on each sub-supernet for 20 epochs. For a fair comparison with GM-NAS, we
also use the successive halving (Appendix C) to select the best architecture from these sub-supernets.
The reproduced results we obtain for Few-Shot DARTS is 2.48% (the best column in Table 4). This
is worse than the one reported in Few-Shot NAS (2.31%) because Few-Shot NAS uses its own
retraining protocol to train and evaluate their search architecture, rather than the DARTS’ protocol
widely adopted by previous methods (conﬁrmed with the author). Evaluating their released best
architecture under DARTS protocol results in 2.44% test error, similar to our reproduced result
(2.48%). Nonetheless, GM DARTS achieves 2.35% error rate on DARTS, substantially lower than
both of these numbers."
END,0.45183887915936954,Published as a conference paper at ICLR 2022
END,0.45359019264448336,"D.3
MOBILENET"
END,0.4553415061295972,"GM ProxylessNAS / OFA
For both ProxylessNAS and OFA, we set the warmup epoch of GM-
NAS to 40. We perform split the supernet twice in total, and set the branching factor to 2 for the ﬁrst
split and 3 for the second split, so that the resulting number of sub-supernets match that of Few-shot
NAS. After the supernet partitioning phase, for GM ProxylessNAS, we use the same search settings
as ProxylessNAS, except for setting the number of search epochs to 40; For GM OFA, we also
follow the same search settings as the original paper."
END,0.45709281961471104,"Supernet Selection
As mentioned in Appendix C, for Mobilenet Space, we select the sub-supernet
with the lowest validation loss and derive the best architecture from this supernet, same as Few-Shot
NAS."
END,0.45884413309982486,"Retraining settings (architecture evaluation)
For ProxylessNAS, we follow the settings of Few-
Shot ProxylessNAS (Zhao et al., 2021b; Cai et al., 2019) to train our discovered architecture. Since
the architecture evaluation codes for OFA (ﬁnetune) and Few-Shot OFA (retrain) are not released,
we also use the setting of Few-Shot ProxylessNAS to train and evaluate the derived architecture of
OFA (reproduced), Few-Shot OFA (reproduced), and GM-OFA."
END,0.46059544658493873,"Reproducing OFA and Few-Shot OFA baseline
OFA (Cai et al., 2020) does not release the
predictor training and child network ﬁnetune code. So we follow the settings of Few-Shot Proxy-
lessNAS to reproduce the OFA result. Our reproduced accuracy is 79.7%, comparable to the one
(80.0%) reported in the OFA paper."
END,0.46234676007005254,"Few-Shot NAS (Zhao et al., 2021b) also does not release their code and the searched architectures
on OFA. We try our best to reproduce their result by communicating with the author, but are still
not able to reproduce the reported 80.5% accuracy on ImageNet. One potential reason could be that
Few-Shot NAS uses an unreleased powerful teacher network to train the derived architectures. Since
we could not obtain this teacher network, we follow the Few-Shot ProxylessNAS setting described
above to train and evaluate searched architectures for OFA, Few-Shot OFA, and our methods with
the teacher model released in Wang et al. (2020a). The reproduced numbers are reported in Table 5."
END,0.46409807355516636,"E
SEARCHED ARCHITECTURES"
END,0.4658493870402802,c_{k-2}
END,0.46760070052539404,"0
sep_conv_3x3"
END,0.46935201401050786,"1
sep_conv_5x5"
END,0.4711033274956217,"3
skip_connect"
END,0.47285464098073554,c_{k-1}
END,0.4746059544658494,sep_conv_5x5
END,0.4763572679509632,dil_conv_3x3
END,0.47810858143607704,sep_conv_3x3
END,0.4798598949211909,"2
sep_conv_5x5"
END,0.4816112084063047,"c_{k}
dil_conv_5x5"
END,0.48336252189141854,(a) Normal Cell
END,0.4851138353765324,c_{k-2} 0
END,0.4868651488616462,max_pool_3x3
END,0.4886164623467601,"1
max_pool_3x3"
END,0.4903677758318739,"2
max_pool_3x3"
END,0.4921190893169877,"c_{k-1}
sep_conv_5x5"
END,0.4938704028021016,"skip_connect
c_{k}"
END,0.4956217162872154,sep_conv_5x5
END,0.4973730297723292,"3
sep_conv_5x5"
END,0.4991243432574431,sep_conv_5x5
END,0.500875656742557,"(b) Reduction Cell
Figure 3: Normal and Reduction cells discovered by GM-DARTS (1st, seed 0) on CIFAR-10 on
DARTS Space"
END,0.5026269702276708,Published as a conference paper at ICLR 2022
END,0.5043782837127846,c_{k-2} 0
END,0.5061295971978984,sep_conv_3x3
END,0.5078809106830122,"3
skip_connect"
END,0.5096322241681261,"c_{k-1}
sep_conv_5x5"
END,0.51138353765324,"1
sep_conv_3x3"
END,0.5131348511383538,sep_conv_3x3
END,0.5148861646234676,sep_conv_5x5
END,0.5166374781085814,"2
sep_conv_3x3 c_{k}"
END,0.5183887915936952,dil_conv_5x5
END,0.5201401050788091,(a) Normal Cell
END,0.521891418563923,c_{k-2} 0
END,0.5236427320490368,max_pool_3x3
END,0.5253940455341506,"1
max_pool_3x3"
END,0.5271453590192644,"2
max_pool_3x3 3"
END,0.5288966725043783,max_pool_3x3
END,0.5306479859894921,c_{k-1}
END,0.532399299474606,max_pool_3x3
END,0.5341506129597198,max_pool_3x3
END,0.5359019264448336,skip_connect c_{k}
END,0.5376532399299475,skip_connect
END,0.5394045534150613,"(b) Reduction Cell
Figure 4: Normal and Reduction cells discovered by GM-DARTS (1st, seed 1) on CIFAR-10 on
DARTS Space"
END,0.5411558669001751,c_{k-2} 0
END,0.542907180385289,"sep_conv_3x3
3"
END,0.5446584938704028,skip_connect
END,0.5464098073555166,c_{k-1}
END,0.5481611208406305,sep_conv_3x3
END,0.5499124343257443,"1
sep_conv_5x5"
END,0.5516637478108581,"2
sep_conv_3x3"
END,0.553415061295972,dil_conv_3x3
END,0.5551663747810858,dil_conv_3x3 c_{k}
END,0.5569176882661997,dil_conv_5x5
END,0.5586690017513135,(a) Normal Cell
END,0.5604203152364273,c_{k-2} 0
END,0.5621716287215411,max_pool_3x3
END,0.563922942206655,"1
sep_conv_3x3"
END,0.5656742556917689,"c_{k-1}
max_pool_3x3"
END,0.5674255691768827,"2
skip_connect"
END,0.5691768826619965,"dil_conv_5x5
c_{k}"
END,0.5709281961471103,dil_conv_3x3
END,0.5726795096322241,"3
sep_conv_5x5"
END,0.574430823117338,dil_conv_5x5
END,0.5761821366024519,"(b) Reduction Cell
Figure 5: Normal and Reduction cells discovered by GM-DARTS (1st, seed 2) on CIFAR-10 on
DARTS Space"
END,0.5779334500875657,c_{k-2} 0
END,0.5796847635726795,sep_conv_3x3
END,0.5814360770577933,"1
sep_conv_3x3"
END,0.5831873905429071,"c_{k-1}
sep_conv_5x5"
END,0.5849387040280211,"2
sep_conv_3x3 3"
END,0.5866900175131349,sep_conv_5x5
END,0.5884413309982487,sep_conv_3x3
END,0.5901926444833625,dil_conv_3x3 c_{k}
END,0.5919439579684763,dil_conv_3x3
END,0.5936952714535902,(a) Normal Cell
END,0.5954465849387041,c_{k-2} 0
END,0.5971978984238179,max_pool_3x3 1
END,0.5989492119089317,max_pool_3x3 2
END,0.6007005253940455,max_pool_3x3 3
END,0.6024518388791593,max_pool_3x3
END,0.6042031523642732,c_{k-1}
END,0.6059544658493871,sep_conv_5x5
END,0.6077057793345009,dil_conv_5x5
END,0.6094570928196147,skip_connect
END,0.6112084063047285,dil_conv_3x3 c_{k}
END,0.6129597197898424,"(b) Reduction Cell
Figure 6: Normal and Reduction cells discovered by GM-DARTS (1st, seed 3) on CIFAR-10 on
DARTS Space"
END,0.6147110332749562,c_{k-2} 0
END,0.6164623467600701,sep_conv_3x3 1
END,0.6182136602451839,sep_conv_3x3 3
END,0.6199649737302977,skip_connect
END,0.6217162872154116,c_{k-1}
END,0.6234676007005254,sep_conv_5x5
END,0.6252189141856392,sep_conv_3x3
END,0.626970227670753,"2
skip_connect"
END,0.6287215411558669,sep_conv_3x3 c_{k}
END,0.6304728546409807,dil_conv_5x5
END,0.6322241681260946,(a) Normal Cell
END,0.6339754816112084,c_{k-2} 0
END,0.6357267950963222,max_pool_3x3
END,0.637478108581436,"1
max_pool_3x3"
END,0.6392294220665499,"c_{k-1}
max_pool_3x3"
END,0.6409807355516638,skip_connect
END,0.6427320490367776,"2
skip_connect
c_{k}
dil_conv_5x5
3"
END,0.6444833625218914,dil_conv_5x5
END,0.6462346760070052,dil_conv_5x5
END,0.647985989492119,"(b) Reduction Cell
Figure 7: Normal and Reduction cells discovered by GM-DARTS (2nd, seed 0) on CIFAR-10 on
DARTS Space"
END,0.649737302977233,Published as a conference paper at ICLR 2022
END,0.6514886164623468,c_{k-2} 0
END,0.6532399299474606,sep_conv_3x3
END,0.6549912434325744,"1
sep_conv_3x3 2"
END,0.6567425569176882,sep_conv_5x5
END,0.658493870402802,"3
skip_connect"
END,0.660245183887916,c_{k-1}
END,0.6619964973730298,sep_conv_3x3
END,0.6637478108581436,sep_conv_3x3
END,0.6654991243432574,dil_conv_3x3
END,0.6672504378283712,"c_{k}
dil_conv_5x5"
END,0.6690017513134852,(a) Normal Cell
END,0.670753064798599,"c_{k-2}
0
max_pool_3x3 1"
END,0.6725043782837128,sep_conv_3x3
END,0.6742556917688266,c_{k-1}
END,0.6760070052539404,max_pool_3x3
END,0.6777583187390543,max_pool_3x3 2
END,0.6795096322241682,max_pool_3x3 3
END,0.681260945709282,max_pool_3x3
END,0.6830122591943958,"c_{k}
skip_connect"
END,0.6847635726795096,skip_connect
END,0.6865148861646234,"(b) Reduction Cell
Figure 8: Normal and Reduction cells discovered by GM-DARTS (2nd, seed 1) on CIFAR-10 on
DARTS Space"
END,0.6882661996497373,c_{k-2} 0
END,0.6900175131348512,sep_conv_3x3
END,0.691768826619965,"3
skip_connect"
END,0.6935201401050788,"c_{k-1}
sep_conv_3x3
1"
END,0.6952714535901926,sep_conv_3x3 2
END,0.6970227670753065,sep_conv_3x3
END,0.6987740805604203,dil_conv_3x3
END,0.7005253940455342,dil_conv_5x5
END,0.702276707530648,dil_conv_5x5 c_{k}
END,0.7040280210157618,(a) Normal Cell
END,0.7057793345008757,c_{k-2} 0
END,0.7075306479859895,max_pool_3x3
END,0.7092819614711033,"1
max_pool_3x3"
END,0.7110332749562172,c_{k-1}
END,0.712784588441331,sep_conv_5x5
END,0.7145359019264448,skip_connect
END,0.7162872154115587,"2
skip_connect"
END,0.7180385288966725,"3
skip_connect c_{k}"
END,0.7197898423817863,skip_connect
END,0.7215411558669002,sep_conv_5x5
END,0.723292469352014,"(b) Reduction Cell
Figure 9: Normal and Reduction cells discovered by GM-DARTS (2nd, seed 2) on CIFAR-10 on
DARTS Space"
END,0.7250437828371279,c_{k-2}
END,0.7267950963222417,"0
sep_conv_3x3"
END,0.7285464098073555,"1
sep_conv_3x3"
END,0.7302977232924693,"3
skip_connect"
END,0.7320490367775832,c_{k-1}
END,0.7338003502626971,sep_conv_3x3
END,0.7355516637478109,dil_conv_3x3
END,0.7373029772329247,sep_conv_3x3
END,0.7390542907180385,"2
dil_conv_5x5"
END,0.7408056042031523,"c_{k}
dil_conv_5x5"
END,0.7425569176882661,(a) Normal Cell
END,0.7443082311733801,c_{k-2} 0
END,0.7460595446584939,max_pool_3x3 1
END,0.7478108581436077,max_pool_3x3 2
END,0.7495621716287215,max_pool_3x3
END,0.7513134851138353,"c_{k-1}
max_pool_3x3
skip_connect"
END,0.7530647985989493,skip_connect
END,0.7548161120840631,"3
skip_connect"
END,0.7565674255691769,"c_{k}
skip_connect"
END,0.7583187390542907,"(b) Reduction Cell
Figure 10: Normal and Reduction cells discovered by GM-DARTS (2nd, seed 3) on CIFAR-10 on
DARTS Space"
END,0.7600700525394045,Published as a conference paper at ICLR 2022
END,0.7618213660245184,c_{k-2} 0
END,0.7635726795096323,sep_conv_5x5
END,0.7653239929947461,"1
sep_conv_5x5"
END,0.7670753064798599,"c_{k-1}
sep_conv_5x5"
END,0.7688266199649737,"2
sep_conv_5x5 3"
END,0.7705779334500875,sep_conv_5x5
END,0.7723292469352014,sep_conv_5x5
END,0.7740805604203153,dil_conv_5x5 c_{k}
END,0.7758318739054291,sep_conv_5x5
END,0.7775831873905429,(a) Normal Cell
END,0.7793345008756567,c_{k-2} 0
END,0.7810858143607706,max_pool_3x3
END,0.7828371278458844,"1
max_pool_3x3 2"
END,0.7845884413309983,"max_pool_3x3
3"
END,0.7863397548161121,max_pool_3x3
END,0.7880910683012259,c_{k-1}
END,0.7898423817863398,sep_conv_5x5
END,0.7915936952714536,max_pool_3x3
END,0.7933450087565674,max_pool_3x3
END,0.7950963222416813,max_pool_3x3 c_{k}
END,0.7968476357267951,"(b) Reduction Cell
Figure 11: Normal and Reduction cells discovered by GM-SNAS (seed 0) on CIFAR-10 on DARTS
Space"
END,0.7985989492119089,c_{k-2} 0
END,0.8003502626970228,"sep_conv_3x3
3"
END,0.8021015761821366,skip_connect
END,0.8038528896672504,c_{k-1}
END,0.8056042031523643,sep_conv_3x3
END,0.8073555166374781,"1
sep_conv_3x3"
END,0.809106830122592,"2
sep_conv_5x5"
END,0.8108581436077058,sep_conv_3x3
END,0.8126094570928196,sep_conv_3x3 c_{k}
END,0.8143607705779334,sep_conv_3x3
END,0.8161120840630472,(a) Normal Cell
END,0.8178633975481612,"c_{k-2}
0
max_pool_3x3"
END,0.819614711033275,"1
max_pool_3x3 2"
END,0.8213660245183888,max_pool_3x3
END,0.8231173380035026,c_{k-1}
END,0.8248686514886164,skip_connect
END,0.8266199649737302,skip_connect
END,0.8283712784588442,sep_conv_5x5
END,0.830122591943958,"3
skip_connect c_{k}"
END,0.8318739054290718,dil_conv_3x3
END,0.8336252189141856,"(b) Reduction Cell
Figure 12: Normal and Reduction cells discovered by GM-SNAS (seed 1) on CIFAR-10 on DARTS
Space"
END,0.8353765323992994,c_{k-2} 0
END,0.8371278458844134,skip_connect
END,0.8388791593695272,"c_{k-1}
sep_conv_3x3"
END,0.840630472854641,"1
sep_conv_3x3"
END,0.8423817863397548,"3
sep_conv_3x3"
END,0.8441330998248686,dil_conv_3x3
END,0.8458844133099825,"2
sep_conv_3x3"
END,0.8476357267950964,skip_connect c_{k}
END,0.8493870402802102,dil_conv_3x3
END,0.851138353765324,(a) Normal Cell
END,0.8528896672504378,c_{k-2} 0
END,0.8546409807355516,skip_connect
END,0.8563922942206655,"c_{k-1}
sep_conv_3x3"
END,0.8581436077057794,"1
sep_conv_3x3"
END,0.8598949211908932,"3
sep_conv_3x3"
END,0.861646234676007,dil_conv_3x3
END,0.8633975481611208,"2
sep_conv_3x3"
END,0.8651488616462347,skip_connect c_{k}
END,0.8669001751313485,dil_conv_3x3
END,0.8686514886164624,"(b) Reduction Cell
Figure 13: Normal and Reduction cells discovered by GM-SNAS (seed 2) on CIFAR-10 on DARTS
Space"
END,0.8704028021015762,c_{k-2} 0
END,0.87215411558669,"sep_conv_3x3
3"
END,0.8739054290718039,skip_connect
END,0.8756567425569177,c_{k-1}
END,0.8774080560420315,sep_conv_5x5
END,0.8791593695271454,"1
sep_conv_3x3"
END,0.8809106830122592,"2
sep_conv_3x3"
END,0.882661996497373,sep_conv_3x3
END,0.8844133099824869,dil_conv_3x3 c_{k}
END,0.8861646234676007,dil_conv_5x5
END,0.8879159369527145,(a) Normal Cell
END,0.8896672504378283,c_{k-2} 0
END,0.8914185639229422,max_pool_3x3 1
END,0.8931698774080561,max_pool_3x3
END,0.8949211908931699,"c_{k-1}
sep_conv_3x3
skip_connect"
END,0.8966725043782837,"2
skip_connect"
END,0.8984238178633975,"3
skip_connect c_{k}"
END,0.9001751313485113,dil_conv_5x5
END,0.9019264448336253,dil_conv_3x3
END,0.9036777583187391,"(b) Reduction Cell
Figure 14: Normal and Reduction cells discovered by GM-SNAS (seed 3) on CIFAR-10 on DARTS
Space"
END,0.9054290718038529,Published as a conference paper at ICLR 2022
END,0.9071803852889667,MB6 7X7
END,0.9089316987740805,MB6 5X5
END,0.9106830122591943,MB6 5X5
END,0.9124343257443083,MB6 5X5
END,0.9141856392294221,MB6 7X7
END,0.9159369527145359,MB6 5X5
END,0.9176882661996497,MB6 3X3
END,0.9194395796847635,MB6 5X5
END,0.9211908931698775,MB6 7X7
END,0.9229422066549913,MB6 3X3
END,0.9246935201401051,MB6 5X5
END,0.9264448336252189,MB6 3X3
END,0.9281961471103327,MB6 5X5
END,0.9299474605954466,MB6 3X3
END,0.9316987740805605,MB6 3X3
END,0.9334500875656743,MB6 3X3
END,0.9352014010507881,MB6 7X7
END,0.9369527145359019,MB6 7X7
END,0.9387040280210157,MB6 7X7
END,0.9404553415061296,MB6 7X7
END,0.9422066549912435,MB6 3X3
END,0.9439579684763573,MB1 3X3
END,0.9457092819614711,Conv 3X3
END,0.9474605954465849,Figure 15: Architecture discovered by GM-ProxylessNAS on ImageNet on MobileNet Space
END,0.9492119089316988,MB4 7x7
END,0.9509632224168126,MB6 7x7
END,0.9527145359019265,MB3 5x5
END,0.9544658493870403,MB3 3x3
END,0.9562171628721541,MB3 5x5
END,0.957968476357268,MB4 3x3
END,0.9597197898423818,MB4 3x3
END,0.9614711033274956,MB4 5x5
END,0.9632224168126094,MB6 3x3
END,0.9649737302977233,MB6 3X3
END,0.9667250437828371,MB6 7x7
END,0.968476357267951,MB4 7x7
END,0.9702276707530648,MB4 7x7
END,0.9719789842381786,MB6 3x3
END,0.9737302977232924,MB4 3x3
END,0.9754816112084063,MB6 3x3
END,0.9772329246935202,MB6 3x3
END,0.978984238178634,MB6 7x7
END,0.9807355516637478,MB6 3x3
END,0.9824868651488616,MB4 3x3
END,0.9842381786339754,MB1 3x3
END,0.9859894921190894,Conv 3x3
END,0.9877408056042032,Figure 16: Architecture discovered by GM-OFA (Large) on ImageNet on MobileNet Space
END,0.989492119089317,Published as a conference paper at ICLR 2022
END,0.9912434325744308,"F
ABLATION STUDY ON THE NUMBER OF SPLITS"
END,0.9929947460595446,"We conducted extra ablation study on how the number of splits affect the search outcome of the
proposed method using NASBench-201 and CIFAR-10. As showing in Figure 17, GM+DARTS
reaches a near oracle search performance with only two splits. Splitting one more time pushes the
performance further, but may not worth the extra search cost."
END,0.9947460595446584,"Figure 17: Search performance of GM+DARTS on NASBench-201 and CIFAR-10 under different
number of splits T. GM-NAS reaches near oracle performance with T = 2. Increasing T further
brings diminishing return w.r.t. the search cost. All experiments are repeated with four random
seeds.
Further ablation study was also conducted in OFA by adding more search budget to GM+OFA on
the ImageNet task. We select three layers (T = 3) to perform the supernet partitioning, and divide
the operations on each selected edge into two groups (B = 2). As shown in Tab. 9, this improves
GM+OFA further, leading to a test error of 19.4%, which is 0.9% better than OFA and 0.8% better
than Few-Shot OFA."
END,0.9964973730297724,Table 9: Search performance of GM-OFA on ImageNet by adding more search budget
END,0.9982486865148862,"Method
Top-1 Test Error(%)
Improvement over OFA baseline
OFA (reproduced)
20.3
-
Few-Shot OFA (reproduced)
20.2
0.1%
GM OFA (ours)
19.7
0.6%
GM OFA w/ more search budget (ours)
19.4
0.9%"
