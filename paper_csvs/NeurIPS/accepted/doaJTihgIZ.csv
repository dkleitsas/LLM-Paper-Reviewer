Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,Abstract
ABSTRACT,0.002364066193853428,"The ability of a brain or a neural network to efficiently learn depends crucially
on both the task structure and the learning rule. Previous works have analyzed
the dynamical equations describing learning in the relatively simplified context of
the perceptron under assumptions of a student-teacher framework or a linearized
output. While these assumptions have facilitated theoretical understanding, they
have precluded a detailed understanding of the roles of the nonlinearity and input-
data distribution in determining the learning dynamics, limiting the applicability
of the theories to real biological or artificial neural networks. Here, we use a
stochastic-process approach to derive flow equations describing learning, applying
this framework to the case of a nonlinear perceptron performing binary classifica-
tion. We characterize the effects of the learning rule (supervised or reinforcement
learning, SL/RL) and input-data distribution on the perceptron’s learning curve and
the forgetting curve as subsequent tasks are learned. In particular, we find that the
input-data noise differently affects the learning speed under SL vs. RL, as well as
determines how quickly learning of a task is overwritten by subsequent learning.
Additionally, we verify our approach with real data using the MNIST dataset. This
approach points a way toward analyzing learning dynamics for more-complex
circuit architectures."
ABSTRACT,0.004728132387706856,Introduction
ABSTRACT,0.0070921985815602835,"Learning, which is typically implemented in both biological and artificial neural networks with
iterative update rules that are noisy due to the noisiness of input data and possibly of the update
rule itself, is characterized by stochastic dynamics. Understanding these dynamics and how they
are affected by task structure, learning rule, and neural-circuit architecture is an important goal for
designing efficient artificial neural networks (ANNs), as well as for gaining insight into the means by
which the brain’s neural circuits implement learning."
ABSTRACT,0.009456264775413711,"As a step toward developing a full mathematical characterization of the dynamics of learning for
multilayer ANNs solving complex tasks, recent work has made progress by making simplifying
assumptions about the task structure and/or neural-circuit architecture. One fruitful approach has
been to study learning dynamics in what is perhaps the simplest non-trivial ANN architecture: the
individual perceptron. Even with this simplification, however, fully characterizing the mathematics
of learning has been challenging for complex tasks, and further simplifications have been required. A
B
C"
ABSTRACT,0.01182033096926714,"Figure 1: Learning dynamics in the nonlinear perceptron. A: The perceptron, parametrized by
weights w, maps an input x to the output ˆy. B: The inputs are drawn from two multivariate normal
distributions with labels y = ±1. The weight vector w is orthogonal to the classification boundary.
C: Due to the stochasticity inherent in the update equations, the weights are described by the flow of
a probability distribution in weight space."
ABSTRACT,0.014184397163120567,"One approach has been to analyze learning in the student-teacher framework [Gardner and Derrida,
1989, Seung et al., 1992], in which a student perceptron learns to produce an input-to-output mapping
that approximates that of a teacher perceptron. This has led to insights about the differences in
learning dynamics between different types of learning rules (e.g., supervised and reinforcement
learning) [Werfel et al., 2003, Züge et al., 2023, Patel et al., 2023]. Such insights are highly relevant
for neuroscience, where a longstanding goal has been to infer the learning mechanisms that are used
in the brain [Lim et al., 2015, Nayebi et al., 2020, Portes et al., 2022, Humphreys et al., 2022, Mehta
et al., 2023, Payeur et al., 2023]. However, by construction, the student-teacher setup in the perceptron
only applies to input-output mappings that are linearly separable, which is seldom the case in practice.
Another approach has been to study learning dynamics in the linearized perceptron [Werfel et al.,
2003, Mignacco et al., 2020, Bordelon and Pehlevan, 2022], which enables exact solutions even for
structured input data distributions that are not linearly separable. However, the dynamics of learning
in nonlinear neural networks—even very simple ones—performing classification tasks are not fully
understood. Further, whether and how the dynamics of learning might differ under different learning
rules in such settings has not been investigated."
ABSTRACT,0.016548463356973995,"Here, we take a stochastic-process approach (similar to Yaida [2018] and Murray and Escola [2020])
to derive flow equations describing learning in the finite-dimensional nonlinear perceptron trained
in a binary classification task (Fig. 1). These results are compared for two different online learning
rules: supervised learning (SL, which corresponds to logistic regression) and reinforcement learning
(RL). We characterize the effects of the input-data distribution on the learning curve, finding that, for
SL but not for RL, noise along the coding direction slows down learning, while noise orthogonal to
the coding direction speeds up learning. In addition, we verify our approach by training a nonlinear
perceptron on the MNIST dataset. Finally, applying the approach to continual learning, we quantify
how the input noise and learning rule affect the rate at which old classifications are forgotten as new
ones are learned. Together, these results establish the validity of the approach in a simplified context
and provide a path toward analyzing learning dynamics for more-complex tasks and architectures."
ABSTRACT,0.018912529550827423,Stochastic-process approach for describing weight evolution
ABSTRACT,0.02127659574468085,We consider a general iterative update rule of the form
ABSTRACT,0.02364066193853428,"wt+δt
i
−wt
i = ηfi(wt),
(1)"
ABSTRACT,0.026004728132387706,"where wt ∈Rn for arbitrary n > 0, and η is the learning rate. The stochastic update term fi on the
right-hand side is drawn from a probability distribution—it depends on the weights themselves, as
well as the input to the network and, potentially, output noise. Starting from this update equation,
our goal is to derive an expression characterizing the evolution of the probability distribution of the
weights, p(w, t) (cf. Fig. 1C). We assume that fi(w) does not explicitly depend on η, and that all the
moments ⟨f k
i ⟩L, k = 1, 2, . . ., where ⟨·⟩L denotes an average over the noise in the update equation
(1) (including the input distribution as well as, potentially, output noise), exist as smooth functions of
w."
ABSTRACT,0.028368794326241134,"Given the stochastic process defined by (1), the probability distribution at time t + δt given the
distribution at time t is"
ABSTRACT,0.030732860520094562,"p(w, t + δt) =
Z
dw′p(w, t + δt|w′, t)p(w′, t).
(2)"
ABSTRACT,0.03309692671394799,"Denoting the weight update as δw := w −w′, the integrand in this equation can be written as"
ABSTRACT,0.03546099290780142,"p(w, t + δt|w′, t)p(w′, t) = p(w + δw −δw, t + δt|w −δw, t)p(w −δw, t).
(3)"
ABSTRACT,0.037825059101654845,"Changing the integration variable to δw and performing a Taylor expansion in δw, the right-hand
side of (2) yields
Z
dw′p(w, t + δt|w′, t)p(w′, t) ="
ABSTRACT,0.04018912529550828,"p(w, t) −
X i"
ABSTRACT,0.0425531914893617,"∂
∂wi
[αi(w)p(w, t)] + 1 2 X ij ∂2"
ABSTRACT,0.04491725768321513,"∂wi∂wj
[βij(w)p(w, t)] + O(δw3), (4) where"
ABSTRACT,0.04728132387706856,"αi(w) =
Z
dδwδwip(w + δw, t + δt|w, t)
(5) and"
ABSTRACT,0.04964539007092199,"βij(w) =
Z
dδwδwiδwjp(w + δw, t + δt|w, t).
(6)"
ABSTRACT,0.05200945626477541,"Here, we assumed that the probability distribution describing the weight updates f has bounded
derivatives with respect to w."
ABSTRACT,0.054373522458628844,"Although (2) is only defined for discrete time steps, we assume a continuous probability density
p(w, t) interpolates between the updates and exists as a smooth function for all values of t. We can
then expand the left-hand side of (2) to obtain"
ABSTRACT,0.05673758865248227,"p(w, t + δt) = p(w, t) + δt ∂"
ABSTRACT,0.0591016548463357,"∂tp(w, t) + O(δt2).
(7)"
ABSTRACT,0.061465721040189124,"For the iterative update rules that we will consider, we have δw ∝η, where η is a learning rate. In
order to take a continuous-time limit, we let η := δt and take the limit δt →0. For the general
learning rule (1), the coefficients in (4) have the form"
ABSTRACT,0.06382978723404255,"αi(w) = ⟨fi⟩L,
βij(w) = ⟨fifj⟩L,
(8)"
ABSTRACT,0.06619385342789598,"where ⟨·⟩L denotes an average over the noise in the update equation (1) (including the input distribu-
tion as well as, potentially, output noise). Thus, we find η ∂p"
ABSTRACT,0.06855791962174941,"∂t (w, t) = −η
X i"
ABSTRACT,0.07092198581560284,"∂
∂wi
(p(w, t)⟨fi⟩L) + O(η2).
(9)"
ABSTRACT,0.07328605200945626,"Finding the p(w, t) that solves this equation cannot in general be done exactly when fi is nonlinear.
However, by multiplying (9) with powers of w and integrating, as well as expanding in w −⟨w⟩,
where ⟨·⟩denotes the average with respect to p(w, t), we can derive a system of equations for
the moments of p(w, t) [Risken, 1996]. As we derive in the appendix, this gives the following
expressions for the first two moments up to O((w −⟨w⟩)3):"
ABSTRACT,0.07565011820330969,"d
dt⟨wi⟩= "
ABSTRACT,0.07801418439716312,1 + 1 2 X
ABSTRACT,0.08037825059101655,"k,l
Cov(wk, wl)∂k∂l "
ABSTRACT,0.08274231678486997,"⟨fi⟩L(⟨w⟩),
(10)"
ABSTRACT,0.0851063829787234,"d
dtCov(wi, wj) =
X"
ABSTRACT,0.08747044917257683,"k
[Cov(wi, wk)∂k⟨fj⟩L(⟨w⟩) + Cov(wj, wk)∂k⟨fi⟩L(⟨w⟩)] .
(11)"
ABSTRACT,0.08983451536643026,"Together, these equations characterize the flow of p(w, t) for a general iterative learning algorithm in
a general ANN architecture. C
A B
D E"
ABSTRACT,0.09219858156028368,"Figure 2: Learning dynamics in a perceptron classification task. A, B: Flow fields determining
the weight dynamics with trajectories for different initial conditions for SL (A) and RL (B). C, D:
Learning dynamics from simulations closely follow the analytical results for SL (C) and RL (D). E:
Dependence of the asymptotic weight norm on the regularization parameter λ."
ABSTRACT,0.09456264775413711,Learning dynamics in the nonlinear perceptron
ABSTRACT,0.09692671394799054,"While the above approach is general and could be applied to any iterative learning algorithm for any
ANN architecture, for the remainder of this work we will focus on its application to the nonlinear
perceptron (Fig. 1A), a one-layer neural network that receives an input x ∈RN, multiplies it with
a weight vector w ∈RN, and produces an output ˆy. The task we study is a binary Gaussian
classification task, in which the model is presented with samples x drawn from two distributions
p(x|y) with labels y = ±1, where p(y = ±1) = 1"
ABSTRACT,0.09929078014184398,"2. Each p(x|y) is given by a multivariate normal
distribution with x ∼N(µy, Σy) (Fig. 1B). We analyze both the case of SL with deterministic
output, for which ˆy = ϕ(w · x), as well as RL, for which the stochastic output is given by π(ˆy =
±1) = ϕ(±w · x), where ϕ is the logistic sigmoid function. The goal of the model is to output a
label ˆy that closely matches the ground truth y when given an input x."
ABSTRACT,0.1016548463356974,Derivation of the flow equations
ABSTRACT,0.10401891252955082,"The supervised learning rule we consider is regularized stochastic gradient descent for a binary
cross-entropy loss, which results in the weight update rule"
ABSTRACT,0.10638297872340426,"f(w)i = (˜y −ˆy)xi −λwi,
(12)"
ABSTRACT,0.10874704491725769,where ˜y = 1
ABSTRACT,0.1111111111111111,"2(y + 1) ∈{0, 1} is the shifted input label, and λ is the regularization hyperparameter.
This learning rule describes online logistic regression."
ABSTRACT,0.11347517730496454,"For reinforcement learning, we use the REINFORCE policy-gradient rule with reward baseline
[Williams, 1992, Sutton and Barto, 2018]:"
ABSTRACT,0.11583924349881797,"f(w)i = ˆyδϕ(−ˆyw · x)xi −λwi.
(13)"
ABSTRACT,0.1182033096926714,"Here δ = yˆy −⟨yˆy⟩is the reward prediction error, and ˆy is the stochastic output of the perceptron
with probability π(ˆy = ±1) = ϕ(±w · x). To facilitate mathematical feasibility, we replace the"
ABSTRACT,0.12056737588652482,perceptron activation function by a shifted error function ϕ(z) = 1
ABSTRACT,0.12293144208037825,"2

1 + Erf
 √π"
Z,0.12529550827423167,"4 z

."
Z,0.1276595744680851,"We first derive the learning dynamics for stochastic gradient descent. We assume that the initial
condition is uniquely specified, with p(w, 0) = δ(w −w0). In this case, the weight covariance will"
Z,0.13002364066193853,"be zero, and the flow equations (10) simply reduce to
d
dt⟨wi⟩= ⟨fi⟩L

w=⟨w⟩.
(14)"
Z,0.13238770685579196,"To make the formulas more concise, we set λ = 0. It can be reintroduced by simply adding the term
−λw. We then get
⟨fi⟩L(w) = ⟨(˜y −ϕ(w · x))xi⟩x,y = 1"
Z,0.1347517730496454,"2⟨(1 −ϕ(w · x))xi⟩x∼N(µ+,Σ+) −1"
Z,0.13711583924349882,"2⟨ϕ(w · x)xi⟩x∼N(µ−,Σ−) = 1 2µ+
i  1 −Φ "
Z,0.13947990543735225,"
a+
q"
Z,0.14184397163120568,"1 + b2
+    −1 2
1
√"
Z,0.14420803782505912,"2π
(Σ+ · ˜w)i
q"
Z,0.14657210401891252,"1 + b2
+
e
−
a2
+
2(1+b2
+) −1"
Z,0.14893617021276595,"2µ−
i Φ "
Z,0.15130023640661938,"
a−
q"
Z,0.1536643026004728,"1 + b2
−  −1 2
1
√"
Z,0.15602836879432624,"2π
(Σ−· ˜w)i
q"
Z,0.15839243498817968,"1 + b2
−
e
−
a2
−
2(1+b2
−) . (15)"
Z,0.1607565011820331,"Here, Φ(z) = 1"
Z,0.16312056737588654,"2
 
1 + Erf
 
z/
√"
Z,0.16548463356973994,"2

= ϕ(z ·
p"
Z,0.16784869976359337,"8/π) is the cumulative distribution function of the
standard normal distribution. To simplify notation, we have introduced ˜w = w ·
p"
Z,0.1702127659574468,"π/8, as well as
the quantities
ay = µy · ˜w,
(16)"
Z,0.17257683215130024,"by =
√"
Z,0.17494089834515367,"˜wT Σy ˜w.
(17)"
Z,0.1773049645390071,"To aid interpretation of these results, we assume that µ± = ±µ and Σ = σ2I. Then (15) implies"
Z,0.17966903073286053,"d
dt⟨µ · w⟩= |µ|2 1 −Φ"
Z,0.18203309692671396,"µ · ˜w
p"
Z,0.18439716312056736,"1 + σ2| ˜w|2 !! −
1
√"
Z,0.1867612293144208,"2π
σ2µ · ˜w
p"
Z,0.18912529550827423,"1 + σ2| ˜w|2 e
−
(µ· ˜
w)2"
Z,0.19148936170212766,"2(1+σ2| ˜
w|2)

w=⟨w⟩
(18)"
Z,0.1938534278959811,"as well as
d
dt|⟨w⟩|2
= 2w · µ

1 −Φ

µ· ˜w
√"
Z,0.19621749408983452,"1+σ2| ˜w|2 
−1"
Z,0.19858156028368795,"2
σ2|w|2
√"
Z,0.20094562647754138,"1+σ2| ˜w|2 e
−
(µ· ˜
w)2"
Z,0.2033096926713948,"2(1+σ2| ˜
w|2)

w=⟨w⟩
(19)"
Z,0.20567375886524822,"An interpretation of (18) is that the first term pushes the weight vector in the decoding direction, while
the second term acts as a regularization, whereby the cross-entropy loss penalizes misclassifications
more as µ · w increases. An increase in the input noise leads to a higher overlap of the distributions,
which means that even the Bayes-optimal classifier will make more mistakes."
Z,0.20803782505910165,"For RL, we need to calculate
⟨fi⟩L(w) = ⟨ˆyδϕ(−ˆyw · x)xi)⟩x,y,ˆy
= ⟨ϕ(−w · x)ϕ(w · x)xi⟩x∼N(µ+,Σ+) −⟨ϕ(−w · x)ϕ(w · x)xi⟩x∼N(µ−,Σ−)"
Z,0.21040189125295508,"=
(Σ+ · ˜w)i
√ 2π
q"
Z,0.2127659574468085,"1 + b2
+
e
−
a2
+
2(1+b2
+) "
Z,0.21513002364066194,1 −2Φ 
Z,0.21749408983451538,"
a+
q"
Z,0.2198581560283688,"1 + b2
+
q"
Z,0.2222222222222222,"1 + 2b2
+   "
Z,0.22458628841607564,"+ 2µ+
i T "
Z,0.22695035460992907,"
a+
q"
Z,0.2293144208037825,"1 + b2
+
,
1
q"
Z,0.23167848699763594,"1 + 2b2
+  "
Z,0.23404255319148937,"−
(Σ−· ˜w)i
√ 2π
q"
Z,0.2364066193853428,"1 + b2
−
e
−
a2
−
2(1+b2
−) "
Z,0.23877068557919623,1 −2Φ 
Z,0.24113475177304963,"
a−
q"
Z,0.24349881796690306,"1 + b2
−
q"
Z,0.2458628841607565,"1 + 2b2
−   "
Z,0.24822695035460993,"−2µ−
i T "
Z,0.25059101654846333,"
a−
q"
Z,0.25295508274231676,"1 + b2
−
,
1
q"
Z,0.2553191489361702,"1 + 2b2
−  . (20)"
Z,0.2576832151300236,"Here, T(·, ·) is Owen’s T function:"
Z,0.26004728132387706,"T(h, a) = 1 2π Z a 0 e−1"
Z,0.2624113475177305,2 h2(1+x2)
Z,0.2647754137115839,"1 + x2
dx.
(21)"
Z,0.26713947990543735,"As for supervised learning, we can simplify this expression for isotropic distributions with means
±µ and get"
Z,0.2695035460992908,"d
dt⟨µ · w⟩=|µ|24T"
Z,0.2718676122931442,"µ · ˜w
p"
Z,0.27423167848699764,"1 + σ2| ˜w|2 ,
1
p"
Z,0.2765957446808511,"1 + 2σ2| ˜w|2 ! −
1
√"
Z,0.2789598108747045,"2π
2σ2µ · ˜w
p"
Z,0.28132387706855794,"1 + σ2| ˜w|2 e
−
(µ· ˜
w)2"
Z,0.28368794326241137,"2(1+σ2| ˜
w|2) Erf"
Z,0.2860520094562648,"µ · ˜w
p"
Z,0.28841607565011823,1 + σ2| ˜w|2p
Z,0.2907801418439716,2 + 4σ2| ˜w|2
Z,0.29314420803782504,"! 
w=⟨w⟩ (22) B
C
A"
Z,0.29550827423167847,"Figure 3: Relationship between input noise and time to learn the task. A: The time required for the
alignment µ · ⟨w⟩/|⟨w⟩| to reach 80% depends on the noise σ of the isotropic input distributions. B:
To characterize anisotropic input noise, the total input variance is split into a noise component σ2
∥
parallel to and a component σ2
⊥orthogonal to the decoding direction. C: Shifting the input noise into
the decoding direction slows down learning. and"
Z,0.2978723404255319,"d
dt|⟨w⟩|2 =8w · µT"
Z,0.30023640661938533,"µ · ˜w
p"
Z,0.30260047281323876,"1 + σ2| ˜w|2 ,
1
p"
Z,0.3049645390070922,1 + 2σ2| ˜w|2 ! −1
Z,0.3073286052009456,"2
2σ2|w|2
p"
Z,0.30969267139479906,"1 + σ2| ˜w|2 e
−
(µ· ˜
w)2"
Z,0.3120567375886525,"2(1+σ2| ˜
w|2) Erf"
Z,0.3144208037825059,"µ · ˜w
p"
Z,0.31678486997635935,1 + σ2| ˜w|2p
Z,0.3191489361702128,2 + 4σ2| ˜w|2
Z,0.3215130023640662,"! 
w=⟨w⟩. (23)"
Z,0.32387706855791965,"As we show in the appendix, and as demonstrated in Fig. 2, the flow equations for both SL and RL
have a unique, globally stable fixed point whenever λ > 0 or the input noise σ > 0 (Fig. 2A,B). The
solutions of (15) and (20) exhibit agreement with learning curves obtained by direct simulation of
(1) (Fig. 2C,D), where the small remaining discrepancy arises from the fact that, for the simulation,
we used a standard logistic sigmoid function instead of the error function sigmoid curve used for
the analytical calculations. We also see that the asymptotic weight norm decreases approximately
linearly with ln λ (Fig. 2E). Of particular note is the observation that, perhaps counter-intuitively,
higher levels of noise appear to lead to faster learning for SL, though the effect is more ambiguous in
the case of RL. This will be analyzed in more detail in the following section."
Z,0.3262411347517731,Impact of noise on learning time
Z,0.32860520094562645,"We next investigate the effect of different types of input noise on the dynamics of learning and
whether differences arise for the supervised and reinforcement algorithms. We begin with the case of
isotropic input noise, with Σ = σ2I and means ±µ with |µ| = 1. In this case, the optimal alignment
µ·⟨w⟩"
Z,0.3309692671394799,"|⟨w⟩| of 1 is always reached asymptotically, so we focus on how quickly this value is approached as
a function of the input noise."
Z,0.3333333333333333,"In the case of SL, analytically analyzing the logarithmic derivative of the alignment between µ and
⟨w⟩yields a flow equation of the form"
Z,0.33569739952718675,"d
dt log µ · ⟨w⟩"
Z,0.3380614657210402,"|⟨w⟩|
= giso(µ, w) + σ2hiso(µ, w)2 + O(σ4),
(24)"
Z,0.3404255319148936,"where giso and hiso do not depend on σ. Thus, the higher the input noise, the faster the task is learned.
The analogous relationship for RL is indeterminate, such that input noise may either speed up or
slow down learning in this case, depending on the parameters. As is illustrated in Fig. 3A, numerical
integration of the flow equations reveals qualitatively distinct trends for the dependence of learning
speed on noise."
Z,0.34278959810874704,Anisotropic input distributions
Z,0.34515366430260047,"To analyze the case of anisotropic input noise, we divide the total noise into two components: a
component σ2
∥= 1 + ε in the direction of µ and the noise σ2
⊥= 1 −ε orthogonal to it, while keeping A
B"
Z,0.3475177304964539,"Figure 4: Dynamics of the total variance of w for isotropic input noise. Higher noise leads to a faster
decay in tr (Cov(w)) for supervised learning (A) and for reinforcement learning (B)."
Z,0.34988179669030733,"the total noise σ2
∥+ σ2
⊥fixed (Fig. 3B). For both SL and RL, we find that learning slows down
when the noise is shifted to the decoding direction and speeds up when it is shifted to orthogonal
directions (Fig. 3C). To confirm this analysis analytically, we calculate the logarithmic derivative of
the alignment between µ and ⟨w⟩and find
d
dt log µ · ⟨w⟩"
Z,0.35224586288416077,"|⟨w⟩|
= gan(µ, w) + εhan(µ, w)2 + O(ε2),
(25)"
Z,0.3546099290780142,"where gan and han are independent of ε. From this expression, we see that, at least to leading order
in ε, noise anisotropy orthogonal to the decoding direction tends to increase the speed of learning,
while anisotropy along the decoding direction tends to decrease the speed of learning. This is in
apparent contrast to a recent study in two-layer networks, where input variance along the task-relevant
dimension was found to increase the speed of learning [Saxe et al., 2019]. The reason for these
seemingly opposite results is because, in the the task studied in that work, variance along the coding
direction is a signal that facilitates learning, while, in our case of binary classification, variance along
the coding direction is noise that impairs learning."
Z,0.35697399527186763,Input noise covariance
Z,0.35933806146572106,"So far, we have assumed that the initial weight distribution, which can be thought of as characterizing
an ensemble of networks with different initializations, is specified deterministically, i.e. p(w, 0) =
δ(w −w0). In this case, according to (11), the covariance of w will remain zero at later times. If
training is instead initiated with a distribution p(w, 0) having nonzero covariance, then we can ask
how this covariance evolves with training—in particular, whether the covariance of this distribution
diverges, converges to 0, or approaches a finite value as t →∞."
Z,0.3617021276595745,"This calculation can be easily performed in the limit σ →0 where the inputs are just x = ±µ. Then
(15) simply becomes
⟨fi⟩L(w) = µi (1 −ϕ(µ · w)) −λwi,
(26)
and (11) implies that"
Z,0.3640661938534279,"d
dttr (Cov(w)) = −e−π(µ·w)2/16"
Z,0.3664302600472813,"4
µT Cov(w)µ −2λtr (Cov(w)) .
(27)"
Z,0.36879432624113473,"Since Cov(w) is positive semidefinite, both terms on the right-hand side of (27) are always nonposi-
tive for λ > 0 and lead to exponential decay of tr (Cov(w)), so the eigenvalues of Cov(w) approach
zero. Thus, the covariance of the distribution p(w, t) vanishes as t →∞(Fig. 4A)."
Z,0.37115839243498816,"The same calculation can be performed for the RL algorithm, again with the result that tr(Cov(w)) →
0 as t →∞whenever λ > 0 (Fig. 4B). As can be seen in Fig. 4, the total variance continues to decay
to zero upon including input noise (in the η →0 limit we are working in), with the decay speeding
up as the noise is increased."
Z,0.3735224586288416,Application to real tasks
Z,0.375886524822695,"In order to test whether the theoretical equations derived above apply to realistic input data, we
next train a perceptron with stochastic gradient descent to perform binary classification with cross- A
B
C"
Z,0.37825059101654845,"Figure 5: Comparison of the theory with training on MNIST. A: A nonlinear perceptron is trained to
classify the digits 0 and 1 in the MNIST dataset. B: Comparison of the empirical test classification
accuracy with the theoretical prediction. C: Even after the task has been learned, the theory accurately
captures non-trivial ongoing learning dynamics. A
B"
Z,0.3806146572104019,"Figure 6: Forgetting curves. A: Learning curves for multi-task learning, where w are trained on
Task 1 (µ = µ1) after training to 80% on Task 0 (µ = µ0). B: The alignment of ⟨w⟩with µ0 after
training on additional tasks 1, . . ., 9."
Z,0.3829787234042553,"entropy loss on the MNIST dataset (Fig. 5A). To obtain suitable input representations, the images
corresponding to the digits 0 and 1 are first convolved with a set of 1440 Gabor filters [Haghighat
et al., 2015]. (In the appendix, we perform the same analysis on the raw MNIST data without the
Gabor convolution and obtain similar results.) We then model these two input classes as multivariate
Gaussians with covariances Σ0,1 and means µ0,1 (or ±µ after a translation). The evolution of the
weight vector during training is found by numerically integrating (15). To quantify the test accuracy
during training, an approximation of the expected error at each time step is derived by integrating the
Gaussian approximations to the two input distributions up to the hyperplane orthogonal to the weight
vector. As can be seen in Fig. 5B, this theoretically derived learning curve closely matches the actual
generalization performance of the trained classifier on the hold-out set."
Z,0.38534278959810875,"To further illustrate that the flow equations capture non-trivial aspects of the learning dynamics,
Fig. 5C shows the alignment of w with µ, which continues to evolve after the task has been learned.
The close alignment of the experimental results with the analytical predictions shows that the flow
equations can capture learning dynamics in a realistic task with input data distributions that are not
necessarily Gaussian."
Z,0.3877068557919622,Continual learning
Z,0.3900709219858156,"In addition to describing the dynamics of learning a single task, the flow equations derived above
can also describe the learning and forgetting of multiple tasks. In continual learning, natural and
artificial agents struggle with catastrophic forgetting, which causes older learning to be lost as it is
overwritten with newer learning [Hadsell et al., 2020, Kudithipudi et al., 2022, Flesch et al., 2023].
Here, we ask how the number of tasks that can be remembered by the perceptron depends on the level
of noise and the learning algorithm. The weights are first trained on Task 0, with input distribution
defined by µ = µ0 and Σ = σ2I, until the alignment of w with µ0 has reached 80%. We then
train on subsequent tasks µ = µ1, µ2, . . .. This yields a forgetting curve that decays exponentially"
Z,0.39243498817966904,"with the number of tasks, as shown in the simulation results in Fig. 6. The decay constant does not
significantly depend on the learning algorithm being used, but we observe that a higher input noise
leads to faster forgetting. Together with the results in the preceding subsections, this hints toward a
trade-off between the learning speed and forgetting of previously learned tasks as the amount of input
noise is varied."
Z,0.3947990543735225,Discussion
Z,0.3971631205673759,"In this work, we have used a stochastic-process framework to derive the dynamical equations
describing learning in the nonlinear perceptron performing binary classification. We have quantified
how the input noise and learning rule affect the speed of learning and forgetting, in particular finding
that greater input noise leads to faster learning for SL but not for RL. Finally, we have verified
that our approach captures learning dynamics in an MNIST task that has a more-complex input
data distribution. Together, the results characterize ways in which task structure, learning rule, and
neural-circuit architecture significantly impact learning dynamics and forgetting rates."
Z,0.39952718676122934,"One limitation of our approach is the assumption that the input distributions are multivariate Gaussians,
which may not be the case for real datasets. While the agreement between the theoretical and
empirical results applied to the MNIST data in Fig. 5 is encouraging in this regard, there may be
greater discrepancies in cases where the input distributions are more complex. Indeed, recent work
on the nonlinear perceptron has shown that, while the first- and second-order cumulants of the input
distribution are learned early in training, later stages of training involve learning beyond-second-order
(i.e. non-Gaussian) statistical structure in the input data [Refinetti et al., 2023], suggesting that
our theory’s ability to describe late-stage training in complex datasets may be somewhat limited.
Another limitation is the choice to neglect higher-order terms in w −⟨w⟩(Equations (10), (11)) and
η (Equation (9)). This may limit the ability to characterize instabilities and noise effects induced by
non-infinitesimal learning rates. Future work will be needed to assess these effects."
Z,0.40189125295508277,"While other work has approached SGD learning in neural networks within a stochastic-process
framework, most of these works have not derived the noise statistics from the noisy update rule (as
done here and in Yaida [2018] and Murray and Escola [2020]), but rather have added Gaussian noise
to the mean update (e.g. [He et al., 2019, Li et al., 2019, 2021]). While the results for the flow of
the weights’ mean ⟨w⟩(t) are the same under both approaches, the approach that we take enables
us to additionally derive the flow of the weight covariance. Further, it allows for the possibility of
describing effects arising from finite learning rate by including higher-order terms in η from the
expansion of (4)—a topic that we will address in an upcoming publication."
Z,0.40425531914893614,"In our results on continual learning, we found that only a few tasks could be remembered by the
perceptron before being overwritten. This is perhaps somewhat surprising given recent work [Murray
and Escola, 2020] showing that the binary perceptron can recall O(N) individual random patterns in
a continual-learning setup. This difference may arise in part from the fact that that work used a more
efficient, margin-based supervised learning rule [Crammer et al., 2006] rather than the stochastic
gradient descent rule used here, as well as the fact that input noise and weight regularization were not
included. This difference suggests that there is likely room for significant improvements in continual-
learning performance with the setup studied here. This would be another interesting direction for
future work, given that recent work has found that nonlinearity can drastically increase the amount of
catastrophic forgetting in continual learning [Dominé et al., 2023]."
Z,0.4066193853427896,"Finally, we speculate that qualitative differences between learning rules such as that shown in Fig. 3
may provide a path for designing experiments to distinguish between learning rules implemented in
the brain. More work will be needed, however, to formulate testable experimental predictions for
more-realistic learning rules and network architectures. More generally, the approach developed here
paves the way for analyzing numerous questions about learning dynamics in more-complex circuit
architectures and diverse task structures."
Z,0.408983451536643,Acknowledgements
Z,0.41134751773049644,"We are grateful to Elliott Abe for early collaboration related to this project. Support for this work was
provided by NIH-BRAIN award RF1-NS131993."
REFERENCES,0.41371158392434987,References
REFERENCES,0.4160756501182033,"Blake Bordelon and Cengiz Pehlevan. Learning curves for SGD on structured features. International Conference
on Learning Representations. ArXiv preprint arXiv:2106.02713, 2022."
REFERENCES,0.41843971631205673,"James Bradbury, Roy Frostig, Peter Hawkins, Matthew James Johnson, Chris Leary, Dougal Maclaurin, George
Necula, Adam Paszke, Jake VanderPlas, Skye Wanderman-Milne, and Qiao Zhang. JAX: composable
transformations of Python+NumPy programs, 2018. URL http://github.com/google/jax."
REFERENCES,0.42080378250591016,"Koby Crammer, Ofer Dekel, Joseph Keshet, Shai Shalev-Shwartz, Yoram Singer, and Manfred K Warmuth.
Online passive-aggressive algorithms. Journal of Machine Learning Research, 7(3), 2006."
REFERENCES,0.4231678486997636,"Clémentine CJ Dominé, Lukas Braun, James E Fitzgerald, and Andrew M Saxe. Exact learning dynamics of
deep linear networks with prior knowledge. Journal of Statistical Mechanics: Theory and Experiment, 2023
(11):114004, 2023."
REFERENCES,0.425531914893617,"Timo Flesch, Andrew Saxe, and Christopher Summerfield. Continual task learning in natural and artificial agents.
Trends in Neurosciences, 46(3):199–210, 2023."
REFERENCES,0.42789598108747046,"Elizabeth Gardner and Bernard Derrida. Three unfinished works on the optimal storage capacity of networks.
Journal of Physics A: Mathematical and General, 22(12):1983, 1989."
REFERENCES,0.4302600472813239,"Raia Hadsell, Dushyant Rao, Andrei A Rusu, and Razvan Pascanu. Embracing change: Continual learning in
deep neural networks. Trends in cognitive sciences, 24(12):1028–1040, 2020."
REFERENCES,0.4326241134751773,"Mohammad Haghighat, Saman Zonouz, and Mohamed Abdel-Mottaleb. Cloudid: Trustworthy cloud-based and
cross-enterprise biometric identification. Expert Systems with Applications, 42(21):7905–7916, 2015. URL
https://github.com/mhaghighat/gabor. BSD 2-clause license."
REFERENCES,0.43498817966903075,"Fengxiang He, Tongliang Liu, and Dacheng Tao. Control batch size and learning rate to generalize well:
Theoretical and empirical evidence. Advances in neural information processing systems, 32, 2019."
REFERENCES,0.4373522458628842,"Peter C Humphreys, Kayvon Daie, Karel Svoboda, Matthew Botvinick, and Timothy P Lillicrap. Bci learning
phenomena can be explained by gradient-based optimization. bioRxiv, pages 2022–12, 2022."
REFERENCES,0.4397163120567376,"Ziwei Ji and Matus Telgarsky. Directional convergence and alignment in deep learning. Advances in Neural
Information Processing Systems, 33:17176–17186, 2020."
REFERENCES,0.44208037825059104,"Dhireesha Kudithipudi, Mario Aguilar-Simon, Jonathan Babb, Maxim Bazhenov, Douglas Blackiston, Josh
Bongard, Andrew P Brna, Suraj Chakravarthi Raja, Nick Cheney, Jeff Clune, et al. Biological underpinnings
for lifelong learning machines. Nature Machine Intelligence, 4(3):196–210, 2022."
REFERENCES,0.4444444444444444,"Qianxiao Li, Cheng Tai, and E Weinan. Stochastic modified equations and dynamics of stochastic gradient
algorithms i: Mathematical foundations. Journal of Machine Learning Research, 20(40):1–47, 2019."
REFERENCES,0.44680851063829785,"Zhiyuan Li, Sadhika Malladi, and Sanjeev Arora. On the validity of modeling sgd with stochastic differential
equations (sdes). Advances in Neural Information Processing Systems, 34:12712–12725, 2021."
REFERENCES,0.4491725768321513,"Sukbin Lim, Jillian L McKee, Luke Woloszyn, Yali Amit, David J Freedman, David L Sheinberg, and Nicolas
Brunel. Inferring learning rules from distributions of firing rates in cortical neurons. Nature neuroscience, 18
(12):1804–1810, 2015."
REFERENCES,0.4515366430260047,"Yash Mehta, Danil Tyulmankov, Adithya E Rajagopalan, Glenn C Turner, James E Fitzgerald, and Jan Funke.
Model based inference of synaptic plasticity rules. bioRxiv, pages 2023–12, 2023."
REFERENCES,0.45390070921985815,"Francesca Mignacco, Florent Krzakala, Pierfrancesco Urbani, and Lenka Zdeborová. Dynamical mean-field
theory for stochastic gradient descent in gaussian mixture classification. Advances in Neural Information
Processing Systems, 33:9540–9550, 2020."
REFERENCES,0.4562647754137116,"James M Murray and G Sean Escola. Remembrance of things practiced with fast and slow learning in cortical
and subcortical pathways. Nature Communications, 11(1):1–12, 2020."
REFERENCES,0.458628841607565,"Aran Nayebi, Sanjana Srivastava, Surya Ganguli, and Daniel L Yamins. Identifying learning rules from neural
network observables. Advances in Neural Information Processing Systems, 33:2639–2650, 2020."
REFERENCES,0.46099290780141844,"Donald Bruce Owen. A table of normal integrals. Communications in Statistics-Simulation and Computation, 9
(4):389–419, 1980."
REFERENCES,0.46335697399527187,"Nishil Patel, Sebastian Lee, Stefano Sarao Mannelli, Sebastian Goldt, and Andrew M Saxe. The rl perceptron:
Dynamics of policy learning in high dimensions. In ICLR 2023 Workshop on Physics for Machine Learning,
2023."
REFERENCES,0.4657210401891253,"Alexandre Payeur, Amy L Orsborn, and Guillaume Lajoie. Neural manifolds and learning regimes in neural-
interface tasks. bioRxiv, pages 2023–03, 2023."
REFERENCES,0.46808510638297873,"Jacob Portes, Christian Schmid, and James M Murray. Distinguishing learning rules with brain machine
interfaces. Advances in neural information processing systems, 35:25937–25950, 2022."
REFERENCES,0.47044917257683216,"Maria Refinetti, Alessandro Ingrosso, and Sebastian Goldt. Neural networks trained with sgd learn distributions
of increasing complexity. In International Conference on Machine Learning, pages 28843–28863. PMLR,
2023."
REFERENCES,0.4728132387706856,"Hannes Risken. The Fokker-Planck Equation. Springer, 1996."
REFERENCES,0.475177304964539,"Andrew M Saxe, James L McClelland, and Surya Ganguli. A mathematical theory of semantic development in
deep neural networks. Proceedings of the National Academy of Sciences, 116(23):11537–11546, 2019."
REFERENCES,0.47754137115839246,"Hyunjune Sebastian Seung, Haim Sompolinsky, and Naftali Tishby. Statistical mechanics of learning from
examples. Physical review A, 45(8):6056, 1992."
REFERENCES,0.4799054373522459,"Richard S Sutton and Andrew G Barto. Reinforcement learning: An introduction. MIT press, 2018."
REFERENCES,0.48226950354609927,"Pauli Virtanen, Ralf Gommers, Travis E. Oliphant, Matt Haberland, Tyler Reddy, David Cournapeau, Evgeni
Burovski, Pearu Peterson, Warren Weckesser, Jonathan Bright, Stéfan J. van der Walt, Matthew Brett, Joshua
Wilson, K. Jarrod Millman, Nikolay Mayorov, Andrew R. J. Nelson, Eric Jones, Robert Kern, Eric Larson,
C J Carey, ˙Ilhan Polat, Yu Feng, Eric W. Moore, Jake VanderPlas, Denis Laxalde, Josef Perktold, Robert
Cimrman, Ian Henriksen, E. A. Quintero, Charles R. Harris, Anne M. Archibald, Antônio H. Ribeiro, Fabian
Pedregosa, Paul van Mulbregt, and SciPy 1.0 Contributors. SciPy 1.0: Fundamental Algorithms for Scientific
Computing in Python. Nature Methods, 17:261–272, 2020. doi: 10.1038/s41592-019-0686-2."
REFERENCES,0.4846335697399527,"Justin Werfel, Xiaohui Xie, and H Seung. Learning curves for stochastic gradient descent in linear feedforward
networks. Advances in neural information processing systems, 16, 2003."
REFERENCES,0.48699763593380613,"Ronald J Williams. Simple statistical gradient-following algorithms for connectionist reinforcement learning.
Machine learning, 8:229–256, 1992."
REFERENCES,0.48936170212765956,"Sho Yaida. Fluctuation-dissipation relations for stochastic gradient descent. In International Conference on
Learning Representations, 2018."
REFERENCES,0.491725768321513,"Paul Züge, Christian Klos, and Raoul-Martin Memmesheimer. Weight versus node perturbation learning in
temporally extended tasks: Weight perturbation often performs similarly or better. Physical Review X, 13(2):
021006, 2023."
REFERENCES,0.4940898345153664,Derivation of the general evolution equations
REFERENCES,0.49645390070921985,"In this section, we derive equations (10) and (11) from (9). We start with ∂p"
REFERENCES,0.4988179669030733,"∂t (w, t) = −
X j"
REFERENCES,0.5011820330969267,"∂
∂wj
(p(w, t)⟨fj⟩L) ,
(28)"
REFERENCES,0.5035460992907801,multiply both sides by wi and integrate over w. The left-hand side simply becomes
REFERENCES,0.5059101654846335,"d
dt⟨wi⟩w.
(29)"
REFERENCES,0.508274231678487,"For the right-hand side, we can use integration by parts to get"
REFERENCES,0.5106382978723404,"−
Z
dw wi
X j"
REFERENCES,0.5130023640661938,"∂
∂wj
(p(w, t)⟨fj⟩L) =
Z
dw p(w, t)⟨fi⟩L = ⟨⟨fi⟩L(w)⟩w.
(30)"
REFERENCES,0.5153664302600472,"To evaluate this expectation value, we introduce the mean-zero weight ˆw = w−⟨w⟩, which describes
the fluctuations of w around its mean. If we expand ⟨fi⟩L(w) to second order in ˆw, (30) becomes"
REFERENCES,0.5177304964539007,⟨⟨fi⟩L(w)⟩w = *
REFERENCES,0.5200945626477541,"⟨fi⟩L(⟨w⟩) +
X"
REFERENCES,0.5224586288416075,"j
ˆwj∂j⟨fi⟩L(⟨w⟩) + 1 2 X"
REFERENCES,0.524822695035461,"j,k
ˆwj ˆwk∂j∂k⟨fi⟩L(⟨w⟩) + O( ˆw3) + w"
REFERENCES,0.5271867612293144,"= ⟨fi⟩L(⟨w⟩) +
X"
REFERENCES,0.5295508274231678,"j
⟨ˆwj⟩w∂j⟨fi⟩L(⟨w⟩) + 1 2 X"
REFERENCES,0.5319148936170213,"j,k
⟨ˆwj ˆwk⟩w∂j∂k⟨fi⟩L(⟨w⟩) + O( ˆw3)"
REFERENCES,0.5342789598108747,= ⟨fi⟩L(⟨w⟩) + 1 2 X
REFERENCES,0.5366430260047281,"j,k
Cov(wk, wj)∂j∂k⟨fi⟩L(⟨w⟩) + O( ˆw3). (31)"
REFERENCES,0.5390070921985816,The derivation of (11) follows analogously.
REFERENCES,0.541371158392435,Derivation of explicit SL and RL flow equations
REFERENCES,0.5437352245862884,"In order to analyze (10) and (11), we must evaluate the following expectation values:"
REFERENCES,0.5460992907801419,"⟨ϕ(w · x)xi⟩x∼N(µ,Σ)
and
⟨ϕ2(w · x)xi⟩x∼N(µ,Σ)
(32)"
REFERENCES,0.5484633569739953,with ϕ(x) = 1
REFERENCES,0.5508274231678487,"2

1 + Erf
 √π"
X,0.5531914893617021,"4 x

. Without loss of generality, we will calculate these integrals in a
coordinate system where w = w1e1. We can then factorize p(x1, x2, . . .) = pm(x1)pc(x2, . . . |x1).
The marginal distribution is Gaussian with µm = µ1 and Σm = Σ11, and the conditional distribution
is also normal with (µc)i = µi +
1
Σ11 Σ1i(x1 −µ1), and (Σc)ij = Σij −
1
Σ11 Σ1iΣ1j."
X,0.5555555555555556,"Furthermore, to simplify notations, we introduce ˜w = w ·
p"
X,0.557919621749409,"π/8, as well as the quantities"
X,0.5602836879432624,"a = µ · ˜w,
(33) b =
√"
X,0.5626477541371159,"˜wT Σ ˜w.
(34)"
X,0.5650118203309693,"Let’s first calculate ⟨ϕ(w · x)⟩x∼N(µ,Σ):"
X,0.5673758865248227,"⟨ϕ(w · x)⟩x∼N(µ,Σ) = ⟨ϕ(w1x1)⟩x∼N(µ,Σ)"
X,0.5697399527186762,"=
1
√2πΣ11 Z"
X,0.5721040189125296,"R
dx1e−1"
X,0.574468085106383,"2 (x1−µ1)2/Σ11ϕ(w1x1) =
1
√ 2π Z"
X,0.5768321513002365,"R
du e−u2/2ϕ

w1(µ1 + u
p"
X,0.5791962174940898,"Σ11)
"
X,0.5815602836879432,"= Φ

a
√"
X,0.5839243498817966,"1 + b2 
, (35)"
X,0.5862884160756501,where Φ(x) = 1 2 + 1
X,0.5886524822695035,"2 Erf(x/
√"
X,0.5910165484633569,"2) is the cumulative distribution function of the standard normal
distribution. To evaluate the last line of this and the following integrals, we used the reference [Owen,
1980]."
X,0.5933806146572104,"For the integral ⟨ϕ(w · x)xi⟩x∼N(µ,Σ), we first do the calculation for i = 1:"
X,0.5957446808510638,"⟨ϕ(w · x)x1⟩x∼N(µ,Σ) = ⟨ϕ(w1x1)x1⟩x∼N(µ,Σ)"
X,0.5981087470449172,"=
1
√2πΣ11 Z"
X,0.6004728132387707,"R
dx1e−1"
X,0.6028368794326241,"2 (x1−µ1)2/Σ11ϕ(w1x1) x1 =
1
√ 2π Z"
X,0.6052009456264775,"R
du e−u2/2ϕ

w1(µ1 + u
p"
X,0.607565011820331,"Σ11)

(µ1 + u
p Σ11)"
X,0.6099290780141844,"= µ1Φ

a
√"
X,0.6122931442080378,1 + b2
X,0.6146572104018913,"
+
1
√"
X,0.6170212765957447,"2π
Σ11 ˜w1
√"
X,0.6193853427895981,"1 + b2 e
−
a2"
X,0.6217494089834515,2(1+b2) . (36)
X,0.624113475177305,"For i ̸= 1, we get"
X,0.6264775413711584,"⟨ϕ(w · x)xi⟩x∼N(µ,Σ) = ⟨ϕ(w1x1)xi⟩x∼N(µ,Σ)"
X,0.6288416075650118,"=
1
√2πΣ11 Z"
X,0.6312056737588653,"R
dx1e−1"
X,0.6335697399527187,"2 (x1−µ1)2/Σ11ϕ(w1x1)

µi + Σ1i"
X,0.6359338061465721,"Σ11
(x1 −µ1)
"
X,0.6382978723404256,"= µiΦ

a
√"
X,0.640661938534279,1 + b2
X,0.6430260047281324,"
+
1
√"
X,0.6453900709219859,"2π
Σi1 ˜w1
√"
X,0.6477541371158393,"1 + b2 e
−
a2"
X,0.6501182033096927,2(1+b2) . (37)
X,0.6524822695035462,"Thus, for general i and w we can write"
X,0.6548463356973995,"⟨ϕ(w · x)xi⟩x∼N(µ,Σ) = µiΦ

a
√"
X,0.6572104018912529,1 + b2
X,0.6595744680851063,"
+
1
√"
X,0.6619385342789598,"2π
(Σ ˜w)i
√"
X,0.6643026004728132,"1 + b2 e
−
a2"
X,0.6666666666666666,"2(1+b2) .
(38)"
X,0.6690307328605201,We next calculate
X,0.6713947990543735,"⟨ϕ2(w · x)⟩x∼N(µ,Σ) = ⟨ϕ2(w1x1)⟩x∼N(µ,Σ)"
X,0.6737588652482269,"=
1
√2πΣ11 Z"
X,0.6761229314420804,"R
dx1e−1"
X,0.6784869976359338,2 (x1−µ1)2/Σ11ϕ2(w1x1)
X,0.6808510638297872,"= Φ

a
√"
X,0.6832151300236406,1 + b2
X,0.6855791962174941,"
−2T

a
√"
X,0.6879432624113475,"1 + b2 ,
1
√"
X,0.6903073286052009,"1 + 2b2 
, (39)"
X,0.6926713947990544,where T stands for Owen’s T function.
X,0.6950354609929078,"Analogously, we can calculate"
X,0.6973995271867612,"⟨ϕ2(w · x)xi⟩x∼N(µ,Σ) ="
X,0.6997635933806147,"µi⟨ϕ2(w · x)⟩+
2(Σ ˜w)i
√ 2π
√"
X,0.7021276595744681,"1 + b2 Φ

a
√"
X,0.7044917257683215,1 + b2√
X,0.706855791962175,1 + 2b2
X,0.7092198581560284,"
e
−
a2"
X,0.7115839243498818,"2(1+b2) .
(40)"
X,0.7139479905437353,Fixed point analysis
X,0.7163120567375887,"In this section, we analyze the fixed points of the systems of equations (18) & (19) for SL and (22) &
(23) for RL. We will first show the intuitive result that any fixed point ⟨w∗⟩is maximally aligned with
µ, i.e. ⟨w∗⟩· µ = |µ| · |⟨w∗⟩|, as long as σ > 0. For simplicity, we set the regularization parameter
λ = 0. Note that for both SL and RL, the flow equations take the form"
X,0.7186761229314421,"d
dt⟨w⟩· µ = |µ|2f1(µ, w, σ) −µ · ⟨w⟩f2(µ, w, σ),"
X,0.7210401891252955,"1
2
d
dt|⟨w⟩|2 = µ · ⟨w⟩f1(µ, w, σ) −|⟨w⟩|2f2(µ, w, σ) (41)"
X,0.723404255319149,"for some functions f1 and f2 > 0. Also, it’s easy to see that ⟨w∗⟩· µ > 0. Thus, a fixed point ⟨w∗⟩
satisfies
f1
f2
= µ · ⟨w∗⟩"
X,0.7257683215130024,"|µ|2
,"
X,0.7281323877068558,"f1
f2
= |⟨w∗⟩|2"
X,0.7304964539007093,µ · ⟨w∗⟩. (42)
X,0.7328605200945626,"Thus, setting these equal to one another, we find that ⟨w∗⟩· µ = |µ| · |⟨w∗⟩| and the two equations
reduce to a single equation for |⟨w∗⟩|."
X,0.735224586288416,"Assume without loss of generality that |µ| = 1. For supervised learning, (19) then implies that"
X,0.7375886524822695,0 = |⟨w∗⟩|
ERFC,0.7399527186761229,"2
Erfc"
ERFC,0.7423167848699763,"|⟨w∗⟩|√π
p"
ERFC,0.7446808510638298,16 + 2πσ2|⟨w∗⟩|2 ! −1
ERFC,0.7470449172576832,"4
σ2|⟨w∗⟩|2
p"
ERFC,0.7494089834515366,"1 + σ2|⟨w∗⟩|2π/8
e
−
|⟨w∗⟩|2π
16+2πσ2|⟨w∗⟩|2 ,
(43)"
ERFC,0.75177304964539,where Erfc(z) = 1 −Erf(z) is the complementary error function.
ERFC,0.7541371158392435,We can factor out the common exponential asymptotics of both terms to get
ERFC,0.7565011820330969,"0 = e
−
|⟨w∗⟩|2π
16+2πσ2|⟨w∗⟩|2"
ERFC,0.7588652482269503,"e
+
|⟨w∗⟩|2π
16+2πσ2|⟨w∗⟩|2 1"
ERFC,0.7612293144208038,2Erfc
ERFC,0.7635933806146572,"|⟨w∗⟩|√π
p"
ERFC,0.7659574468085106,16 + 2πσ2|⟨w∗⟩|2 ! −1
ERFC,0.7683215130023641,"4
σ2|⟨w∗⟩|
p"
ERFC,0.7706855791962175,1 + σ2|⟨w∗⟩|2π/8 ! . (44)
ERFC,0.7730496453900709,"Of the two terms in the parentheses, the first term starts at 1"
ERFC,0.7754137115839244,"2 for |⟨w∗⟩| = 0 and is monotonically
decreasing to the value 1"
ERFC,0.7777777777777778,"2e1/2σ2Erfc(
1
√"
ERFC,0.7801418439716312,"2σ) ≈
1
√"
ERFC,0.7825059101654847,"2π(σ −σ3 + O(σ5)), while the second term starts at
0 and increases to the larger value
σ
√"
ERFC,0.7848699763593381,"2π. Thus, there is a unique fixed point. For RL, uniqueness of
the fixed point can be shown using an analogous argument."
ERFC,0.7872340425531915,"This fixed point ⟨w∗⟩is stable, because for SL, (14) implies that d"
ERFC,0.789598108747045,"dt⟨w⟩= −∇w⟨L⟩L, where L is
the cross-entropy loss and ⟨·⟩L is the average over the input distribution. Thus, ⟨L⟩L is a Lyapunov
function for the dynamical system. For RL, the same argument holds by the policy-gradient theorem,
where ⟨L⟩L additionally includes an average over the output noise."
ERFC,0.7919621749408984,"Note that, for λ = σ = 0, although |⟨w⟩| diverges, a calculation of d"
ERFC,0.7943262411347518,dt log (⟨w⟩·µ)2
ERFC,0.7966903073286052,"|µ|2|⟨w⟩|2 shows that the
alignment between µ and ⟨w⟩still converges to 1. This result is consistent with those of Ji and
Telgarsky [2020]."
ERFC,0.7990543735224587,"MNIST details A
B"
ERFC,0.8014184397163121,"Figure 7: Comparison of the theory with training on raw MNIST. A: Comparison of the empirical
test classification accuracy with the theoretical prediction. B: Just like for the Gabor-filtered inputs,
the theory accurately captures non-trivial ongoing learning dynamics."
ERFC,0.8037825059101655,"When applying our theory to the MNIST dataset, we compare SGD applied to actual data (orange
curves) with calculated SGD curves from our theory (blue curves). In the main text, we preprocess
the data by convolving raw pixel values with a bank of Gabor filters to approximate a more realistic
scenario where the binary classifier appears at the end of a convolutional neural network. For the
plots in Figure 7, we use raw pixel values to demonstrate that our evolution equations (15) work in
general settings without relying on Gabor filter representation. In both cases, we globally translate
all input vectors such that the dataset’s mean is zero. We directly evaluate test set accuracy (Figures
5B and 7A) and the correlation of w at each SGD step with the mean µ of digit ’1’ (Figures 5C and
7B)). To calculate the theoretical accuracy curve, we first numerically solve the differential equations
(15) for the mean µ and covariances Σ0,1 obtained from the empirical dataset to derive w(t). We"
ERFC,0.806146572104019,"then integrate two multivariate normal distributions with these µ and Σ values in the half-spaces
bounded by w(t) (expressible as an error function) and plot the result as the theoretical accuracy
curve in Figures 5B and 7A. The tSNE embedding in Figure 5A is included for illustrative purposes
only and is not used in calculations."
ERFC,0.8085106382978723,Experiments
ERFC,0.8108747044917257,"The numerical code implementing the model and performing the analyses was mostly written in
JAX [Bradbury et al., 2018], as well as Wolfram Mathematica and SciPy [Virtanen et al., 2020]. For
Fig. 2, the flow fields were plotted for the limit of zero input noise and a regularization parameter of
λ = 0.1. The learning curves are plotted for λ = 0 and Σ = σ2I, with σ = 0.1 and σ = 1. As in all
other figures besides Fig. 5, we set |µ| = 1. Each experiment was repeated for 10 runs with different
random seeds, with the standard deviation indicated as a (barely visible) shaded region. The curve of
|⟨w∗⟩| is plotted for the limit of zero input noise. For Fig. 3, we numerically integrated (10) with
λ = 0. For the total variance plotted in Fig. 4, we set λ = 0.1 and integrate the differential equations
(11) numerically. For Fig. 5, the Gabor-filtered inputs were created using [Haghighat et al., 2015]
with default parameters. The perceptron was trained using SGD with a logistic sigmoid output, and
the orange curve in panel B shows test accuracy. The training was repeated 10 times with shuffled
data. We set λ = 1. For the forgetting curves in Fig. 6, we set λ = 10 and the learning rate to
η = 10−2. The curves shown are averages over 50 different random initializations each. The input
dimension is set to N = 500. For all other simulations, the learning rate was set to η = 10−3. The
computations were performed on an NVIDIA Titan Xp GPU, with runtimes of at most a few minutes."
ERFC,0.8132387706855791,NeurIPS Paper Checklist
CLAIMS,0.8156028368794326,1. Claims
CLAIMS,0.817966903073286,"Question: Do the main claims made in the abstract and introduction accurately reflect the
paper’s contributions and scope?
Answer: [Yes]
Justification: As we claim in the abstract, we study the learning dynamics of a nonlinear
perceptron analytically, and apply the results to better understand the effects of the input
distibution, learning rules and an actual perceptron training on MNIST.
Guidelines:"
CLAIMS,0.8203309692671394,"• The answer NA means that the abstract and introduction do not include the claims
made in the paper.
• The abstract and/or introduction should clearly state the claims made, including the
contributions made in the paper and important assumptions and limitations. A No or
NA answer to this question will not be perceived well by the reviewers.
• The claims made should match theoretical and experimental results, and reflect how
much the results can be expected to generalize to other settings.
• It is fine to include aspirational goals as motivation as long as it is clear that these goals
are not attained by the paper.
2. Limitations"
CLAIMS,0.8226950354609929,"Question: Does the paper discuss the limitations of the work performed by the authors?
Answer: [Yes]
Justification: We have included a paragraph in the Discussion section that describes the
most-significant limitations of our approach.
Guidelines:"
CLAIMS,0.8250591016548463,"• The answer NA means that the paper has no limitation while the answer No means that
the paper has limitations, but those are not discussed in the paper.
• The authors are encouraged to create a separate ""Limitations"" section in their paper.
• The paper should point out any strong assumptions and how robust the results are to
violations of these assumptions (e.g., independence assumptions, noiseless settings,
model well-specification, asymptotic approximations only holding locally). The authors
should reflect on how these assumptions might be violated in practice and what the
implications would be.
• The authors should reflect on the scope of the claims made, e.g., if the approach was
only tested on a few datasets or with a few runs. In general, empirical results often
depend on implicit assumptions, which should be articulated.
• The authors should reflect on the factors that influence the performance of the approach.
For example, a facial recognition algorithm may perform poorly when image resolution
is low or images are taken in low lighting. Or a speech-to-text system might not be
used reliably to provide closed captions for online lectures because it fails to handle
technical jargon.
• The authors should discuss the computational efficiency of the proposed algorithms
and how they scale with dataset size.
• If applicable, the authors should discuss possible limitations of their approach to
address problems of privacy and fairness.
• While the authors might fear that complete honesty about limitations might be used by
reviewers as grounds for rejection, a worse outcome might be that reviewers discover
limitations that aren’t acknowledged in the paper. The authors should use their best
judgment and recognize that individual actions in favor of transparency play an impor-
tant role in developing norms that preserve the integrity of the community. Reviewers
will be specifically instructed to not penalize honesty concerning limitations.
3. Theory Assumptions and Proofs"
CLAIMS,0.8274231678486997,"Question: For each theoretical result, does the paper provide the full set of assumptions and
a complete (and correct) proof?"
CLAIMS,0.8297872340425532,"Answer: [Yes]
Justification: All of our mathematical results are based on clearly stated assumptions, and
the steps for obtaining the results are described sufficiently thoroughly that a reader should
be able to reproduce them.
Guidelines:"
CLAIMS,0.8321513002364066,"• The answer NA means that the paper does not include theoretical results.
• All the theorems, formulas, and proofs in the paper should be numbered and cross-
referenced.
• All assumptions should be clearly stated or referenced in the statement of any theorems.
• The proofs can either appear in the main paper or the supplemental material, but if
they appear in the supplemental material, the authors are encouraged to provide a short
proof sketch to provide intuition.
• Inversely, any informal proof provided in the core of the paper should be complemented
by formal proofs provided in appendix or supplemental material.
• Theorems and Lemmas that the proof relies upon should be properly referenced.
4. Experimental Result Reproducibility"
CLAIMS,0.83451536643026,"Question: Does the paper fully disclose all the information needed to reproduce the main ex-
perimental results of the paper to the extent that it affects the main claims and/or conclusions
of the paper (regardless of whether the code and data are provided or not)?
Answer: [Yes]
Justification: The mathematical equations on which our empirical results are based are
provided in the text, and all parameters used for producing the results are stated in the figure
captions or appendix.
Guidelines:"
CLAIMS,0.8368794326241135,"• The answer NA means that the paper does not include experiments.
• If the paper includes experiments, a No answer to this question will not be perceived
well by the reviewers: Making the paper reproducible is important, regardless of
whether the code and data are provided or not.
• If the contribution is a dataset and/or model, the authors should describe the steps taken
to make their results reproducible or verifiable.
• Depending on the contribution, reproducibility can be accomplished in various ways.
For example, if the contribution is a novel architecture, describing the architecture fully
might suffice, or if the contribution is a specific model and empirical evaluation, it may
be necessary to either make it possible for others to replicate the model with the same
dataset, or provide access to the model. In general. releasing code and data is often
one good way to accomplish this, but reproducibility can also be provided via detailed
instructions for how to replicate the results, access to a hosted model (e.g., in the case
of a large language model), releasing of a model checkpoint, or other means that are
appropriate to the research performed.
• While NeurIPS does not require releasing code, the conference does require all submis-
sions to provide some reasonable avenue for reproducibility, which may depend on the
nature of the contribution. For example
(a) If the contribution is primarily a new algorithm, the paper should make it clear how
to reproduce that algorithm.
(b) If the contribution is primarily a new model architecture, the paper should describe
the architecture clearly and fully.
(c) If the contribution is a new model (e.g., a large language model), then there should
either be a way to access this model for reproducing the results or a way to reproduce
the model (e.g., with an open-source dataset or instructions for how to construct
the dataset).
(d) We recognize that reproducibility may be tricky in some cases, in which case
authors are welcome to describe the particular way they provide for reproducibility.
In the case of closed-source models, it may be that access to the model is limited in
some way (e.g., to registered users), but it should be possible for other researchers
to have some path to reproducing or verifying the results."
OPEN ACCESS TO DATA AND CODE,0.8392434988179669,5. Open access to data and code
OPEN ACCESS TO DATA AND CODE,0.8416075650118203,"Question: Does the paper provide open access to the data and code, with sufficient instruc-
tions to faithfully reproduce the main experimental results, as described in supplemental
material?"
OPEN ACCESS TO DATA AND CODE,0.8439716312056738,Answer: [Yes]
OPEN ACCESS TO DATA AND CODE,0.8463356973995272,"Justification: All the source code files can be found in the supplemental materials, which
should allow a reader to straightforwardly recreate all experimental results."
OPEN ACCESS TO DATA AND CODE,0.8486997635933806,Guidelines:
OPEN ACCESS TO DATA AND CODE,0.851063829787234,"• The answer NA means that paper does not include experiments requiring code.
• Please see the NeurIPS code and data submission guidelines (https://nips.cc/
public/guides/CodeSubmissionPolicy) for more details.
• While we encourage the release of code and data, we understand that this might not be
possible, so “No” is an acceptable answer. Papers cannot be rejected simply for not
including code, unless this is central to the contribution (e.g., for a new open-source
benchmark).
• The instructions should contain the exact command and environment needed to run to
reproduce the results. See the NeurIPS code and data submission guidelines (https:
//nips.cc/public/guides/CodeSubmissionPolicy) for more details.
• The authors should provide instructions on data access and preparation, including how
to access the raw data, preprocessed data, intermediate data, and generated data, etc.
• The authors should provide scripts to reproduce all experimental results for the new
proposed method and baselines. If only a subset of experiments are reproducible, they
should state which ones are omitted from the script and why.
• At submission time, to preserve anonymity, the authors should release anonymized
versions (if applicable).
• Providing as much information as possible in supplemental material (appended to the
paper) is recommended, but including URLs to data and code is permitted."
OPEN ACCESS TO DATA AND CODE,0.8534278959810875,6. Experimental Setting/Details
OPEN ACCESS TO DATA AND CODE,0.8557919621749409,"Question: Does the paper specify all the training and test details (e.g., data splits, hyper-
parameters, how they were chosen, type of optimizer, etc.) necessary to understand the
results?"
OPEN ACCESS TO DATA AND CODE,0.8581560283687943,Answer: [Yes]
OPEN ACCESS TO DATA AND CODE,0.8605200945626478,"Justification: All parameters used for producing the results are stated in the figure captions
or appendix."
OPEN ACCESS TO DATA AND CODE,0.8628841607565012,Guidelines:
OPEN ACCESS TO DATA AND CODE,0.8652482269503546,"• The answer NA means that the paper does not include experiments.
• The experimental setting should be presented in the core of the paper to a level of detail
that is necessary to appreciate the results and make sense of them.
• The full details can be provided either with the code, in appendix, or as supplemental
material."
EXPERIMENT STATISTICAL SIGNIFICANCE,0.8676122931442081,7. Experiment Statistical Significance
EXPERIMENT STATISTICAL SIGNIFICANCE,0.8699763593380615,"Question: Does the paper report error bars suitably and correctly defined or other appropriate
information about the statistical significance of the experiments?"
EXPERIMENT STATISTICAL SIGNIFICANCE,0.8723404255319149,Answer: [Yes]
EXPERIMENT STATISTICAL SIGNIFICANCE,0.8747044917257684,"Justification: The empirical curves in all relevant figures include shading to represent
standard deviations."
EXPERIMENT STATISTICAL SIGNIFICANCE,0.8770685579196218,Guidelines:
EXPERIMENT STATISTICAL SIGNIFICANCE,0.8794326241134752,"• The answer NA means that the paper does not include experiments.
• The authors should answer ""Yes"" if the results are accompanied by error bars, confi-
dence intervals, or statistical significance tests, at least for the experiments that support
the main claims of the paper."
EXPERIMENT STATISTICAL SIGNIFICANCE,0.8817966903073287,"• The factors of variability that the error bars are capturing should be clearly stated (for
example, train/test split, initialization, random drawing of some parameter, or overall
run with given experimental conditions).
• The method for calculating the error bars should be explained (closed form formula,
call to a library function, bootstrap, etc.)
• The assumptions made should be given (e.g., Normally distributed errors).
• It should be clear whether the error bar is the standard deviation or the standard error
of the mean.
• It is OK to report 1-sigma error bars, but one should state it. The authors should
preferably report a 2-sigma error bar than state that they have a 96% CI, if the hypothesis
of Normality of errors is not verified.
• For asymmetric distributions, the authors should be careful not to show in tables or
figures symmetric error bars that would yield results that are out of range (e.g. negative
error rates).
• If error bars are reported in tables or plots, The authors should explain in the text how
they were calculated and reference the corresponding figures or tables in the text."
EXPERIMENTS COMPUTE RESOURCES,0.8841607565011821,8. Experiments Compute Resources
EXPERIMENTS COMPUTE RESOURCES,0.8865248226950354,"Question: For each experiment, does the paper provide sufficient information on the com-
puter resources (type of compute workers, memory, time of execution) needed to reproduce
the experiments?"
EXPERIMENTS COMPUTE RESOURCES,0.8888888888888888,Answer: [Yes]
EXPERIMENTS COMPUTE RESOURCES,0.8912529550827423,"Justification: The modest compute resources required for our experiments are described in
the appendix."
EXPERIMENTS COMPUTE RESOURCES,0.8936170212765957,Guidelines:
EXPERIMENTS COMPUTE RESOURCES,0.8959810874704491,"• The answer NA means that the paper does not include experiments.
• The paper should indicate the type of compute workers CPU or GPU, internal cluster,
or cloud provider, including relevant memory and storage.
• The paper should provide the amount of compute required for each of the individual
experimental runs as well as estimate the total compute.
• The paper should disclose whether the full research project required more compute
than the experiments reported in the paper (e.g., preliminary or failed experiments that
didn’t make it into the paper)."
CODE OF ETHICS,0.8983451536643026,9. Code Of Ethics
CODE OF ETHICS,0.900709219858156,"Question: Does the research conducted in the paper conform, in every respect, with the
NeurIPS Code of Ethics https://neurips.cc/public/EthicsGuidelines?"
CODE OF ETHICS,0.9030732860520094,Answer: [Yes]
CODE OF ETHICS,0.9054373522458629,"Justification: The research conducted in this paper conforms with the Code of Ethics in all
respects."
CODE OF ETHICS,0.9078014184397163,Guidelines:
CODE OF ETHICS,0.9101654846335697,"• The answer NA means that the authors have not reviewed the NeurIPS Code of Ethics.
• If the authors answer No, they should explain the special circumstances that require a
deviation from the Code of Ethics.
• The authors should make sure to preserve anonymity (e.g., if there is a special consid-
eration due to laws or regulations in their jurisdiction)."
BROADER IMPACTS,0.9125295508274232,10. Broader Impacts
BROADER IMPACTS,0.9148936170212766,"Question: Does the paper discuss both potential positive societal impacts and negative
societal impacts of the work performed?"
BROADER IMPACTS,0.91725768321513,Answer: [NA]
BROADER IMPACTS,0.9196217494089834,"Justification: This work is foundational research, and we do not foresee any direct societal
impacts that could potentially arise from it."
BROADER IMPACTS,0.9219858156028369,Guidelines:
BROADER IMPACTS,0.9243498817966903,"• The answer NA means that there is no societal impact of the work performed.
• If the authors answer NA or No, they should explain why their work has no societal
impact or why the paper does not address societal impact.
• Examples of negative societal impacts include potential malicious or unintended uses
(e.g., disinformation, generating fake profiles, surveillance), fairness considerations
(e.g., deployment of technologies that could make decisions that unfairly impact specific
groups), privacy considerations, and security considerations.
• The conference expects that many papers will be foundational research and not tied
to particular applications, let alone deployments. However, if there is a direct path to
any negative applications, the authors should point it out. For example, it is legitimate
to point out that an improvement in the quality of generative models could be used to
generate deepfakes for disinformation. On the other hand, it is not needed to point out
that a generic algorithm for optimizing neural networks could enable people to train
models that generate Deepfakes faster.
• The authors should consider possible harms that could arise when the technology is
being used as intended and functioning correctly, harms that could arise when the
technology is being used as intended but gives incorrect results, and harms following
from (intentional or unintentional) misuse of the technology.
• If there are negative societal impacts, the authors could also discuss possible mitigation
strategies (e.g., gated release of models, providing defenses in addition to attacks,
mechanisms for monitoring misuse, mechanisms to monitor how a system learns from
feedback over time, improving the efficiency and accessibility of ML)."
SAFEGUARDS,0.9267139479905437,11. Safeguards
SAFEGUARDS,0.9290780141843972,"Question: Does the paper describe safeguards that have been put in place for responsible
release of data or models that have a high risk for misuse (e.g., pretrained language models,
image generators, or scraped datasets)?"
SAFEGUARDS,0.9314420803782506,Answer: [NA]
SAFEGUARDS,0.933806146572104,Justification: Our work poses no such risks.
SAFEGUARDS,0.9361702127659575,Guidelines:
SAFEGUARDS,0.9385342789598109,"• The answer NA means that the paper poses no such risks.
• Released models that have a high risk for misuse or dual-use should be released with
necessary safeguards to allow for controlled use of the model, for example by requiring
that users adhere to usage guidelines or restrictions to access the model or implementing
safety filters.
• Datasets that have been scraped from the Internet could pose safety risks. The authors
should describe how they avoided releasing unsafe images.
• We recognize that providing effective safeguards is challenging, and many papers do
not require this, but we encourage authors to take this into account and make a best
faith effort."
LICENSES FOR EXISTING ASSETS,0.9408983451536643,12. Licenses for existing assets
LICENSES FOR EXISTING ASSETS,0.9432624113475178,"Question: Are the creators or original owners of assets (e.g., code, data, models), used in
the paper, properly credited and are the license and terms of use explicitly mentioned and
properly respected?"
LICENSES FOR EXISTING ASSETS,0.9456264775413712,"Answer: [Yes]
Justification: The only non-standard external code we used is [Haghighat et al., 2015] for
the extraction of Gabor filters. As mentioned in the citation, the code is released under a
BSD clause-2 license."
LICENSES FOR EXISTING ASSETS,0.9479905437352246,Guidelines:
LICENSES FOR EXISTING ASSETS,0.950354609929078,"• The answer NA means that the paper does not use existing assets.
• The authors should cite the original paper that produced the code package or dataset.
• The authors should state which version of the asset is used and, if possible, include a
URL.
• The name of the license (e.g., CC-BY 4.0) should be included for each asset."
LICENSES FOR EXISTING ASSETS,0.9527186761229315,"• For scraped data from a particular source (e.g., website), the copyright and terms of
service of that source should be provided.
• If assets are released, the license, copyright information, and terms of use in the
package should be provided. For popular datasets, paperswithcode.com/datasets
has curated licenses for some datasets. Their licensing guide can help determine the
license of a dataset.
• For existing datasets that are re-packaged, both the original license and the license of
the derived asset (if it has changed) should be provided.
• If this information is not available online, the authors are encouraged to reach out to
the asset’s creators."
NEW ASSETS,0.9550827423167849,13. New Assets
NEW ASSETS,0.9574468085106383,"Question: Are new assets introduced in the paper well documented and is the documentation
provided alongside the assets?"
NEW ASSETS,0.9598108747044918,Answer: [NA]
NEW ASSETS,0.9621749408983451,Justification: The paper does not release new assets.
NEW ASSETS,0.9645390070921985,Guidelines:
NEW ASSETS,0.966903073286052,"• The answer NA means that the paper does not release new assets.
• Researchers should communicate the details of the dataset/code/model as part of their
submissions via structured templates. This includes details about training, license,
limitations, etc.
• The paper should discuss whether and how consent was obtained from people whose
asset is used.
• At submission time, remember to anonymize your assets (if applicable). You can either
create an anonymized URL or include an anonymized zip file."
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.9692671394799054,14. Crowdsourcing and Research with Human Subjects
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.9716312056737588,"Question: For crowdsourcing experiments and research with human subjects, does the paper
include the full text of instructions given to participants and screenshots, if applicable, as
well as details about compensation (if any)?"
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.9739952718676123,Answer: [NA]
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.9763593380614657,Justification: The paper does not involve crowdsourcing nor research with human subjects.
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.9787234042553191,Guidelines:
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.9810874704491725,"• The answer NA means that the paper does not involve crowdsourcing nor research with
human subjects.
• Including this information in the supplemental material is fine, but if the main contribu-
tion of the paper involves human subjects, then as much detail as possible should be
included in the main paper.
• According to the NeurIPS Code of Ethics, workers involved in data collection, curation,
or other labor should be paid at least the minimum wage in the country of the data
collector."
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.983451536643026,"15. Institutional Review Board (IRB) Approvals or Equivalent for Research with Human
Subjects"
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.9858156028368794,"Question: Does the paper describe potential risks incurred by study participants, whether
such risks were disclosed to the subjects, and whether Institutional Review Board (IRB)
approvals (or an equivalent approval/review based on the requirements of your country or
institution) were obtained?"
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.9881796690307328,Answer: [NA]
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.9905437352245863,Justification: The paper does not involve crowdsourcing nor research on human subjects.
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.9929078014184397,Guidelines:
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.9952718676122931,"• The answer NA means that the paper does not involve crowdsourcing nor research with
human subjects."
CROWDSOURCING AND RESEARCH WITH HUMAN SUBJECTS,0.9976359338061466,"• Depending on the country in which research is conducted, IRB approval (or equivalent)
may be required for any human subjects research. If you obtained IRB approval, you
should clearly state this in the paper.
• We recognize that the procedures for this may vary significantly between institutions
and locations, and we expect authors to adhere to the NeurIPS Code of Ethics and the
guidelines for their institution.
• For initial submissions, do not include any information that would break anonymity (if
applicable), such as the institution conducting the review."
