Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.0013422818791946308,"We study the optimization of wide neural networks (NNs) via gradient flow (GF)
in setups that allow feature learning while admitting non-asymptotic global con-
vergence guarantees. First, for wide shallow NNs under the mean-field scaling
and with a general class of activation functions, we prove that when the input
dimension is no less than the size of the training set, the training loss converges to
zero at a linear rate under GF. Building upon this analysis, we study a model of
wide multi-layer NNs whose second-to-last layer is trained via GF, for which we
also prove a linear-rate convergence of the training loss to zero, but regardless of
the input dimension. We also show empirically that, unlike in the Neural Tangent
Kernel (NTK) regime, our multi-layer model exhibits feature learning and can
achieve better generalization performance than its NTK counterpart."
INTRODUCTION,0.0026845637583892616,"1
INTRODUCTION"
INTRODUCTION,0.004026845637583893,"The training of neural networks (NNs) is typically a non-convex optimization problem, but remarkably,
simple algorithms like gradient descent (GD) or its variants can usually succeed in finding solutions
with low training losses. To understand this phenomenon, a promising idea is to focus on NNs with
large widths (a.k.a. under over-parameterization), for which we can derive infinite-width limits under
suitable ways to scale the parameters by the widths. For example, under a “1/
√"
INTRODUCTION,0.005369127516778523,"width” scaling of
the weights, the GD dynamics of wide NNs can be approximated by the linearized dynamics around
initialization, and as the widths tend to infinity, we obtain the Neural Tangent Kernel (NTK) limit of
NNs, where the solution obtained by GD coincides with a kernel method [37]. Importantly, theoretical
guarantees for optimization and generalization can be obtained for wide NNs under this scaling
[19, 5]. Nonetheless, it was pointed out that this NTK analysis replies on a form of lazy training
that excludes the learning of features or representations [16, 72], which is a crucial ingredient to the
success of deep learning, and is therefore not adequate for explaining the success of NNs [27, 41]."
INTRODUCTION,0.006711409395973154,"Meanwhile, for shallow (i.e., one-hidden-layer) NNs, if we choose a “1 / width” scaling, we can
derive an alternative mean-field (MF) limit as the widths tend to infinity. Under this scaling, feature
learning occurs even in the infinite-width limit, and the training dynamics can be described by the
Wasserstein gradient flow of a probability measure on the space of the parameters, which converges
to a global minimizer of the loss function under certain conditions [59, 50, 63, 14]. Generalization
guarantees have also been proved for learning with shallow NNs under the MF scaling by identifying
a corresponding function space [6, 48]. However, currently there are three limitations to this model of
over-parameterized NNs. First, the global convergence guarantees for shallow NNs only hold in the
infinite-width limit (i.e. they are asymptotic). While [12] studies the deviation between finite-width
NNs and their infinite-width limits during training, the analysis is done only asymptotically to the"
INTRODUCTION,0.008053691275167786,"next order in width. Second, a convergence rate has yet to be established except under special
assumptions or with modifications to the GD algorithm [13, 34, 43, 38]. Third, while several works
have proposed to extend the MF formulation to deep (i.e., multi-layer) NNs [4, 62, 52, 23, 57], there
is less concensus on what the right model should be than for the shallow case. In summary, we still
lack a model for the GD optimization of shallow and multi-layer NNs that goes beyond lazy training
while admitting fast global convergence."
INTRODUCTION,0.009395973154362415,"In this work, we study the optimization of both shallow NNs under the MF scaling and a type of
partially-trained multi-layer NNs, and obtain theoretical guarantees of linear-rate global convergence."
SUMMARY OF MAIN CONTRIBUTIONS,0.010738255033557046,"1.1
SUMMARY OF MAIN CONTRIBUTIONS"
SUMMARY OF MAIN CONTRIBUTIONS,0.012080536912751677,"We consider the scenario of training NN models to fit a training set of n data points in dimension d,
where the model parameters are optimized by gradient flow (GF, which is the continuous-time limit
of GD) with respect to the squared loss. Allowing most choices of the activation function, we prove
that:"
SUMMARY OF MAIN CONTRIBUTIONS,0.013422818791946308,"1. For a shallow NN, if the hidden layer is sufficiently wide and the input data are linearly
independent (requiring n ≤d), then with high probability, the training loss converges to
zero at a linear rate."
SUMMARY OF MAIN CONTRIBUTIONS,0.01476510067114094,"2. For a multi-layer NN where we only train the second-to-last layer, if the hidden layers are
both sufficiently wide, then with high probability, the training loss converges to zero at
a linear rate. Unlike for shallow NNs, here we no longer need the requirement on input
dimension, demonstrating a benefit of jointly having depth and width."
SUMMARY OF MAIN CONTRIBUTIONS,0.016107382550335572,"We also run numerical experiments to demonstrate that our model exhibits feature learning and can
achieve better generalization performance than its NTK counterpart."
RELATED WORKS,0.0174496644295302,"1.2
RELATED WORKS"
RELATED WORKS,0.01879194630872483,"Over-parameterized NNs, NTK and lazy training.
Many recent works have studied the opti-
mization landscape of NNs and the benefits of over-parameterization [24, 67, 60, 66, 64, 54, 65, 42,
3, 40, 76, 15, 75, 17, 39, 9, 32, 20, 31, 61, 10]. One influential idea is the Neural Tangent Kernel
(NTK) [37], which characterizes the behavior of GD on the infinite-width limit of NNs under a
particular scaling of the parameters (e.g. for shallow NNs, replacing 1/m with 1/√m in (1)). In
particular, when the network width is polynomially large in the size of the training set, the training
loss converges to a global minimum at a linear rate under GD [19, 5, 55]. Nonetheless, in the NTK
limit, due to a relatively large scaling of the parameters at initialization, the hidden-layer features do
not move significantly [37, 19, 16]. For this reason, the NTK scaling has been called the lazy-training
regime, as opposed to a feature-learning or rich regime [16, 72, 26]. Several works have investigated
the differences between the two regimes both in theory [28, 29, 69, 47] and in practice [27, 41].
In addition, several works have generalized the NTK analysis by considering higher-order Taylor
approximations of the GD dynamics or finite-width corrections to the NTK [2, 35, 7, 33]."
RELATED WORKS,0.020134228187919462,"Mean-field theory of NNs.
An alternative path has been taken to study shallow NNs in the
mean-field scaling (as in (1)), where the infinite-width limit is analogous to the thermodynamic
or hydrodynamic limit of interacting particle systems [59, 50, 63, 14, 49, 70]. Thanks to the
interchangeability of the parameters, the neural network is equivalently characterized by a probability
measure on the space of its parameters, and the training can then be described by a Wasserstein
gradient flow followed by this probability measure, which, in the infinite-width limit, converges to
global mimima under mild conditions. Regarding convergence rate, ref. [71] proves that if we train
a shallow NN to fit a Lipschitz target function under population loss, the convergence rate cannot
beat the curse of dimensionality. In contrast, we will study the setting of empirical risk minimization,
where there are finitely many training data. Ref. [34] shows that mean field Langevin dynamics on
shallow NNs can converge exponentially to global minimizers in over-regularized scenarios, but we
focus on GF without entropic regularization. Besides the question of optimization, shallow NNs
under this scaling represent functions in the Barron space [48] or variation-norm function space [6],
which provide theoretical guarantees on generalization as well as fluctuation in training [12]. Several
works have proposed different mean-field limits of wide multi-layer NNs and proved convergence"
RELATED WORKS,0.021476510067114093,"guarantees [4, 62, 51, 52, 23, 57, 22], but questions remain. First, due to the presence of different
symmetries in a multi-layer network compared to a shallow network [57], the limiting object at the
infinite-width limit is often quite complicated. Second, it has been pointed out that under the MF
scaling of a multi-layer network, an i.i.d. initialization of the weights would lead to a collapse of
the diversity of neurons in the middle layers, diminishing the effect of having large widths [23]. In
addition, while another line of work develops MF models of residual models [8, 46, 21, 36], we are
interested in multi-layer NN models with a large width in every layer."
RELATED WORKS,0.022818791946308724,"Feature learning in deep NNs.
Ref. [1] demonstrates the importance of hierarchical learning by
proving the existence of concept classes that can be learned efficiently by a deep NN with quadratic
activations but not by non-hierarchical models. Ref. [11] studies the optimization landscape and
generalization properties of a hierarchical model that is similar to ours in spirit, where an untrained
embedding of the input is passed into a trainable shallow model, and prove an improvement in sample
complexity in learning polynomials by having neural network outputs as the embedding. However,
the trainable models they consider are not shallow NNs but their linearized and quadratic-Taylor
approximations, and furthermore the convergence rate of the training is not known. Ref. [73] proposes
a novel parameterization under which there exists an infinite-width limit of deep NNs that exhibits
feature learning, but properties of its training dynamics is not well-understood. Our multi-layer NN
models adopt an equivalent scaling (see Appendix C), and our focus is on proving non-asymptotic
convergence guarantees for its partial training under GF."
PROBLEM SETUP,0.024161073825503355,"2
PROBLEM SETUP"
MODEL,0.025503355704697986,"2.1
MODEL"
MODEL,0.026845637583892617,"We summarize our notations in Appendix A. Let Ω⊆Rd denote the input space, and let x =
[x1, ..., xd]⊺∈Ωdenote a generic input data vector. A shallow NN model under the MF scaling can
be written as:"
MODEL,0.028187919463087248,"f(x) = 1 m m
X"
MODEL,0.02953020134228188,"i=1
ciσ
 1
√ d d
X"
MODEL,0.03087248322147651,"j=1
Wijxj

,
(1)"
MODEL,0.032214765100671144,"where m is the width, W ∈Rm×d and c = [c1, ..., cm] ∈Rm are the first- and second-layer weight
parameters of the model, and σ : R →R is the activation function. For simplicity of presentation, we
neglect the bias terms. In this paper, we study a more general type of models with the following form:"
MODEL,0.03355704697986577,"f(x) = 1 m m
X"
MODEL,0.0348993288590604,"i=1
ciσ
 
hi(x)

,
(2)"
MODEL,0.036241610738255034,"∀i ∈[m]
:
hi(x) = 1
√ D D
X"
MODEL,0.03758389261744966,"j=1
Wijϕj(x) ,
(3)"
MODEL,0.038926174496644296,"where W ∈Rm×D and c = [c1, ..., cm] ∈Rm are parameters of the model, and ϕ1, ..., ϕD are a set
of functions from Ωto R that we call the embedding. Each of h1, ..., hm is a function from Ωto R,
and we will refer to them as the (hidden-layer) feature map or activations. For simplicity, we write
Φ(x) = [ϕi(x), ...ϕD(x)]⊺∈RD. We consider two types of the embedding, Φ, as described below:"
MODEL,0.040268456375838924,"Fixed embedding
D is fixed and Φ is deterministic. In the simplest example, we set D = d and
ϕj(x) = xj, ∀j ∈[D], and recover the shallow NN model in (1). More generally, our definition
includes cases where Φ is a deterministic transformation of an input vector in Ωinto an embedding
vector in RD. This can be understood as input pre-processing or feature engineering."
MODEL,0.04161073825503356,"High-dimensional random embedding
D is large and Φ is random. For instance, we can sample
each zj i.i.d. in Rd and set ϕj(x) = σ

1
√"
MODEL,0.042953020134228186,"dz⊺
j x

, equivalent to setting ϕ1, ..., ϕm as the hidden-layer"
MODEL,0.04429530201342282,"activations of a shallow NN with randomly-initialized first-layer weights. Then, the model becomes"
MODEL,0.04563758389261745,"f(x) = 1 m m
X"
MODEL,0.04697986577181208,"i=1
ciσ
 
hi(x)

,
(4)"
MODEL,0.04832214765100671,"∀i ∈[m]
:
hi(x) = 1
√ D D
X"
MODEL,0.049664429530201344,"j=1
Wijσ
 1
√"
MODEL,0.05100671140939597,"d
z⊺
j x

.
(5)"
MODEL,0.052348993288590606,"Thus, we obtain a 3-layer feed-forward NN whose first-layer weights are random and fixed, and
we call it a partially-trained 3-layer (P-3L) NN. Note that the scaling in this model is different
from both the NTK scaling (1/√m instead of 1/m in (4)) and the MF scaling for multi-layer NNs
adopted in [4, 62, 51, 57, 23] (1/D instead of 1/
√"
MODEL,0.053691275167785234,"D in (5)). We show in Appendix B that when σ is
homogeneous, this scaling is consistent with the Xavier initialization of neural network parameters
up to a reparameterization [30, 56]. We also show in Appendix C that in certain cases this scaling is
equivalent to the maximum-update parameterization proposed in [73]. Numerical experiments that
compare different scalings are described in Section 4."
TRAINING WITH GRADIENT FLOW,0.05503355704697987,"2.2
TRAINING WITH GRADIENT FLOW"
TRAINING WITH GRADIENT FLOW,0.056375838926174496,"Consider the scenario of supervised least-squares regression, where we are given a set of n training
data points together with their target values, (x1, y1), ..., (xn, yn) ∈Ω× R. We fit our models by
minimizing the empirical squared loss:"
TRAINING WITH GRADIENT FLOW,0.05771812080536913,"L[f] = 1 2 n
X a=1"
TRAINING WITH GRADIENT FLOW,0.05906040268456376," 
f(xa) −ya
2 .
(6)"
TRAINING WITH GRADIENT FLOW,0.06040268456375839,"To do so, we first initialize the parameters randomly by sampling each ci and Wij i.i.d. from
probability measures πc ∈P(R) and πw ∈P(RD), respectively, and then perform GD on W. For
simplicity of analysis, we leave c untrained, and further assume that
Assumption 1. πc = 1"
TRAINING WITH GRADIENT FLOW,0.06174496644295302,2δˆc(dc) + 1
TRAINING WITH GRADIENT FLOW,0.06308724832214765,"2δ−ˆc(dc) for some ˆc > 0 independent from m, which is the law of
a scaled Rademacher random variable."
TRAINING WITH GRADIENT FLOW,0.06442953020134229,"If σ is Lipschitz, it is differentiable almost everywhere, and we write σ′(x) to denote the derivative
of σ when it is differentiable at x and 0 otherwise. When σ is differentiable at hi(x), there is"
TRAINING WITH GRADIENT FLOW,0.06577181208053691,"∂f
∂Wij
(x) =
1
m
√"
TRAINING WITH GRADIENT FLOW,0.06711409395973154,"D
ciσ′ 
hi(x)

ϕj(x) ,
(7)"
TRAINING WITH GRADIENT FLOW,0.06845637583892618,and the gradient of the loss function with respect to Wij is given by ∂L[f]
TRAINING WITH GRADIENT FLOW,0.0697986577181208,"∂Wij
=
1
m
√ D
ci n
X"
TRAINING WITH GRADIENT FLOW,0.07114093959731543,"a=1
(f(xa) −ya) σ′ 
hi(xa)

ϕj(xa) .
(8)"
TRAINING WITH GRADIENT FLOW,0.07248322147651007,"Thus, we can perform GD updates on W according to the following rule: ∀i ∈[m] and ∀j ∈[D],"
TRAINING WITH GRADIENT FLOW,0.0738255033557047,"Wij
←
Wij −mδ ∂L[f]"
TRAINING WITH GRADIENT FLOW,0.07516778523489932,"∂Wij
= Wij −
δ
√ D
ci n
X"
TRAINING WITH GRADIENT FLOW,0.07651006711409396,"a=1
(f(xa) −ya) σ′ 
hi(xa)

ϕj(xa) ,
(9)"
TRAINING WITH GRADIENT FLOW,0.07785234899328859,"where δ > 0 is the step size. As we discuss in Appendix B, this is consistent with the standard GD
update rule for Xavier-initialzed NNs. In the limit of infinitesimal step size (δ →0), the evolution of
the parameters during training is described by the GF equation: if we use the superscript t ≥0 to
denote time elaposed during training, the time-derivative of the parameters is given by"
TRAINING WITH GRADIENT FLOW,0.07919463087248323,"˙W t
ij = −ci
√ D n
X a=1"
TRAINING WITH GRADIENT FLOW,0.08053691275167785," 
f t(xa) −ya

σ′ 
ht
i(xa)

ϕj(xa) ,
(10)"
TRAINING WITH GRADIENT FLOW,0.08187919463087248,"where f t denotes the output function and ht
1, ..., ht
m denote the hidden-layer feature maps determined
by the parameters at time t. Then, induced by the evolution of W t, each ht
i evolves according to"
TRAINING WITH GRADIENT FLOW,0.08322147651006712,"∀x ∈Ω
:
˙ht
i(x) = 1
√ D D
X"
TRAINING WITH GRADIENT FLOW,0.08456375838926175,"j=1
˙W t
ijϕj(x) = −ci n
X"
TRAINING WITH GRADIENT FLOW,0.08590604026845637,"a=1
G(x, xa)
 
f t(xa) −ya

σ′ 
ht
i(xa)

, (11)"
TRAINING WITH GRADIENT FLOW,0.087248322147651,where we define a kernel function G : Ω× Ω→R as
TRAINING WITH GRADIENT FLOW,0.08859060402684564,"G(x, x′) = 1 D D
X"
TRAINING WITH GRADIENT FLOW,0.08993288590604027,"j=1
ϕj(x)ϕj(x′) = 1"
TRAINING WITH GRADIENT FLOW,0.0912751677852349,"D(Φ(x))⊺Φ(x′) .
(12)"
TRAINING WITH GRADIENT FLOW,0.09261744966442953,"Accordingly, the output function f t satisfies"
TRAINING WITH GRADIENT FLOW,0.09395973154362416,"∀x ∈Ω
:
˙f t(x) = 1 m m
X"
TRAINING WITH GRADIENT FLOW,0.0953020134228188,"i=1
ciσ′ 
ht
i(x)
˙ht
i(x)"
TRAINING WITH GRADIENT FLOW,0.09664429530201342,"= −ˆc2 m m
X"
TRAINING WITH GRADIENT FLOW,0.09798657718120805,"i=1
σ′ 
ht
i(x)

n
X"
TRAINING WITH GRADIENT FLOW,0.09932885906040269,"a=1
G(x, xa)
 
f t(xa) −ya

σ′ 
ht
i(xa)

, (13)"
TRAINING WITH GRADIENT FLOW,0.10067114093959731,"Thus, the loss function Lt := L[f t] evolves according to ˙Lt = n
X a=1"
TRAINING WITH GRADIENT FLOW,0.10201342281879194," 
f t(xa) −ya
 ˙f t(xa)"
TRAINING WITH GRADIENT FLOW,0.10335570469798658,"= −ˆc2 m m
X i=1 n
X"
TRAINING WITH GRADIENT FLOW,0.10469798657718121,"a,b=1
Gab
 
f t(xa) −ya
  
f t(xb) −yb

σ′ 
hi(xa)

σ′ 
hi(xb)
"
TRAINING WITH GRADIENT FLOW,0.10604026845637583,"≤−ˆc2λmin(G) m m
X i=1 n
X a=1"
TRAINING WITH GRADIENT FLOW,0.10738255033557047," 
f t(xa) −ya
2  
σ′ 
hi(xa)
2 , (14)"
TRAINING WITH GRADIENT FLOW,0.1087248322147651,"where we define the (symmetric) Gram matrix G ∈Rn×n with entries Gab = Gba = G(xa, xb),
and use λmin(G) to denote its least eigenvalue. We will also use Gmin = mina∈[n] Gaa and
Gmax = maxa∈[n] Gaa to denote the minimum and maximum diagonal entries of G, respectively.
Since G is positive semi-definite, we see that ˙Lt ≤0, which means that the loss value is indeed
non-increasing along the GF trajectory."
TRAINING WITH GRADIENT FLOW,0.11006711409395974,"Feature learning
Compared to the NTK scaling of neural networks, the crucial difference is the
1/m factor in (2), instead of 1/√m. It is known that under the NTK scaling, due to the 1/√m
factor, the movement of the feature maps, h1, ..., hm, is only of order O(1/√m) while the function
value changes by an amount of order Ω(1). While this greatly simplifies the convergence analysis,
it also implies that the hidden-layer representations are not being learned. In contrast, with the
1/m factor in (2), if σ is Lipschitz with Lipschitz constant Lσ, there is |f t2(x) −f t1(x)| ≤
Lσˆc"
TRAINING WITH GRADIENT FLOW,0.11140939597315436,"m
Pm
i=1 |ht2
i (x) −ht1
i (x)|, ∀t1, t2 ≥0. Therefore, regardless of m and D,"
M,0.11275167785234899,"1
m m
X"
M,0.11409395973154363,"i=1
|ht1
i (x) −ht2
i (x)| ≥(ˆc)−1(Lσ)−1|f t1(x) −f t2(x)| ,
(15)"
M,0.11543624161073826,"which implies that the average movement of the feature maps is on the same order as the change in
function value, and thus the hidden-layer representations as well as the NTK undergoes nontrivial
movement during training. In Appendix C, we further justify the occurrence of feature learning using
the framework developed in [73]."
CONVERGENCE ANALYSIS,0.11677852348993288,"3
CONVERGENCE ANALYSIS"
MODELS WITH A FIXED EMBEDDING,0.11812080536912752,"3.1
MODELS WITH A FIXED EMBEDDING"
MODELS WITH A FIXED EMBEDDING,0.11946308724832215,"To prove that the training loss converges to zero, we need a lower bound on the absolute value of
˙Lt. Indeed, if G is positive definite, which depends on Φ and the training data, we can establish one
in the following way. First, as a simple case, if we use an activation function whose derivative’s
absolute value is uniformly bounded from below by a constant Kσ′ > 0, such as linear, cubic or
(smoothed) Leaky ReLU activations, we can derive a Polyak-Lojasiewicz (PL) condition [58, 45]
from (14) directly,"
MODELS WITH A FIXED EMBEDDING,0.12080536912751678,"˙Lt ≤−2ˆc2λmin(G) (Kσ′)2 Lt ,
(16)"
MODELS WITH A FIXED EMBEDDING,0.1221476510067114,"which implies Lt ≤L0e−2ˆc2λmin(G)(Kσ′)2t, indicating that the training loss decays to 0 at a linear
rate."
MODELS WITH A FIXED EMBEDDING,0.12348993288590604,"For more general choices of the activation function, a challenge is to guarantee that, heuristically
speaking, for each a ∈[n], σ′ 
hi(xa)

does not become near zero for too many i ∈[m] before the
loss vanishes. To facilitate a finer-grained analysis, we need the following mild assumption on σ:
Assumption 2. σ is Lipschitz with Lipschitz constant Lσ, and there exists an open interval I =
(Il, Ir) ⊆R on which σ is differentiable and |σ′| is lower-bounded by some Kσ′ > 0."
MODELS WITH A FIXED EMBEDDING,0.12483221476510067,"Intuitively, I is an active region of σ, within which the derivative has a magnitude bounded away
from zero. This assumption is satisfied by the majority of activation functions in practice, including
smooth ones such as tanh and sigmoid as well as non-smooth ones such as ReLU. Then, under the
following initialization scheme, we prove a general result for models with a fixed embedding.
Assumption 3. πw is the D-dimensional standard Gaussian distribution, i.e., each Wij is sampled
independently from a standard Gaussian distribution.
Theorem 1 (Fixed embedding). Suppose that Assumptions 1, 2 and 3 are satisfied, and λmin(G) > 0.
Then ∃ˆc0, r and C > 0 such that ∀δ > 0, if ˆc ≥ˆc0λmax(G)/λmin(G) and m ≥C(1+ ˆc2) log (n/δ),
then with probability at least 1 −δ, it holds that ∀t ≥0,"
MODELS WITH A FIXED EMBEDDING,0.1261744966442953,"Lt ≤L0e−rˆc2λmin(G)t .
(17)"
MODELS WITH A FIXED EMBEDDING,0.12751677852348994,"Here, ˆc0, r and C depend on I, Gmin, Gmax, ∥y∥, Lσ and Kσ′ (but not on m, n, d, D, δ, or λmin(G))."
MODELS WITH A FIXED EMBEDDING,0.12885906040268458,"The result is proved in Appendix E, and below we briefly describe the intuition. A key to the proof is
to guarantee that enough neurons remain in the active region throughout training. Specifically, with
respect to each training data point (i.e. for each a ∈[n]), we can keep track of the proportion of
neurons (among all i ∈[m]) for which ht
i(xa) ∈I. We show that if the proportion is large enough
at initialization (shown by Lemma 3 in Appendix E.2 under Assumption 3), then it cannot drop
dramatically without a simultaneous decrease of the loss value, as long as the ci’s are not too small in
absolute value. This property of the dynamics is formalized in the following lemma:
Lemma 1. Consider the dynamics of Lt and

ht
i(xa)"
MODELS WITH A FIXED EMBEDDING,0.13020134228187918,"i∈[m],a∈[n] governed by (11) and (14). Assume
that λmin(G) > 0, and ∀i ∈[m], |ci| = ˆc > 0. Under Assumption 2, define"
MODELS WITH A FIXED EMBEDDING,0.13154362416107382,"ηt = min
a∈[n] (
1
m m
X"
MODELS WITH A FIXED EMBEDDING,0.13288590604026845,"i=1
1ht
i(xa)∈I )"
MODELS WITH A FIXED EMBEDDING,0.1342281879194631,", ∀t ≥0
and
˜η0 = min
a∈[n] (
1
m m
X"
MODELS WITH A FIXED EMBEDDING,0.13557046979865772,"i=1
1h0
i (xa)∈(
2Il+Ir"
MODELS WITH A FIXED EMBEDDING,0.13691275167785236,"3
,
Il+2Ir 3
) )"
MODELS WITH A FIXED EMBEDDING,0.138255033557047,"(18)
Then ∀t ≥0, there is
 
ηt 3"
MODELS WITH A FIXED EMBEDDING,0.1395973154362416,"2 ≥
 
˜η0 3"
MODELS WITH A FIXED EMBEDDING,0.14093959731543623,"2 −κ
 
λmin (G) , λmax (G)
 
(L0)
1
2 −(Lt)
1
2 
/ˆc ,
(19)"
MODELS WITH A FIXED EMBEDDING,0.14228187919463087,"where κ(λ1, λ2) = 9λ2(Ir−Il)"
MODELS WITH A FIXED EMBEDDING,0.1436241610738255,"2λ1Kσ′
."
MODELS WITH A FIXED EMBEDDING,0.14496644295302014,"3.1.1
EXAMPLE: SHALLOW NEURAL NETWORKS WHEN n ≤d"
MODELS WITH A FIXED EMBEDDING,0.14630872483221477,"In the case of shallow NNs under the MF scaling, G = G(0) ∈Rn×n, where"
MODELS WITH A FIXED EMBEDDING,0.1476510067114094,"G(0)
ab := 1"
MODELS WITH A FIXED EMBEDDING,0.14899328859060404,"d(xa)⊺xb
(20)"
MODELS WITH A FIXED EMBEDDING,0.15033557046979865,"Thus, G(0) is positive definite if and only the training data set

x1, ..., xn} ⊆Rd consists of linearly-
independent vectors, which is possible (and expected if the training data are sampled independently
from some non-degenerate distribution) when n ≤d. In that case, Theorem 1 implies
Corollary 1 (Shallow NN with n ≤d). Suppose that Assumptions 1, 2 and 3 are satisfied. If the
training data are linearly-independent vectors, then under GF (10) on the first-layer weights of the
shallow NN, the training loss converges to zero at a linear rate."
MODELS WITH A FIXED EMBEDDING,0.15167785234899328,"While the assumption that n ≤d is restrictive, we note that existing convergence rate guarantees
for the GD-type training of shallow NNs in the MF scaling need strong additional assumptions [38],
modifications to the GD algorithm [34, 13, 53], or restrictions to certain special tasks [43]."
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.15302013422818792,"3.2
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.15436241610738255,"A clear limitation of Corollary 1 is that it is only applicable when n ≤d, since otherwise the Gram
matrix G(0) cannot be positive definite. This motivates us to consider the use of a high-dimensional
embedding Φ to lift the effective input dimension. In particular, we focus on the scenario where D is
large and Φ is random. While the Gram matrix G in this case is also random, we only need that it
concentrates around a deterministic and positive definite limit as D tends to infinity:
Condition 1 (Concentration of G around a positive definite matrix). There exists a (determinis-
tic) positive definite matrix ¯G ∈Rn×n with least eigenvalue λmin( ¯G) > 0 such that ∀δ, u > 0,
∃Dmin(δ, u) > 0 such that if D ≥Dmin(δ, u), then P(∥G −¯G∥2 > u) < δ."
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.15570469798657718,"Condition 1 is sufficient for us to apply Lemma 1 and obtain the following global convergence
guarantee, which extends Theorem 1 to models with a high-dimensional random embedding. The
proof is given in Appendix F.
Theorem 2 (High-dimensional random embedding). Under Assumptions 1, 2, 3 and Condition 1,
∃ˆc0, r and C > 0 such that ∀δ > 0, if ˆc ≥ˆc0λmax( ¯G)/λmin( ¯G), m ≥C(1 + ˆc2) log (n/δ) and
D ≥Dmin( 1 2δ, 1"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.15704697986577182,"2λmin( ¯G)), then with probability at least 1 −δ, it holds that ∀t ≥0,"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.15838926174496645,"Lt ≤L0e−rˆc2λmin(G)t .
(21)
Here, ˆc0, r and C depend on I, ¯Gmin, ¯Gmax, ∥y∥, Lσ and Kσ′ (but not m, n, d, D, δ, or λmin( ¯G))."
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.1597315436241611,"3.2.1
EXAMPLE: PARTIALLY-TRAINED THREE-LAYER NEURAL NETWORKS (P-3L NNS)"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.1610738255033557,"Consider the P-3L NN model defined in (4). In this case, the Gram matrix is G(1), defined by"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.16241610738255033,"G(1)
ab = 1 D D
X"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.16375838926174496,"j=1
σ
 1
√"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.1651006711409396,"d
z⊺
j xa

σ
 1
√"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.16644295302013423,"d
z⊺
j xb

(22)"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.16778523489932887,"If z1, ..., zm are sampled i.i.d. from a probability measure πz on Rd and fixed during training, then
the limiting Gram matrix, denoted by ¯G(1) ∈Rn×n, is given by"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.1691275167785235,"¯G(1)
ab = Ez∼πz"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.1704697986577181,"
σ
 1
√"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.17181208053691274,"d
z⊺xa

σ
 1
√"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.17315436241610738,"d
z⊺xb

(23)"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.174496644295302,"Thus, for the convergence result, the assumption we need on the limiting Gram matrix is
Assumption 4. πz is sub-Gaussian and the matrix ¯G(1), which depends on the choice of σ and the
training set, is positive definite with λmin
  ¯G(1)
> 0 and ( ¯G(1))max < ∞."
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.17583892617449665,"This assumption also plays an important role in the NTK analysis, and it is satisfied if, for example,
πz is the d-dimensional standard Gaussian distribution, no two data points are parallel, and σ is either
the ReLU function [19] or analytic and not a polynomial [18]. When Assumption 4 is satisfied, as
long as σ is Lipschitz, we can use standard concentration techniques to verify Condition 1. Thus,
Theorem 2 implies that
Theorem 3 (P-3L NN). Under Assumptions 1, 2, 3 and 4, ∃ˆc0, r, C1 and C2 > 0 such that ∀δ > 0, if
ˆc ≥ˆc0λmax( ¯G(1))/λmin( ¯G(1)), m ≥C1(1 + ˆc2) log (n/δ) and D ≥C2n2 log(n/δ)/λmin( ¯G(1))2,
then with probability at least 1 −δ, it holds that ∀t ≥0,"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.17718120805369128,"Lt ≤L0e−rˆc2λmin( ¯
G(1))t .
(24)"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.17852348993288591,"Here, ˆc0, r, C1 and C2 depend on I, ¯G(1)
min, ¯G(1)
max, ∥y∥, Kσ′ as well as the sub-Gaussian norm of µz
(but not on m, n, d, D, δ or λmin( ¯G(1)))."
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.17986577181208055,"The proof is given in Appendix G. Compared to Corollary 1 for shallow NNs, a highlight of Theorem 3
is that the requirement of n ≤d is no longer needed. This demonstrates an advantage of the high-
dimensional random embedding realized by the first hidden layer in the P-3L NN, thus illustrating a
benefit of having both depth and width in NNs from the viewpoint of optimization. Compared to the
NTK result [18], our analysis assumes the same level of over-parameterization, but crucially allows
feature training to occur, which we discuss in Section 2.2 and support empirically in Section 4.3."
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.18120805369127516,"Furthermore, by using a multi-layer NN with random and fixed weights as the high-dimensional
random embedding, we extend the P-3L NN to a partially-trained L-layer NN model in Appendix H,
for which similar convergence results can be proved for training its second-to-last layer via GF."
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.1825503355704698,Table 1: Three different scalings of the partially-trained 3L NN model considered in Experiment 3.
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.18389261744966443,"Model
Ours
NTK
MF [4, 52, 62, 23]
f(x)
1
m
Pm
i=1 ciσ
 
hi(x)

1
√m
Pm
i=1 ciσ
 
hi(x)

1
m
Pm
i=1 ciσ
 
hi(x)
"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.18523489932885906,"hi(x)
1
√m
Pm
j=1 Wijσ( 1
√"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.1865771812080537,"dz⊺
j x)
1
√m
Pm
j=1 Wijσ( 1
√"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.18791946308724833,"dz⊺
j x)
1
m
Pm
j=1 Wijσ( 1
√"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.18926174496644296,"dz⊺
j x)"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.1906040268456376,"W k+1
ij
W k
ij −mδ ∂Lk"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.1919463087248322,"∂W k
ij
W k
ij −δ ∂Lk"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.19328859060402684,"∂W k
ij
W k
ij −m2δ ∂Lk"
MODELS WITH A HIGH-DIMENSIONAL RANDOM EMBEDDING,0.19463087248322147,"∂W k
ij"
NUMERICAL EXPERIMENTS,0.1959731543624161,"4
NUMERICAL EXPERIMENTS"
NUMERICAL EXPERIMENTS,0.19731543624161074,Additional results and details of the experiments are provided in Appendix I.
NUMERICAL EXPERIMENTS,0.19865771812080538,"4.1
EXPERIMENT 1: CONVERGENCE OF TRAINING WHEN FITTING RANDOM DATA"
NUMERICAL EXPERIMENTS,0.2,"We train shallow NNs to fit a randomly labeled data set {(x1, y1), ..., (xn, yn)} with d = 20.
Specifically, we sample each xa i.i.d. with every entry sampled independently from a standard
Gaussian distribution, and each ya i.i.d. uniformly on [−1 2, 1"
NUMERICAL EXPERIMENTS,0.20134228187919462,"2] and independently from the xa’s. We
see from Figure 1 that the convergence happens at a nearly linear rate when n = 20 and 40, and the
rate decreases as n becomes larger. This is coherent with our theoretical result (Corollary 1), and
interestingly also echoes a prior result that the convergence rate of optimizing a shallow NN using
population loss can suffer from the curse of dimensionality [71], which implies a worsening of the
convergence rate as the number of data points increases."
NUMERICAL EXPERIMENTS,0.20268456375838925,"4.2
EXPERIMENT 2: BENEFIT OF INPUT EMBEDDING"
NUMERICAL EXPERIMENTS,0.2040268456375839,"We consider a model defined by (2) and (3) with d = 30 and Φ(x) = vec(xx⊺) ∈Rd2, which we
call a shallow NN augmented with quadratic embedding. We compare this model against a plain
shallow NN (without the extra embedding), both with m = 8192, to fit a series of training sets with
various sizes where the target y is given by another shallow NN augmented with quadratic embedding
with m = 5. We see from Figure 2 that the augmented shallow NN achieves lower test error given
the same number of training samples, demonstrating the benefit of a good embedding."
NUMERICAL EXPERIMENTS,0.20536912751677852,"4.3
EXPERIMENT 3: FEATURE LEARNING V.S. LAZY TRAINING"
NUMERICAL EXPERIMENTS,0.20671140939597316,"We consider the P-3L NN model defined in (4) and (5) with D = m (i.e. both hidden layers having
the same width), and compare it with 3-layer NN models under NTK and MF scalings, as we define
in Table 1 based on prior literature [37, 4, 52, 62, 23], which undergo partial training in the same
fashion. We adopt the data set used in [69] (more details in Appendix I.3), and train the models by
minimizing the unregularized squared loss for varying n’s and m’s."
NUMERICAL EXPERIMENTS,0.2080536912751678,"First, we see from the top-left plot in Figure 4 that, consistently across different m, the training loss
converges at a linear rate for the model under our scaling, which is coherent with Theorem 3. Second,
we see from the second row that feature learning occurs in the model under our scaling but negligibly
in the model under the NTK scaling, as expected [16]. Note also that under the MF scaling, the
feature maps h1(x), ..., hm(x) concentrate near 0 at initialization due to the small scaling, but gains
diversity during training. Third, we see from Figure 3 that our model yields the smallest test errors
out of all three, and in addition, as n grows the test error decreases faster under the MF scaling than
under the NTK scaling, both indicating an advantage of feature learning compared to lazy training."
CONCLUSIONS AND LIMITATIONS,0.20939597315436242,"5
CONCLUSIONS AND LIMITATIONS"
CONCLUSIONS AND LIMITATIONS,0.21073825503355706,"We consider a general type of models that includes shallow and partially-trained multi-layer NNs,
which exhibits feature learning when trained via GF, and prove non-asymptotic global convergence
guarantees that accommodates a general class of activation functions. For a randomly-initialized
shallow NN in the MF scaling that is wide enough, we prove that by performing GF on the input-layer
weights, the training loss converges to zero at a linear rate if the number of training data does not
exceed the input dimension. For a randomly-initialized multi-layer NN with large widths, we prove"
CONCLUSIONS AND LIMITATIONS,0.21208053691275167,"1000
2000
3000
GD step 10−10 10−8 10−6 10−4 10−2 100"
CONCLUSIONS AND LIMITATIONS,0.2134228187919463,train loss
CONCLUSIONS AND LIMITATIONS,0.21476510067114093,"n=20
n=40
n=80"
CONCLUSIONS AND LIMITATIONS,0.21610738255033557,"Figure 1: Training loss v.s.
number of GD steps for dif-
ferent n in Experiment 1."
CONCLUSIONS AND LIMITATIONS,0.2174496644295302,"50
100
150
200
250
n 0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4"
CONCLUSIONS AND LIMITATIONS,0.21879194630872484,test err
CONCLUSIONS AND LIMITATIONS,0.22013422818791947,"Shallow
Shallow+Quad"
CONCLUSIONS AND LIMITATIONS,0.2214765100671141,"Figure 2: Test error v.s. n in
Experiment 2 by the two models
with m = 8192."
CONCLUSIONS AND LIMITATIONS,0.22281879194630871,"200
400
600
800
n 0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4"
CONCLUSIONS AND LIMITATIONS,0.22416107382550335,test err
CONCLUSIONS AND LIMITATIONS,0.22550335570469798,"P-3L NN
P-3L NN (NTK)"
CONCLUSIONS AND LIMITATIONS,0.22684563758389262,P-3L NN (MF)
CONCLUSIONS AND LIMITATIONS,0.22818791946308725,"Figure 3: Test error v.s. n in Ex-
periment 3 by the three models
with m = 8192."
CONCLUSIONS AND LIMITATIONS,0.2295302013422819,"0
20000
40000
GD step 10−6 10−5 10−4 10−3 10−2 10−1 100 err"
CONCLUSIONS AND LIMITATIONS,0.23087248322147652,P-3L NN
CONCLUSIONS AND LIMITATIONS,0.23221476510067113,"m=2048
m=4096
m=8192"
CONCLUSIONS AND LIMITATIONS,0.23355704697986576,"0
20000
40000
GD step 10−6 10−5 10−4 10−3 10−2 10−1 100"
CONCLUSIONS AND LIMITATIONS,0.2348993288590604,P-3L NN (NTK)
CONCLUSIONS AND LIMITATIONS,0.23624161073825503,"m=2048
m=4096
m=8192"
CONCLUSIONS AND LIMITATIONS,0.23758389261744967,"0
20000
40000
GD step 10−6 10−5 10−4 10−3 10−2 10−1 100"
CONCLUSIONS AND LIMITATIONS,0.2389261744966443,P-3L NN (MF)
CONCLUSIONS AND LIMITATIONS,0.24026845637583893,"m=2048
m=4096
m=8192"
CONCLUSIONS AND LIMITATIONS,0.24161073825503357,"−6
−4
−2
0
2
4
6
hi(x1) −6 −4 −2 0 2 4 6"
CONCLUSIONS AND LIMITATIONS,0.24295302013422818,hi(x2)
CONCLUSIONS AND LIMITATIONS,0.2442953020134228,"before
after"
CONCLUSIONS AND LIMITATIONS,0.24563758389261744,"−6
−4
−2
0
2
4
6
hi(x1) −6 −4 −2 0 2 4 6"
CONCLUSIONS AND LIMITATIONS,0.24697986577181208,"before
after"
CONCLUSIONS AND LIMITATIONS,0.2483221476510067,"−6
−4
−2
0
2
4
6
hi(x1) −6 −4 −2 0 2 4 6"
CONCLUSIONS AND LIMITATIONS,0.24966442953020135,"before
after"
CONCLUSIONS AND LIMITATIONS,0.25100671140939596,"Figure 4: Results of Experiment 3 when n = 600. Each column corresponds to a different scaling
of the P-3L NN model, as described in Table 1. Row 1: Evolution of training loss (solid curve)
and test error (dashed curve) during training. Row 2: Distribution of the hidden-layer feature map
(pre-activation) associated with two particular input data points. Each dot represents a different i,
(i.e., neuron in the second hidden layer,) and the x- and y-coordinates equal hi(x1) and hi(x2),
respectively, where x1 is an input from the training set and x2 is an input from the test set."
CONCLUSIONS AND LIMITATIONS,0.2523489932885906,"that by performing GF on the weights in the second-to-last layer, the same result holds except there is
no requirement on the input dimension. We also perform numerical experiments to demonstrate the
advantage of feature learning in our partially-trained multi-layer NNs relative to their counterparts
under the NTK scaling."
CONCLUSIONS AND LIMITATIONS,0.2536912751677852,"Our work focuses on the optimization rather than the approximation or generalization properties of
NNs, which are also crucial to understand. In addition, as our current theoretical results on global
convergence neglect the bias terms and assume that the last-layer weights are untrained, a more
general version is left for future work."
CONCLUSIONS AND LIMITATIONS,0.2550335570469799,ACKNOWLEDGMENTS
CONCLUSIONS AND LIMITATIONS,0.2563758389261745,"The authors acknowledge support from the Henry MacCracken Fellowship, NSF RI-1816753, NSF
CAREER CIF 1845360, NSF CHS-1901091 and NSF DMS-MoDL 2134216."
REFERENCES,0.25771812080536916,REFERENCES
REFERENCES,0.25906040268456376,"[1] Zeyuan Allen-Zhu and Yuanzhi Li. Backward feature correction: How deep learning performs
deep learning. arXiv preprint arXiv:2001.04413, 2020."
REFERENCES,0.26040268456375837,"[2] Zeyuan Allen-Zhu, Yuanzhi Li, and Yingyu Liang. Learning and generalization in overparame-
terized neural networks, going beyond two layers. In H. Wallach, H. Larochelle, A. Beygelzimer,
F. d'Alch´e-Buc, E. Fox, and R. Garnett, editors, Advances in Neural Information Processing
Systems, volume 32. Curran Associates, Inc., 2019."
REFERENCES,0.26174496644295303,"[3] Zeyuan Allen-Zhu, Yuanzhi Li, and Zhao Song. A convergence theory for deep learning via
over-parameterization. In International Conference on Machine Learning, pages 242–252,
2019."
REFERENCES,0.26308724832214764,"[4] Dyego Ara´ujo, Roberto I Oliveira, and Daniel Yukimura. A mean-field limit for certain deep
neural networks. arXiv preprint arXiv:1906.00193, 2019."
REFERENCES,0.2644295302013423,"[5] Sanjeev Arora, Simon S Du, Wei Hu, Zhiyuan Li, and Ruosong Wang. Fine-grained analysis
of optimization and generalization for overparameterized two-layer neural networks. arXiv
preprint arXiv:1901.08584, 2019."
REFERENCES,0.2657718120805369,"[6] Francis Bach. Breaking the curse of dimensionality with convex neural networks. The Journal
of Machine Learning Research, 18(1):629–681, 2017."
REFERENCES,0.26711409395973157,"[7] Yu Bai and Jason D. Lee. Beyond linearization: On quadratic and higher-order approximation
of wide neural networks. In International Conference on Learning Representations, 2020."
REFERENCES,0.2684563758389262,"[8] Peter Bartlett, Dave Helmbold, and Philip Long. Gradient descent with identity initializa-
tion efficiently learns positive definite linear transformations by deep residual networks. In
International conference on machine learning, pages 521–530. PMLR, 2018."
REFERENCES,0.2697986577181208,"[9] Niladri S Chatterji and Philip M Long. Finite-sample analysis of interpolating linear classifiers
in the overparameterized regime. arXiv preprint arXiv:2004.12019, 2020."
REFERENCES,0.27114093959731544,"[10] Niladri S Chatterji, Philip M Long, and Peter L Bartlett. When does gradient descent with
logistic loss interpolate using deep networks with smoothed relu activations? arXiv preprint
arXiv:2102.04998, 2021."
REFERENCES,0.27248322147651005,"[11] Minshuo Chen, Yu Bai, Jason D Lee, Tuo Zhao, Huan Wang, Caiming Xiong, and Richard
Socher. Towards understanding hierarchical learning: Benefits of neural representations. arXiv
preprint arXiv:2006.13436, 2020."
REFERENCES,0.2738255033557047,"[12] Zhengdao Chen, Grant Rotskoff, Joan Bruna, and Eric Vanden-Eijnden. A dynamical central
limit theorem for two-layer neural networks. Advances in Neural Information Processing
Systems, 33, 2020."
REFERENCES,0.2751677852348993,"[13] Lenaic Chizat. Sparse optimization on measures with over-parameterized gradient descent.
arXiv preprint arXiv:1907.10300, 2019."
REFERENCES,0.276510067114094,"[14] Lenaic Chizat and Francis Bach. On the global convergence of gradient descent for over-
parameterized models using optimal transport. In Advances in Neural Information Processing
Systems, pages 3036–3046, 2018."
REFERENCES,0.2778523489932886,"[15] L´ena¨ıc Chizat and Francis Bach. Implicit bias of gradient descent for wide two-layer neural
networks trained with the logistic loss. arXiv preprint arXiv:2002.04486, 2020."
REFERENCES,0.2791946308724832,"[16] Lenaic Chizat, Edouard Oyallon, and Francis Bach. On lazy training in differentiable program-
ming. In Advances in Neural Information Processing Systems, pages 2937–2947, 2019."
REFERENCES,0.28053691275167786,"[17] Simon Du and Wei Hu. Width provably matters in optimization for deep linear neural networks.
In International Conference on Machine Learning, pages 1655–1664. PMLR, 2019."
REFERENCES,0.28187919463087246,"[18] Simon Du, Jason Lee, Haochuan Li, Liwei Wang, and Xiyu Zhai. Gradient descent finds
global minima of deep neural networks. In Kamalika Chaudhuri and Ruslan Salakhutdinov,
editors, Proceedings of the 36th International Conference on Machine Learning, volume 97 of
Proceedings of Machine Learning Research, pages 1675–1685. PMLR, 09–15 Jun 2019."
REFERENCES,0.2832214765100671,"[19] Simon S Du, Jason D Lee, Haochuan Li, Liwei Wang, and Xiyu Zhai. Gradient descent finds
global minima of deep neural networks. arXiv preprint arXiv:1811.03804, 2018."
REFERENCES,0.28456375838926173,"[20] Ethan Dyer and Guy Gur-Ari. Asymptotics of wide networks from feynman diagrams. In
International Conference on Learning Representations, 2020."
REFERENCES,0.2859060402684564,"[21] Weinan E, Chao Ma, and Lei Wu. Machine learning from a continuous viewpoint, i. Science
China Mathematics, 63(11):2233–2266, 2020."
REFERENCES,0.287248322147651,"[22] Weinan E and Stephan Wojtowytsch. On the banach spaces associated with multi-layer relu net-
works: Function representation, approximation theory and gradient descent dynamics. CSIAM
Transactions on Applied Mathematics, 1(3):387–440, 2020."
REFERENCES,0.28859060402684567,"[23] Cong Fang, Jason D Lee, Pengkun Yang, and Tong Zhang. Modeling from features: a mean-field
framework for over-parameterized deep neural networks. arXiv preprint arXiv:2007.01452,
2020."
REFERENCES,0.28993288590604027,"[24] C Daniel Freeman and Joan Bruna. Topology and geometry of half-rectified network optimiza-
tion. arXiv preprint arXiv:1611.01540, 2016."
REFERENCES,0.2912751677852349,"[25] Spencer Frei and Quanquan Gu. Proxy convexity: A unified framework for the analysis of
neural networks trained by gradient descent. arXiv preprint arXiv:2106.13792, 2021."
REFERENCES,0.29261744966442954,"[26] Mario Geiger, Leonardo Petrini, and Matthieu Wyart. Landscape and training regimes in deep
learning. Physics Reports, 2021."
REFERENCES,0.29395973154362415,"[27] Mario Geiger, Stefano Spigler, Arthur Jacot, and Matthieu Wyart. Disentangling feature and
lazy learning in deep neural networks: an empirical study. arXiv preprint arXiv:1906.08034,
2019."
REFERENCES,0.2953020134228188,"[28] Behrooz Ghorbani, Song Mei, Theodor Misiakiewicz, and Andrea Montanari. Limitations of
lazy training of two-layers neural network. In Advances in Neural Information Processing
Systems, pages 9111–9121, 2019."
REFERENCES,0.2966442953020134,"[29] Behrooz Ghorbani, Song Mei, Theodor Misiakiewicz, and Andrea Montanari. When do neural
networks outperform kernel methods? arXiv preprint arXiv:2006.13409, 2020."
REFERENCES,0.2979865771812081,"[30] Xavier Glorot and Yoshua Bengio. Understanding the difficulty of training deep feedforward
neural networks. In Yee Whye Teh and Mike Titterington, editors, Proceedings of the Thirteenth
International Conference on Artificial Intelligence and Statistics, volume 9 of Proceedings of
Machine Learning Research, pages 249–256, Chia Laguna Resort, Sardinia, Italy, 13–15 May
2010. PMLR."
REFERENCES,0.2993288590604027,"[31] Sebastian Goldt, Madhu Advani, Andrew M Saxe, Florent Krzakala, and Lenka Zdeborov´a.
Dynamics of stochastic gradient descent for two-layer neural networks in the teacher-student
setup. In Advances in Neural Information Processing Systems, pages 6979–6989, 2019."
REFERENCES,0.3006711409395973,"[32] Anna Golubeva, Guy Gur-Ari, and Behnam Neyshabur. Are wider nets better given the same
number of parameters? In International Conference on Learning Representations, 2021."
REFERENCES,0.30201342281879195,"[33] Boris Hanin and Mihai Nica. Finite depth and width corrections to the neural tangent kernel. In
International Conference on Learning Representations, 2020."
REFERENCES,0.30335570469798656,"[34] Kaitong Hu, Zhenjie Ren, David Siska, and Lukasz Szpruch. Mean-field langevin dynamics
and energy landscape of neural networks. arXiv preprint arXiv:1905.07769, 2019."
REFERENCES,0.3046979865771812,"[35] Jiaoyang Huang and Horng-Tzer Yau. Dynamics of deep neural networks and neural tangent
hierarchy. arXiv preprint arXiv:1909.08156, 2019."
REFERENCES,0.30604026845637583,"[36] Jean-Franc¸ois Jabir, David ˇSiˇska, and Łukasz Szpruch. Mean-field neural odes via relaxed
optimal control. arXiv preprint arXiv:1912.05475, 2019."
REFERENCES,0.3073825503355705,"[37] Arthur Jacot, Franck Gabriel, and Cl´ement Hongler. Neural tangent kernel: Convergence and
generalization in neural networks. In Advances in neural information processing systems, pages
8571–8580, 2018."
REFERENCES,0.3087248322147651,"[38] Adel Javanmard, Marco Mondelli, and Andrea Montanari. Analysis of a two-layer neural
network via displacement convexity. The Annals of Statistics, 48(6):3619–3642, 2020."
REFERENCES,0.3100671140939597,"[39] Kenji Kawaguchi. Deep learning without poor local minima. arXiv preprint arXiv:1605.07110,
2016."
REFERENCES,0.31140939597315437,"[40] Jaehoon Lee, Yasaman Bahri, Roman Novak, Samuel S Schoenholz, Jeffrey Pennington,
and Jascha Sohl-Dickstein. Deep neural networks as gaussian processes. arXiv preprint
arXiv:1711.00165, 2017."
REFERENCES,0.312751677852349,"[41] Jaehoon Lee, Samuel S. Schoenholz, Jeffrey Pennington, Ben Adlam, Lechao Xiao, Roman
Novak, and Jascha Sohl-Dickstein. Finite versus infinite neural networks: an empirical study. In
Hugo Larochelle, Marc’Aurelio Ranzato, Raia Hadsell, Maria-Florina Balcan, and Hsuan-Tien
Lin, editors, Advances in Neural Information Processing Systems 33: Annual Conference on
Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual,
2020."
REFERENCES,0.31409395973154364,"[42] Yuanzhi Li and Yingyu Liang. Learning overparameterized neural networks via stochastic
gradient descent on structured data. arXiv preprint arXiv:1808.01204, 2018."
REFERENCES,0.31543624161073824,"[43] Yuanzhi Li, Tengyu Ma, and Hongyang R. Zhang. Learning over-parametrized two-layer
neural networks beyond ntk. In Jacob Abernethy and Shivani Agarwal, editors, Proceedings of
Thirty Third Conference on Learning Theory, volume 125 of Proceedings of Machine Learning
Research, pages 2613–2682. PMLR, 09–12 Jul 2020."
REFERENCES,0.3167785234899329,"[44] Chaoyue Liu, Libin Zhu, and Mikhail Belkin. Loss landscapes and optimization in over-
parameterized non-linear systems and neural networks. arXiv preprint arXiv:2003.00307,
2020."
REFERENCES,0.3181208053691275,"[45] Stanislaw Lojasiewicz. A topological property of real analytic subsets. Coll. du CNRS, Les
´equations aux d´eriv´ees partielles, 117(87-89):2, 1963."
REFERENCES,0.3194630872483222,"[46] Yiping Lu, Chao Ma, Yulong Lu, Jianfeng Lu, and Lexing Ying. A mean-field analysis of deep
resnet and beyond: Towards provable optimization via overparameterization from depth. arXiv
preprint arXiv:2003.05508, 2020."
REFERENCES,0.3208053691275168,"[47] Tao Luo, Zhi-Qin John Xu, Zheng Ma, and Yaoyu Zhang. Phase diagram for two-layer relu
neural networks at infinite-width limit. Journal of Machine Learning Research, 22(71):1–47,
2021."
REFERENCES,0.3221476510067114,"[48] Chao Ma, Lei Wu, et al. The barron space and the flow-induced function spaces for neural
network models. Constructive Approximation, 2021."
REFERENCES,0.32348993288590605,"[49] Song Mei, Theodor Misiakiewicz, and Andrea Montanari. Mean-field theory of two-layers
neural networks: dimension-free bounds and kernel limit. arXiv preprint arXiv:1902.06015,
2019."
REFERENCES,0.32483221476510066,"[50] Song Mei, Andrea Montanari, and Phan-Minh Nguyen. A mean field view of the landscape of
two-layer neural networks. Proceedings of the National Academy of Sciences, 115(33):E7665–
E7671, 2018."
REFERENCES,0.3261744966442953,"[51] Phan-Minh Nguyen. Mean field limit of the learning dynamics of multilayer neural networks.
arXiv preprint arXiv:1902.02880, 2019."
REFERENCES,0.3275167785234899,"[52] Phan-Minh Nguyen and Huy Tuan Pham. A rigorous framework for the mean field limit of
multilayer neural networks. arXiv preprint arXiv:2001.11443, 2020."
REFERENCES,0.3288590604026846,"[53] Atsushi Nitanda, Denny Wu, and Taiji Suzuki. Particle dual averaging: Optimization of mean
field neural networks with global convergence rate analysis. arXiv preprint arXiv:2012.15477,
2020."
REFERENCES,0.3302013422818792,"[54] Samet Oymak and Mahdi Soltanolkotabi. Overparameterized nonlinear learning: Gradient
descent takes the shortest path? In International Conference on Machine Learning, pages
4951–4960. PMLR, 2019."
REFERENCES,0.3315436241610738,"[55] Samet Oymak and Mahdi Soltanolkotabi. Toward moderate overparameterization: Global
convergence guarantees for training shallow neural networks. IEEE Journal on Selected Areas
in Information Theory, 1(1):84–105, 2020."
REFERENCES,0.33288590604026846,"[56] Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan,
Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, et al. Pytorch: An imperative
style, high-performance deep learning library. arXiv preprint arXiv:1912.01703, 2019."
REFERENCES,0.33422818791946307,"[57] Huy Tuan Pham and Phan-Minh Nguyen. Global convergence of three-layer neural networks in
the mean field regime. ICLR, 2021."
REFERENCES,0.33557046979865773,"[58] Boris T. Polyak. Gradient methods for the minimisation of functionals. Ussr Computational
Mathematics and Mathematical Physics, 3:864–878, 1963."
REFERENCES,0.33691275167785234,"[59] Grant Rotskoff and Eric Vanden-Eijnden.
Parameters as interacting particles: long time
convergence and asymptotic error scaling of neural networks. In Advances in Neural Information
Processing Systems, pages 7146–7155, 2018."
REFERENCES,0.338255033557047,"[60] Itay Safran and Ohad Shamir. Spurious local minima are common in two-layer ReLU neural
networks. In International Conference on Machine Learning, pages 4433–4441, 2018."
REFERENCES,0.3395973154362416,"[61] Stefano Sarao Mannelli, Eric Vanden-Eijnden, and Lenka Zdeborov´a. Optimization and gen-
eralization of shallow neural networks with quadratic activation functions. In H. Larochelle,
M. Ranzato, R. Hadsell, M. F. Balcan, and H. Lin, editors, Advances in Neural Information
Processing Systems, volume 33, pages 13445–13455. Curran Associates, Inc., 2020."
REFERENCES,0.3409395973154362,"[62] Justin Sirignano and Konstantinos Spiliopoulos. Mean field analysis of deep neural networks.
arXiv preprint arXiv:1903.04440, 2019."
REFERENCES,0.3422818791946309,"[63] Justin Sirignano and Konstantinos Spiliopoulos. Mean field analysis of neural networks: A law
of large numbers. SIAM Journal on Applied Mathematics, 80(2):725–752, 2020."
REFERENCES,0.3436241610738255,"[64] Mahdi Soltanolkotabi, Adel Javanmard, and Jason D Lee. Theoretical insights into the op-
timization landscape of over-parameterized shallow neural networks. IEEE Transactions on
Information Theory, 65(2):742–769, 2018."
REFERENCES,0.34496644295302015,"[65] Daniel Soudry and Yair Carmon. No bad local minima: Data independent training error
guarantees for multilayer neural networks. arXiv preprint arXiv:1605.08361, 2016."
REFERENCES,0.34630872483221475,"[66] Yuandong Tian. An analytical formula of population gradient for two-layered ReLU network
and its applications in convergence and critical point analysis. In Doina Precup and Yee Whye
Teh, editors, Proceedings of the 34th International Conference on Machine Learning, volume 70
of Proceedings of Machine Learning Research, pages 3404–3413. PMLR, 06–11 Aug 2017."
REFERENCES,0.3476510067114094,"[67] Luca Venturi, Afonso S. Bandeira, and Joan Bruna. Spurious valleys in one-hidden-layer neural
network optimization landscapes. Journal of Machine Learning Research, 20(133):1–34, 2019."
REFERENCES,0.348993288590604,"[68] Roman Vershynin. High-Dimensional Probability: An Introduction with Applications in Data
Science. Cambridge Series in Statistical and Probabilistic Mathematics. Cambridge University
Press, 2018."
REFERENCES,0.3503355704697987,"[69] Colin Wei, Jason D. Lee, Qiang Liu, and Tengyu Ma. Regularization matters: Generalization
and optimization of neural nets vs their induced kernel. In Advances in Neural Information
Processing Systems, pages 9709–9721, 2019."
REFERENCES,0.3516778523489933,"[70] Stephan Wojtowytsch. On the convergence of gradient descent training for two-layer relu-
networks in the mean field regime. arXiv preprint arXiv:2005.13530, 2020."
REFERENCES,0.3530201342281879,"[71] Stephan Wojtowytsch and E Weinan. Can shallow neural networks beat the curse of dimen-
sionality? a mean field training perspective. IEEE Transactions on Artificial Intelligence,
1(2):121–129, 2020."
REFERENCES,0.35436241610738256,"[72] Blake Woodworth, Suriya Gunasekar, Jason D Lee, Edward Moroshko, Pedro Savarese, Itay
Golan, Daniel Soudry, and Nathan Srebro. Kernel and rich regimes in overparametrized models.
arXiv preprint arXiv:2002.09277, 2020."
REFERENCES,0.35570469798657717,"[73] Greg Yang and Edward J. Hu. Tensor programs iv: Feature learning in infinite-width neural
networks. In Marina Meila and Tong Zhang, editors, Proceedings of the 38th International
Conference on Machine Learning, volume 139 of Proceedings of Machine Learning Research,
pages 11727–11737. PMLR, 18–24 Jul 2021."
REFERENCES,0.35704697986577183,"[74] Mo Zhou, Rong Ge, and Chi Jin. A local convergence theory for mildly over-parameterized
two-layer neural network. arXiv preprint arXiv:2102.02410, 2021."
REFERENCES,0.35838926174496644,"[75] Zhihui Zhu, Daniel Soudry, Yonina C Eldar, and Michael B Wakin. The global optimization
geometry of shallow linear neural networks. Journal of Mathematical Imaging and Vision,
62(3):279–292, 2020."
REFERENCES,0.3597315436241611,"[76] Difan Zou, Yuan Cao, Dongruo Zhou, and Quanquan Gu. Gradient descent optimizes over-
parameterized deep relu networks. Machine Learning, 109(3):467–492, 2020."
REFERENCES,0.3610738255033557,"A
ADDITIONAL NOTATIONS"
REFERENCES,0.3624161073825503,"• For a positive integer n, we let [n] denote the set {1, ..., n}."
REFERENCES,0.363758389261745,"• We use i, j (as subscripts) to index the neurons in the hidden layers, a, b (as subscripts or
superscripts) to index different training data points, t (as a superscript) to denote the training
time / time parameter in gradient flow."
REFERENCES,0.3651006711409396,• We write P
REFERENCES,0.36644295302013424,a for 1
REFERENCES,0.36778523489932885,"n
Pn
a=1."
REFERENCES,0.3691275167785235,"• We use bold letters (e.g. x, z, c, y) to denote vectors."
REFERENCES,0.3704697986577181,"• We use W and {Wij}i∈[m],j∈[D] interchangeably to refer to the same set of parameters."
REFERENCES,0.3718120805369127,"B
CONSISTENCY OF THE SCALING AND GD UPDATE RULE WITH XAVIER
INITIALIZATION"
REFERENCES,0.3731543624161074,Consider a three-layer network defined by
REFERENCES,0.374496644295302,"f(x) = m
X"
REFERENCES,0.37583892617449666,"i=1
θ(3)
i
σ
 
hi(x)

(25)"
REFERENCES,0.37718120805369126,"∀i ∈[m]
:
hi(x) = m
X"
REFERENCES,0.3785234899328859,"j=1
θ(2)
ij σ
 1
√ d d
X"
REFERENCES,0.37986577181208053,"k=1
θ(1)
jk xk

(26)"
REFERENCES,0.3812080536912752,"with weight parameters

θ(1)
jk"
REFERENCES,0.3825503355704698,"j,k∈[m],

θ(2)
ij"
REFERENCES,0.3838926174496644,"i,j∈[m] and

θ(3)
i"
REFERENCES,0.38523489932885907,i∈[m] are initialized according to
REFERENCES,0.3865771812080537,"Xavier initialization, which means that we sample each θ(1)
jk i.i.d. from N(0,
1
m+d), each θ(2)
ij i.i.d."
REFERENCES,0.38791946308724834,"from N(0,
1
2m), and each θ(3)
i
i.i.d. from N(0,
1
m+1). If m ≫d, both N(0,
1
m+d) and N(0,
1
m+1)"
REFERENCES,0.38926174496644295,"can be approximated by N(0, 1"
REFERENCES,0.3906040268456376,"m). Then, up to this approximation, by redefining ci = √mθ(3)
i
,
Wij = √mθ(2)
ij and zjk = √mθ(1)
jk , we can write"
REFERENCES,0.3919463087248322,"f(x) = 1
√m m
X"
REFERENCES,0.3932885906040268,"i=1
ciσ
 
hi(x)

,
(27)"
REFERENCES,0.3946308724832215,"∀i ∈[m]
:
hi(x) = 1
√m D
X"
REFERENCES,0.3959731543624161,"j=1
Wijσ

1
√"
REFERENCES,0.39731543624161075,"md
z⊺
j x

,
(28)"
REFERENCES,0.39865771812080536,"and note that ci, Wij and zjk are all initialized i.i.d. of order O(1). In addition, if σ is homogeneous,
this is then equivalent to (4) and (5) when D = m."
REFERENCES,0.4,"Moreover, there is
∂f
∂Wij (x) =
1
√m
∂f
∂θ(2)
ij (x). Then, since performing GD on θ(2)
ij with step size δ"
REFERENCES,0.40134228187919463,"means updating θ(2)
ij according to"
REFERENCES,0.40268456375838924,"θ(2)
ij ←θ(2)
ij −δ ∂L[f]"
REFERENCES,0.4040268456375839,"∂θ(2)
ij
,
(29)"
REFERENCES,0.4053691275167785,this is equivalent to updating Wij according to
REFERENCES,0.40671140939597317,"Wij ←√m
 
θ(2)
ij −δ ∂L[f]"
REFERENCES,0.4080536912751678,"∂θ(2)
ij "
REFERENCES,0.40939597315436244,=Wij −mδ ∂L[f]
REFERENCES,0.41073825503355704,"∂Wij
(x) , (30)"
REFERENCES,0.4120805369127517,which justifies the m factor on the right-hand-side of (9).
REFERENCES,0.4134228187919463,"C
RELATIONSHIP TO THE MAXIMUM-UPDATE PARAMETERIZATION AND
FEATURE LEARNING"
REFERENCES,0.4147651006711409,"Consider the partially-trained L-layer NN model defined in Section H in the case where D = m ≫d.
In the framework of abc-parameterization introduced in [73], our model corresponds to setting"
REFERENCES,0.4161073825503356,"a1 = 0, a2 = ... =aL = 1"
REFERENCES,0.4174496644295302,"2, aL+1 = 1"
REFERENCES,0.41879194630872485,"bl =0, ∀l ∈[L + 1]"
REFERENCES,0.42013422818791946,"Furthermore, as we explain in Appendix B, the appropriate learning rate scales linearly with m (as in
(9)), which corresponds to having
c = −1
(31)"
REFERENCES,0.4214765100671141,"Meanwhile, the maximum-update (µP) parameterization [73] is characterized by setting"
REFERENCES,0.4228187919463087,a1 = −1
REFERENCES,0.42416107382550333,"2, a2 = ... =aL = 0, aL+1 = 1"
REFERENCES,0.425503355704698,"2
(32) bl =1"
REFERENCES,0.4268456375838926,"2, ∀l ∈[L + 1]
(33)"
REFERENCES,0.42818791946308726,"c =0
(34)"
REFERENCES,0.42953020134228187,"Recall the symmetry of abc-parameterization derived in [73], which states that one gets a different
but equivalent abc-parameterization by setting"
REFERENCES,0.43087248322147653,"al ←al + θ, bl ←bl −θ, c ←c −2θ
(35)"
REFERENCES,0.43221476510067114,"Since our parameterization can be obtained from the maximum-update parameterization by applying
the transformation above with θ = 1"
REFERENCES,0.43355704697986575,"2, they are equivalent in the function space. In particular, for our
parameterization, the r parameter defined in [73] can be computed as"
REFERENCES,0.4348993288590604,"r = min{bL+1, aL+1 + c} + aL+1 + c +
min
l=1,...,L{2al −1l̸=1}"
REFERENCES,0.436241610738255,"= min{0, 1 + (−1)} + 1 + (−1) + min{2 · 0 −0, 2 · 1 2 −1} =0 (36)"
REFERENCES,0.4375838926174497,"Hence, according to [73], our parameterization exhibits feature learning."
REFERENCES,0.4389261744966443,"D
PROOF OF LEMMA 1"
REFERENCES,0.44026845637583895,"Since we assume that G is positive definite and |ci| = ˆc > 0, ∀i ∈[m], we can derive from (14) that"
REFERENCES,0.44161073825503355,"˙Lt = −ˆc2 m m
X i=1 n
X a,b=1"
REFERENCES,0.4429530201342282," 
f t(xa) −ya
  
f t(xb) −yb

σ′ 
ht
i(xa)

σ′ 
ht
i(xa)

Gab"
REFERENCES,0.4442953020134228,"≤−ˆc2λmin
 
G
 1 m m
X i=1 n
X a=1"
REFERENCES,0.44563758389261743," 
f t(xa) −ya
2  
σ′ 
hi(xa)
2"
REFERENCES,0.4469798657718121,"= −ˆc2λmin
 
G

n
X a=1"
REFERENCES,0.4483221476510067," 
f t(xa) −ya
2 1 m m
X i=1"
REFERENCES,0.44966442953020136," 
σ′ 
hi(xa)
2"
REFERENCES,0.45100671140939597,"≤−ˆc2λmin(G) n
X a=1"
REFERENCES,0.45234899328859063," 
f t(xa) −ya
2 1 m m
X"
REFERENCES,0.45369127516778524,"i=1
1ht
i(xa)∈I (Kσ′)2"
REFERENCES,0.45503355704697984,"≤−ˆc2λmin(G) (Kσ′)2
n
X a=1"
REFERENCES,0.4563758389261745," 
f t(xa) −ya
2 min
b∈[n] (
1
m m
X"
REFERENCES,0.4577181208053691,"i=1
1ht
i(xb)∈I )"
REFERENCES,0.4590604026845638,"≤−2ˆc2λmin(G) (Kσ′)2Lt min
a∈[n] (
1
m m
X"
REFERENCES,0.4604026845637584,"i=1
1ht
i(xa)∈I ) (37)"
REFERENCES,0.46174496644295304,"Since I is an open interval, ∃ξ > 0 such that we can find a subinterval I0 ⊆I such that the distance
between I0 and the boundaries of I (if I is bounded on either side) is no less than ξ, i.e.,"
REFERENCES,0.46308724832214765,"inf
u∈I0,u′∈R\I |u −u′| ≥ξ
(38)"
REFERENCES,0.46442953020134226,"In particular, we can choose ξ = 1"
REFERENCES,0.4657718120805369,"3(Ir −Il) and I0 = (Il + ξ, Ir −ξ). Then there is"
HT,0.4671140939597315,"1ht
i(xa)∈I ≥1h0
i (xa)∈I0 , ht
i(xa)∈I
≥1h0
i (xa)∈I0 , |ht
i(xa)−h0
i (xa)|<ξ
≥1h0
i (xa)∈I0 −1|ht
i(xa)−h0
i (xa)|≥ξ (39)"
HT,0.4684563758389262,and so
HT,0.4697986577181208,"min
a∈[n] (
1
m m
X"
HT,0.47114093959731546,"i=1
1ht
i(xa)∈I )"
HT,0.47248322147651006,"≥min
a∈[n] (
1
m m
X"
HT,0.4738255033557047,"i=1
1h0
i (xa)∈I0 )"
HT,0.47516778523489933,"−max
a∈[n] (
1
m m
X"
HT,0.47651006711409394,"i=1
1|ht
i(xa)−h0
i (xa)|≥ξ )"
HT,0.4778523489932886,"(40)
Thus, we have"
HT,0.4791946308724832,˙Lt ≤−2ˆc2λmin(G) (Kσ′)2 Lt
HT,0.48053691275167787,"min
a∈[n] (
1
m m
X"
HT,0.4818791946308725,"i=1
1h0
i (xa)∈I0 )"
HT,0.48322147651006714,"−max
a∈[n] (
1
m m
X"
HT,0.48456375838926175,"i=1
1|ht
i(xa)−h0
i (xa)|≥ξ )!"
HT,0.48590604026845635,"(41)
Meanwhile, since"
HT,0.487248322147651,"˙ht
i(xa) = −ci n
X b=1"
HT,0.4885906040268456," 
f t(xb) −yb

σ′ 
ht
i(xb)

Gab ,
(42)"
HT,0.4899328859060403,there is
M,0.4912751677852349,"1
m m
X i=1"
M,0.49261744966442955,"˙ht
i(xa)
 ≤ˆc 1 m m
X i=1  n
X b=1"
M,0.49395973154362416," 
f t(xb) −yb

σ′ 
ht
i(xb)

Gab  ≤ˆc  1 m m
X i=1  n
X b=1"
M,0.49530201342281877," 
f t(xb) −yb

σ′ 
ht
i(xb)

Gab  2  1
2 ≤ˆc"
M,0.4966442953020134,"1
m m
X i=1 n
X b=1"
M,0.49798657718120803," 
f t(xb) −yb

σ′ 
ht
i(xb)

Gab
2
! 1 2"
M,0.4993288590604027,≤ˆcλmax(G)
M,0.5006711409395973,"1
m m
X i=1 n
X b=1"
M,0.5020134228187919," 
f t(xb) −yb
2  
σ′ 
ht
i(xb)
2
! 1 2"
M,0.5033557046979866,≤ˆcλmax(G)   ˙Lt
M,0.5046979865771812,"(ˆc)2λmin (G)   1
2"
M,0.5060402684563758,≤λmax(G) (λmin (G))−1
M,0.5073825503355704,"2
 ˙Lt 1
2 (43)"
M,0.508724832214765,"Therefore,"
M,0.5100671140939598,"1
m m
X i=1"
M,0.5114093959731544,"ht
i(xa) −h0
i (xa)
 ≤
Z t 0"
M,0.512751677852349,"1
m m
X i=1"
M,0.5140939597315436,"˙hs
i(xa)
 ds"
M,0.5154362416107383,≤λmax(G) (λmin (G))−1
Z T,0.5167785234899329,"2
Z t 0 ˙Ls"
Z T,0.5181208053691275,"1
2 ds (44)"
Z T,0.5194630872483221,"Since ∀ξ ∈R, there is"
Z T,0.5208053691275167,"ξ · 1|ht
i(xa)−h0
i (xa)|≥ξ ≤
ht
i(xa) −h0
i (xa)
 ,
(45)"
Z T,0.5221476510067115,"we derive that, ∀a ∈[n],"
M,0.5234899328859061,"1
m m
X"
M,0.5248322147651007,"i=1
1|ht
i(xa)−h0
i (xa)|≥ξ ≤ξ−1 1 m m
X i=1"
M,0.5261744966442953,"ht
i(xa) −h0
i (xa) ≤C1 Z t 0 ˙Ls"
M,0.5275167785234899,"1
2 ds , (46)"
M,0.5288590604026846,where we set C1 = λmax(G) (λmin (G))−1
M,0.5302013422818792,"2 ξ−1 > 0 for simplicity. As a consequence,"
M,0.5315436241610738,"max
a∈[n] (
1
m m
X"
M,0.5328859060402684,"i=1
1|ht
i(xa)−h0
i (xa)|≥ξ ) ≤C1 Z t 0 ˙Ls"
M,0.5342281879194631,"1
2 ds
(47)"
M,0.5355704697986577,Define
M,0.5369127516778524,"˜ηt = min
a∈[n] (
1
m m
X"
M,0.538255033557047,"i=1
1h0
i (xa)∈I0 ) −C1 Z t 0 ˙Ls"
M,0.5395973154362416,"1
2 ds
(48)"
M,0.5409395973154363,"Note that at t = 0, there is ˜ηt = mina∈[n]
n
1
m
Pm
i=1 1h0
i (xa)∈I0
o
. Then, on one hand, we know
from (40) and (47) that ∀t ≥0,"
M,0.5422818791946309,"ηt ≥min
a∈[n] (
1
m m
X"
M,0.5436241610738255,"i=1
1h0
i (xa)∈I0 )"
M,0.5449664429530201,"−max
a∈[n] (
1
m m
X"
M,0.5463087248322148,"i=1
1|ht
i(xa)−h0
i (xa)|≥ξ )"
M,0.5476510067114094,"≥˜ηt ,
(49)"
M,0.548993288590604,"Hence, (41) implies that"
M,0.5503355704697986,˙Lt ≤−2ˆc2λmin(G) (Kσ′)2 Ltηt
M,0.5516778523489932,"≤−2ˆc2λmin(G) (Kσ′)2 Lt˜ηt
(50)"
M,0.553020134228188,"On the other hand, by the definition of ˜ηt,"
M,0.5543624161073826,"˙˜ηt = −C1
 ˙Lt 1
2"
M,0.5557046979865772,"≥−C1
 ˙Lt ·
 ˙Lt
−1 2"
M,0.5570469798657718,"≥C1 ˙Lt 
2ˆc2λmin(G) (Kσ′)2 Lt˜ηt−1 2"
M,0.5583892617449664,"≥C2(ˆc)−1 ˙Lt  
Lt−1"
M,0.5597315436241611,"2  
˜ηt−1 2 , (51)"
M,0.5610738255033557,where we set C2 = 2−1
M,0.5624161073825503,2 C1 (λmin(G))−1
M,0.5637583892617449,"2 (Kσ′)−1 =
λmax(G)
√"
M,0.5651006711409396,"2ξKσ′λmin(G) ≤
nGmax
√"
M,0.5664429530201343,2ξKσ′λmin(G) for simplic-
M,0.5677852348993289,"ity. Therefore, when ηt > 0, d
dt 2"
M,0.5691275167785235,"3
 
˜ηt 3"
M,0.5704697986577181,"2

=
 
˜ηt 1"
M,0.5718120805369128,"2 ˙˜ηt ≥C2(ˆc)−1 ˙Lt  
Lt−1"
M,0.5731543624161074,2 ≥C2(ˆc)−1 d
M,0.574496644295302,"dt
 
2Lt 1"
M,0.5758389261744966,"2 ,
(52)"
M,0.5771812080536913,which implies that
M,0.5785234899328859,"2
3
 
˜ηt 3 2 −2"
M,0.5798657718120805,"3
 
˜η0 3"
M,0.5812080536912752,"2 ≥C2(ˆc)−1  
2Lt 1"
M,0.5825503355704698,"2 −
 
2L0 1"
M,0.5838926174496645,"2 
≥−C2(ˆc)−1  
2L0 1"
M,0.5852348993288591,"2
(53)"
M,0.5865771812080537,"and so ∀t ≥0,
2
3
 
ηt 3 2 ≥2"
M,0.5879194630872483,"3
 
˜ηt 3 2 ≥2"
M,0.5892617449664429,"3
 
˜η0 3"
M,0.5906040268456376,"2 −C2(ˆc)−1  
2L0 1"
M,0.5919463087248322,"2
(54)"
M,0.5932885906040268,"E
PROOF OF THEOREM 1"
M,0.5946308724832214,"To apply Lemma 1, we need two additional lemmas, which we will prove in Appendix E.1 and
E.2. The first one guarantees that the loss value at initialization, L0, is upper-bounded with high
probability:"
M,0.5959731543624162,"Lemma 2. ∀δ > 0, if m ≥Ω
 
ˆc2 log
 
nδ−1
Gmax/∥y∥2
, then with probability at least 1−δ, there
is
L0 ≤∥y∥2
(55)"
M,0.5973154362416108,"The second one proves that ˜η0 is lower-bounded with high probability, which heuristically says that
there is indeed a nontrivial proportion of neurons in the central part of the active region of σ, for
every a ∈[n]:"
M,0.5986577181208054,"Lemma 3. ∀δ > 0, if m ≥
log(nδ−1)
2(K(I,Gmin,Gmax))2 , then with probability at least 1 −δ, there is"
M,0.6,"η0 > K(I, Gmin, Gmax) ,
(56)"
M,0.6013422818791946,"where K(I, λ1, λ2) =
1
6
√"
M,0.6026845637583893,"2πλ2 (Ir −Il) exp
n
−max{|Il|,|Ir|}"
M,0.6040268456375839,"(λ1)2
o
is a positive number that depends on
I, λ1 and λ2."
M,0.6053691275167785,"With these two lemmas, we deduce that ∀δ > 0, if m ≥Ω
 
(1 + ˆc2/∥y∥2) log
 
nδ−1
, then with
probability at least δ, there is ∀t ≥0,"
M,0.6067114093959731,"2
3
 
ηt 3 2 ≥2"
M,0.6080536912751678,"3 (K(I, Gmin, Gmax))"
M,0.6093959731543624,"3
2 −
√"
M,0.610738255033557,"2C2(ˆc)−1∥y∥,
(57)"
M,0.6120805369127517,"where K(I, Gmin, Gmax) is defined as in Lemma 3. Therefore, if our choice of ˆc satisfies"
M,0.6134228187919463,"ˆc ≥
3
√"
M,0.614765100671141,2C2∥y∥
M,0.6161073825503356,"(K(I, Gmin, Gmax))"
M,0.6174496644295302,"3
2 ,
(58)"
M,0.6187919463087248,"then there is ∀t ≥0,
ηt ≥2−2"
M,0.6201342281879194,"3 K(I, Gmin, Gmax) > 0 ,
(59)
in which case (50) gives"
M,0.6214765100671141,"˙Lt ≤−2
1
3 ˆc2λmin(G) (Kσ′)2 LtK(I, Gmin, Gmax) ,
(60)"
M,0.6228187919463087,which will allow us to finally conclude that
M,0.6241610738255033,"Lt ≤L0 exp
n
−2
1
3 λmin(G) (Kσ′)2 K(I, Gmin, Gmax)ˆc2t
o
(61)"
M,0.625503355704698,"Note that (60) establishes a PL condition. Several other convergence analyses of NNs have also relied
on variants of the PL condition [25, 44, 74]."
M,0.6268456375838927,"E.1
PROOF OF LEMMA 2"
M,0.6281879194630873,"Proof. Since at initialization,

ci"
M,0.6295302013422819,"i∈[m] and

W 0
ij"
M,0.6308724832214765,"i∈[m],j∈[D] are both sampled i.i.d. and

ci"
M,0.6322147651006711,"i∈[m]
has mean zero, we know that ∀a ∈[n], f 0(xa) = 1"
M,0.6335570469798658,"m
Pm
i=1 ciσ
 
ht
i(xa)

is the sample mean of i.i.d.
random variables with zero-mean. Moreover, since

W 0
ij"
M,0.6348993288590604,"i∈[m],j∈[D] is sampled from N(0, 1), we"
M,0.636241610738255,"know that ∀i ∈[m], the random variable ciσ
 
ht
i(xa)

is sub-Gaussian [68], with sub-Gaussian norm"
M,0.6375838926174496,"∥ciσ
 
ht
i(xa)

∥ψ2 ≤ˆc∥σ
 
ht
i(xa)

∥ψ2"
M,0.6389261744966444,"≤ˆcLσ(Gaa)
1
2 MSG"
M,0.640268456375839,"≤ˆcLσ(Gmax)
1
2 MSG , (62)"
M,0.6416107382550336,"where MSG > 0 is some absolute constant. Thus, by Hoeffding’s inequality [68], ∀a ∈[n], ∀r > 0,"
M,0.6429530201342282,"P
 f 0(xa)
 ≥u

=P"
M,0.6442953020134228,"1
m m
X"
M,0.6456375838926175,"i=1
ciσ
 
ht
i(xa)

 ≥u !"
M,0.6469798657718121,≤2 exp (
M,0.6483221476510067,"−
Ku2m
∥ciσ
 
ht
i(xa)

∥2
ψ2 )"
M,0.6496644295302013,"≤2 exp

−
Ku2m
ˆc2(Lσ)2Gmax(MSG)2 
, (63)"
M,0.6510067114093959,"where K is some absolute constant. Hence, by union bound, P n
X a=1"
M,0.6523489932885906,"f 0(xa)
2 ≥∥y∥2
! ≤ n
X"
M,0.6536912751677852,"a=1
P
 f 0(xa)
 ≥∥y∥
"
M,0.6550335570469799,"≤2n exp

−
K∥y∥2m
ˆc2(Lσ)2Gmax(MSG)2"
M,0.6563758389261745,"
(64)"
M,0.6577181208053692,"Thus, ∀δ > 0, if"
M,0.6590604026845638,"m ≥ˆc2(Lσ)2GmaxK−1(MSG)2∥y∥−2 log
2n δ"
M,0.6604026845637584,"
(65)"
M,0.661744966442953,"then with probability at least 1 −δ, there is L0 =1 2 n
X a=1"
M,0.6630872483221476,"f 0(xa) −ya
2 ≤1 2 n
X a=1"
M,0.6644295302013423,"f 0(xa)
2 + 1 2∥y∥2 ≤∥y∥2 (66)"
M,0.6657718120805369,"E.2
PROOF OF LEMMA 3"
M,0.6671140939597315,"Since each W 0
ij are sampled i.i.d. from N(0, 1), we know that ∀a ∈[n], independently for each
i ∈[m], h0
i (xa) follows a Gaussian distribution with mean 0 and variance Gaa. Therefore, m
X"
M,0.6684563758389261,"i=1
1h0
i (xa)/∈I0 ∼Binomial (m, 1 −π (I0; Gaa)) ,
(67)"
M,0.6697986577181209,"Hence, by Hoeffding’s inequality, ∀a ∈[n], ∀r > 0, P"
M,0.6711409395973155,"1
m m
X"
M,0.6724832214765101,"i=1
1h0
i (xa)/∈I0 ≥1 −π(I0; Gaa) + r !"
M,0.6738255033557047,"≤exp

−2mr2	
(68)"
M,0.6751677852348993,"∀a ∈[n], choosing r = 1"
M,0.676510067114094,"2π (I0; Gaa), we then get P"
M,0.6778523489932886,"1
m m
X"
M,0.6791946308724832,"i=1
1h0
i (xa)∈I0 ≤1"
M,0.6805369127516778,2π (I0; Gaa) ! =P
M,0.6818791946308724,"1
m m
X"
M,0.6832214765100671,"i=1
1h0
i (xa)/∈I0 ≥1 −1"
M,0.6845637583892618,2π (I0; Gaa) !
M,0.6859060402684564,"≤exp

−1"
M,0.687248322147651,"2m (π (I0; Gaa))2
 ≤exp ( −1"
M,0.6885906040268457,"2m

min
b∈[n] {π (I0; Gbb)}
2)
(69)"
M,0.6899328859060403,and so by union bound
M,0.6912751677852349,"P

˜η0 ≤1"
MIN,0.6926174496644295,"2 min
b∈[n] {π (I0; Gbb)}

=P "
MIN,0.6939597315436241,"min
a∈[n] (
1
m m
X"
MIN,0.6953020134228188,"i=1
1h0
i (xa)∈I0 ) < 1"
MIN,0.6966442953020134,"2 min
b∈[n] {π (I0; Gbb)} ! ≤ n
X a=1
P"
M,0.697986577181208,"1
m m
X"
M,0.6993288590604027,"i=1
1h0
i (xa)∈I0 < 1"
MIN,0.7006711409395974,"2 min
b∈[n] {π (I0; Gbb)} ! ≤ n
X a=1
P"
M,0.702013422818792,"1
m m
X"
M,0.7033557046979866,"i=1
1h0
i (xa)∈I0 < 1"
M,0.7046979865771812,2π (I0; Gaa) !
M,0.7060402684563758,≤n exp ( −1
M,0.7073825503355705,"2m

min
b∈[n] {π (I0; Gbb)}
2) (70)"
M,0.7087248322147651,"Since ∀b ∈[n], there is Gmin ≤Gbb ≤Gmax,"
M,0.7100671140939597,"π (I0; Gbb) =
1
√2πGbb"
M,0.7114093959731543,Z Ir−ξ
M,0.7127516778523489,"Il+ξ
e−u2"
M,0.7140939597315437,Gbb du
M,0.7154362416107383,"≥
1
√2πGbb
(Ir −Il −2ξ)
inf
Il+ξ≤u≤Ir−ξ exp

−u2 Gbb "
M,0.7167785234899329,"≥
1
√2πGmax
(Ir −Il −2ξ) exp

−max{|Il|, |Ir|}"
M,0.7181208053691275,(Gmin)2 
M,0.7194630872483222,"≥
1
3
√"
M,0.7208053691275168,"2πGmax
(Ir −Il) exp

−max{|Il|, |Ir|}"
M,0.7221476510067114,(Gmin)2  (71)
M,0.723489932885906,"Letting K(I, λ1, λ2) =
1
6
√"
M,0.7248322147651006,"2πλ2 (Ir −Il) exp
n
−max{|Il|,|Ir|}"
M,0.7261744966442953,"(λ1)2
o
> 0, we can then write"
M,0.72751677852349,"P
 
˜η0 ≤K(I, Gmin, Gmax)

≤P

˜η0 ≤1"
MIN,0.7288590604026846,"2 min
b∈[n] {π (I0; Gbb)}
"
MIN,0.7302013422818792,"≤n exp
n
−2m (K(I, Gmin, Gmax))2o
(72)"
MIN,0.7315436241610739,"Thus, ∀δ > 0, if m ≥
log(nδ−1)
2(K(I,Gmin,Gmax))2 , then with probability at least 1 −δ, it holds that
˜η0 > K(I, Gmin, Gmax) > 0."
MIN,0.7328859060402685,"F
PROOF OF THEOREM 2"
MIN,0.7342281879194631,"By Condition 1, we know that ∀δ > 0, if D ≥Dmin( 1 2δ, 1"
MIN,0.7355704697986577,"2λmin( ¯G)), then with probability at
least 1 −1"
MIN,0.7369127516778523,"2δ, there is ∥G −¯G∥2 ≤1"
MIN,0.738255033557047,"2λmin( ¯G), and hence λmin(G) ≥1"
MIN,0.7395973154362416,"2λmin( ¯G), Gmin ≥1"
MIN,0.7409395973154362,"2 ¯Gmin,
λmax(G) ≤λmax( ¯G) + 1"
MIN,0.7422818791946308,"2λmin( ¯G) ≤2λmax( ¯G), and Gmax ≤2 ¯Gmax. We then perform the
following analysis conditioned on the event that ∥G −¯G∥2 ≤1"
MIN,0.7436241610738255,2λmin( ¯G).
MIN,0.7449664429530202,"Since the sampling of

ci"
MIN,0.7463087248322148,"i∈[m] and

W 0
ij"
MIN,0.7476510067114094,"i∈[m],j∈[D] is independent from the realization of G,"
MIN,0.748993288590604,"we know from Lemma 3 that if m ≥
log(4nδ−1)
2(K(I, 1"
MIN,0.7503355704697987,"2 λmin( ¯
G),2λmax( ¯
G)))
2 ≥
log(4nδ−1)
2(K(I,Gmin,Gmax))2 , then with"
MIN,0.7516778523489933,probability at least 1 −1
MIN,0.7530201342281879,"4δ, there is"
MIN,0.7543624161073825,"˜η0 > K(I, Gmin, Gmax) ≥K(I, 1"
MIN,0.7557046979865771,"2
¯Gmin, 2 ¯Gmax)
(73)"
MIN,0.7570469798657719,"From Lemma 2,
we also know that if m
≥
Ω
 
ˆc2 log
 
nδ−1
λmax( ¯G)/∥y∥2
≥
Ω
 
ˆc2 log
 
nδ−1
λmax(G)/∥y∥2
, then with probability at least 1 −1"
MIN,0.7583892617449665,"4δ, there is L0 ≤∥y∥2. There-
fore, in total, we know that with probability at least 1 −δ, the following conditions all hold:"
MIN,0.7597315436241611,∥G −¯G∥2 ≤1
MIN,0.7610738255033557,"2λmin( ¯G) ,
(74)"
MIN,0.7624161073825504,"˜η0 ≥K(I, 1"
MIN,0.763758389261745,"2
¯Gmin, 2 ¯Gmax) ,
(75)"
MIN,0.7651006711409396,"L0 ≤∥y∥2 ,
(76)"
MIN,0.7664429530201342,"in which case, by applying Lemma 1 with G = G(1), we get
 
ηt 3"
MIN,0.7677852348993288,"2 ≥
 
˜η0 3"
MIN,0.7691275167785235,"2 −K1(λmin (G) , λmax (G))(ˆc)−1  
L0 1"
MIN,0.7704697986577181,"2 −
 
Lt 1"
MIN,0.7718120805369127,"2 
,
(77)"
MIN,0.7731543624161074,"where K1(λ1, λ2) = 9"
MIN,0.774496644295302,"2λ−1
1 λ2K−1
σ′ (Ir −Il) > 0. Thus, by the definition of K1(·, ·), we know that"
MIN,0.7758389261744967,"K1(λmin (G) , λmax (G)) ≤4K1(λmin
  ¯G

, λmax
  ¯G

) ,
(78)"
MIN,0.7771812080536913,"and so ∀t ≥0,
 
ηt 3"
MIN,0.7785234899328859,"2 ≥
 
˜η0 3"
MIN,0.7798657718120805,"2 −4K1(λmin
  ¯G

, λmax
  ¯G

)(ˆc)−1  
L0 1"
MIN,0.7812080536912752,"2 −
 
Lt 1 2 "
MIN,0.7825503355704698,"≥
 
K(I, 1"
MIN,0.7838926174496644,"2
¯Gmin, 2 ¯Gmax)
 3"
MIN,0.785234899328859,"2 −4K1(λmin
  ¯G

, λmax
  ¯G

)(ˆc)−1∥y∥
(79)"
MIN,0.7865771812080536,"Therefore, if our choice of ˆc satisfies"
MIN,0.7879194630872484,"ˆc ≥8K1(λmin
  ¯G

, λmax
  ¯G

)∥y∥
 
K(I, 1"
MIN,0.789261744966443,"2 ¯Gmin, 2 ¯Gmax)
 3"
MIN,0.7906040268456376,"2
(80)"
MIN,0.7919463087248322,"then there is ∀t ≥0,"
MIN,0.7932885906040269,ηt ≥2−2
MIN,0.7946308724832215,"3 K(I, 1"
MIN,0.7959731543624161,"2
¯Gmin, 2 ¯Gmax)
(81)"
MIN,0.7973154362416107,"Hence, (50) implies that ∀t ≥0,"
MIN,0.7986577181208053,˙Lt ≤−2ˆc2λmin(G)(Kσ′)2Lt2−2
MIN,0.8,"3 K(I, 1"
MIN,0.8013422818791947,"2
¯Gmin, 2 ¯Gmax) ≤−2−2"
MIN,0.8026845637583893,"3 ˆc2λmin( ¯G)(Kσ′)2LtK(I, 1"
MIN,0.8040268456375839,"2
¯Gmin, 2 ¯Gmax)
(82)"
MIN,0.8053691275167785,and therefore
MIN,0.8067114093959732,"Lt ≤L0 exp

−2−2"
MIN,0.8080536912751678,"3 ˆc2λmin( ¯G)(Kσ′)2K(I, 1"
MIN,0.8093959731543624,"2
¯Gmin, 2 ¯Gmax)

(83)"
MIN,0.810738255033557,"G
PROOF OF THEOREM 3"
MIN,0.8120805369127517,"In view of Theorem 2, it is sufficient to verify that Condition 1 holds for Dmin(δ, u) =
Ω
 
n2u−2 log(nδ−1)

, which is given by the following lemma:"
MIN,0.8134228187919463,"Lemma 4. ∀δ ≥0, if D ≥Ω
 
n2u−2 log(nδ−1)

, then with probability at least 1 −δ,"
MIN,0.8147651006711409,"∥G(1) −¯G(1)∥2 ≤u
(84)"
MIN,0.8161073825503355,"G.1
PROOF OF LEMMA 4"
MIN,0.8174496644295302,"Let Z be a random vector on Rd with law given by πz, and then we can write ¯G(1)
ab
=
E [σ(x⊺
aZ)σ(x⊺
b Z)] for a, b ∈[n]. By assumption, Z is sub-gaussian with sub-gaussian norm"
MIN,0.8187919463087249,"∥Z∥ψ2 :=
sup
x∈Sd−1 ∥x⊺Z∥ψ2 < ∞
(85)"
MIN,0.8201342281879195,"Thus, ∀a ∈[n], we have"
MIN,0.8214765100671141,"∥σ(x⊺
aZ)∥ψ2 ≤Lσ∥x⊺Z∥ψ2 ≤Lσ∥Z∥ψ2
(86)"
MIN,0.8228187919463087,"Hence, by Lemma 2.7.7 in [68], we know that ∀a, b ∈[n], σ(x⊺
aZ)σ(x⊺
b Z) is a sub-exponential
random variable with sub-exponential norm"
MIN,0.8241610738255034,"∥σ(x⊺
aZ)σ(x⊺
b Z)∥ψ1 ≤∥σ(x⊺
aZ)∥ψ2∥σ(x⊺
b Z)∥ψ2 ≤(Lσ)2∥Z∥2
ψ2
(87)"
MIN,0.825503355704698,"Then, by Bernstein’s inequality (Theorem 2.8.1 in [68]), since each zj is sampled i.i.d. from πz, we
have that ∀a, b ∈[n] and ∀u > 0,"
MIN,0.8268456375838926,"P
G(1)
ab −¯G(1)
ab
 ≥u

=P   "
D,0.8281879194630872,"1
D D
X"
D,0.8295302013422818,"j=1
σ(x⊺
azj)σ(x⊺
b zj) −E [σ(x⊺
aZ)σ(x⊺
b Z)] ≥u  "
D,0.8308724832214766,≤2 exp (
D,0.8322147651006712,−K min
D,0.8335570469798658,"(
u2D
∥σ(x⊺
aZ)σ(x⊺
b Z)∥2
ψ1
,
uD
∥σ(x⊺
aZ)σ(x⊺
b Z)∥ψ1 ))"
D,0.8348993288590604,≤2 exp (
D,0.836241610738255,−K min
D,0.8375838926174497,"(
u2D
(Lσ)4∥Z∥4
ψ2
,
uD
(Lσ)2∥Z∥2
ψ2 )) , (88)"
D,0.8389261744966443,"where K > 0 is some absolute constant. In other words, for any δ′ > 0, if"
D,0.8402684563758389,D ≥max
D,0.8416107382550335,"(
(Lσ)4∥Z∥4
ψ2 log(2(δ′)−1)"
D,0.8429530201342282,"u2K
,
(Lσ)2∥Z∥2
ψ2 log(2(δ′)−1) uK )"
D,0.8442953020134228,",
(89)"
D,0.8456375838926175,"then we have
G(1)
ab −¯G(1)
ab
 ≥u with probability at least 1 −δ. If we choose u = u′"
D,0.8469798657718121,"n and δ′ =
δ
n2 ,
then we get, if"
D,0.8483221476510067,D ≥max
D,0.8496644295302014,"(
n2(Lσ)4∥Z∥4
ψ2 log(2n2δ−1)
K(u′)2
,
n(Lσ)2∥Z∥2
ψ2 log(2n2δ−1)
Ku′ )"
D,0.851006711409396,",
(90) then"
D,0.8523489932885906,"P

∥G(1) −¯G(1)∥2
F ≥(u′)2
≤ n
X"
D,0.8536912751677852,"a,b=1
P
G(1)
ab −¯G(1)
ab
 ≥u′ n  ≤n2 δ n2
≤δ (91)"
D,0.8550335570469799,"Hence, with probability at least 1 −δ, we have"
D,0.8563758389261745,"∥G(1) −¯G(1)∥2
2 ≤∥G(1) −¯G(1)∥2
F ≤(u′)2 ,
(92)"
D,0.8577181208053691,"H
GENERALIZATION TO DEEPER MODELS"
D,0.8590604026845637,"By setting Φ to be the activations of the second-to-last hidden-layer of a multi-layer NN, we can
obtain generalizations of the P-3L NN to deeper architectures. For example, in the feed-forward case,
we can obtain the following partially-trained L-layer NN:"
D,0.8604026845637583,"f(x) = 1 m m
X"
D,0.8617449664429531,"i=1
ciσ
 
h(L−1)
i
(x)

,"
D,0.8630872483221477,"∀i ∈[m]
:
h(L−1)
i
(x) = 1
√ D D
X"
D,0.8644295302013423,"j=1
Wijσ
 
h(L−2)
j
(x)

,"
D,0.8657718120805369,"∀l ∈[L −3], ∀i ∈[D]
:
h(l+1)
i
(x) = 1
√ D D
X"
D,0.8671140939597315,"j=1
¯W (l)
ij σ
 
h(l)
j (x)

,"
D,0.8684563758389262,"∀j ∈[D]
:
h(1)
j (x) = 1
√"
D,0.8697986577181208,"d
z⊺
j x ,"
D,0.8711409395973154,"where ¯W (1), ..., ¯W (L−3) ∈RD×D and z1, ..., zD ∈Rd are sampled randomly and fixed. This model
can be written in the form of (4) and (5) with ϕj(x) = σ
 
h(L−2)
j
(x)

. The corresponding Gram
matrix is recursively defined and also appears in the NTK analysis [18]. In particular, the results
in [18] imply that if σ is analytic and not a polynomial, then Condition 1 holds, and hence similar
global convergence results can be obtained as corollaries of Theorem 2."
D,0.87248322147651,"I
FURTHER DETAILS OF THE NUMERICAL EXPERIMENTS"
D,0.8738255033557047,"In our models,

ci"
D,0.8751677852348994,i∈[m] is sampled i.i.d. from the Rademacher distribution µc = 1
D,0.876510067114094,2δ1 + 1
D,0.8778523489932886,"2δ−1,

zj"
D,0.8791946308724832,"j∈[D] is sampled i.i.d. from N(0, Id), and

Wij"
D,0.8805369127516779,"i∈[m],j∈[D] is initialized by sampling i.i.d.
from N(0, 1). In the model under NTK scaling, we additionally symmetrize the model at initialization
according to the strategy used in [16] to ensure that the function value at initialization does not blow
up when the width is large. We choose to train the models using 50000 steps of (full-batch) GD with
step size δ = 1. When the test error is computed, we use a test set of size 500 generated by sampling
i.i.d. from the same distribution as the training set."
D,0.8818791946308725,The experiments are run with NVIDIA GPUs (1080ti and Titan RTX).
D,0.8832214765100671,"10
100
1000
10000
GD step 10−10 10−8 10−6 10−4 10−2 100"
D,0.8845637583892617,train loss
D,0.8859060402684564,"n=20
n=40
n=80
n=160
n=320"
D,0.887248322147651,Figure 5: Training loss v.s. number of GD steps for different n in Experiment 1 with m = 4096.
D,0.8885906040268456,"I.1
EXPERIMENT 1"
D,0.8899328859060402,"We choose σ to be tanh. For each choice of n, we run the experiment with 5 different random
seeds, and Figure 1 plots the evolution of the training loss during GD averaged over the 5 runs with
m = 8192."
D,0.8912751677852349,"Figure 5 is the same as Figure 1 except for having m = 4096. We see that the two two plots agree
well."
D,0.8926174496644296,"I.2
EXPERIMENT 2"
D,0.8939597315436242,"We choose σ to be ReLU. For each choice of n and each of the two models, we experiment with 5
different random seeds, and Figure 2 plots the test error at the 50000 GD step averaged over the 5
runs ± its standard deviation."
D,0.8953020134228188,"In Figure 6, we plot the evolution of the training loss and test error during GD for the two different
models, with m = 2048 or 8192 and different choices of n, averaged over 5 runs with different
random seeds. We see in particular that the difference between the two choices of m is negligible,
suggesting that it is unlikely to obtain performance improvements with further over-parameterization."
D,0.8966442953020134,"I.3
EXPERIMENT 3"
D,0.897986577181208,"We choose σ to be ReLU and input dimension d = 50. We use a training set of size n = 600 for the
results reported in Figure 4. The data set is inspired by [69]: We sample both the training and the test
set i.i.d. from the distribution (x, y) ∼D on Rd+1, under which the joint distribution of (x1, x2, y)
is"
D,0.8993288590604027,"P(x1 = 1, x2 = 0, y = 1) =1"
D,0.9006711409395973,"4
(93)"
D,0.9020134228187919,"P(x1 = −1, x2 = 0, y = 1) =1"
D,0.9033557046979865,"4
(94)"
D,0.9046979865771813,"P(x1 = 0, x2 = 1, y = −1) =1"
D,0.9060402684563759,"4
(95)"
D,0.9073825503355705,"P(x1 = 0, x2 = −1, y = −1) =1"
D,0.9087248322147651,"4
(96) (97)"
D,0.9100671140939597,"and x3, ..., xd each follow the uniform distribution in [−1, 1], independently from each other as well
as x1, x2 and y."
D,0.9114093959731544,"Figures 7 and 8 are the same as Figure 4 except for having n = 400 and 800, respectively. We see
that as n increases, test error improves for all three models, while our P-3L NN model remains the
one achieving the lowest test error."
D,0.912751677852349,"0
2500
5000
7500
10000
−0.2 0.0 0.2 0.4 0.6 0.8 1.0"
D,0.9140939597315436,"1.2
n=50; Shallow acc"
D,0.9154362416107382,"m=2048
m=8192"
D,0.9167785234899329,"0
2500
5000
7500
10000
−0.2 0.0 0.2 0.4 0.6 0.8 1.0"
D,0.9181208053691275,"1.2
n=50; Shallow+Quad"
D,0.9194630872483222,"m=2048
m=8192"
D,0.9208053691275168,"0
2500
5000
7500
10000
−0.2 0.0 0.2 0.4 0.6 0.8 1.0"
D,0.9221476510067114,"1.2
n=100; Shallow acc"
D,0.9234899328859061,"m=2048
m=8192"
D,0.9248322147651007,"0
2500
5000
7500
10000
−0.2 0.0 0.2 0.4 0.6 0.8 1.0"
D,0.9261744966442953,"1.2
n=100; Shallow+Quad"
D,0.9275167785234899,"m=2048
m=8192"
D,0.9288590604026845,"0
2500
5000
7500
10000
−0.2 0.0 0.2 0.4 0.6 0.8 1.0"
D,0.9302013422818792,"1.2
n=150; Shallow acc"
D,0.9315436241610738,"m=2048
m=8192"
D,0.9328859060402684,"0
2500
5000
7500
10000
−0.2 0.0 0.2 0.4 0.6 0.8 1.0"
D,0.934228187919463,"1.2
n=150; Shallow+Quad"
D,0.9355704697986578,"m=2048
m=8192"
D,0.9369127516778524,"0
2500
5000
7500
10000
−0.2 0.0 0.2 0.4 0.6 0.8 1.0"
D,0.938255033557047,"1.2
n=200; Shallow acc"
D,0.9395973154362416,"m=2048
m=8192"
D,0.9409395973154362,"0
2500
5000
7500
10000
−0.2 0.0 0.2 0.4 0.6 0.8 1.0"
D,0.9422818791946309,"1.2
n=200; Shallow+Quad"
D,0.9436241610738255,"m=2048
m=8192"
D,0.9449664429530201,"0
2500
5000
7500
10000
−0.2 0.0 0.2 0.4 0.6 0.8 1.0"
D,0.9463087248322147,"1.2
n=250; Shallow acc"
D,0.9476510067114094,"m=2048
m=8192"
D,0.9489932885906041,"0
2500
5000
7500
10000
−0.2 0.0 0.2 0.4 0.6 0.8 1.0"
D,0.9503355704697987,"1.2
n=250; Shallow+Quad"
D,0.9516778523489933,"m=2048
m=8192"
D,0.9530201342281879,Figure 6: Test error v.s. GD steps in Experiment 2 for the two models and difference choices of n.
D,0.9543624161073826,"0
20000
40000
GD step 10−6 10−5 10−4 10−3 10−2 10−1 100 err"
D,0.9557046979865772,P-3L NN
D,0.9570469798657718,"m=2048
m=4096
m=8192"
D,0.9583892617449664,"0
20000
40000
GD step 10−6 10−5 10−4 10−3 10−2 10−1 100"
D,0.959731543624161,P-3L NN (NTK)
D,0.9610738255033557,"m=2048
m=4096
m=8192"
D,0.9624161073825503,"0
20000
40000
GD step 10−6 10−5 10−4 10−3 10−2 10−1 100"
D,0.963758389261745,P-3L NN (MF)
D,0.9651006711409396,"m=2048
m=4096
m=8192"
D,0.9664429530201343,"−6
−4
−2
0
2
4
6
hi(x1) −6 −4 −2 0 2 4 6"
D,0.9677852348993289,hi(x2)
D,0.9691275167785235,"before
after"
D,0.9704697986577181,"−6
−4
−2
0
2
4
6
hi(x1) −6 −4 −2 0 2 4 6"
D,0.9718120805369127,"before
after"
D,0.9731543624161074,"−6
−4
−2
0
2
4
6
hi(x1) −6 −4 −2 0 2 4 6"
D,0.974496644295302,"before
after"
D,0.9758389261744966,Figure 7: Same as Figure 4 except for setting n = 400.
D,0.9771812080536912,"0
20000
40000
GD step 10−6 10−5 10−4 10−3 10−2 10−1 100 err"
D,0.978523489932886,P-3L NN
D,0.9798657718120806,"m=2048
m=4096
m=8192"
D,0.9812080536912752,"0
20000
40000
GD step 10−6 10−5 10−4 10−3 10−2 10−1 100"
D,0.9825503355704698,P-3L NN (NTK)
D,0.9838926174496644,"m=2048
m=4096
m=8192"
D,0.9852348993288591,"0
20000
40000
GD step 10−6 10−5 10−4 10−3 10−2 10−1 100"
D,0.9865771812080537,P-3L NN (MF)
D,0.9879194630872483,"m=2048
m=4096
m=8192"
D,0.9892617449664429,"−6
−4
−2
0
2
4
6
hi(x1) −6 −4 −2 0 2 4 6"
D,0.9906040268456375,hi(x2)
D,0.9919463087248322,"before
after"
D,0.9932885906040269,"−6
−4
−2
0
2
4
6
hi(x1) −6 −4 −2 0 2 4 6"
D,0.9946308724832215,"before
after"
D,0.9959731543624161,"−6
−4
−2
0
2
4
6
hi(x1) −6 −4 −2 0 2 4 6"
D,0.9973154362416108,"before
after"
D,0.9986577181208054,Figure 8: Same as Figure 4 except for setting n = 800.
