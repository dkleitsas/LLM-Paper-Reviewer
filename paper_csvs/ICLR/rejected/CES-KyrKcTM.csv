Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.0034482758620689655,"We prove that minimizing a weighted mean results in optimizing the higher-order
moments of the loss distribution such as the variance, skewness, and kurtosis.
By optimizing the higher-order moments, one can tighten the upper bound of
the loss mean deviating from the true expectation and improve the robustness
against outliers. Such types of optimization problems often lead to non-convex
objectives, therefore, we explore the extent to which the proposed weighted mean
trick preserves convexity, albeit at times at a decrease in efﬁciency. Experimental
results show that the weighted mean trick exhibits similar performance with other
specialized robust loss functions when training on noisy datasets while providing a
stronger theoretical background. The proposed weighted mean trick is a simple yet
powerful optimization framework that is easy to integrate into existing works."
INTRODUCTION,0.006896551724137931,"1
INTRODUCTION"
INTRODUCTION,0.010344827586206896,"The most common objective in machine learning is to minimize the average loss. However, by doing
this it implies that all samples are equal. The goal of this work is to convince the reader that from
the perspective of the model, not all samples are equal and optimizing a weighted mean is a more
progressive approach. For instance, at the end of the training, few samples are left uncaptured by
the model which yield large loss values. One might choose to put more weight on those samples
to help the model learn (individual fairness), or consider them noise and assign them less weight
(robustness). The decision will also be reﬂected by the loss variance; it will decrease when hard
samples are weighted more and increase otherwise."
INTRODUCTION,0.013793103448275862,"Before introducing more formally the weighted mean, we ﬁrst justify theoretically the impact of
variance penalization. Using the empirical Bernstein bound (Maurer & Pontil, 2009) for i.i.d. loss
values Z and bounded variance we have with probability 1 −δ:"
INTRODUCTION,0.017241379310344827,"E[Z] −1 n n
X"
INTRODUCTION,0.020689655172413793,"i=1
Zi
≤
C1 r"
INTRODUCTION,0.02413793103448276,2Vn[Z] ln 2/δ
INTRODUCTION,0.027586206896551724,"n
+ C2
7 ln 2/δ
3(n −1)
(1)"
INTRODUCTION,0.03103448275862069,"where C1, C2 are problem depended constants. This inequality reveals two things. First, we have with
high probability that the empirical mean is close to the theoretical value. This bound along with similar
PAC-Bayes bounds (Seldin et al., 2012; Tolstikhin & Seldin, 2013) justiﬁes the practical success
of the empirical risk minimization (ERM) which has the objective to minimize the mean loss value
(Namkoong & Duchi, 2017). Secondly, the difference between the two is bounded in terms of the
empirical variance. This second implication led to a large and growing body of studies that investigate
variance penalization (Maurer & Pontil, 2009; Namkoong & Duchi, 2017; Duchi & Namkoong,
2019; Staib et al., 2019; Lam, 2019; Heinze-Deml & Meinshausen, 2021; Hu et al., 2018). Moreover,
by penalizing the variance, the intrinsic bias-variance tradeoff of the ERM can be controlled. Two
studies inﬂuential for this paper are that of Duchi & Namkoong (2019) and Li et al. (2021). Duchi
& Namkoong (2019) proposed taking the expectation with respect to a different distribution which
allowed penalizing variance while preserving the convexity of the objective. Similarly, Li et al. (2021)
investigated optimizing a tilted empirical risk which is equivalent to penalizing all the higher-order
moments simultaneously. In summary, previous methods either penalize only one moment or all
the higher-order moments but are not ﬂexible enough to penalize any desired combination of the
higher-order moments."
INTRODUCTION,0.034482758620689655,Under review as a conference paper at ICLR 2022
INTRODUCTION,0.03793103448275862,"Inspired by the above works, we propose to optimize a weighted mean and prove that for certain
weights, it is equivalent to optimizing any higher-order moments of the loss distribution such as
variance, skewness, and kurtosis. Our approach generalizes that of Duchi & Namkoong (2019); Li
et al. (2021) while simplifying the optimization procedure and enabling separate penalization of the
higher-order moments."
INTRODUCTION,0.041379310344827586,"In particular, we will construct the weights w such that optimizing the weighted mean of the loss ℓis
equivalent to applying a variance penalization:"
INTRODUCTION,0.04482758620689655,"E[wℓ] = E[ℓ] + λV[ℓ]
(2)"
INTRODUCTION,0.04827586206896552,"or penalization of other central moments (e.g., skewness, kurtosis). Construction of these weights
are treated by Theorems 1 and 3 from section 3, which require minimal computational resources.
Important note, penalizing directly the variance preserves convexity only for values of λ within a
very narrow range (Maurer & Pontil, 2009). However, the weighted mean method yields a convex
objective for any positive values of λ."
INTRODUCTION,0.05172413793103448,"In detail, our contributions are as follows:"
INTRODUCTION,0.05517241379310345,"(C1) We build upon the work of Duchi & Namkoong (2019) and prove that optimizing a weighted
mean is equivalent to reducing or amplifying both variance (Theorem 1) and higher-order
moments (Theorem 3)."
INTRODUCTION,0.05862068965517241,"(C2) We derive the limits of the penalization interval which preserves convexity (Lemma 2) and
also show how to penalize with values outside this interval while still maintaining convexity
(Lemma 4)."
INTRODUCTION,0.06206896551724138,"(C3) We connect the variance and higher-order moments penalization using weighted mean to the
robustiﬁcation of loss functions (Lemma 5 and Lemma 6)."
INTRODUCTION,0.06551724137931035,"(C4) We develop a convex version of the variance penalized cross-entropy loss which provides a
higher accuracy in high noise scenarios with class dependent noise."
INTRODUCTION,0.06896551724137931,"(C5) We show experimentally that a negative variance penalization improves model accuracy when
training with noisy labels."
INTRODUCTION,0.07241379310344828,"The implications of the weighted mean are much broader than what we investigate in this work. We
limit the scope of this paper to classiﬁcation using deep neural networks trained with noisy labels.
But the mathematical framework also covers the control of the bias-variance trade-off and can also be
applicable to regression problems."
INTRODUCTION,0.07586206896551724,"In the sequel, we start by introducing the notation in section 2, then in section 3 we present the
moment penalization strategy and the weighted mean trick which is a computational technique to
make moment penalization practical. Next, in section 4, we illustrate the application of moment
penalization using the weighted mean formulation to optimize for robustness when training with
noisy labels."
NOTATIONS,0.07931034482758621,"2
NOTATIONS"
NOTATIONS,0.08275862068965517,"In subsequent sections we will use the following notation. A training data set is deﬁned as D =
{(xi, yi)}n
i=1 where xi ∈X are the features and yi ∈Y = {1, . . . , k} represent the class labels. A
classiﬁer f(x; θ) is a mapping f : X × Θ →V from the feature space to the probability simplex V
parameterized by θ. A loss function ℓ: V × Y →[0, ∞) gives a penalty ℓ(v, y) when the model
predicted the value v and label y was observed. A weight function w : V × Y →R assigns to
each sample a weight. As we are interested in optimizing the model output value v that minimizes
the penalty, we will focus our investigation on loss functions ℓ(v, y) that are convex in v and seek
to preserve the convexity when optimizing the weighted mean. In ERM, we are interested with
ﬁnding the model parameters θ that minimize the empirical risk calculated as ED[ℓ(f(xi; θ), yi)]
and the weighted form ED[w(ℓ(f(xi; θ), yi))ℓ(f(xi; θ), yi)]. To simplify the notation, we will drop
the dataset D from the expectation subscript and the arguments of the loss and the weight function,
i.e., E[ℓ] ⇔ED[ℓ(f(xi; θ), yi)] and E[wℓ] ⇔ED[w(ℓ(f(xi; θ), yi))ℓ(f(xi; θ), yi)]. Similarly, the
notation for minimum is simpliﬁed as min ℓ⇔minxi,yi∈D ℓ(f(xi; θ), yi)."
NOTATIONS,0.08620689655172414,Under review as a conference paper at ICLR 2022
NOTATIONS,0.0896551724137931,"−3
0
3 −3 0 3 0.0 0.0 0.2 0.2 1.0 1.0 2.0 2.0"
NOTATIONS,0.09310344827586207,"3.9
3.9"
NOTATIONS,0.09655172413793103,"−3
0
3"
NOTATIONS,0.1,"0.0
0.0 0.5 0.5 1.0 1.0 1.3 1.3"
NOTATIONS,0.10344827586206896,"−3
0
3 λ < 0"
NOTATIONS,0.10689655172413794,"λ = 0
λ > 0"
NOTATIONS,0.1103448275862069,"λ > 0
λ < 0"
NOTATIONS,0.11379310344827587,"Figure 1: Variance penalization for classiﬁcation problems. Contour lines of the weights distribution
for positive λ are shown on the left and for negative on the center plot. The right plot shows the use of
variance penalization for outlier suppression or ampliﬁcation (robustiﬁcation versus generalization)."
PENALIZING MOMENTS,0.11724137931034483,"3
PENALIZING MOMENTS"
PENALIZING MOMENTS,0.1206896551724138,"In ERM, the impact on the model parameters of a sample is determined by the balance between its
loss value and the average of the training batch. Especially observed in the latter stages of the training
when majority of samples have a small loss value except few which are left uncaptured by the model.
Case in which we consider them as unlearned samples and amplify their impact or as outliers and
suppress their impact on the model. The weighted mean trick consist in assigning weights to each
sample based on the loss value to either amplify or suppress their impact on training. This is similar to
dropout (Hinton et al., 2012) but for losses. However, weighted mean trick is a deterministic process
and the weights are not restricted to 0 or 1 but can take any non-negative value."
PENALIZING MOMENTS,0.12413793103448276,"In what follows, we apply the weighted mean trick to extend the ERM framework to multi-objective
optimization of the mean and higher-order moments of the loss function. First, we show that for some
distinct weights, optimizing the weighted mean is equivalent to a simultaneous optimization of the
mean and variance.
Theorem 1 (Variance Expansion). Let ℓbe a loss function with ﬁnite E[ℓ] and ﬁnite V[ℓ] and let
w(v, y) = 1 + λ(ℓ(v, y) −E[ℓ(v, y)]), then we have:"
PENALIZING MOMENTS,0.12758620689655173,"E[wℓ] = E[ℓ] + λV[ℓ]
(3)"
PENALIZING MOMENTS,0.1310344827586207,"Proof. Replacing w with the deﬁnition and using the linearity property of the expectation along with
Proposition 7 we get: E[wℓ] = E[ℓ]+λE

(ℓ−E[ℓ])ℓ

= E[ℓ]+λE

(ℓ−E[ℓ])2
= E[ℓ]+λV[ℓ]"
PENALIZING MOMENTS,0.13448275862068965,"Thus, switching from mean to weighted mean allows us to control the bias-variance tradeoff through
λ to improve the distributional robustness of the model (Maurer & Pontil, 2009). However, the range
of λ values that preserve the convexity of the objective depends on the average and the minimum
penalty returned by the loss function ℓas shown by the next lemma.
Lemma 2. As introduced in Theorem 1, the variance expansion of a convex loss function ℓ(v, y) in v
yields a new objective that is also convex in v if λ ∈[0, λmax], where λmax = 1/(E[ℓ] −min ℓ)."
PENALIZING MOMENTS,0.13793103448275862,"Proof is provided in Appendix A. This lemma precisely shows why directly penalizing the variance
does not preserve convexity besides when λ takes values in a narrow interval. Moreover, directly
penalizing the variance as part of a numeric optimization objective, the upper limit of the interval,
λmax, is not constant and changes with each iteration of the optimization algorithm. Note that the
further the minimum value min ℓis from the average loss value E[ℓ], the narrower the interval is.
Conversely, when E[ℓ] = min ℓresults that ℓis constant and V[ℓ] = 0 thus the objective is convex
for λ > 0. However, using the weighted mean trick the objective remains convex for any positive λ
irrespective if V[ℓ] = 0."
PENALIZING MOMENTS,0.1413793103448276,"Figure 1 shows the weights distribution for different values of λ. When λ is positive (left plot)
samples closer to the decision boundary (which also means with larger loss values) receive more
weight. On the other hand, when λ is negative (center plot) samples with larger loss values receive"
PENALIZING MOMENTS,0.14482758620689656,Under review as a conference paper at ICLR 2022
PENALIZING MOMENTS,0.1482758620689655,"less weight. Of note, for λ < 0 the objective is not convex, however as we will show later will still
converge to an optimal solution. The right plot shows a binary classiﬁcation problem where each class
consists of two clusters, squares and circles. The parameter λ controls the placement of the decision
boundary with respect to these two clusters. Positive λ values place more weight on the cluster of
squares which is closer to the decision boundary and as a result the boundary is horizontally aligned.
On the other hand, negative λ values place more weight on samples farther from the boundary and in
this case the cluster of circles. Therefore, this aligns the decision boundary with respect to the cluster
of circles oriented diagonally."
PENALIZING MOMENTS,0.15172413793103448,"Variance is not the only central moment that can be penalized using the weighted mean. In fact, any
combination of the moments can be penalized. The next result generalizes Theorem 1."
PENALIZING MOMENTS,0.15517241379310345,"Theorem 3 (Moments Expansion). Let ℓbe a loss function with ﬁnite ﬁrst m central moments and
deﬁne w(v, y) = Pm
i=1 λi(ℓ(v, y) −E[ℓ(v, y)])i−1, then we have:"
PENALIZING MOMENTS,0.15862068965517243,"E[wℓ] = λ1E[ℓ] + m
X"
PENALIZING MOMENTS,0.16206896551724137,"i=2
˜λiE

(ℓ−E[ℓ])i
(4)"
PENALIZING MOMENTS,0.16551724137931034,where ˜λi = λi + λi+1E[ℓ] for i < m and ˜λm = λm
PENALIZING MOMENTS,0.16896551724137931,"Proof is provided in Appendix A. We notice that penalizing moments higher than two incurs an
additional penalization of the previous moment. For example, penalizing skewness by λ3 incurs a
variance penalization of λ3E[ℓ]."
PENALIZING MOMENTS,0.1724137931034483,"Theorem 3 also has an algebraic interpretation. Note that the formula for weights is nothing more than
a polynomial in ℓ(v, y) translated by E[ℓ]. When penalizing the variance, λ2 controls the slope of the
linear equation, and when penalizing the skewness, λ3 controls the curvature of the quadratic equation.
Moreover, the penalization factors λi also deﬁne the placement of the roots of the polynomial and the
convexity of the weighted mean objective."
PENALIZING MOMENTS,0.17586206896551723,"Lemma 4 (Convexity of Moments Expansion). Let ℓ(v, y) be a loss function convex in v and
p : R →[0, ∞) be a non negative and differentiable convex function and M ≥0, then the weighted
objective w(v, y)ℓ(v, y) with w(v, y) = p(ℓ(v, y) −M) is convex in v if p is non decreasing."
PENALIZING MOMENTS,0.1793103448275862,"Proof is provided in Appendix A. The above result lists two requirements on the polynomial function
p such that the weighted mean objective remains convex. First, the function must be non-negative,
thus, the negative weights must be clipped to 0. Secondly, when the function takes positive values,
p must be non decreasing and convex. Of note, this result is similar in scope to Lemma 2 but does
not generalize it as the weights are non negative. Figure 2 shows several examples of polynomials.
Variance penalization implies p is an afﬁne function, and thus, convex. However, for λ1 > 0 the
polynomial is non decreasing (left plot) and for λ1 < 0 the polynomial is non increasing (center
plot). Thus, only positive variance penalization will result in a convex objective. Of note, Lemma 2
upper bounds λ1 if weights are not clipped to 0, however, if clipping is used λ1 is not upper bounded.
When penalizing skewness, p is a quadratic function (right plot). In this case, if λ2 > 0 then p is
convex and non decreasing only on a restricted interval instead of the entire real line. Thus, convexity
can be preserved by appropriately adjusting the roots of the polynomial such that p is convex on
[min ℓ−E[ℓ], +∞]."
PENALIZING MOMENTS,0.18275862068965518,"Clipping negative weights to 0 prevents the optimization objective to switch from minimization to
maximization, usually an undesirable behavior. Consequently, the samples with a corresponding zero
weight reach their maximum contribution in the moments penalization. Further increasing the factors
λi, will have no effect on those samples and only samples with non-zero weights will participate
in the training. As a result, the efﬁciency of the moments penalization will slightly fall. Moreover,
the samples with zero weight will be excluded from training, technique used in the past by multiple
studies. Rockafellar & Uryasev (2000) used a similar clipping technique to optimize only for samples
that are part of the tail of the distribution."
PENALIZING MOMENTS,0.18620689655172415,"The Moments Expansion Theorem extends the variance expansion proposed by Duchi & Namkoong
(2019) to include higher-order moments. However, even when only the variance is penalized, the two
methods are still slightly different. Moments Expansion Theorem computes the weights directly from
the loss values, whereas the variance expansion of Duchi & Namkoong (2019) solves a secondary
optimization problem to ﬁnd the weights. The use of a secondary optimization problem has the"
PENALIZING MOMENTS,0.1896551724137931,Under review as a conference paper at ICLR 2022
PENALIZING MOMENTS,0.19310344827586207,"−1
0
1 −1 0 1 2 3"
PENALIZING MOMENTS,0.19655172413793104,"λ2 = 2 λ1 = 1
λ4 = 1 λ3 = 2.5 λ2 = 3 λ1 = 1"
PENALIZING MOMENTS,0.2,"−1
0
1"
PENALIZING MOMENTS,0.20344827586206896,λ2 = −2 λ1 = 1
PENALIZING MOMENTS,0.20689655172413793,"−1
0
1"
PENALIZING MOMENTS,0.2103448275862069,λ3 = 1 λ2 = 0.5 λ1 = −0.5
PENALIZING MOMENTS,0.21379310344827587,"Figure 2: Polynomial functions for moments penalization. Dotted lines show the complete polynomial
whereas solid lines the clipped version. Left plot shows two convex and non decreasing polynomials.
Center plot shows a convex but non increasing polynomial and thus will result in a non convex
objective. Right plot shows a convex and non decreasing polynomial on the interval [−1, +∞], and
thus will yield a convex objective when min(ℓ) −E[ℓ] ≥−1."
PENALIZING MOMENTS,0.21724137931034482,"advantage of penalizing the variance more consistently despite being more computationally expensive.
On the contrary, when using the moments expansion, the penalized variance can be slightly lower
depending on the number of weights that are 0. However, the advantage is that the direct computation
of the weights makes it easier to include the method into existing analysis frameworks. A similar
method that extends the optimization objective to include penalization factors for higher-order
moments was proposed by Li et al. (2021). The proposed method replaces the ERM objective with a
tilted version calculated as 1"
PENALIZING MOMENTS,0.2206896551724138,t K(t) = 1
PENALIZING MOMENTS,0.22413793103448276,"t log E[etℓ] where K(t) is the cumulant-generating function of
the loss ℓ. The penalization of the higher order moments of the tilted ERM can be recovered from the
power series expansion of K(t). The distinction between the two is that the moments penalization
introduced in this paper represents a generalization of the tilted ERM as it allows any combination of
the higher order moments to be penalized whereas tilted ERM uses a single parameter that governs
the penalization factors. In summary, the moments penalization implemented using the weighted
mean trick is more ﬂexible, however, it comes at a cost as there are more parameters to tune when
penalizing multiple moments compared to tilted ERM of Li et al. (2021)."
PENALIZING MOMENTS,0.22758620689655173,"Convergence and convergence rates. The moments penalization problem along with variance
expansion of Duchi & Namkoong (2019) fall under the class of distributional robust stochastic
programsSun & Xu (2016) (DRSP) which is a subclass of ambiguity programsRoyset & Wets (2017)
(AP) where the general objective is:"
PENALIZING MOMENTS,0.23103448275862068,"AP: min
θ∈Θ
sup
P ∈D(θ)
ϕ(θ, P)
(5)"
PENALIZING MOMENTS,0.23448275862068965,"where Θ is the set of model parameters and D(θ) is the ambiguity set. In DSRP, the bivariate function
ϕ(θ, P) = EP [ℓ] where ℓis the loss function and the ambiguity set D(θ) is a set of probability
distributions. In the case of moments penalization problem, the ambiguity set D(θ) depends on the
model parameters and is a singleton as the weights uniquely transform the empirical distribution. As
a result, the optimal value of the inner maximization problem becomes supP ∈D(θ) ϕ(θ, P) = EP [ℓ].
Intuitively, a model will converge if changes in its parameters will cause minor changes in the
distribution P, and with each step the distribution will approach the optimum distribution P ∗.
Formally, to quantify the changes in the distribution, we would need a distance or a metric. Sun &
Xu (2016) use the total variation metric and a pseudometric to prove uniform convergence, possibly
at an exponential rate, if P converges to P ∗under total variation metric and ℓis uniformly bounded
(see Sun & Xu, 2016, Th. 1 and Prop. 3). Royset & Wets (2017) proposed a hypo-distance metric
and proved lop-convergence given that the bivariate function ϕ(θ, P) satisﬁes some assumptions,
(see Royset & Wets (2017) Def. 4.1). Duchi & Namkoong (2019) provide guarantees for a number
of stochastic risk minimization problems when only the variance is penalized and P is in the local
neighborhood of the empirical distribution deﬁned using the χ2-divergence. We refer the reader to
the works of Sun & Xu (2016) and Royset & Wets (2017) and the references therein for additional
guarantees if more information about the problem structure is available, or if other metrics are used.
For the moments penalization problem, the moments penalization factors λi for i ≥2 determine how"
PENALIZING MOMENTS,0.23793103448275862,Under review as a conference paper at ICLR 2022
PENALIZING MOMENTS,0.2413793103448276,"much the distribution P changes when the loss changes. Small values of the penalization factors will
keep P in the neighborhood of the empirical distribution, whereas large values will make the weights
sensitive to changes in the loss values that can cause stability or convergence issues. The exact values
depend on the empirical distribution of the data and the choice of the model and loss function."
PENALIZING MOMENTS,0.24482758620689654,"Weighted mean trick in practice. To apply the method in practice, the classical batch training
algorithm must be extended to include an additional step, the weights calculation. Instead of directly
calculating the average loss, the user will calculate the loss value for each sample in the batch and then
use the expression from Theorem 3 to compute the weights and the weighted mean. The moments
penalization factors λi are the hyper-parameters and are tuned in ascending order with respect to i.
However, penalizing higher-order moments might affect the impact of the lower-order ones, and thus,
it might require a few iterations to ﬁnd the optimal combination. The implementation of this algorithm
in Pytorch (Paszke et al., 2019) is available on GitHub.1 Since the gradient of the weighted mean
is the weighted gradient of the elements, this allows weights to control the impact of each sample
on the model parameters. Of note, the theoretical results hold when switching from expectation to
sample expectation, En[ℓ] = 1"
PENALIZING MOMENTS,0.2482758620689655,"n
Pn
i=1 ℓ(f(xi, θ), yi)."
PENALIZING MOMENTS,0.2517241379310345,Algorithm 1: Training with Moments Penalization
PENALIZING MOMENTS,0.25517241379310346,input :
PENALIZING MOMENTS,0.25862068965517243,"f(x; θ)
– model to be trained
{xi, yi}n
1
– batch of training data
{λ}m
1
– penalization factors
ℓ(v, y)
– loss function
while stopping criteria not reached do"
PENALIZING MOMENTS,0.2620689655172414,for i ←1 to n do
PENALIZING MOMENTS,0.2655172413793103,"zi ←ℓ(f(xi, θ), yi) ;
/* sample loss */"
PENALIZING MOMENTS,0.2689655172413793,"w
←
hPm
j=1 λj(z −En[z])j−1i"
PENALIZING MOMENTS,0.27241379310344827,"+
Lw ←1"
PENALIZING MOMENTS,0.27586206896551724,"n
Pn
i=1 wizi ;
/* weighted mean */
θ
←θ −γ∇θLw ;
/* update model parameters */"
ROBUST CLASSIFICATION,0.2793103448275862,"4
ROBUST CLASSIFICATION"
ROBUST CLASSIFICATION,0.2827586206896552,"In this section, we will explore the robustiﬁcation of the cross-entropy function under label noise by
bounding the loss values using negative variance penalization. In this case, the resulting objective
will not be convex. However, for small penalization factors the objective remains convex on almost
the entirety of the domain (Figure 3) and does not hinder the convergence. Moreover, we also develop
a convex version of the variance penalized cross-entropy though for a minor price in performance."
ROBUST CLASSIFICATION,0.28620689655172415,"The objective of robust classiﬁcation is to learn an optimal classiﬁer f ∗that minimize the average
loss for both clean and noisy data. Formally, f ∗= argmin E[ℓ(f(x, θ), ˆy)] where ˆy represents noisy
labels. The noise considered in this paper corrupts the class labels with probability P(ˆyi ̸= yi) = η
or preserves it with probability P(ˆyi = yi) = 1 −η, where η ∈[0, 1]. We investigate two scenarios:
when η does not depend on the class label (class independent or uniform noise), and when η depends
on the class label (class dependent or asymmetric noise). In what follows, we show that using a
negative variance penalization factor, λ2 < 0, bounds the loss function. By bounding the loss function
the impact of misclassiﬁcation of noisy samples on the average loss will decrease, and thus reduce
the noise impact on the model during training."
ROBUST CLASSIFICATION,0.2896551724137931,"Ghosh et al. (2017) outlined the distribution independent sufﬁcient conditions for a loss function to
be robust under both, class dependent and class independent noise. Speciﬁcally, if the loss function
satisﬁes the symmetry constraint: k
X"
ROBUST CLASSIFICATION,0.29310344827586204,"i=1
ℓ(f(x, θ), i) = C
(6)"
ROBUST CLASSIFICATION,0.296551724137931,"where k is the number of classes, C is a constant, and the equality holds ∀f, ∀θ, ∀x ∈X, then ℓis
noise tolerant for class independent noise when η < k−1"
ROBUST CLASSIFICATION,0.3,"k
(see Theorem 1 of Ghosh et al. (2017))."
ROBUST CLASSIFICATION,0.30344827586206896,"1For this phase we submit the source code as part of supplementary materials to preserve anonymity, however,
the ﬁnal version will contain a link to our GitHub repository."
ROBUST CLASSIFICATION,0.30689655172413793,Under review as a conference paper at ICLR 2022
ROBUST CLASSIFICATION,0.3103448275862069,"Moreover, if the population risk of the optimum classiﬁer E[ℓ(f ∗(x, θ), ˆy)] = 0 then ℓis also noise
tolerant for class dependent noise. Among the commonly used losses, only the mean absolute error
(MAE) satisﬁes the symmetry constraint. On the other end, the cross-entropy (CE) loss which is
widely used for classiﬁcation, not only does not satisfy the above constraint, but is also an unbounded
loss making it extremely susceptible to noise. Speciﬁcally, as noise makes the predicted probability
of the correct class approach zero, its cross-entropy loss will approach inﬁnity."
ROBUST CLASSIFICATION,0.3137931034482759,"Following the work of Ghosh et al. (2017), many studies (Zhang & Sabuncu, 2018; Feng et al., 2020;
Wang et al., 2019b; Ma et al., 2020; Wang et al., 2019a) found that models trained with MAE struggle
to converge and proposed novel losses that rely on boundedness to achieve robustness instead of the
symmetry constraint to avoid convergence problems."
ROBUST CLASSIFICATION,0.31724137931034485,"In the following, we use the weighted mean trick to bound a loss function to improve its noise
robustness. The next lemma specify the requirements for the weights:"
ROBUST CLASSIFICATION,0.32068965517241377,"Lemma 5. Let ℓ(v, y) represent an unbounded loss function and w(v, y) a corresponding non-
negative and bounded weight function, then the product w(v, y)ℓ(v, y) is bounded if there exists a
ﬁnite threshold L0 such that when ℓ(v, y) ≥L0 the corresponding weights w(v, y) are 0."
ROBUST CLASSIFICATION,0.32413793103448274,"Proof. Since when ℓ(v, y) ≥L0 the corresponding weights w(v, y) = 0 the product w(v, y)ℓ(v, y)
is also 0. When ℓ(v, y) < L0 since the weights are bounded the product w(v, y)ℓ(v, y) is also
bounded and thus 0 ≤w(v, y)ℓ(v, y) ≤B where B is a positive constant that depends on the weight
and loss function."
ROBUST CLASSIFICATION,0.3275862068965517,"The simplest solution that satisﬁes the above requirement is the negative variance penalization,
λ2 < 0, as the next lemma shows:"
ROBUST CLASSIFICATION,0.3310344827586207,"Lemma 6. For weights w(v, y) computed using Theorem 3 with λ1 > 0, λ2 < 0, λi = 0, ∀i > 2
and with negative weights clipped to 0, penalties ℓ(v, y) ≥L0 with L0 = E[ℓ] −λ1"
ROBUST CLASSIFICATION,0.33448275862068966,"λ2 will have an
associated weight of 0."
ROBUST CLASSIFICATION,0.33793103448275863,"Proof. From Theorem 3 the weights are calculated as w(v, y) = λ1 + λ2(ℓ(v, y) −E[ℓ(v, y)]) from
which we can determine the threshold value L0 = E[ℓ]−λ1"
ROBUST CLASSIFICATION,0.3413793103448276,"λ2 . Thus due to the non-negativity constraint
ℓ(v, y) ≥L0 will have an associated weight of 0."
ROBUST CLASSIFICATION,0.3448275862068966,"Of note, bounding an unbounded loss function is achieved through clipping, however, the resulting
loss function is not convex as shown in Figure 3. With parameters λ1 and λ2 along with E[ℓ]
establishing which samples are considered noise and excluded from training. Since for λ2 < 0 the
threshold L0 = E[ℓ] −λ1"
ROBUST CLASSIFICATION,0.3482758620689655,"λ2 is greater than E[ℓ], thus all excluded samples have a loss value above
average. Moreover, the higher the magnitude of λ2, the closer the threshold L0 is to E[ℓ]. This can be
seen in the left plot of Figure 3. Moreover, the magnitude of λ2 dictates by how much the loss values
below average are ampliﬁed and the ones above average suppressed. In practice, using larger values
for λ2 will decrease the impact of misclassiﬁed samples and those near the separating hyperplane
on the placement of the decision boundary. Lemma 6 can be extended to include other higher-order
moments. In this case, the roots of the weights polynomial will determine which samples participate
in the optimization problem and which are considered noise. For example, if the decision boundary
should be decided by samples with average loss values then a possible solution is to penalize skewness.
Since in this case the weights are deﬁned by a quadratic equation, and using a negative value for λ3
will make the parabola open downwards and thus assign non-zero weights only to samples around
the mean."
ROBUST CLASSIFICATION,0.35172413793103446,"Moreover, we also develop a convex version of the variance penalized cross-entropy by constraining
the second derivative of the weighted loss function to be non-negative. The cross-entropy loss is
deﬁned as ℓce(v, y) = −log v[y] where v[y] represents the predicted probability of sample having the
label y. To simplify the notation, we will rewrite the cross-entropy loss as ℓce(u) = −log u where
u = v[y] and similarly rewrite the weight function as w(u) = λ1 + λ2(ℓ(u) −E[ℓ(u)]). We note that"
ROBUST CLASSIFICATION,0.35517241379310344,"the second derivative of the weighted loss w(u)ℓ(u) is 0 for u = uc with uc = exp

1 + λ1"
ROBUST CLASSIFICATION,0.3586206896551724,"2λ2 −E[ℓ] 2
"
ROBUST CLASSIFICATION,0.3620689655172414,"and is negative for u < uc. To constrain the second derivative be non-negative we linearly interpolate
w(u)ℓ(u) for u < uc using the derivative of w(u)ℓ(u) at uc. The weight function for u < uc"
ROBUST CLASSIFICATION,0.36551724137931035,"Under review as a conference paper at ICLR 2022 0
1
0 1 2 3"
ROBUST CLASSIFICATION,0.3689655172413793,E[ℓce] = 1.7
ROBUST CLASSIFICATION,0.3724137931034483,"λ2 = −0.1 λ1 = 1
λ2 = −0.2 λ1 = 1 0
1"
ROBUST CLASSIFICATION,0.3758620689655172,E[ℓce] = 2.5
ROBUST CLASSIFICATION,0.3793103448275862,E[ℓce] = 0.5
ROBUST CLASSIFICATION,0.38275862068965516,"λ2 = −0.15 λ1 = 1
λ2 = −0.15 λ1 = 1 0
1"
ROBUST CLASSIFICATION,0.38620689655172413,"λ2 = −0.15 λ1 = 1
λ2 = −0.15 λ1 = 1"
ROBUST CLASSIFICATION,0.3896551724137931,"Figure 3: Bounding the cross-entropy loss function using negative variance penalization. Classical
cross-entropy function is shown a dotted line. The impact of the λ2 parameter on the loss shape when
the average loss is constant is shown on the left plot and the impact of the average loss on the shape
in the center plot. Right plot shows the convex version of the variance penalized cross-entropy loss."
ROBUST CLASSIFICATION,0.3931034482758621,"is w(u) =

w(uc)ℓ(uc) +
d
duw(u)ℓ(u)|u=uc(u −uc)

/ℓ(u) with the resulting convex objective
shown on the right plot of Figure 3. The black dot marks the transition point uc from the weighted
cross-entropy on the right to the linear interpolation on the left of the dot. Of note, the resulting
objective is still bounded albeit with a higher upper bound."
ROBUST CLASSIFICATION,0.39655172413793105,"In general, methods for training of neural networks in the presence of noise can be classiﬁed into
two broad categories: noise model-free and noise model-based strategies. Noise model-free methods
focus on reducing the impact of outliers and the two main subcategories are: robust losses (Bartlett
et al., 2006; Ghosh et al., 2017; Wang et al., 2019a; Zhang & Sabuncu, 2018; Wang et al., 2019b;
Natarajan et al., 2013; Mnih & Hinton, 2012; Xu et al., 2019; Patrini et al., 2016; Rooyen et al., 2015;
Feng et al., 2020; Ma et al., 2020) and learning management such as meta-learning or regularization
(Li et al., 2017; Szegedy et al., 2016; Hendrycks et al., 2019; Liu et al., 2020; Harutyunyan et al.,
2020; Lugosi & Mendelson, 2021; Laforgue et al., 2021; Lecué et al., 2020; Li, 2017). On the other
hand, noise model-based methods estimate the properties of the noise and use this information when
train the model. Noise model-based methods can be further divided into: using noise transition
matrix (Patrini et al., 2017; Hendrycks et al., 2018; Chen & Gupta, 2015; Bekker & Goldberger,
2016; Goldberger & Ben-Reuven, 2017; Sukhbaatar et al., 2015; Xia et al., 2019; Yao et al., 2019;
Wang et al., 2020; Xia et al., 2020; Yao et al., 2020; Lukasik et al., 2020), noise mitigation requiring
a clean dataset (Jiang et al., 2018; Ren et al., 2018; Veit et al., 2017; Zhang et al., 2020; Yuan et al.,
2018; Vahdat, 2017; Mirzasoleiman et al., 2020), or incrementally estimating the distribution of clean
data (Liu et al., 2017; Zheng et al., 2020; Arazo et al., 2019; Zhang et al., 2017; Ghosh & Lan, 2021;
Zhang et al., 2021; Wu et al., 2020)."
ROBUST CLASSIFICATION,0.4,"Experimental results. The procedure adopted for all the experiments and elaborated in Appendix B
is similar to other studies investigating robust losses (Zhang & Sabuncu, 2018; Feng et al., 2020;
Wang et al., 2019b; Ma et al., 2020). The source code to reproduce our results is available online.1"
ROBUST CLASSIFICATION,0.40344827586206894,"The model accuracy for clean data when training with both, class independent and class dependent
noise, are summarized in Table 1. Of note, we report the accuracy results of the model at the end
of the training to capture the overﬁtting on noise for some models. We observe that the training
with moments penalization outperforms other methods in low to moderate noise level scenarios and
falls behind in high noise scenarios but still above the classical cross-entropy. The performances
of the convex version and non-convex version are very similar, however, the convex version shows
better results in high noise scenarios under class dependent noise. Additional results when penalizing
higher-order moments are provided in Appendix C."
ROBUST CLASSIFICATION,0.4068965517241379,"In case of CIFAR datasets, for class independent noise and for η = 0.2 the proposed method improves
the accuracy of the classical cross-entropy by 6%, the highest improvement among the investigated
methods. However, this improvement decreases as the noise ratio increases and approaches the
accuracy of the classical cross entropy loss for η = 0.8. To note, the convex version of the moments
method for η = 0.8 underpeformed by 0.8% compared to the classical cross-entropy, however, in"
ROBUST CLASSIFICATION,0.4103448275862069,"1For this phase we submit the source code as part of supplementary materials to preserve anonymity, however,
the ﬁnal version will contain a link to our GitHub repository."
ROBUST CLASSIFICATION,0.41379310344827586,Under review as a conference paper at ICLR 2022
ROBUST CLASSIFICATION,0.41724137931034483,"Table 1: Mean accuracy (%) and standard deviation on clean data over 5 runs. The best result for
each scenario is underlined."
ROBUST CLASSIFICATION,0.4206896551724138,"Loss
Noise rate η
Class independent
Class dependent"
ROBUST CLASSIFICATION,0.4241379310344828,"0.2
0.4
0.6
0.8
0.1
0.2
0.3
0.4"
ROBUST CLASSIFICATION,0.42758620689655175,CIFAR-10
ROBUST CLASSIFICATION,0.43103448275862066,"Classical
84.1 0.2
77.1 0.4
66.3 0.4
36.0 1.5
88.9 0.2
87.2 0.2
84.8 0.4
80.9 0.7"
ROBUST CLASSIFICATION,0.43448275862068964,"Moments
90.5 0.1
85.0 0.6
69.1 0.4
37.3 2.3
91.4 0.2
89.9 0.0
85.0 3.2
72.9 3.3
Moment-convex
86.8 0.6
80.3 0.3
67.6 0.6
35.2 1.5
89.1 0.1
87.2 0.2
83.5 0.3
78.7 0.4"
ROBUST CLASSIFICATION,0.4379310344827586,"TERM
89.5 0.1
83.2 0.2
69.2 0.5
37.2 2.0
91.1 0.2
88.1 0.4
83.0 0.7
77.2 1.1
Taylor
90.2 0.2
86.2 0.1
73.0 0.5
10.0 0.0
91.0 0.2
88.4 0.3
83.7 0.4
78.0 1.1
Normalized
90.1 0.1
87.0 0.2
80.8 0.2
32.6 2.9
90.9 0.1
89.7 0.3
86.8 0.5
79.8 0.5
Symmetric
90.0 0.2
86.7 0.2
80.2 1.0
44.8 4.0
90.8 0.2
89.6 0.1
86.5 0.4
79.8 0.9
Generalized
90.4 0.2
86.0 0.2
67.3 2.7
10.0 0.0
91.3 0.1
89.0 0.1
83.7 0.5
74.0 3.2"
ROBUST CLASSIFICATION,0.4413793103448276,CIFAR-100
ROBUST CLASSIFICATION,0.44482758620689655,"Classical
40.0 0.5
31.1 1.1
20.7 0.5
11.6 0.4
46.8 0.2
42.6 0.4
37.2 0.5
31.7 0.3"
ROBUST CLASSIFICATION,0.4482758620689655,"Moments
46.1 0.4
39.8 0.7
27.9 0.8
13.8 1.0
47.8 0.9
43.7 0.9
37.2 0.4
30.6 0.3
Moment-convex
44.5 0.8
36.7 0.9
24.8 0.8
13.4 0.8
47.4 0.5
42.9 0.7
36.9 0.5
31.1 0.6"
ROBUST CLASSIFICATION,0.4517241379310345,"TERM
45.5 0.3
41.5 1.1
32.8 1.4
17.7 0.4
47.1 0.6
44.6 0.7
37.9 0.6
30.9 0.6
Taylor
37.3 0.6
33.0 1.3
27.2 0.8
17.4 0.2
38.7 0.6
35.9 0.7
31.0 1.0
26.6 0.5
Normalized
32.9 0.8
27.8 0.7
22.7 0.4
13.9 0.2
35.0 0.3
32.7 0.3
30.2 0.4
26.5 0.6
Symmetric
43.1 0.4
37.9 0.4
31.2 0.8
19.4 0.5
45.3 0.5
43.1 0.2
41.0 0.5
34.6 0.3
Generalized
38.2 0.4
33.7 0.9
28.1 0.6
18.5 0.4
39.6 0.9
37.9 0.7
35.8 0.6
29.9 0.3"
ROBUST CLASSIFICATION,0.45517241379310347,Fashion-MNIST
ROBUST CLASSIFICATION,0.4586206896551724,"Classical
92.0 0.1
90.9 0.1
89.0 0.2
78.4 1.0
92.9 0.1
92.5 0.3
92.0 0.7
90.6 1.7"
ROBUST CLASSIFICATION,0.46206896551724136,"Moments
92.1 0.2
91.6 0.2
89.8 0.1
80.2 1.1
87.0 2.9
82.4 6.7
79.3 6.8
62.1 3.0
Moments-convex
92.4 0.1
91.6 0.1
89.6 0.2
79.7 1.0
92.6 0.2
92.0 0.4
92.4 0.2
88.7 1.5"
ROBUST CLASSIFICATION,0.46551724137931033,"TERM
92.1 0.1
91.6 0.1
90.0 0.1
80.3 0.9
92.3 0.1
92.0 0.4
91.5 0.9
91.3 0.4
Taylor
90.6 0.0
89.4 0.3
86.8 0.2
75.7 0.7
91.1 0.1
90.7 0.4
89.8 1.4
85.1 3.8
Normalized
91.5 0.1
90.8 0.3
88.9 0.3
79.8 1.3
91.7 0.1
91.7 0.3
90.7 0.7
91.1 0.1
Symmetric
92.3 0.1
91.8 0.1
90.6 0.3
82.8 1.2
92.5 0.1
92.3 0.3
91.9 0.6
91.5 1.3
Generalized
91.2 0.2
90.2 0.2
88.1 0.2
73.9 1.1
91.6 0.1
91.3 0.3
90.7 0.7
90.4 0.3"
ROBUST CLASSIFICATION,0.4689655172413793,"all other scenarios it had a higher accuracy. High noise scenarios turned out to be challenging for
all losses with the Taylor and Generalized cross-entropy losses not converging on CIFAR-10 for
η = 0.8 and the best accuracy was registered by Symmetric cross-entropy loss proposed by Wang
et al. (2019b). For class dependent noise, the moments penalization registered the highest accuracy
for CIFAR-10 when η = 0.1 and η = 0.2 but had the lowest accuracy for η = 0.4. To further
investigate this behavior, we reran the experiments and monitored the accuracy for each individual
class. The classical cross-entropy recorded similar accuracy as the robust methods on classes affected
by noise and outperformed them on classes 6 and 8, both not targeted by class dependent noise. The
poor performance of robust methods can be justiﬁed by using parameters tuned for low and moderate
noise. In case of Fashion-MNIST dataset, as similar behavior as with CIFAR datasets was observed."
CONCLUSION,0.4724137931034483,"5
CONCLUSION"
CONCLUSION,0.47586206896551725,"The main goal of the current work was to investigate the optimization of a weighted mean and the
ﬂexibility it provides in enforcing properties such as robustness when training with noisy labels.
In addition, we extended previous variance penalization methods to include higher-order moments
while eliminating some of their limitations. One of the signiﬁcant ﬁndings to emerge from this
study was that we can control the ﬁnal distribution of the loss values by penalizing higher-order
moments. In particular, by enforcing the distribution of the cross-entropy to have a higher variance
through negative variance penalization, we improved the models’ accuracy when trained with noisy
labels. Although this paper centers on classiﬁcation problems, the framework can also control the
bias-variance trade-off and can also be applicable to regression problems."
CONCLUSION,0.4793103448275862,Under review as a conference paper at ICLR 2022
REFERENCES,0.4827586206896552,REFERENCES
REFERENCES,0.4862068965517241,"Eric Arazo, Diego Ortego, Paul Albert, Noel O’Connor, and Kevin McGuinness. Unsupervised label
noise modeling and loss correction. In ICML, 2019."
REFERENCES,0.4896551724137931,"Peter L Bartlett, Michael I Jordan, and Jon D McAuliffe. Convexity, classiﬁcation, and risk bounds.
JASA, 2006."
REFERENCES,0.49310344827586206,"Alan Joseph Bekker and Jacob Goldberger. Training deep neural-networks based on unreliable labels.
In ICASSP, 2016."
REFERENCES,0.496551724137931,"Xinlei Chen and Abhinav Gupta. Webly supervised learning of convolutional networks. In ICCV,
2015."
REFERENCES,0.5,"John Duchi and Hongseok Namkoong. Variance-based regularization with convex objectives. The
Journal of Machine Learning Research, 20(1):2450–2504, 2019."
REFERENCES,0.503448275862069,"Lei Feng, Senlin Shu, Zhuoyi Lin, Fengmao Lv, Li Li, and Bo An. Can cross entropy loss be robust
to label noise. In IJCAI, 2020."
REFERENCES,0.506896551724138,"Aritra Ghosh and Andrew Lan. Do we really need gold samples for sample weighting under label
noise? In WACV, 2021."
REFERENCES,0.5103448275862069,"Aritra Ghosh, Himanshu Kumar, and PS Sastry. Robust loss functions under label noise for deep
neural networks. In AAAI, 2017."
REFERENCES,0.5137931034482759,"J. Goldberger and E. Ben-Reuven. Training deep neural-networks using a noise adaptation layer. In
ICLR, 2017."
REFERENCES,0.5172413793103449,"Hrayr Harutyunyan, Kyle Reing, Greg Ver Steeg, and Aram Galstyan. Improving generalization by
controlling label-noise information in neural network weights. In ICML, 2020."
REFERENCES,0.5206896551724138,"Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image
recognition. In Proceedings of the IEEE conference on computer vision and pattern recognition,
pp. 770–778, 2016."
REFERENCES,0.5241379310344828,"Christina Heinze-Deml and Nicolai Meinshausen. Conditional variance penalties and domain shift
robustness. Machine Learning, 110(2):303–348, 2021."
REFERENCES,0.5275862068965518,"Dan Hendrycks, Mantas Mazeika, Duncan Wilson, and Kevin Gimpel. Using trusted data to train
deep networks on labels corrupted by severe noise. In NeurIPS, 2018."
REFERENCES,0.5310344827586206,"Dan Hendrycks, Kimin Lee, and Mantas Mazeika. Using pre-training can improve model robustness
and uncertainty. In ICML, 2019."
REFERENCES,0.5344827586206896,"Geoffrey E. Hinton, Nitish Srivastava, A. Krizhevsky, Ilya Sutskever, and R. Salakhutdinov. Improving
neural networks by preventing co-adaptation of feature detectors. NeurIPS, 2012."
REFERENCES,0.5379310344827586,"Weihua Hu, Gang Niu, Issei Sato, and Masashi Sugiyama. Does distributionally robust supervised
learning give robust classiﬁers? In International Conference on Machine Learning, pp. 2029–2037.
PMLR, 2018."
REFERENCES,0.5413793103448276,"Lu Jiang, Zhengyuan Zhou, Thomas Leung, Li-Jia Li, and Li Fei-Fei. Mentornet: Learning data-
driven curriculum for very deep neural networks on corrupted labels. In ICML, 2018."
REFERENCES,0.5448275862068965,"Pierre Laforgue, Guillaume Staerman, and Stephan Clémençon. Generalization bounds in the
presence of outliers: a median-of-means study. In International Conference on Machine Learning,
pp. 5937–5947. PMLR, 2021."
REFERENCES,0.5482758620689655,"Henry Lam. Recovering best statistical guarantees via the empirical divergence-based distributionally
robust optimization. Operations Research, 67(4):1090–1105, 2019."
REFERENCES,0.5517241379310345,"Guillaume Lecué, Matthieu Lerasle, and Timlothée Mathieu. Robust classiﬁcation via mom mini-
mization. Machine Learning, 109(8):1635–1665, 2020."
REFERENCES,0.5551724137931034,Under review as a conference paper at ICLR 2022
REFERENCES,0.5586206896551724,"Jerry Li. Robust sparse estimation tasks in high dimensions. arXiv preprint arXiv:1702.05860, 2017."
REFERENCES,0.5620689655172414,"Tian Li, Ahmad Beirami, Maziar Sanjabi, and Virginia Smith. Tilted empirical risk minimization.
ICLR, 2021."
REFERENCES,0.5655172413793104,"Yuncheng Li, Jianchao Yang, Yale Song, Liangliang Cao, Jiebo Luo, and Li-Jia Li. Learning from
noisy labels with distillation. In ICCV, 2017."
REFERENCES,0.5689655172413793,"Sheng Liu, Jonathan Niles-Weed, Narges Razavian, and Carlos Fernandez-Granda. Early-learning
regularization prevents memorization of noisy labels. In NeurIPS, 2020."
REFERENCES,0.5724137931034483,"Xin Liu, Shaoxin Li, Meina Kan, Shiguang Shan, and Xilin Chen. Self-error-correcting convolutional
neural network for learning with noisy labels. In FG, 2017."
REFERENCES,0.5758620689655173,"Gabor Lugosi and Shahar Mendelson. Robust multivariate mean estimation: the optimality of
trimmed mean. The Annals of Statistics, 49(1):393–410, 2021."
REFERENCES,0.5793103448275863,"Michal Lukasik, Srinadh Bhojanapalli, Aditya Menon, and Sanjiv Kumar. Does label smoothing
mitigate label noise? In ICML, 2020."
REFERENCES,0.5827586206896552,"Xingjun Ma, Hanxun Huang, Yisen Wang, Simone Romano, Sarah Erfani, and James Bailey. Nor-
malized loss functions for deep learning with noisy labels. In ICML, 2020."
REFERENCES,0.5862068965517241,"Andreas Maurer and Massimiliano Pontil. Empirical bernstein bounds and sample variance penaliza-
tion. Proc. Computational Learning Theory Conference (COLT), 2009."
REFERENCES,0.5896551724137931,"Baharan Mirzasoleiman, Kaidi Cao, and Jure Leskovec. Coresets for robust training of deep neural
networks against noisy labels. In NeurIPS, 2020."
REFERENCES,0.593103448275862,"Volodymyr Mnih and Geoffrey E Hinton. Learning to label aerial images from noisy data. In ICML,
2012."
REFERENCES,0.596551724137931,"Hongseok Namkoong and John C Duchi. Variance-based regularization with convex objectives. In
Advances in Neural Information Processing Systems, volume 30. Curran Associates, Inc., 2017."
REFERENCES,0.6,"Nagarajan Natarajan, Inderjit S Dhillon, Pradeep Ravikumar, and Ambuj Tewari. Learning with noisy
labels. In NIPS, 2013."
REFERENCES,0.603448275862069,"Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor
Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, Alban Desmaison, Andreas Kopf, Edward
Yang, Zachary DeVito, Martin Raison, Alykhan Tejani, Sasank Chilamkurthy, Benoit Steiner,
Lu Fang, Junjie Bai, and Soumith Chintala. Pytorch: An imperative style, high-performance deep
learning library. In Advances in Neural Information Processing Systems 32, pp. 8024–8035. Curran
Associates, Inc., 2019."
REFERENCES,0.6068965517241379,"Giorgio Patrini, Frank Nielsen, Richard Nock, and Marcello Carioni. Loss factorization, weakly
supervised learning and label noise robustness. In ICML, 2016."
REFERENCES,0.6103448275862069,"Giorgio Patrini, Alessandro Rozza, Aditya Krishna Menon, Richard Nock, and Lizhen Qu. Making
deep neural networks robust to label noise: A loss correction approach. In CVPR, 2017."
REFERENCES,0.6137931034482759,"Mengye Ren, Wenyuan Zeng, Bin Yang, and Raquel Urtasun. Learning to reweight examples for
robust deep learning. In ICML, 2018."
REFERENCES,0.6172413793103448,"R Tyrrell Rockafellar and Stanislav Uryasev. Optimization of conditional value-at-risk. Journal of
Risk, 2000."
REFERENCES,0.6206896551724138,"Brendan van Rooyen, Aditya Krishna Menon, and Robert C Williamson. Learning with symmetric
label noise: the importance of being unhinged. In NeurIPS, 2015."
REFERENCES,0.6241379310344828,"Johannes O Royset and Roger J-B Wets. Variational theory for optimization under stochastic
ambiguity. SIAM Journal on Optimization, 27(2):1118–1149, 2017."
REFERENCES,0.6275862068965518,Under review as a conference paper at ICLR 2022
REFERENCES,0.6310344827586207,"Yevgeny Seldin, François Laviolette, Nicolo Cesa-Bianchi, John Shawe-Taylor, and Peter Auer.
Pac-bayesian inequalities for martingales. IEEE Transactions on Information Theory, 58(12):
7086–7093, 2012."
REFERENCES,0.6344827586206897,"Matthew Staib, Bryan Wilder, and Stefanie Jegelka. Distributionally robust submodular maximization.
In The 22nd International Conference on Artiﬁcial Intelligence and Statistics, pp. 506–516. PMLR,
2019."
REFERENCES,0.6379310344827587,"Sainbayar Sukhbaatar, Joan Bruna, Manohar Paluri, Lubomir Bourdev, and Rob Fergus. Training
convolutional networks with noisy labels. In ICLR, 2015."
REFERENCES,0.6413793103448275,"Hailin Sun and Huifu Xu. Convergence analysis for distributionally robust optimization and equilib-
rium problems. Mathematics of Operations Research, 41(2):377–401, 2016."
REFERENCES,0.6448275862068965,"Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jon Shlens, and Zbigniew Wojna. Rethinking
the inception architecture for computer vision. In CVPR, 2016."
REFERENCES,0.6482758620689655,"Ilya Tolstikhin and Yevgeny Seldin. Pac-bayes-empirical-bernstein inequality. Advances in Neural
Information Processing Systems 26 (NIPS 2013), pp. 1–9, 2013."
REFERENCES,0.6517241379310345,"Arash Vahdat. Toward robustness against label noise in training deep discriminative neural networks.
In NeurIPS, 2017."
REFERENCES,0.6551724137931034,"Andreas Veit, Neil Alldrin, Gal Chechik, Ivan Krasin, Abhinav Gupta, and Serge Belongie. Learning
from noisy large-scale datasets with minimal supervision. In CVPR, 2017."
REFERENCES,0.6586206896551724,"X Wang, E Kodirov, Y Hua, and NM Robertson. Improved mean absolute error for learning
meaningful patterns from abnormal training data. Technical report, Technical Report, 2019a."
REFERENCES,0.6620689655172414,"Yisen Wang, Xingjun Ma, Zaiyi Chen, Yuan Luo, Jinfeng Yi, and James Bailey. Symmetric cross
entropy for robust learning with noisy labels. In ICCV, 2019b."
REFERENCES,0.6655172413793103,"Zhen Wang, Guosheng Hu, and Qinghua Hu. Training noise-robust deep neural networks via
meta-learning. In CVPR, 2020."
REFERENCES,0.6689655172413793,"Pengxiang Wu, Songzhu Zheng, Mayank Goswami, Dimitris Metaxas, and Chao Chen. A topological
ﬁlter for learning with label noise. In NeurIPS, 2020."
REFERENCES,0.6724137931034483,"Xiaobo Xia, Tongliang Liu, Nannan Wang, Bo Han, Chen Gong, Gang Niu, and Masashi Sugiyama.
Are anchor points really indispensable in label-noise learning? In NeurIPS, 2019."
REFERENCES,0.6758620689655173,"Xiaobo Xia, Tongliang Liu, Bo Han, Nannan Wang, Mingming Gong, Haifeng Liu, Gang Niu,
Dacheng Tao, and Masashi Sugiyama. Part-dependent label noise: Towards instance-dependent
label noise. In NeurIPS, 2020."
REFERENCES,0.6793103448275862,"Yilun Xu, Peng Cao, Yuqing Kong, and Yizhou Wang. L_dmi: A novel information-theoretic loss
function for training deep nets robust to label noise. In NeurIPS, 2019."
REFERENCES,0.6827586206896552,"Jiangchao Yao, Hao Wu, Ya Zhang, Ivor W Tsang, and Jun Sun. Safeguarded dynamic label regression
for noisy supervision. In AAAI, 2019."
REFERENCES,0.6862068965517242,"Yu Yao, Tongliang Liu, Bo Han, Mingming Gong, Jiankang Deng, Gang Niu, and Masashi Sugiyama.
Dual t: Reducing estimation error for transition matrix in label-noise learning. In NeurIPS, 2020."
REFERENCES,0.6896551724137931,"Bodi Yuan, Jianyu Chen, Weidong Zhang, Hung-Shuo Tai, and Sara McMains. Iterative cross learning
on noisy labels. In WACV, 2018."
REFERENCES,0.6931034482758621,"Jing Zhang, Victor S Sheng, Tao Li, and Xindong Wu. Improving crowdsourced label quality using
noise correction. IEEE Trans. Neural Netw. Learn. Syst., 2017."
REFERENCES,0.696551724137931,"Yikai Zhang, Songzhu Zheng, Pengxiang Wu, Mayank Goswami, and Chao Chen. Learning with
feature-dependent label noise: A progressive approach. In ICLR, 2021."
REFERENCES,0.7,"Zhilu Zhang and Mert R Sabuncu. Generalized cross entropy loss for training deep neural networks
with noisy labels. In NeurIPS, 2018."
REFERENCES,0.7034482758620689,Under review as a conference paper at ICLR 2022
REFERENCES,0.7068965517241379,"Zizhao Zhang, Han Zhang, Sercan O Arik, Honglak Lee, and Tomas Pﬁster. Distilling effective
supervision from severe label noise. In CVPR, 2020."
REFERENCES,0.7103448275862069,"Songzhu Zheng, Pengxiang Wu, Aman Goswami, Mayank Goswami, Dimitris Metaxas, and Chao
Chen. Error-bounded correction of noisy labels. In ICML, 2020."
REFERENCES,0.7137931034482758,Under review as a conference paper at ICLR 2022
REFERENCES,0.7172413793103448,"A
PROOFS AND ADDITIONAL THEORETICAL RESULTS"
REFERENCES,0.7206896551724138,"First, we present a proposition used in the proof of Theorem 1."
REFERENCES,0.7241379310344828,"Proposition 7. Let U and V be two random variables, and let U and V denote their expectation,
then:"
REFERENCES,0.7275862068965517,"E
 
U −U

V

= E
 
U −U
  
V −V

(7)"
REFERENCES,0.7310344827586207,"Proof. To prove we write V as
 
V −V

+ V and then use the linear property of the expectation
operator:"
REFERENCES,0.7344827586206897,"E
 
U −U

V

= E
 
U −U
   
V −V

+ V
"
REFERENCES,0.7379310344827587,"= E
 
U −U
  
V −V

+ E
 
U −U
 V
"
REFERENCES,0.7413793103448276,"= E
 
U −U
  
V −V

+ V
 
E [U] −U
"
REFERENCES,0.7448275862068966,"= E
 
U −U
  
V −V
"
REFERENCES,0.7482758620689656,Next we present two propositions used in the proofs of the main theorems of this paper.
REFERENCES,0.7517241379310344,"Proposition 8. Let ℓ: Rn →[0, ∞) and p : R →R two convex functions, then the composition
w(x) = p(ℓ(x) −M) where M ≥0 is convex if p is non decreasing."
REFERENCES,0.7551724137931034,"Proof. Using the convexity of ℓfor any x, y ∈Rn and α ∈[0, 1] we have:"
REFERENCES,0.7586206896551724,"ℓ(αx + (1 −α)y) ≤αℓ(x) + (1 −α)ℓ(y)
(8)"
REFERENCES,0.7620689655172413,Using the fact that p is non decreasing along we the above inequality we obtain:
REFERENCES,0.7655172413793103,"p(ℓ(αx + (1 −α)y)) ≤p(αℓ(x) + (1 −α)ℓ(y))
(9)"
REFERENCES,0.7689655172413793,and using convexity of p for the term on the right we get:
REFERENCES,0.7724137931034483,"p(αℓ(x) + (1 −α)ℓ(y)) ≤αp(ℓ(x)) + (1 −α)p(ℓ(y))
(10)"
REFERENCES,0.7758620689655172,"Combining the two inequalities leads to the following result (ℓ(αx + (1 −α)y)) ≤αp(ℓ(x)) +
(1 −α)p(ℓ(y)) which proves the composition p(ℓ(x)) is convex. Moreover, since p is convex and
ℓ(x) −M is in the domain of p then p(ℓ(x) −M) is also convex as it is a composition with an afﬁne
mapping. This proves that w(x) is convex."
REFERENCES,0.7793103448275862,"Proposition 9. Let f, g : Rn →[0, ∞) be two convex function taking non-negative values then their
product h(x) = f(x)g(x) is convex if [f(x) −f(y)][g(x) −g(y)] ≥0, ∀x, y ∈Rn."
REFERENCES,0.7827586206896552,"Proof. The function h is convex if it satisﬁes the following inequality where α ∈[0, 1]:"
REFERENCES,0.7862068965517242,"0 ≤αh(x) + (1 −α)h(y) −h(αx + (1 −α)y)
(11)
0 ≤α(fg)(x) + (1 −α)(fg)(y) −(fg)(αx + (1 −α)y)
(12)"
REFERENCES,0.7896551724137931,Note that since the two functions are convex the following inequalities hold:
REFERENCES,0.7931034482758621,"f(αx + (1 −α)y) ≤αf(x) + (1 −α)f(y)
(13)
g(αx + (1 −α)y) ≤αg(x) + (1 −α)g(y)
(14)"
REFERENCES,0.7965517241379311,Under review as a conference paper at ICLR 2022
REFERENCES,0.8,Given that the two functions take non-negative values we can multiply the above two inequalities.
REFERENCES,0.803448275862069,"f(αx + (1 −α)y)g(αx + (1 −α)y) ≤[αf(x) + (1 −α)f(y)] [g(x) + (1 −α)g(y)]
(15)
(fg)(αx + (1 −α)y) ≤[αf(x) + (1 −α)f(y)] [g(x) + (1 −α)g(y)]
(16)"
REFERENCES,0.8068965517241379,Substituting (fg)(αx + (1 −α)y) from 16 in inequality 11 we obtain:
REFERENCES,0.8103448275862069,"0 ≤α(fg)(x) + (1 −α)(fg)(y) −[αf(x) + (1 −α)f(y)] [g(x) + (1 −α)g(y)]
(17)"
REFERENCES,0.8137931034482758,Multiplying the two square brackets and then grouping the terms we get:
REFERENCES,0.8172413793103448,"0 ≤α(1 −α) [f(x) −f(y)] [g(x) −g(y)]
(18)"
REFERENCES,0.8206896551724138,"We complete the proof by noting that α ≥0 and thus the product of two convex functions is convex
if [f(x) −f(y)] [g(x) −g(y)] ≥0."
REFERENCES,0.8241379310344827,"Lemma 2. As introduced in Theorem 1, the variance expansion of a convex loss function ℓ(v, y) in v
yields a new objective that is also convex in v if λ ∈[0, λmax], where λmax = 1/(E[ℓ] −min ℓ)."
REFERENCES,0.8275862068965517,"Proof. Since y are constants and take ﬁnite values we can index both, loss and weight functions,
using y as ℓy(v) = ℓ(v, y) and wy(v) = w(v, y). We note that wy(v) = p(ℓy(v) −E[ℓ]) where p is a
polynomial of degree 1 with p(t) = λt+1. First we use the result of Proposition 8 and get that wy(v)
is convex if λ is non negative thus the lower bound of the interval. Next, we use Proposition 9 which
states that wy(v)ℓy(v) is convex if [wy(v) −wy(u)] [ℓy(v) −ℓy(u)] ≥0 and wy(v) is non negative.
Since p is a linear function we can use the equality p(a) −p(b) = λ(a −b), with a = ℓy(v) −E[ℓ]
and b = ℓy(u) −E[ℓ] and replace wy in the previous inequality to obtain λ[ℓ(x) −ℓ(y)]2 ≥0 which
is always true for λ > 0. However, wy(v) is non negative only for λ ≤1/(min ℓ−E[ℓ]) which
proves the upper bound of the interval."
REFERENCES,0.8310344827586207,"Theorem 3 (Moments Expansion). Let ℓbe a loss function with ﬁnite ﬁrst m central moments and
deﬁne w(v, y) = Pm
i=1 λi(ℓ(v, y) −E[ℓ(v, y)])i−1, then we have:"
REFERENCES,0.8344827586206897,"E[wℓ] = λ1E[ℓ] + m
X"
REFERENCES,0.8379310344827586,"i=2
˜λiE

(ℓ−E[ℓ])i
(4)"
REFERENCES,0.8413793103448276,where ˜λi = λi + λi+1E[ℓ] for i < m and ˜λm = λm
REFERENCES,0.8448275862068966,"Proof. In this case, for i ≥2 we cannot apply Lemma 7 since the expression (ℓ−E[ℓ])i is not
guaranteed to have zero mean and as a result it incurs an additional penalization of the previous
moment. The proof follows the same steps as Theorem 1:"
REFERENCES,0.8482758620689655,"E[Wℓ] = E "" m
X"
REFERENCES,0.8517241379310345,"i=1
λi(ℓ−E[ℓ])i−1ℓ # = m
X"
REFERENCES,0.8551724137931035,"i=1
λiE

(ℓ−E[ℓ])i−1ℓ
"
REFERENCES,0.8586206896551725,"= λ1E[ℓ] + m
X"
REFERENCES,0.8620689655172413,"i=2
λiE

(ℓ−E[ℓ])i−1ℓ
"
REFERENCES,0.8655172413793103,"= λ1E[ℓ] + m
X"
REFERENCES,0.8689655172413793,"i=2
λiE

(ℓ−E[ℓ])i−1(ℓ−E[ℓ] + E[ℓ])
"
REFERENCES,0.8724137931034482,"= λ1E[ℓ] + m
X"
REFERENCES,0.8758620689655172,"i=2
λiE

(ℓ−E[ℓ])i
+ m
X"
REFERENCES,0.8793103448275862,"i=2
λiE[ℓ]E

(ℓ−E[ℓ])i−1"
REFERENCES,0.8827586206896552,"= λ1E[ℓ] + m−1
X"
REFERENCES,0.8862068965517241,"i=1
˜λiE

(ℓ−E[ℓ])i
+ λmE [(ℓ−E[ℓ])m]"
REFERENCES,0.8896551724137931,Under review as a conference paper at ICLR 2022
REFERENCES,0.8931034482758621,"For the last step, we combine the two sums by matching the E

(ℓ−E[ℓ])i
terms and consolidate
the penalization factors as ˜λi = λi + λi+1E[ℓ]."
REFERENCES,0.896551724137931,"Lemma 4 (Convexity of Moments Expansion). Let ℓ(v, y) be a loss function convex in v and
p : R →[0, ∞) be a non negative and differentiable convex function and M ≥0, then the weighted
objective w(v, y)ℓ(v, y) with w(v, y) = p(ℓ(v, y) −M) is convex in v if p is non decreasing."
REFERENCES,0.9,"Proof. Since y are constants and take ﬁnite values we can index both, loss and weight functions,
using y such as ℓy(v) = ℓ(v, y) and wy(v) = w(v, y). With wy(v) = p(ℓy(v) −M) and using
the result of Proposition 8 we obtain that wy(v) is convex as p is non decreasing. Next, from
Proposition 9 and since p takes non negative values we get that the product wy(v)ℓy(v) is convex
if [wy(v) −wy(u)] [ℓy(v) −ℓy(u)] ≥0. Since p is convex and differentiable we use the ﬁrst order
condition p(a) −p(b) ≥p′(b)(a −b) with a = ℓy(v) −M and b = ℓy(u) −M to obtain:"
REFERENCES,0.903448275862069,"p(ℓy(v) −M) −p(ℓy(u) −M) ≥p′(ℓy(u) −M)[ℓy(v) −M −ℓy(u) + M]
(19)"
REFERENCES,0.906896551724138,"wy(v) −wy(u) ≥p′(ℓy(u) −M)[ℓy(v) −ℓy(u)]
(20)"
REFERENCES,0.9103448275862069,Substituting this result in the requirement from Proposition 9 we obtain:
REFERENCES,0.9137931034482759,"p′(ℓy(v) −M)[ℓy(v) −ℓy(u)]2 ≥0
(21)"
REFERENCES,0.9172413793103448,"Given that p is non decreasing implies p′(ℓ(y) −M) ≥0 and proves that the inequality always
holds."
REFERENCES,0.9206896551724137,"B
EXPERIMENTAL DETAILS"
REFERENCES,0.9241379310344827,"After we corrupt the training datasets (CIFAR-10, CIFAR-100, Fashion-MNIST) with noise we retain
10% as a secondary validation dataset. This allows us to detect when the model is overﬁtting on
noise by comparing the performance on clean versus noisy validation data. For the class independent
noise, we ﬂip the label to any other class with equal probability such that the ratio of noisy labels is η.
For class dependent noise, for CIFAR-10 and Fashion-MNIST we only ﬂip the label in the source
classes {9, 2, 3, 5, 4} to the corresponding target class {1, 0, 5, 3, 7} given the noise ratio η. And
for CIFAR-100 we ﬂip between two randomly selected subclasses withing each superclass. We use
the same modes as in Wang et al. (2019b) when training on CIFAR-10 which is an 8 layer network
composed of 6 convolutional layers followed by 2 fully connected layers. For Fashion-MNIST the
model contains 4 convolutional layers followed by 3 fully connected layers. For CIFAR-100 the
model we use is ResNet-34 (He et al., 2016). We train using SGD with 0.9 momentum, 0.005 weight
decay for the convolutional layers and 0.01 for the fully connected layers, and a starting learning rate
of 0.01 which we divide by 10 every 20 epochs for a total of 60 training epochs for CIFAR datasets
and every 5 epochs for a total of 15 training epochs for Fashion-MNIST. The training batch size is
128 samples."
REFERENCES,0.9275862068965517,"We compare our solution for robustiﬁcation of the loss function through moments penalization against
ﬁve other state of the art methods: i) Tilted empirical risk minimization (TERM) introduced by Li
et al. (2021), ii) Taylor expansion of cross entropy (Taylor) proposed by Feng et al. (2020), iii)
Normalized cross entropy coupled with reverse cross entropy (Normalized) investigated by Ma et al.
(2020), iv) Symmetric cross entropy (Symmetric) studied by Wang et al. (2019b), and v) Generalized
cross entropy (Generalized) explored by Zhang & Sabuncu (2018)."
REFERENCES,0.9310344827586207,"Zhang & Sabuncu (2018) proposed a generalized cross-entropy loss parameterized by q that recovers
CE loss for q →0 and MAE for q = 1. For intermediate values of q, the loss is bounded and trades
robustness for convergence. Feng et al. (2020) found that the ﬁrst two terms of the Taylor series
expansion for the CE loss are the MAE and MSE, respectively. And suggested adjusting the number
of terms in the Taylor expansion for the CE to balance noise robustness and convergence. Wang
et al. (2019b) proposed using a two term loss, complimenting the CE loss with a secondary reverse
cross-entropy term that satisﬁes the symmetry constraint. The research by Ma et al. (2020) extended
the concept of two term loss combining a robust “active” loss and a robust “passive” loss."
REFERENCES,0.9344827586206896,Under review as a conference paper at ICLR 2022
REFERENCES,0.9379310344827586,"For these methods, when possible we used the same parameters suggested by their authors, however,
when the method underperfomed we used cross-validation to ﬁnd better ones. When training on
CIFAR-10 and Fashion-MNIST datasets we used: λ1 = 1, λ2 = −0.5 for Moments and its convex
version, t = −0.5 for TERM, t = 2 for Taylor, α = 10, β = 1 for Normalized, α = 0.1, β = 1
for Symmetric, and q = 0.7 for Generalized. When training on CIFAR-100 the parameters where:
λ1 = 1, λ2 = −0.5 for Moments and its convex version, t = −0.5 for TERM, t = 6 for Taylor,
α = 10, β = 0.1 for Normalized, α = 6.0, β = 0.1 for Symmetric, and q = 0.7 for Generalized."
REFERENCES,0.9413793103448276,"C
ADDITIONAL EXPERIMENTAL RESULTS"
REFERENCES,0.9448275862068966,"Table 2 shows the results when penalizing the third (skewness) and fourth (kurtosis) central moments.
The resulting polynomial and the corresponding weighted cross-entropy loss are illustrated in Figure 4.
When penalizing the third central moment samples with loss values close to the mean receive most
weight and the one deviating most from the mean receive the least weight. Experimental results on
CIFAR-10 dataset show that when increasing the magnitude of λ3 the accuracy for class independent
noise rates η = 0.2 and η = 0.4 improves by around 1%. Moreover, in both cases the resulting
accuracy is higher than that of the classical CE. Similarly, for class dependent noise, the accuracy
increased by around 1% when penalizing with λ3 = −0.5 for noise rates η = 0.2 and η = 0.3.
Likewise, when increasing the magnitude of λ4 the accuracy for class independent noise rates η = 0.2
and η = 0.4 improves by up to 3.5%. However, for class dependent noise the results are similar."
REFERENCES,0.9482758620689655,"Table 2: Mean accuracy (%) and standard deviation on clean data over 5 runs. The best result for
each scenario is underlined."
REFERENCES,0.9517241379310345,"Loss
Noise rate η
Class independent
Class dependent"
REFERENCES,0.9551724137931035,"0.2
0.4
0.6
0.8
0.1
0.2
0.3
0.4"
REFERENCES,0.9586206896551724,CIFAR-10
REFERENCES,0.9620689655172414,"Classical
84.1 0.2
77.1 0.4
66.3 0.4
36.0 1.5
88.9 0.2
87.2 0.2
84.8 0.4
80.9 0.7"
REFERENCES,0.9655172413793104,"λ1 = 1, λ3 = −0.1
87.7 0.1
78.8 0.3
67.4 1.0
35.7 2.1
89.6 0.3
87.3 0.2
84.6 0.1
80.6 0.4
λ1 = 1, λ3 = −0.5
88.4 0.1
80.3 0.2
67.4 0.3
35.4 2.1
89.3 0.2
88.3 0.4
85.9 0.4
76.9 3.0"
REFERENCES,0.9689655172413794,"λ1 = 1, λ4 = −0.05
88.4 0.1
78.5 0.2
67.6 0.8
35.6 2.1
89.7 0.1
87.3 0.2
84.9 0.4
80.9 0.5
λ1 = 1, λ4 = −0.1
88.7 0.2
82.0 0.3
66.8 0.7
35.2 2.2
89.6 0.4
88.0 0.1
84.3 0.4
80.0 0.6"
REFERENCES,0.9724137931034482,Under review as a conference paper at ICLR 2022
REFERENCES,0.9758620689655172,"−3
0
3 0"
REFERENCES,0.9793103448275862,"3
λ4 = −0.1 λ1 = 1
λ3 = −0.5 λ1 = 1 0
1 0 3"
REFERENCES,0.9827586206896551,E[ℓce] = 2.0
REFERENCES,0.9862068965517241,"−3
0
3 0"
REFERENCES,0.9896551724137931,"3
λ4 = −0.05 λ1 = 1
λ4 = −0.1 λ1 = 1 0
1 0 3"
REFERENCES,0.993103448275862,E[ℓce] = 2.0
REFERENCES,0.996551724137931,"Figure 4: Polynomial functions for moments penalization and the corresponding weighted cross-
entropy loss. Left column shows the polynomial functions used for penalizing the third central
moment, top, and forth central moment, bottom. Right column shows the weighted cross-entropy
function for E[ℓ] = 2. Dotted line shows the classical cross entropy for reference."
