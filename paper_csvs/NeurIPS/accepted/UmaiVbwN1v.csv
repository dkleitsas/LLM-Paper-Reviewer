Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,Abstract
ABSTRACT,0.0031545741324921135,"Despite the remarkable success of pre-trained language models (PLMs), they still
face two challenges: First, large-scale PLMs are inefficient in terms of memory
footprint and computation. Second, on the downstream tasks, PLMs tend to rely
on the dataset bias and struggle to generalize to out-of-distribution (OOD) data.
In response to the efficiency problem, recent studies show that dense PLMs can
be replaced with sparse subnetworks without hurting the performance. Such
subnetworks can be found in three scenarios: 1) the fine-tuned PLMs, 2) the
raw PLMs and then fine-tuned in isolation, and even inside 3) PLMs without
any parameter fine-tuning. However, these results are only obtained in the in-
distribution (ID) setting. In this paper, we extend the study on PLMs subnetworks
to the OOD setting, investigating whether sparsity and robustness to dataset bias
can be achieved simultaneously. To this end, we conduct extensive experiments
with the pre-trained BERT model on three natural language understanding (NLU)
tasks. Our results demonstrate that sparse and robust subnetworks (SRNets) can
consistently be found in BERT, across the aforementioned three scenarios, using
different training and compression methods. Furthermore, we explore the upper
bound of SRNets using the OOD information and show that there exist sparse and
almost unbiased BERT subnetworks. Finally, we present 1) an analytical study
that provides insights on how to promote the efficiency of SRNets searching process
and 2) a solution to improve subnetworks’ performance at high sparsity. The code
is available at https://github.com/llyx97/sparse-and-robust-PLM."
INTRODUCTION,0.006309148264984227,"1
Introduction"
INTRODUCTION,0.00946372239747634,"Pre-trained language models (PLMs) have enjoyed impressive success in natural language processing
(NLP) tasks. However, they still face two major problems. On the one hand, the prohibitive model
size of PLMs leads to poor efficiency in terms of memory footprint and computational cost [11, 37].
On the other hand, despite being pre-trained on large-scale corpus, PLMs still tend to rely on dataset
bias [16, 30, 50, 35], i.e., the spurious features of input examples that strongly correlate with the"
INTRODUCTION,0.012618296529968454,"∗Work was done when Yuanxin Liu was a graduate student of IIE, CAS.
†Corresponding author: Zheng Lin.
Joint work with Pattern Recognition Center, WeChat AI, Tencent Inc, China. PLM"
INTRODUCTION,0.015772870662460567,Fine-tuned PLM
INTRODUCTION,0.01892744479495268,SubNet PLM
INTRODUCTION,0.022082018927444796,SubNet
INTRODUCTION,0.025236593059936908,Fine-tuned
INTRODUCTION,0.028391167192429023,SubNet PLM
INTRODUCTION,0.031545741324921134,SubNet
INTRODUCTION,0.03470031545741325,"(a)
(b)
(c)"
INTRODUCTION,0.03785488958990536,fine-tuning
INTRODUCTION,0.04100946372239748,pruning
INTRODUCTION,0.04416403785488959,pruning
INTRODUCTION,0.0473186119873817,fine-tuning
INTRODUCTION,0.050473186119873815,pruning
INTRODUCTION,0.05362776025236593,"Figure 1: Three kinds of PLM subnetworks obtained from different pruning and fine-tuning paradigms.
(a) Pruning a fine-tuned PLM. (b) Pruning the PLM and then fine-tuning the subnetwork. (c) Pruning
the PLM without fine-tuning model parameters. The obtained subnetworks are used for testing."
INTRODUCTION,0.056782334384858045,"label, during downstream fine-tuning. These two problems pose great challenge to the real-world
deployment of PLMs, and they have triggered two separate lines of works."
INTRODUCTION,0.05993690851735016,"In terms of the efficiency problem, some recent studies resort to sparse subnetworks as alternatives to
the dense PLMs. [23, 31, 25] compress the fine-tuned PLMs in a post-hoc fashion. [3, 32, 27, 24]
extend the Lottery Ticket Hypothesis (LTH) [8] to search PLMs subnetworks that can be fine-tuned
in isolation. Taking one step further, [51] propose to learn task-specific subnetwork structures via
mask training [19, 28], without fine-tuning any pre-trained parameter. Fig. 1 illustrates these three
paradigms. Encouragingly, the empirical evidences suggest that PLMs can indeed be replaced with
sparse subnetworks without compromising the in-distribution (ID) performance."
INTRODUCTION,0.06309148264984227,"To address the dataset bias problem, numerous debiasing methods have been proposed. A prevailing
category of debiasing methods [4, 41, 21, 18, 35, 12, 42] adjust the importance of training examples,
in terms of training loss, according to their bias degree, so as to reduce the impact of biased examples
(examples that can be correctly classified based on the spurious features). As a result, the model is
forced to rely less on the dataset bias during training and generalizes better to OOD situations."
INTRODUCTION,0.06624605678233439,"Although progress has been made in both directions, most existing work tackle the two problems
independently. To facilitate real-world application of PLMs, the problems of robustness and efficiency
should be addressed simultaneously. Motivated by this, we extend the study on PLM subnetwork
to the OOD scenario, investigating whether there exist PLM subnetworks that are both sparse
and robust against dataset bias? To answer this question, we conduct large-scale experiments
with the pre-trained BERT model [5] on three natural language understanding (NLU) tasks that
are widely-studied in the question of dataset bias. We consider a variety of setups including the
three pruning and fine-tuning paradigms, standard and debiasing training objectives, different model
pruning methods, and different variants of PLMs from the BERT family. Our results show that BERT
does contain sparse and robust subnetworks (SRNets) within certain sparsity constraint (e.g., less
than 70%), giving affirmative answer to the above question. Compared with a standard fine-tuned
BERT, SRNets exhibit comparable ID performance and remarkable OOD improvement. When it
comes to BERT model fine-tuned with debiasing method, SRNets can preserve the full model’s ID
and OOD performance with much fewer parameters. On this basis, we further explore the upper
bound of SRNets by making use of the OOD information, which reveals that there exist sparse and
almost unbiased subnetworks, even in a standard fine-tuned BERT that is biased."
INTRODUCTION,0.0694006309148265,"Regardless of the intriguing properties of SRNets, we find that the subnetwork searching process
still have room for improvement, based on some observations from the above experiments. First,
we study the timing to start searching SRNets during full BERT fine-tuning, and find that the entire
training and searching cost can be reduced from this perspective. Second, we refine the mask training
method with gradual sparsity increase, which is quite effective in identifying SRNets at high sparsity."
INTRODUCTION,0.07255520504731862,Our main contributions are summarized as follows:
INTRODUCTION,0.07570977917981073,"• We extend the study on PLMs subnetworks to the OOD scenario. To our knowledge, this
paper presents the first systematic study on sparsity and dataset bias robustness for PLMs.
• We conduct extensive experiments to demonstrate the existence of sparse and robust BERT
subnetworks, across different pruning and fine-tuning setups. By using the OOD information,
we further reveal that there exist sparse and almost unbiased BERT subenetworks.
• We present analytical studies and solutions that can help further refine the SRNets searching
process in terms of efficiency and the performance of subnetworks at high sparsity."
RELATED WORK,0.07886435331230283,"2
Related Work"
BERT COMPRESSION,0.08201892744479496,"2.1
BERT Compression"
BERT COMPRESSION,0.08517350157728706,"Studies on BERT compression can be divided into two classes. The first one focuses on the design of
model compression techniques, which include pruning [13, 31, 10], knowledge distillation [34, 38, 20,
26], parameter sharing [22], quantization [47, 49], and combining multiple techniques [39, 29, 25].
The second one, which is based on the lottery ticket hypothesis [8], investigates the compressibility
of BERT on different phases of the pre-training and fine-tuning paradigm. It has been shown that
BERT can be pruned to a sparse subnetwork after [10] and before fine-tuning [3, 32, 24, 27, 13],
without hurting the accuracy. Moreover, [51] show that directly learning subnetwork structures on the
pre-trained weights can match fine-tuning the full BERT. In this paper, we follow the second branch
of works, and extend the evaluation of BERT subnetworks to the OOD scenario."
DATASET BIAS IN NLP TASKS,0.08832807570977919,"2.2
Dataset Bias in NLP Tasks"
DATASET BIAS IN NLP TASKS,0.0914826498422713,"To facilitate the development of NLP systems that truly learn the intended task solution, instead of
relying on dataset bias, many efforts have been made recently. On the one hand, challenging OOD
test sets are constructed [16, 30, 50, 35, 1] by eliminating the spurious correlations in the training
sets, in order to establish more strict evaluation. On the other hand, numerous debiasing methods
[4, 41, 21, 18, 35, 12, 42] are proposed to discourage the model from learning dataset bias during
training. However, few attention has been paid to the influence of pruning on the OOD generalization
ability of PLMs. This work presents a systematic study on this question."
MODEL COMPRESSION AND ROBUSTNESS,0.0946372239747634,"2.3
Model Compression and Robustness"
MODEL COMPRESSION AND ROBUSTNESS,0.09779179810725552,"Some pioneer attempts have also been made to obtain models that are both compact and robust to
adversarial attacks [14, 46, 36, 9, 45] and spurious correlations [48, 7]. Specially, [45, 7] study the
compression and robustness question on PLM. Different from [45], which is based on adversarial
robustness, we focus on the spurious correlations, which is more common than the worst-case
adversarial attack. Compared with [7], which focus on post-hoc pruning of the standard fine-
tuned BERT, we thoroughly investigate different fine-tuning methods (standard and debiasing) and
subnetworks obtained from the three pruning and fine-tuning paradigms. A more detailed discussion
of the relation and difference between our work and previous studies on model compression and
robustness is provided in Appendix D."
PRELIMINARIES,0.10094637223974763,"3
Preliminaries"
BERT ARCHITECTURE AND SUBNETWORKS,0.10410094637223975,"3.1
BERT Architecture and Subnetworks"
BERT ARCHITECTURE AND SUBNETWORKS,0.10725552050473186,"BERT is composed of an embedding layer, a stack of Transformer layers [43] and a task-specific
classifier. Each Transformer layer has a multi-head self-attention (MHAtt) module and a feed-forward
network (FFN). MHAtt has four kinds of weight matrices, i.e., the query, key and value matrices
WQ,K,V ∈Rdmodel×dmodel, and the output matrix WAO ∈Rdmodel×dmodel. FFN consits of two linear
layers Win ∈Rdmodel×dFFN, Wout ∈RdFFN×dmodel, where dFFN is the hidden dimension of FFN."
BERT ARCHITECTURE AND SUBNETWORKS,0.11041009463722397,"To obtain the subnetwork of a model f(θ) parameterized by θ, we apply a binary pruning mask
m ∈{0, 1}|θ| to its weight matrices, which produces f(m ⊙θ), where ⊙is the Hadamard product."
BERT ARCHITECTURE AND SUBNETWORKS,0.11356466876971609,"For BERT, we focus on the L Transformer layers and the classifier. The parameters to be pruned are
θpr = {Wcls} ∪

Wl
Q, Wl
K, Wl
V , Wl
AO, Wl
in, Wl
out
	L"
BERT ARCHITECTURE AND SUBNETWORKS,0.1167192429022082,"l=1, where Wcls is the classifier weights."
PRUNING METHODS,0.11987381703470032,"3.2
Pruning Methods"
MAGNITUDE-BASED PRUNING,0.12302839116719243,"3.2.1
Magnitude-based Pruning"
MAGNITUDE-BASED PRUNING,0.12618296529968454,"Magnitude-based pruning [17, 8] zeros-out parameters with low absolute values. It is usually realized
in an iterative manner, namely, iterative magnitude pruning (IMP). IMP alternates between pruning
and training and gradually increases the sparsity of subnetworks. Specifically, a typical IMP algorithm
consists of four steps: (i) Training the full model to convergence. (ii) Pruning a fraction of parameters
with the smallest magnitude. (iii) Re-training the pruned subnetwork. (iv) Repeat (ii)-(iii) until
reaching the target sparsity. To obtain subnetworks from the pre-trained BERT, i.e., (b) and (c) in
Fig. 1, the subnetwork parameters are rewound to the pre-trained values after (iii), and (i) can be
abandoned. More details about our IMP implementations can be found in Appendix A.1.1."
MASK TRAINING,0.12933753943217666,"3.2.2
Mask Training"
MASK TRAINING,0.13249211356466878,"Mask training treats the pruning mask m as trainable parameters. Following [28, 51, 33, 27], we
achieve this through binarization in forward pass and gradient estimation in backward pass."
MASK TRAINING,0.13564668769716087,"Each weight matrix W ∈Rd1×d2, which is frozen during mask training, is associated with a bianry
mask m ∈{0, 1}d1×d2, and a real-valued mask ˆm ∈Rd1×d2. In the forward pass, W is replaced
with m ⊙W, where m is derived from ˆm through binarization:"
MASK TRAINING,0.138801261829653,"mi,j =
1
if ˆmi,j ≥ϕ
0
otherwise
(1)"
MASK TRAINING,0.14195583596214512,"where ϕ is the threshold. In the backward pass, since the binarization operation is not differentiable,
we use the straight-through estimator [2] to compute the gradients for ˆm using the gradients of m,
i.e., ∂L"
MASK TRAINING,0.14511041009463724,"∂m, where L is the loss. Then, ˆm is updated as ˆm ←ˆm −η ∂L"
MASK TRAINING,0.14826498422712933,"∂m, where η is the learning rate."
MASK TRAINING,0.15141955835962145,"Following [33, 27], we initialize the real-valued masks according to the magnitude of the original
weights. The complete mask training algorithm is summarized in Appendix A.1.2."
DEBIASING METHODS,0.15457413249211358,"3.3
Debiasing Methods"
DEBIASING METHODS,0.15772870662460567,"As described in the Introduction, the debiasing methods measure the bias degree of training examples.
This is achieved by training a bias model. The inputs to the bias model are hand-crafted spurious
features based on our prior knowledge of the dataset bias (Section 4.1.3 describes the details). In this
way, the bias model mainly relies on the spurious features to make predictions, which can then serve as
a measurement of the bias degree. Specifically, given the bias model prediction pb = (p1
b, · · · , pK
b )
over the K classes, the bias degree β = pc
b, i.e., the the probability of the ground-truth class c."
DEBIASING METHODS,0.1608832807570978,"Then, β can be used to adjust the training loss in several ways, including product-of-experts (PoE)
[4, 18, 21], example reweighting [35, 12] and confidence regularization [41]. Here we describe the
standard cross-entropy and PoE, and the other two methods are introduced in Appendix A.2."
DEBIASING METHODS,0.1640378548895899,"Standard Cross-Entropy computes the cross-entropy between the predicted distribution pm and the
ground-truth one-hot distribution y as Lstd = −y · log pm."
DEBIASING METHODS,0.167192429022082,"Product-of-Experts combines the predictions of main model and bias model, i.e., pb and pm, and
then computes the training loss as Lpoe = −y · log softmax (log pm + log pb)."
NOTATIONS,0.17034700315457413,"3.4
Notations"
NOTATIONS,0.17350157728706625,"Here we define some notations, which will be used in the following sections."
NOTATIONS,0.17665615141955837,"• At
L(f(θ)): Training f(θ) with loss L for t steps, where t can be omitted for simplicity."
NOTATIONS,0.17981072555205047,"• Pp
L(f(θ)): Pruning f(θ) using pruning method p and training loss L."
NOTATIONS,0.1829652996845426,"• M(f(mθ)): Extracting the pruning mask of f(mθ), i.e., M(f(mθ)) = m."
NOTATIONS,0.1861198738170347,"• L ∈{Lstd, Lpoe, Lreweight, Lconfreg} and p ∈{imp, imp-rw, mask}, where “imp” and “imp-
rw”denote the standard IMP and IMP with weight rewinding, as described in Section 3.2.1.
“mask” stands for mask training.
• Ed(f(θ)): Evaluating f(θ) on the test data with distribution d ∈{ID, OOD}."
SPARSE AND ROBUST BERT SUBNETWORKS,0.1892744479495268,"4
Sparse and Robust BERT Subnetworks"
EXPERIMENTAL SETUPS,0.19242902208201892,"4.1
Experimental Setups"
DATASETS AND EVALUATION,0.19558359621451105,"4.1.1
Datasets and Evaluation"
DATASETS AND EVALUATION,0.19873817034700317,"Natural Language Inference
We use MNLI [44] as the ID dataset for NLI. MNLI is comprised of
premise-hypothesis pairs, whose relationship may be entailment, contradiction, or neutral. In MNLI
the word overlap between premise and hypothesis is strongly correlated with the entailment class. To
solve this problem, the OOD HANS dataset [30] is built so that such correlation does not hold."
DATASETS AND EVALUATION,0.20189274447949526,"Paraphrase Identification
The ID dataset for paraphrase identification is QQP 3, which contains
question pairs that are labelled as either duplicate or non-duplicate. In QQP, high lexical overlap is
also strongly associated with the duplicate class. The OOD datasets PAWS-qqp and PAWS-wiki [50]
are built from sentences in Quora and Wikipedia respectively. In PAWS sentence pairs with high
word overlap have a balanced distribution over duplicate and non-duplicate."
DATASETS AND EVALUATION,0.20504731861198738,"Fact Verification
FEVER 4 [40] is adopted as the ID dataset of fact verification, where the task is
to assess whether a given evidence supports or refutes the claim, or whether there is not-enough-info
to reach a conclusion. The OOD dataset Fever-Symmetric (v1 and v2) [35] is proposed to evaluate
the influence of the claim-only bias (the label can be predicted correctly without the evidence)."
DATASETS AND EVALUATION,0.2082018927444795,"For NLI and fact verification, we use Accuracy as the evaluation metric. For paraphrase identification,
we evaluate using the F1 score. More details of datasets and evaluation are shown in Appendix B.1."
PLM BACKBONE,0.2113564668769716,"4.1.2
PLM Backbone"
PLM BACKBONE,0.21451104100946372,"We mainly experiment with the BERT-base-uncased model [5]. It has roughly 110M parameters in
total, and 84M parameters in the Transformer layers. As described in Section 3.1, we derive the
subnetworks from the Transformer layers and report sparsity levels relative to the 84M parameters.
To generalize our conclusions to other PLMs, we also consider two variants of the BERT family,
namely RoBERTa-base and BERT-large, the results of which can be found in Appendix C.5."
TRAINING DETAILS,0.21766561514195584,"4.1.3
Training Details"
TRAINING DETAILS,0.22082018927444794,"Following [4], we use a simple linear classifier as the bias model. For HANS and PAWS, the spurious
features are based on the the word overlapping information between the two input text sequences.
For Fever-Symmetric, the spurious features are max-pooled word embeddings of the claim sentence.
More details about the bias model and the spurious features are presented in Appendix B.3.1."
TRAINING DETAILS,0.22397476340694006,"Mask training and IMP basically use the same hyper-parameters (adopting from [42]) as full BERT.
An exception is longer training, because we find that good subnetworks at high sparsity levels require
more training to be found. Unless otherwise specified, we select the best checkpoints based on the ID
dev performance, without using OOD information. All the reported results are averaged over 4 runs.
We defer training details about each dataset, and each training and pruning setup, to Appendix B.3."
SUBNETWORKS FROM FINE-TUNED BERT,0.22712933753943218,"4.2
Subnetworks from Fine-tuned BERT"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.2302839116719243,"4.2.1
Problem Formulation and Experimental Setups"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.2334384858044164,"Given the fine-tuned full BERT f(θft) = AL1(f(θpt)), where θpt and θft are the pre-trained and
fine-tuned parameters respectively, the goal is to find a subnetwork f(m ⊙θ
′
ft) = Pp
L2(f(θft)) that"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.23659305993690852,"3https://www.kaggle.com/c/quora-question-pairs
4See the licence information at https://fever.ai/download/fever/license.html"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.23974763406940064,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.72 0.74 0.76 0.78 0.80 0.82 0.84"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.24290220820189273,MNLI dev Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.24605678233438485,"mask train (std)
mask train (poe)
imp (std)
imp (poe)
full bert (std)
95% full bert (std)"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.24921135646687698,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.50 0.55 0.60 0.65 0.70"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.25236593059936907,HANS Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.2555205047318612,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.76 0.78 0.80 0.82 0.84 0.86 0.88"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.2586750788643533,QQP dev F1
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.2618296529968454,"0.0
0.2
0.4
0.6 0.85 0.86 0.87 0.88"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.26498422712933756,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.20 0.25 0.30 0.35 0.40 0.45 0.50"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.26813880126182965,PAWS-qqp F1
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.27129337539432175,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.30 0.35 0.40 0.45 0.50"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.2744479495268139,PAWS-wiki F1
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.277602523659306,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.65 0.70 0.75 0.80 0.85"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.2807570977917981,FEVER dev Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.28391167192429023,"0.0
0.2
0.4
0.6 0.84 0.86 0.88"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.2870662460567823,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.40 0.45 0.50 0.55 0.60"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.2902208201892745,Symm1 Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.29337539432176657,"0.0
0.2
0.4
0.6 0.56 0.58 0.60 0.62"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.29652996845425866,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.45 0.50 0.55 0.60 0.65"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.2996845425867508,Symm2 Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3028391167192429,"0.0
0.2
0.4
0.6
0.62 0.63 0.64 0.65 0.66"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.305993690851735,"Figure 2: Results of subnetworks pruned from the CE fine-tuned BERT. “std” means standard, and
the shadowed areas denote standard deviations, which also apply to the other figures of this paper."
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.30914826498422715,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.74 0.76 0.78 0.80 0.82 0.84"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.31230283911671924,MNLI dev Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.31545741324921134,"full bert (std) + mask train (poe)
full bert (poe) + mask train (poe)
full bert (poe) + imp (poe)
full bert (std)
full bert (poe)
95% full bert (poe)"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3186119873817035,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.525 0.550 0.575 0.600 0.625 0.650 0.675 0.700"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3217665615141956,HANS Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3249211356466877,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.76 0.78 0.80 0.82 0.84 0.86 0.88"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3280757097791798,QQP dev F1
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3312302839116719,"0.0
0.2
0.4
0.6 0.86 0.87 0.88"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.334384858044164,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.20 0.25 0.30 0.35 0.40 0.45 0.50"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.33753943217665616,PAWS-qqp F1
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.34069400630914826,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.36 0.38 0.40 0.42 0.44 0.46 0.48 0.50"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3438485804416404,PAWS-wiki F1
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3470031545741325,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.60 0.65 0.70 0.75 0.80 0.85"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3501577287066246,FEVER dev Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.35331230283911674,"0.0
0.2
0.4
0.6 0.84 0.86 0.88"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.35646687697160884,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.35 0.40 0.45 0.50 0.55 0.60"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.35962145110410093,Symm1 Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3627760252365931,"0.0
0.2
0.4
0.6 0.58 0.60 0.62"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3659305993690852,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.40 0.45 0.50 0.55 0.60 0.65"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.36908517350157727,Symm2 Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3722397476340694,"0.0
0.2
0.4
0.6 0.64 0.66 0.68"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3753943217665615,"Figure 3: Results of subnetworks pruned from the PoE fine-tuned BERT. Results of the “mask train
(poe)” subnetworks from Fig. 2 (the orange line) are also reported for reference."
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3785488958990536,satisfies a target sparsity level s and maximize the ID and OOD performance.
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.38170347003154576,"max
m,θ′
ft"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.38485804416403785,"
EID

f

m ⊙θ
′
ft

+ EOOD

f

m ⊙θ
′
ft

, s.t. ∥m∥0"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.38801261829652994,"|θpr| = (1 −s)
(2)"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3911671924290221,"where ∥∥0 is the L0 norm and |θpr| is the total number of parameters to be pruned. In practice, the
above optimization problem is achieved via Pp
L2(), which minimizes the loss L2 on the ID training
set. When the pruning method is IMP, the subnetwork parameters will be further fine-tuned and
θ
′
ft ̸= θft. For mask training, only the subnetwork structure is updated and θ
′
ft = θft."
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.3943217665615142,"We consider two kinds of fine-tuned full BERT, which utilize the standard CE loss and PoE loss
respectively (i.e., L1 ∈{Lstd, Lpoe}). IMP and mask training are used as the pruning methods (i.e.,
p ∈{imp, mask}). For the standard fine-tuned BERT, both Lstd and Lpoe are examined in the pruning
process. For the PoE fine-tuned BERT, we only use Lpoe during pruning. Note that in this work, we
mainly experiment with Lstd and Lpoe. Lreweight and Lconfreg are also examined for subnetworks from
fine-tuned BERT, the results of which can be found in Appendix C.1."
RESULTS,0.39747634069400634,"4.2.2
Results"
RESULTS,0.40063091482649843,"Subnetworks from Standard Fine-tuned BERT
The results are shown in Fig. 2 (In this paper,
we present most results in figures for clear comparisons. Actual values of the results can be found in
the code link.). We discuss them from three perspectives. For the full BERT, we can see that standard"
RESULTS,0.4037854889589905,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.76 0.78 0.80 0.82 0.84"
RESULTS,0.4069400630914827,MNLI dev Acc
RESULTS,0.41009463722397477,"imp (poe) + std ft
imp (poe) + poe ft
mask train (poe) + std ft
mask train (poe) + poe ft
full bert (std)
full bert (poe)
95% full bert (poe)"
RESULTS,0.41324921135646686,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.500 0.525 0.550 0.575 0.600 0.625 0.650 0.675 0.700"
RESULTS,0.416403785488959,HANS Acc
RESULTS,0.4195583596214511,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.74 0.76 0.78 0.80 0.82 0.84 0.86 0.88"
RESULTS,0.4227129337539432,QQP dev F1
RESULTS,0.42586750788643535,"0.0
0.2
0.4
0.6 0.86 0.87 0.88"
RESULTS,0.42902208201892744,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.20 0.25 0.30 0.35 0.40 0.45 0.50"
RESULTS,0.43217665615141954,PAWS-qqp F1
RESULTS,0.4353312302839117,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.325 0.350 0.375 0.400 0.425 0.450 0.475 0.500"
RESULTS,0.4384858044164038,PAWS-wiki F1
RESULTS,0.4416403785488959,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.70 0.75 0.80 0.85"
RESULTS,0.444794952681388,FEVER dev Acc
RESULTS,0.4479495268138801,"0.0
0.2
0.4
0.6 0.85 0.86 0.87 0.88 0.89"
RESULTS,0.45110410094637227,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.45 0.50 0.55 0.60"
RESULTS,0.45425867507886436,Symm1 Acc
RESULTS,0.45741324921135645,"0.0
0.2
0.4
0.6 0.58 0.60"
RESULTS,0.4605678233438486,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.50 0.55 0.60 0.65"
RESULTS,0.4637223974763407,Symm2 Acc
RESULTS,0.4668769716088328,"0.0
0.2
0.4
0.6 0.64 0.65 0.66 0.67 0.68"
RESULTS,0.47003154574132494,Figure 4: Results of BERT subnetworks fine-tuned in isolation. “ft” is short for fine-tuning.
RESULTS,0.47318611987381703,"CE fine-tuning, which achieves good results on the ID dev sets, performs significantly worse on the
OOD test sets. This demonstrates that the ID performance of BERT depends, to a large extent, on
memorizing the dataset bias."
RESULTS,0.47634069400630913,"In terms of the subnetworks, we can derive the following observations: (1) Using any of the four
pruning methods, we can compress a large proportion of the BERT parameters (up to 70% sparsity)
and still preserve 95% of the full model’s ID performance. (2) With standard pruning, i.e., “mask
train (std)” or “imp (std)”, we can observe small but perceivable improvement over the full BERT on
the HANS and PAWS datasets. This suggests that pruning may remove some parameters related to
the bias features. (3) The OOD performance of “mask train (poe)” and “imp (poe)” subnetworks is
even better, and the ID performance degrades slightly but is still above 95% of the full BERT. This
shows that introducing the debiasing objective in the pruning process is beneficial. Specially, as mask
training does not change the model parameters, the results of “mask train (poe)” implicates that the
biased “full bert (std)” contains sparse and robust subnetworks (SRNets) that already encode a less
biased solution to the task. (4) SRNets can be identified across a wide range of sparsity levels (from
20% ∼70%). However at higher sparsity of 90%, the performance of the subnetworks is not desirable.
(5) We also find that there is an abnormal increase of the PAWS F1 score at 70% ∼90% sparsity for
some pruning methods, when the corresponding ID performance drops sharply. This is because the
class distribution of PAWS is imbalanced (see Appendix B.1), and thus even a naive random-guessing
model can outperform the biased full model on PAWS. Therefore, the OOD improvement should
only be acceptable when there is no large ID performance decline."
RESULTS,0.4794952681388013,"Comparing IMP and mask training, the latter performs better in general, except for “mask train (poe)”
at 90% sparsity on QQP and FEVER. This suggests that directly optimizing the subnetwork structure
is a better choice than using the magnitude heuristic as the pruning metric."
RESULTS,0.48264984227129337,"Subnetworks from PoE Fine-tuned BERT
Fig. 3 presents the results. We can find that: (1) For
the full BERT, the OOD performance is obviously promoted with the PoE debiasing method, while
the ID performance is sacrificed slightly. (2) Unlike the subnetworks from the standard fine-tuned
BERT, the subnetworks of PoE fine-tuned BERT (the green and blue lines) cannot outperform the full
model. However, these subnetworks maintain comparable performance at up to 70% sparsity, on both
the ID and OOD settings, making them desirable alternatives to the full model in resource-constraint
scenarios. Moreover, this phenomenon suggests that there is a great redundancy of BERT parameters,
even when OOD generalization is taken into account. (3) With PoE-based pruning, subnetworks
from the standard fine-tuned BERT (the orange line) is comparable with subnetworks from the PoE
fine-tuned BERT (the blue line). This means we do not have to fine-tune a debiased BERT before
searching for the SRNets. (4) IMP, again, slightly underperforms mask training at moderate sparsity
levels, while it is better at 90% sparsity on the fact verification task."
BERT SUBNETWORKS FINE-TUNED IN ISOLATION,0.48580441640378547,"4.3
BERT Subnetworks Fine-tuned in Isolation"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.4889589905362776,"4.3.1
Problem Formulation and Experimental Setups"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.4921135646687697,"Given the pre-trained BERT f(θpt), a subnetwork f(m ⊙θpt) is obtained before downstream fine-
tuning. The goal is to maximize the performance of the fine-tuned subnetwork AL1(f(m ⊙θpt)):"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.4952681388012618,"max
m (EID (AL1(f(m ⊙θpt))) + EOOD (AL1(f(m ⊙θpt)))) , s.t. ∥m∥0"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.49842271293375395,"|θpr| = (1 −s)
(3)"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.501577287066246,"Following the LTH [8], we solve this problem using the train-prune-rewind pipeline. For IMP, the
procedure is described in Section 3.2.1 and m = M(Pimp-rw
L2
(f(θpt))). For mask training, the subnet-
work structure is learned from f(θft) (same as the previous section) and m = M(Pmask
L2 (f(θft)))."
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5047318611987381,"We employ CE and PoE loss for model fine-tuning (i.e., L1 ∈{Lstd, Lpoe}). Since we have shown
that using the debiasing loss in pruning is conducive, the CE loss is not considered (i.e., L2 = Lpoe)."
RESULTS,0.5078864353312302,"4.3.2
Results"
RESULTS,0.5110410094637224,"The results of subnetworks fine-tuned in isolation are presented in Fig. 4. It can be found that: (1)
For standard CE fine-tuning, the “mask train (poe)” subnetworks are superior to “full bert (std)” on
the OOD test data, i.e., the subnetworks are less susceptible to the dataset bias during training. (2) In
terms of the PoE-based fine-tuning, the “imp (poe)” and “mask train (poe)” subnetworks are generally
comparable to “full bert (poe)”. (3) For most of the subnetworks, “poe ft” clearly outperforms “std ft”
in the OOD setting, which suggests that it is important to use the debiasing method in fine-tuning,
even if the BERT subnetwork structure has already encoded some unbiased information."
RESULTS,0.5141955835962145,"Moreover, based on (1) and (2), we can extend the LTH on BERT [3, 32, 24, 27]: The pre-trained
BERT contains SRNets that can be fine-tuned in isolation, using either standard or debiasing
method, and match or even outperform the full model in both the ID and OOD evaluations."
BERT SUBNETWORKS WITHOUT FINE-TUNING,0.5173501577287066,"4.4
BERT Subnetworks Without Fine-tuning"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5205047318611987,"4.4.1
Problem Formulation and Experimental Setups"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5236593059936908,"This setup aims at finding a subnetwork f(m ⊙θpt) inside the pre-trained BERT, which can be
directly employed to a task. The problem is formulated as:"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.526813880126183,"max
m (EID (f(m ⊙θpt)) + EOOD (f(m ⊙θpt))) , s.t. ∥m∥0"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5299684542586751,"|θpr| = (1 −s)
(4)"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5331230283911672,"Following [51], we fix the pre-trained parameters θpt and optimize the mask variables m. This
process can be represented as Pmask
L
(f(θpt)), where L ∈{Lstd, Lpoe}."
RESULTS,0.5362776025236593,"4.4.2
Results"
RESULTS,0.5394321766561514,"As we can see in Fig. 5: (1) With CE-based mask training, the identified subnetworks (under 50%
sparsity) in pre-trained BERT are competitive with the CE fine-tuned full BERT. (2) Similarly, using
PoE-based mask training, the subnetworks under 50% sparsity are comparable to the PoE fine-tuned
full BERT, which demonstrates that SRNets for a particular downstream task already exist in the
pre-trained BERT. (3) “mask train (poe)” subnetworks in pre-trained BERT can even match the
subnetworks found in the fine-tuned BERT (the orange lines) in some cases (e.g., on PAWS and on
FEVER under 50% sparsity). Nonetheless, the latter exhibits a better overall performance."
SPARSE AND UNBIASED BERT SUBNETWORKS,0.5425867507886435,"4.5
Sparse and Unbiased BERT Subnetworks"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5457413249211357,"4.5.1
Problem Formulation and Experimental Setups"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5488958990536278,"To explore the upper bound of BERT subnetworks in terms of OOD generalization, we include the
OOD training data in mask training, and use the OOD test sets for evaluation. Like the previous
sections, we investigate three pruning and fine-tuning paradigms, as formulated by Eq. 2, 3 and 4
respectively. We only consider the standard CE for subnetwork and full BERT fine-tuning, which is
more vulnerable to the dataset bias. Appendix B.3.3 summarizes the detailed experimental setups."
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5520504731861199,"0.2
0.4
0.6
0.8
Sparsity 0.74 0.76 0.78 0.80 0.82 0.84"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.555205047318612,MNLI dev Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5583596214511041,"full bert (std) + mask train (poe)
mask train (poe)
mask train (std)
full bert (std)
full bert (poe)
95% full bert (poe)"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5615141955835962,"0.2
0.4
0.6
0.8
Sparsity 0.50 0.55 0.60 0.65 0.70"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5646687697160884,HANS Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5678233438485805,"0.2
0.4
0.6
0.8
Sparsity 0.74 0.76 0.78 0.80 0.82 0.84 0.86 0.88"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5709779179810726,QQP dev F1
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5741324921135647,"0.2
0.4
0.6
0.8
Sparsity 0.20 0.25 0.30 0.35 0.40 0.45 0.50 0.55"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5772870662460567,PAWS-qqp F1
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.580441640378549,"0.2
0.4
0.6
0.8
Sparsity 0.30 0.35 0.40 0.45 0.50"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.583596214511041,PAWS-wiki F1
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5867507886435331,"0.2
0.4
0.6
0.8
Sparsity 0.55 0.60 0.65 0.70 0.75 0.80 0.85"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5899053627760252,FEVER dev Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5930599369085173,"0.2
0.4
0.6 0.84 0.86 0.88"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5962145110410094,"0.2
0.4
0.6
0.8
Sparsity 0.30 0.35 0.40 0.45 0.50 0.55 0.60"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.5993690851735016,Symm1 Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6025236593059937,"0.2
0.4
0.6 0.54 0.56 0.58 0.60 0.62"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6056782334384858,"0.2
0.4
0.6
0.8
Sparsity 0.30 0.35 0.40 0.45 0.50 0.55 0.60 0.65"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6088328075709779,Symm2 Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.61198738170347,"0.2
0.4
0.6 0.62 0.64 0.66"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6151419558359621,"Figure 5: Results of BERT subnetworks without fine-tuning. Results of the “mask train (poe)”
subnetworks from Fig. 2 (the orange line) are also reported for reference."
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6182965299684543,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.65 0.70 0.75 0.80 0.85"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6214511041009464,MNLI dev Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6246056782334385,"bert-ft subnet
bert-pt subnet + ft
bert-pt subnet
full bert (std)
full bert (poe)
95% full bert (std)"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6277602523659306,"0.0
0.2
0.4
0.6
0.8
Sparsity 0.6 0.7 0.8 0.9 1.0"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6309148264984227,HANS Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6340694006309149,"Figure 6: NLI results of BERT subnetworks found
using the OOD information. Results of the other
two tasks can be found in Appendix C.2."
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.637223974763407,"0
20000
40000
60000
80000
100000
Training Steps 0.3 0.4 0.5 0.6 0.7 0.8"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6403785488958991,MNLI dev Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6435331230283912,"ft to end
ft step=0
ft step=5000
ft step=15000
ft step=20000"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6466876971608833,"0
20000
40000
60000
80000
100000
Training Steps 0.500 0.525 0.550 0.575 0.600 0.625 0.650 0.675 0.700"
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6498422712933754,HANS Acc
PROBLEM FORMULATION AND EXPERIMENTAL SETUPS,0.6529968454258676,"Figure 7: NLI mask training curves (70% sparse),
starting from BERT fine-tuned for varied steps.
Appendix C.3 shows results of the other two tasks."
RESULTS,0.6561514195583596,"4.5.2
Results"
RESULTS,0.6593059936908517,"From Fig. 6 we can observe that: (1) The subnetworks from fine-tuned BERT (“bert-ft subnet”) at
20% ∼70% sparsity achieve nearly 100% accuracy on HANS, and their ID performance is also close
to the full BERT. (2) The subnetworks in the pre-trained BERT (“bert-pt subnet”) also have very high
OOD accuracy, while they perform worse than “bert-ft subnet” in the ID setting. (3) “bert-pt subnet +
ft” subnetworks, which are fine-tuned in isolation with CE loss, exhibits the best ID performance,
and the poorest OOD performance. However, compared to the full BERT, these subnetworks still rely
much less on the dataset bias, reaching nearly 90% HANS accuracy at 50% sparsity. Jointly, these
results show that there consistently exist BERT subnetworks that are almost unbiased towards the
MNLI training set bias, under the three kinds of pruning and fine-tuning paradigms."
REFINING THE SRNETS SEARCHING PROCESS,0.6624605678233438,"5
Refining the SRNets Searching Process"
REFINING THE SRNETS SEARCHING PROCESS,0.6656151419558359,"In this section, we study how to further improve the SRNets searching process based on mask training,
which generally performs better than IMP, as shown in Section 4.2 and Section 4.3."
THE TIMING TO START SEARCHING SRNETS,0.668769716088328,"5.1
The Timing to Start Searching SRNets"
THE TIMING TO START SEARCHING SRNETS,0.6719242902208202,"Compared with searching subnetworks from the fine-tuned BERT, directly searching from the pre-
trained BERT is more efficient in that it dispenses with fine-tuning the full model. However, the
former has a better overall performance, as we have shown in Section 4.4. This induces a question:
At which point of the BERT fine-tuning process, can we find subnetworks comparable to those
found after the end of fine-tuning using mask training? To answer this question, we perform mask
training on the model checkpoints f(θt) = At
Lstd(f(θpt)) from different steps t of BERT fine-tuning."
THE TIMING TO START SEARCHING SRNETS,0.6750788643533123,"66
68
70
72
74
76
78
80"
THE TIMING TO START SEARCHING SRNETS,0.6782334384858044,"epoch 3
66
68
70
72
74
76
78
80"
THE TIMING TO START SEARCHING SRNETS,0.6813880126182965,epoch 5
THE TIMING TO START SEARCHING SRNETS,0.6845425867507886,"48
50
52
54
56
58
60"
THE TIMING TO START SEARCHING SRNETS,0.6876971608832808,"epoch 3
48
50
52
54
56
58
60"
THE TIMING TO START SEARCHING SRNETS,0.6908517350157729,epoch 5 60 65 70 75 80 85
THE TIMING TO START SEARCHING SRNETS,0.694006309148265,"epoch 5
60 65 70 75 80 85"
THE TIMING TO START SEARCHING SRNETS,0.6971608832807571,"epoch 7
60 65 70 75 80 85"
THE TIMING TO START SEARCHING SRNETS,0.7003154574132492,epoch 9 20 30 40 50 60
THE TIMING TO START SEARCHING SRNETS,0.7034700315457413,"epoch 5
20 30 40 50 60"
THE TIMING TO START SEARCHING SRNETS,0.7066246056782335,"epoch 7
20 30 40 50 60"
THE TIMING TO START SEARCHING SRNETS,0.7097791798107256,epoch 9
THE TIMING TO START SEARCHING SRNETS,0.7129337539432177,"40
42
44
46
48
50
52
54"
THE TIMING TO START SEARCHING SRNETS,0.7160883280757098,"epoch 5
40
42
44
46
48
50
52
54"
THE TIMING TO START SEARCHING SRNETS,0.7192429022082019,"epoch 7
40
42
44
46
48
50
52
54"
THE TIMING TO START SEARCHING SRNETS,0.722397476340694,epoch 9 20 34 48 62 76 90
THE TIMING TO START SEARCHING SRNETS,0.7255520504731862,"epoch 5
20 34 48 62 76 90"
THE TIMING TO START SEARCHING SRNETS,0.7287066246056783,"epoch 7
20 34 48 62 76 90"
THE TIMING TO START SEARCHING SRNETS,0.7318611987381703,epoch 9 20 30 40 50 60
THE TIMING TO START SEARCHING SRNETS,0.7350157728706624,"epoch 5
20 30 40 50 60"
THE TIMING TO START SEARCHING SRNETS,0.7381703470031545,"epoch 7
20 30 40 50 60"
THE TIMING TO START SEARCHING SRNETS,0.7413249211356467,epoch 9 20 29 38 47 56 65
THE TIMING TO START SEARCHING SRNETS,0.7444794952681388,"epoch 5
20 29 38 47 56 65"
THE TIMING TO START SEARCHING SRNETS,0.7476340694006309,"epoch 7
20 29 38 47 56 65"
THE TIMING TO START SEARCHING SRNETS,0.750788643533123,epoch 9
THE TIMING TO START SEARCHING SRNETS,0.7539432176656151,MNLI Acc
THE TIMING TO START SEARCHING SRNETS,0.7570977917981072,HANS Acc
THE TIMING TO START SEARCHING SRNETS,0.7602523659305994,"QQP F1
PAWS-qqp F1
PAWS-wiki F1"
THE TIMING TO START SEARCHING SRNETS,0.7634069400630915,"FEVER Acc
Symm1 Acc
Symm2 Acc"
THE TIMING TO START SEARCHING SRNETS,0.7665615141955836,"fixed
gradual
(b) Paraphrase Identification"
THE TIMING TO START SEARCHING SRNETS,0.7697160883280757,"(a) NLI
(c) Fact Verification"
THE TIMING TO START SEARCHING SRNETS,0.7728706624605678,"Figure 8: Comparison between fixed sparsity and gradual sparsity increase for mask training with the
standard fine-tuned full BERT. The subnetworks are at 90% sparsity."
THE TIMING TO START SEARCHING SRNETS,0.7760252365930599,"Fig. 7 shows the mask training curves, which start from different f(θt). We can see that “ft step=0”
converges slower and to a worse final accuracy, as compared with “ft to end”, especially on the HANS
dataset. However, with 20,000 steps of full BERT fine-tuning, which is roughly 55% of the “ft to
end”, the mask training performance is very competitive. This suggests that the total training cost of
SRNet searching can be reduced, by a large amount, in the full model training stage."
THE TIMING TO START SEARCHING SRNETS,0.7791798107255521,"To actually reduce the training cost, we need to predict the exact timing to start mask training. This is
intractable without information of all the training curves in Fig. 7. A feasible solution is adopting the
idea of early-stopping (see Appendix E.1 for detailed discussions). However, accurately predicting
the optimal timing (with the least amount of fine-tuning and comparable subnetwork performance to
fully fine-tuning) is indeed difficult and we invite follow-up studies to investigate this question."
SRNETS AT HIGH SPARSITY,0.7823343848580442,"5.2
SRNets at High Sparsity"
SRNETS AT HIGH SPARSITY,0.7854889589905363,"As the results of Section 4 demonstrate, there is a sharp decline of the subnetworks’ performance
from 70% ∼90% sparsity. We conjecture that this is because directly initializing mask training to
90% reduces the model’s capacity too drastically, and thus causes some difficulties in optimization.
Therefore, we gradually increase the sparsity from 70% ∼90% during mask training, using the cubic
sparsity schedule [52] (see Appendix C.4 for ablation studies). Fig. 8 compares the fixed sparsity
used in the previous sections and the gradual sparsity increase, across varied mask training epochs.
We find that while simply extending the training process is conducive, gradual sparsity increase
achieves better results. In particular, “gradual” outperforms “fixed” with lower training cost on all the
three tasks, except for the PAWS dataset, A similar phenomenon is explained in Section 4.2.2."
CONCLUSIONS AND LIMITATIONS,0.7886435331230284,"6
Conclusions and Limitations"
CONCLUSIONS AND LIMITATIONS,0.7917981072555205,"In this paper, we investigate whether sparsity and robustness to dataset bias can be achieved simulta-
neously for PLM subnetworks. Through extensive experiments, we demonstrate that BERT indeed
contains sparse and robust subnetworks (SRNets) across a variety of NLU tasks and training and
pruning setups. We further use the OOD information to reveal that there exist sparse and almost
unbiased BERT subnetworks. Finally, we present analysis and solutions to refine the SRNet searching
process in terms of subnetwork performance and searching efficiency."
CONCLUSIONS AND LIMITATIONS,0.7949526813880127,"The limitations of this work is twofold. First, we focus on BERT-like PLMs and NLU tasks, while
dataset biases are also common in other scenarios. For example, gender and racial biases exist in
dialogue generation systems [6] and PLMs [15]. In the future work, we would like to extend our
exploration to other types of PLMs and NLP tasks (see Appendix E.2 for a discussion). Second, as
we discussed in Section 5.1, our analysis on “the timing to start searching SRNets” mainly serves as
a proof-of-concept, and actually reducing the training cost requires predicting the exact timing."
CONCLUSIONS AND LIMITATIONS,0.7981072555205048,Acknowledgments and Disclosure of Funding
CONCLUSIONS AND LIMITATIONS,0.8012618296529969,This work was supported by National Natural Science Foundation of China (61976207 and 61906187).
REFERENCES,0.804416403785489,References
REFERENCES,0.807570977917981,"[1] A. Agrawal, D. Batra, D. Parikh, and A. Kembhavi. Don’t just assume; look and answer:
Overcoming priors for visual question answering. In CVPR, pages 4971–4980. Computer
Vision Foundation / IEEE Computer Society, 2018."
REFERENCES,0.8107255520504731,"[2] Y. Bengio, N. Léonard, and A. C. Courville. Estimating or propagating gradients through
stochastic neurons for conditional computation. CoRR, abs/1308.3432, 2013."
REFERENCES,0.8138801261829653,"[3] T. Chen, J. Frankle, S. Chang, S. Liu, Y. Zhang, Z. Wang, and M. Carbin. The lottery ticket
hypothesis for pre-trained BERT networks. In NeurIPS, pages 15834–15846, 2020."
REFERENCES,0.8170347003154574,"[4] C. Clark, M. Yatskar, and L. Zettlemoyer. Don’t take the easy way out: Ensemble based methods
for avoiding known dataset biases. In EMNLP/IJCNLP, pages 4069–4082. Association for
Computational Linguistics, 2019."
REFERENCES,0.8201892744479495,"[5] J. Devlin, M. Chang, K. Lee, and K. Toutanova. BERT: pre-training of deep bidirectional
transformers for language understanding. In NAACL-HLT, pages 4171–4186, 2019."
REFERENCES,0.8233438485804416,"[6] E. Dinan, A. Fan, A. Williams, J. Urbanek, D. Kiela, and J. Weston. Queens are powerful too:
Mitigating gender bias in dialogue generation. In EMNLP (1), pages 8173–8188. Association
for Computational Linguistics, 2020."
REFERENCES,0.8264984227129337,"[7] M. Du, S. Mukherjee, Y. Cheng, M. Shokouhi, X. Hu, and A. H. Awadallah.
What do
compressed large language models forget? robustness challenges in model compression. CoRR,
abs/2110.08419, 2021."
REFERENCES,0.8296529968454258,"[8] J. Frankle and M. Carbin. The lottery ticket hypothesis: Finding sparse, trainable neural
networks. In ICLR. OpenReview.net, 2019."
REFERENCES,0.832807570977918,"[9] Y. Fu, Q. Yu, Y. Zhang, S. Wu, X. Ouyang, D. D. Cox, and Y. Lin. Drawing robust scratch
tickets: Subnetworks with inborn robustness are found within randomly initialized networks. In
NeurIPS, pages 13059–13072, 2021."
REFERENCES,0.8359621451104101,"[10] T. Gale, E. Elsen, and S. Hooker. The state of sparsity in deep neural networks. CoRR,
abs/1902.09574, 2019."
REFERENCES,0.8391167192429022,"[11] P. Ganesh, Y. Chen, X. Lou, M. A. Khan, Y. Yang, H. Sajjad, P. Nakov, D. Chen, and M. Winslett.
Compressing large-scale transformer-based models: A case study on BERT. Transactions of
the Association for Computational Linguistics, 9:1061–1080, 2021."
REFERENCES,0.8422712933753943,"[12] A. Ghaddar, P. Langlais, M. Rezagholizadeh, and A. Rashid. End-to-end self-debiasing frame-
work for robust NLU training. In ACL/IJCNLP (Findings), volume ACL/IJCNLP 2021 of
Findings of ACL, pages 1923–1929. Association for Computational Linguistics, 2021."
REFERENCES,0.8454258675078864,"[13] M. A. Gordon, K. Duh, and N. Andrews. Compressing BERT: studying the effects of weight
pruning on transfer learning. In RepL4NLP@ACL, pages 143–155, 2020."
REFERENCES,0.8485804416403786,"[14] S. Gui, H. Wang, H. Yang, C. Yu, Z. Wang, and J. Liu. Model compression with adversarial
robustness: A unified optimization framework. In NeurIPS, pages 1283–1294, 2019."
REFERENCES,0.8517350157728707,"[15] Y. Guo, Y. Yang, and A. Abbasi. Auto-debias: Debiasing masked language models with auto-
mated biased prompts. In ACL, pages 1012–1023. Association for Computational Linguistics,
2022."
REFERENCES,0.8548895899053628,"[16] S. Gururangan, S. Swayamdipta, O. Levy, R. Schwartz, S. R. Bowman, and N. A. Smith.
Annotation artifacts in natural language inference data. In NAACL-HLT, pages 107–112.
Association for Computational Linguistics, 2018."
REFERENCES,0.8580441640378549,"[17] S. Han, J. Pool, J. Tran, and W. Dally. Learning both weights and connections for efficient
neural network. In Advances in Neural Information Processing Systems 28, pages 1135–1143.
Curran Associates, Inc., 2015."
REFERENCES,0.861198738170347,"[18] H. He, S. Zha, and H. Wang. Unlearn dataset bias in natural language inference by fitting the
residual. In Proceedings of the 2nd Workshop on Deep Learning Approaches for Low-Resource
NLP (DeepLo 2019), pages 132–142. Association for Computational Linguistics, 2019."
REFERENCES,0.8643533123028391,"[19] I. Hubara, M. Courbariaux, D. Soudry, R. El-Yaniv, and Y. Bengio. Binarized neural networks.
In NIPS, pages 4107–4115, 2016."
REFERENCES,0.8675078864353313,"[20] X. Jiao, Y. Yin, L. Shang, X. Jiang, X. Chen, L. Li, F. Wang, and Q. Liu. Tinybert: Distilling
BERT for natural language understanding. In EMNLP (Findings), pages 4163–4174, 2020."
REFERENCES,0.8706624605678234,"[21] R. Karimi Mahabadi, Y. Belinkov, and J. Henderson. End-to-end bias mitigation by modelling
biases in corpora. In ACL, pages 8706–8716. Association for Computational Linguistics, 2020."
REFERENCES,0.8738170347003155,"[22] Z. Lan, M. Chen, S. Goodman, K. Gimpel, P. Sharma, and R. Soricut. ALBERT: A lite BERT
for self-supervised learning of language representations. In ICLR. OpenReview.net, 2020."
REFERENCES,0.8769716088328076,"[23] Z. Li, E. Wallace, S. Shen, K. Lin, K. Keutzer, D. Klein, and J. E. Gonzalez. Train large, then
compress: Rethinking model size for efficient training and inference of transformers. CoRR,
abs/2002.11794, 2020."
REFERENCES,0.8801261829652997,"[24] C. Liang, S. Zuo, M. Chen, H. Jiang, X. Liu, P. He, T. Zhao, and W. Chen. Super tickets
in pre-trained language models: From model compression to improving generalization. In
ACL/IJCNLP, pages 6524–6538. Association for Computational Linguistics, 2021."
REFERENCES,0.8832807570977917,"[25] Y. Liu, Z. Lin, and F. Yuan. ROSITA: refined BERT compression with integrated techniques. In
AAAI, pages 8715–8722. AAAI Press, 2021."
REFERENCES,0.886435331230284,"[26] Y. Liu, F. Meng, Z. Lin, W. Wang, and J. Zhou. Marginal utility diminishes: Exploring the
minimum knowledge for BERT knowledge distillation. In ACL/IJCNLP, pages 2928–2941,
2021."
REFERENCES,0.889589905362776,"[27] Y. Liu, F. Meng, Z. Lin, P. Fu, Y. Cao, W. Wang, and J. Zhou. Learning to win lottery tickets in
BERT transfer via task-agnostic mask training. CoRR, abs/2204.11218, 2022."
REFERENCES,0.8927444794952681,"[28] A. Mallya, D. Davis, and S. Lazebnik. Piggyback: Adapting a single network to multiple tasks
by learning to mask weights. In ECCV, volume 11208 of Lecture Notes in Computer Science,
pages 72–88. Springer, 2018."
REFERENCES,0.8958990536277602,"[29] Y. Mao, Y. Wang, C. Wu, C. Zhang, Y. Wang, Q. Zhang, Y. Yang, Y. Tong, and J. Bai. Ladabert:
Lightweight adaptation of BERT through hybrid model compression. In COLING, pages
3225–3234, 2020."
REFERENCES,0.8990536277602523,"[30] T. McCoy, E. Pavlick, and T. Linzen. Right for the wrong reasons: Diagnosing syntactic heuris-
tics in natural language inference. In ACL, pages 3428–3448. Association for Computational
Linguistics, 2019."
REFERENCES,0.9022082018927445,"[31] P. Michel, O. Levy, and G. Neubig. Are sixteen heads really better than one? In NeurIPS, pages
14014–14024, 2019."
REFERENCES,0.9053627760252366,"[32] S. Prasanna, A. Rogers, and A. Rumshisky. When BERT plays the lottery, all tickets are winning.
In EMNLP, pages 3208–3229, 2020."
REFERENCES,0.9085173501577287,"[33] E. Radiya-Dixit and X. Wang. How fine can fine-tuning be? learning efficient language models.
In AISTATS, volume 108 of Proceedings of Machine Learning Research, pages 2435–2443.
PMLR, 2020."
REFERENCES,0.9116719242902208,"[34] V. Sanh, L. Debut, J. Chaumond, and T. Wolf. Distilbert, a distilled version of BERT: smaller,
faster, cheaper and lighter. CoRR, abs/1910.01108, 2019."
REFERENCES,0.9148264984227129,"[35] T. Schuster, D. J. Shah, Y. J. S. Yeo, D. Filizzola, E. Santus, and R. Barzilay. Towards debiasing
fact verification models. In EMNLP/IJCNLP, pages 3417–3423. Association for Computational
Linguistics, 2019."
REFERENCES,0.917981072555205,"[36] V. Sehwag, S. Wang, P. Mittal, and S. Jana. HYDRA: pruning adversarially robust neural
networks. In NeurIPS, 2020."
REFERENCES,0.9211356466876972,"[37] E. Strubell, A. Ganesh, and A. McCallum. Energy and policy considerations for deep learning
in NLP. In ACL, pages 3645–3650. Association for Computational Linguistics, 2019."
REFERENCES,0.9242902208201893,"[38] S. Sun, Y. Cheng, Z. Gan, and J. Liu. Patient knowledge distillation for BERT model compres-
sion. In EMNLP/IJCNLP, pages 4322–4331, 2019."
REFERENCES,0.9274447949526814,"[39] T. Tambe, C. Hooper, L. Pentecost, E. Yang, M. Donato, V. Sanh, A. M. Rush, D. Brooks, and
G. Wei. Edgebert: Optimizing on-chip inference for multi-task NLP. CoRR, abs/2011.14203,
2020."
REFERENCES,0.9305993690851735,"[40] J. Thorne, A. Vlachos, O. Cocarascu, C. Christodoulopoulos, and A. Mittal. The fact extraction
and verification (FEVER) shared task. CoRR, abs/1811.10971, 2018."
REFERENCES,0.9337539432176656,"[41] P. A. Utama, N. S. Moosavi, and I. Gurevych. Mind the trade-off: Debiasing NLU models
without degrading the in-distribution performance. In ACL, pages 8717–8729. Association for
Computational Linguistics, 2020."
REFERENCES,0.9369085173501577,"[42] P. A. Utama, N. S. Moosavi, and I. Gurevych. Towards debiasing NLU models from unknown
biases. In EMNLP, pages 7597–7610. Association for Computational Linguistics, 2020."
REFERENCES,0.9400630914826499,"[43] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. Kaiser, and
I. Polosukhin. Attention is all you need. In NIPS, pages 5998–6008, 2017."
REFERENCES,0.943217665615142,"[44] A. Williams, N. Nangia, and S. R. Bowman. A broad-coverage challenge corpus for sen-
tence understanding through inference. In NAACL-HLT, pages 1112–1122. Association for
Computational Linguistics, 2018."
REFERENCES,0.9463722397476341,"[45] C. Xu, W. Zhou, T. Ge, K. Xu, J. J. McAuley, and F. Wei. Beyond preserved accuracy:
Evaluating loyalty and robustness of BERT compression. In EMNLP (1), pages 10653–10659.
Association for Computational Linguistics, 2021."
REFERENCES,0.9495268138801262,"[46] S. Ye, X. Lin, K. Xu, S. Liu, H. Cheng, J. Lambrechts, H. Zhang, A. Zhou, K. Ma, and Y. Wang.
Adversarial robustness vs. model compression, or both? In ICCV, pages 111–120. IEEE, 2019."
REFERENCES,0.9526813880126183,"[47] O. Zafrir, G. Boudoukh, P. Izsak, and M. Wasserblat. Q8BERT: quantized 8bit BERT. In
EMC2@NeurIPS, pages 36–39. IEEE, 2019."
REFERENCES,0.9558359621451105,"[48] D. Zhang, K. Ahuja, Y. Xu, Y. Wang, and A. C. Courville. Can subnetwork structure be the
key to out-of-distribution generalization? In ICML, volume 139 of Proceedings of Machine
Learning Research, pages 12356–12367. PMLR, 2021."
REFERENCES,0.9589905362776026,"[49] W. Zhang, L. Hou, Y. Yin, L. Shang, X. Chen, X. Jiang, and Q. Liu. Ternarybert: Distillation-
aware ultra-low bit BERT. In EMNLP, pages 509–521. Association for Computational Linguis-
tics, 2020."
REFERENCES,0.9621451104100947,"[50] Y. Zhang, J. Baldridge, and L. He. PAWS: paraphrase adversaries from word scrambling. In
NAACL-HLT, pages 1298–1308. Association for Computational Linguistics, 2019."
REFERENCES,0.9652996845425867,"[51] M. Zhao, T. Lin, F. Mi, M. Jaggi, and H. Schütze. Masking as an efficient alternative to
finetuning for pretrained language models. In EMNLP, pages 2226–2241, 2020."
REFERENCES,0.9684542586750788,"[52] M. Zhu and S. Gupta. To prune, or not to prune: Exploring the efficacy of pruning for model
compression. In ICLR (Workshop). OpenReview.net, 2018."
REFERENCES,0.9716088328075709,Checklist
REFERENCES,0.9747634069400631,1. For all authors...
REFERENCES,0.9779179810725552,"(a) Do the main claims made in the abstract and introduction accurately reflect the paper’s
contributions and scope? [Yes]
(b) Did you describe the limitations of your work? [Yes] See Section 6."
REFERENCES,0.9810725552050473,"(c) Did you discuss any potential negative societal impacts of your work? [No] Currently,
we think there are no apparent negative societal impacts related to our work."
REFERENCES,0.9842271293375394,"(d) Have you read the ethics review guidelines and ensured that your paper conforms to
them? [Yes]
2. If you are including theoretical results..."
REFERENCES,0.9873817034700315,"(a) Did you state the full set of assumptions of all theoretical results? [N/A]
(b) Did you include complete proofs of all theoretical results? [N/A]
3. If you ran experiments..."
REFERENCES,0.9905362776025236,"(a) Did you include the code, data, and instructions needed to reproduce the main experi-
mental results (either in the supplemental material or as a URL)? [No] We will release
the codes and reproduction instructions upon publication.
(b) Did you specify all the training details (e.g., data splits, hyperparameters, how they
were chosen)? [Yes] See Section 4.1 and Appendix B.
(c) Did you report error bars (e.g., with respect to the random seed after running experi-
ments multiple times)? [Yes] See all the figures of our experiments.
(d) Did you include the total amount of compute and the type of resources used (e.g., type
of GPUs, internal cluster, or cloud provider)? [Yes] See Appendix B.
4. If you are using existing assets (e.g., code, data, models) or curating/releasing new assets..."
REFERENCES,0.9936908517350158,"(a) If your work uses existing assets, did you cite the creators? [Yes] See Section 4.1.
(b) Did you mention the license of the assets? [Yes] Licenses of some dataset we used are
mentioned in Section 4.1. However, for the other datasets, we were unable to find the
licenses.
(c) Did you include any new assets either in the supplemental material or as a URL? [No]
(d) Did you discuss whether and how consent was obtained from people whose data you’re
using/curating? [N/A]
(e) Did you discuss whether the data you are using/curating contains personally identifiable
information or offensive content? [N/A]
5. If you used crowdsourcing or conducted research with human subjects..."
REFERENCES,0.9968454258675079,"(a) Did you include the full text of instructions given to participants and screenshots, if
applicable? [N/A]
(b) Did you describe any potential participant risks, with links to Institutional Review
Board (IRB) approvals, if applicable? [N/A]
(c) Did you include the estimated hourly wage paid to participants and the total amount
spent on participant compensation? [N/A]"
