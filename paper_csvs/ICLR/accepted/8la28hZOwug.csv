Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.004016064257028112,"Transferring representational knowledge of a model to another is a wide-ranging
topic in machine learning. Those applications include the distillation of a large
supervised or self-supervised teacher model to a smaller student model or self-
supervised learning via self-distillation. Knowledge distillation is an original
method to solve these problems, which minimizes a cross-entropy loss between the
prototypical probabilistic outputs of teacher and student networks. On the other
hand, contrastive learning has shown its competency in transferring representations
as they allow students to capture the information of teacher representations. In this
paper, we amalgamate the advantages of knowledge distillation and contrastive
learning by modeling the critic of a contrastive objective by the prototypical proba-
bilistic discrepancy between two features. We refer to it as prototypical contrastive
predictive coding and present efﬁcient implementation using the proposed objective
for three distillation tasks: supervised model compression, self-supervised model
compression, and self-supervised learning via self-distillation. Through extensive
experiments, we validate the effectiveness of our method compared to various
supervised and self-supervised knowledge distillation baselines."
INTRODUCTION,0.008032128514056224,"1
INTRODUCTION"
INTRODUCTION,0.012048192771084338,"In machine learning, knowledge distillation (KD) is a problem that aims to transfer the knowledge
from one network (a teacher) to another one (a student). The original method introduced by Hinton
et al. (2015); Buciluˇa et al. (2006) minimizes the cross-entropy between the probabilistic outputs
of teacher and student networks. Even though the simplicity of its implementation, many other
distillation methods cannot easily outperform KD. Therefore the concept of knowledge distillation
has been expanded to various machine learning tasks other than supervised model compressions, such
as self-supervised learning (Caron et al., 2020; 2021) or self-supervised model compression (Fang
et al., 2021). Those methods rely on minimizing the discrepancy of probabilistic outputs of teacher
and student networks, thus require a function that maps a data or feature into a probability space. It is
straightforward to use a linear mapping for it, which we refer to a prototypes."
INTRODUCTION,0.01606425702811245,"On the other hand, contrastive learning has its merits in capturing correlations and high-order
dependencies over teacher representations as they are trained by pulling the positives and pushing
over the negatives. Especially, contrastive objectives such as NCE (Gutmann & Hyvärinen, 2010) or
CPC (as known as InfoNCE) (Oord et al., 2018; Bachman et al., 2019; Hjelm et al., 2018) are proven
to be a lower bound to the mutual information allowing student network to capture the information
from the teacher representations. While many methods (Chen et al., 2020b;c) used those objectives for
representation learning, Tian et al. (2019) proposed contrastive representation distillation (CRD) and
demonstrated the effectiveness of contrastive learning in transferring knowledge from one network to
another."
INTRODUCTION,0.020080321285140562,"However, the current contrastive learning requires large negative samples with careful sampling. To
ameliorate, we combine the prototypical method and contrastive objective to inherit their advantages.
To that end, we propose prototypical contrastive predictive coding (ProtoCPC), which utilizes the
prototypes to generate probability distribution and model the critic by the discrepancy between
two probabilistic outputs. Furthermore, our ProtoCPC objective is a lower bound to the mutual"
INTRODUCTION,0.024096385542168676,Published as a conference paper at ICLR 2022
INTRODUCTION,0.028112449799196786,"information between teacher and student representations alike CPC. But unlike CPC, it does not
require commodious negative samples or careful sampling policies."
INTRODUCTION,0.0321285140562249,"Given the ProtoCPC objective, we present efﬁcient applications on three distillation tasks: super-
vised model compression, self-supervised model compression, and self-supervised learning via
self-distillation. While ProtoCPC is simple in its implementation, we observe that it signiﬁcantly
boosts the performance of representation distillation. Our method outperforms KD, and partially
outperform CRD on CIFAR-100 and ImageNet. Moreover, our method achieves state-of-the-art
performance on transferring various self-supervised teacher representations to a small self-supervised
model. Lastly, by construing self-supervised learning as a self-distillation, we validate the effective-
ness of ProtoCPC in representation learning. Our contributions are following:"
INTRODUCTION,0.03614457831325301,"• We propose a novel prototypical contrastive objective for transferring representational
knowledge between models.
• We apply the proposed objective to three distillation tasks: supervised model compression,
self-supervised model compression, and self-supervised learning via self-distillation.
• Experiments show the effectiveness of our method in various representation distillation
benchmarks, especially achieving state-of-the-art performance in supervised/self-supervised
model compression."
METHOD,0.040160642570281124,"2
METHOD"
PROTOTYPICAL CONTRASTIVE PREDICTIVE CODING,0.04417670682730924,"2.1
PROTOTYPICAL CONTRASTIVE PREDICTIVE CODING"
PROTOTYPICAL CONTRASTIVE PREDICTIVE CODING,0.04819277108433735,"Given data x with a random variable x ∼X, let the teacher network f T and the student network
f S, where they map x into RDT and RDS respectively. Also let T and S be random variables for
representation f T (X) and f S(X) respectively. One can transfer the representational knowledge of
T to S by maximizing the mutual information I(T; S), where it is deﬁned by the KL-divergence
between the joint distribution p(T, S) and the product of marginal distribution p(T)p(S). However,
as estimation and optimization of mutual information is challenging, many approaches count on
maximizing variational lower bound to the mutual information (Poole et al., 2019). The contrastive
predictive coding (Oord et al., 2018), or as known as InfoNCE is a guaranteed lower bound to the
mutual information (Oord et al., 2018; Tian et al., 2020; Bachman et al., 2019; Song & Ermon,
2020), and has shown its competency in both representation learning (He et al., 2020; Chen et al.,
2020b;c) and representation distillation (Tian et al., 2019). Formally, given a zs ∼S with a
positive zt ≡zt0 and N −1 negatives {ztj}N−1
j=1 sampled from T, i.e. (zt, zs) ∼p(T, S) and
{(ztj, zs)}N−1
j=1 ∼p(T)p(S), the following inequality holds for any critic h : RDT × RDS →R+:"
PROTOTYPICAL CONTRASTIVE PREDICTIVE CODING,0.05220883534136546,"I(T; S) ≥E

log
h(zt, zs)"
N,0.05622489959839357,"1
N
PN−1
j=0 h(ztj, zs) 
(1)"
N,0.060240963855421686,"Previous works set the critic by the exponential of cosine similarity between two unit feature vectors,
i.e. h(zt, zs) = exp(−zt · zs) where zt and zs are ℓ2-normalized. Theoretically, the lower bound
becomes tighter as N →∞. In practice, the CPC objective requires using extremely large batch size
or memory buffer that stores the negatives as it requires pairwise computation between zs and ztjs."
N,0.0642570281124498,"On the other hand, we project feature vectors into a probability space. To do that, we append a linear
prototypes W T ∈RDT ×K and W S ∈RDS×K at the top of f T and f S so that they have same output
dimension of K. For brevity, let ¯zs = W Szs and ¯zt = W T zt and ¯T, ¯S be random variables for ¯zt
and ¯zs respectively. Then we set probability of student ps by K-categorical distribution deﬁned by
the softmax operator on ¯zs = W Szs with temperature τs > 0:"
N,0.06827309236947791,"p(k)
s
=
exp
 
¯z(k)
s /τs
"
N,0.07228915662650602,"PK
k′=1 exp
 
¯z(k′)
s
/τs
.
(2)"
N,0.07630522088353414,"Similarly we deﬁne probability of teacher ptj with temperature τt > 0. Then we deﬁne the critic
between ¯zt and ¯zs by the negative exponential of cross-entropy between ps and pt, i.e.,"
N,0.08032128514056225,"h(¯zt, ¯zs) = e−H(pt,ps) = e
PK
k=1 p(k)
t
log p(k)
s .
(3)"
N,0.08433734939759036,Published as a conference paper at ICLR 2022
N,0.08835341365461848,"Then h is a positive bounded function and is maximized when pt matches with ps. Then by plugging
Eq. 3 into Eq. 1, it follows that"
N,0.09236947791164658,"I(T; S) ≥I( ¯T; ¯S) ≥E

log
e−H(pt,ps)"
N,0.0963855421686747,"1
N
PN−1
j=0 e−H(ptj,ps) 
(4)"
N,0.10040160642570281,"= E

log
exp(pt · ¯zs/τs)"
N,0.10441767068273092,"1
N
PN−1
j=0 exp
 
ptj · ¯zs/τs


(5)"
N,0.10843373493975904,"≥E

log
exp(pt · ¯zs/τs)"
N,0.11244979919678715,"1
N
PN−1
j=0
PK
k=1 p(k)
tj exp
 
¯z(k)
s /τs
 
(6)"
N,0.11646586345381527,"= E

log
exp(pt · ¯zs/τs)
PK
k=1 q(k) exp
 
¯z(k)
s /τs
"
N,0.12048192771084337,"
≜IProtoCPC,
(7)"
N,0.12449799196787148,"where q(k) =
1
N
PN−1
j=0 ptj is a mean of teachers’ probability which we call a prior. The ﬁrst in-
equality is from data processing inequality, the second equality is from crossing out the constant term,
and third inequality is from Jensen’s inequality. We deﬁne Prototypical Contrastive Predictive
Coding (ProtoCPC) objective IProtoCPC in Eq. 7. In addition, we deﬁne ProtoCPC loss LProtoCPC by
the negative of ProtoCPC objective, thus minimizing ProtoCPC loss is equivalent to a variational
maximization of mutual information between student and teacher representations."
N,0.1285140562248996,"Relationship with CPC
While many lower bounds to the mutual information were proposed,
Tschannen et al. (2019) observe that the tightness of bound does not necessarily imply a better
representation learning performance. From then, many works focused on analyzing the components
of contrastive objective itself which are responsible for the empirical success. Wang & Isola (2020)
argued that the contrastive loss is composed of alignment and uniformity loss, where alignment loss
accounts for the similarity of two positive features, and uniformity loss measures how the features
are scattered in the unit hypersphere and show that both losses are important in contrastive learning."
N,0.13253012048192772,"We draw an analogy on ProtoCPC by dissecting into alignment and uniformity losses. Since the
alignment loss is straightforward, we focus on the uniformity loss. We show that one can interpret
the uniformity loss LProtoCPC-Unif by the re-substitution entropy estimator of zs via a von-Mises Fisher
kernel density estimation (vMF-KDE) (Ahmad & Lin, 1976):"
N,0.13654618473895583,"LProtoCPC-Unif = Ezs∼S 
log K
X"
N,0.14056224899598393,"k=1
q(k) exp(¯z(k)
s /τs)

= Ezs∼S 
log K
X"
N,0.14457831325301204,"k=1
q(k) exp(wk · zs/τs)

(8)"
N,0.14859437751004015,"= Ezs∼S[log ˆpvMF-KDE(zs)] + log ZvMF = −ˆH(zs) + log ZvMF,
(9)"
N,0.15261044176706828,"where each wk is a k-th column of WS and acts as a mean direction of k-th vMF distribution and
q(k) acts as a prior for each k-th vMF distribution. The ˆpvMF-KDE is thus the mixture of K vMF
distribution with prior q(k) and then the uniformity loss is a re-substitution entropy ˆH(zs). The ZvMF
is a normalizing constant for vMF distribution. Remark that the uniformity loss of CPC objective is
also a re-substitution entropy with vMF-KDE, but the mean directions are given by negative samples
ztj and the prior is uniform. It shows that the ProtoCPC objective allows modeling of complex
mixture of vMF distribution by exploiting prior term and using prototypes remove the dependency on
negative samples."
N,0.1566265060240964,"Prior momentum
Since ProtoCPC is contrastive, it requires sufﬁcient negatives to perform learning.
However, unlike CPC, ProtoCPC only requires prior q that accounts for the negatives. Therefore, we
use exponential moving average (EMA) on prior q for better estimation. At each iteration, we update
q by following update rule:"
N,0.1606425702811245,"q(k) ←mpq(k) + (1 −mp) 1 N N
X"
N,0.1646586345381526,"j=1
p(k)
tj ,
(10)"
N,0.1686746987951807,"where mp > 0 is a momentum rate. The prior momentum allows better estimation of prior term
regardless of the size of negative samples."
N,0.17269076305220885,Published as a conference paper at ICLR 2022
N,0.17670682730923695,"Figure 1: Demonstration of three distillation tasks using proposed ProtoCPC objective. (a) Compressing a
supervised model, (b) compressing a self-supervised model, (c) self-supervised learning via self-distillation. Our
method is a contrative objective with the probability distributions where it is mediated by the prototypes. The
ﬁgures of white color is training parameters while gray colors are frozen throughout the training. The dashed
lines represent the copying of parameters such as exponential moving average (EMA)."
N,0.18072289156626506,"Assignment of teacher probability
While KD used softmax operator for both probabilities of
teacher and student networks, many self-supervised methods (Asano et al., 2019; Caron et al., 2020)
reported that the softmax operator can lead to collapse, i.e. every representation fall into the same
one. To compromise, many prototypical self-supervised methods resort on Sinkhorn-Knopp iterative
algorithm by formulating the assignment of teacher probability as an optimal transport problem:"
N,0.18473895582329317,"argmax
Pt
⟨Pt, Zt⟩+ τtH(Pt),
s.t.
Pt ∈RN×K
+
, Pt1K = 1N, P ⊤
t 1N = N"
N,0.18875502008032127,"K 1K,
(11)"
N,0.1927710843373494,"where Zt is a matrix whose rows are ztj, H(Pt) = PN−1
j=0
PK
k=1 −p(k)
t
log p(k)
t
is a entropy and
τt > 0 is a temperature that controls the smoothness of distribution. Then the Eq. 11 can be solved by
only few steps of Sinkhorn-Knopp iteration (Cuturi, 2013; Altschuler et al., 2017) which iteratively
projects Pt into following form:"
N,0.19678714859437751,"p(k)
tj =
βkez(k)
tj /τt
PK
k′=1 βk′ez(k′)
tj
/τt ,
(12)"
N,0.20080321285140562,"where βk is a normalizing constant. We refer this to Sinkhorn-Knopp (SK) operator. The SK operator
allows each prototype to be non-zero, i.e. q(k) is non-zero for each k. In practice, we only conduct a
few steps of SK iterations."
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.20481927710843373,"2.2
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.20883534136546184,"Fig. 1 depicts explanation on how we structure prototypical contrastive learning for three distillation
tasks we consider: supervised model compression, self-supervised model compression and self-
distillation.
Supervised model compression
Given a (supervised) pre-trained teacher network f T , the goal of
supervised model compression is to train a smaller student network f S by utilizing the representational
knowledge from the teacher. To do that, Hinton et al. (2015) proposed to minimize the knowledge
distillation loss, where it is a weighted sum of the supervised loss and the distillation loss. Here,
the supervised loss is a conventional cross-entropy loss between the one-hot label and the output
of f S. The distillation loss is a cross-entropy between teacher’s probability output pt and student’s
probability output ps. Formally, it is given by following:"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.21285140562248997,"min
f S E(x,y)∼(X,Y )

LSup(f S(x), y) + βτ 2H(pt(x), ps(x))

,
(13)"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.21686746987951808,"where y is a label, pt(x) and ps(x) are computed by the softmax operator on each f T (x) and f S(x)
with temperature τ > 0, and β is a balancing weight. Our approach is to replace the distillation loss
by the ProtoCPC loss and use SK operator for pt. Then our loss becomes following:"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.22088353413654618,"min
f S E(x,y)∼(X,Y )

LSup(f S(x), y) + βτ 2LProtoCPC(pt(x), ps(x))

.
(14)"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.2248995983935743,Published as a conference paper at ICLR 2022
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.2289156626506024,"Remark that since the supervised networks already contain prototypes at the last layer, we use
prototypes for both supervised learning and distillation at the same time. Note that CRD (Tian
et al., 2019) uses binary contrastive loss for distillation loss by maintaining a large memory buffer of
negative samples. Also, CRD requires an additional linear layer to implement inner-product critic.
However, our method conducts contrastive learning without additional training of embeddings or
storing a memory buffer of negative samples."
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.23293172690763053,"Self-supervised model compression
Given a large self-supervised pre-trained teacher network gT ,
the goal of self-supervised model compression is to transfer the representational knowledge of gT to
a smaller self-supervised student network. Fang et al. (2021) ﬁrst proposed SEED, where the student
network is trained by minimizing the cross-entropy loss between the similarity score of teacher and
student. The similarity score is computed by the pairwise computation over a memory buffer ﬁlled
with features of the teacher network."
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.23694779116465864,"Our approach uses prototypes to generate the probabilistic output of teacher and student represen-
tations, and use ProtoCPC loss for effective distillation. Let the pre-trained teacher network gT be
a composition of base encoder f T and the projection head hT . Then we train student network gS,
where it is composed of smaller encoder f S and projection head hS of the same architecture as hT .
Then we append prototypes W T and W S for each gT and gS to ensure that they have the same output
of dimension K. Given a data x, we train the student network by minimizing the ProtoCPC loss
between the probability of teacher pt(x) and probability of student ps(x). For ps we use softmax
operator with temperature τs > 0 and for pt we use SK operator with temperature τt > 0 over the
batch of samples. Then the objective is given by following:"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.24096385542168675,"min
gS,W S Ex∼X"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.24497991967871485,"
LProtoCPC(pt(x), ps(x))

.
(15)"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.24899598393574296,"We can further use multi-crops data augmentation (Caron et al., 2020), where it augments multiple
small crops of a data during the training to expedite the training. Let ˜xj ∼M(x) be small local
crops with transformation M, then the self-supervised model compression with multi-crops is given
by following:"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.25301204819277107,"min
gS,W S Ex∼X,˜xj∼A(x)"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.2570281124497992,"
LProtoCPC(pt(x), ps(x)) +
X"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.26104417670682734,"j
LProtoCPC(pt(x), ps(˜xj))

.
(16)"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.26506024096385544,"For prototypes of teacher network W T , we copy the parameters of W S to W T at each iteration. This
allows our method to apply to any self-supervised teacher networks. Note that if the teacher network
is trained by prototypical methods such as DINO (Caron et al., 2021) or SwAV (Caron et al., 2020),
we can re-use the pre-trained prototypes for W T . We present ablation studies on setting prototypes
for W T ."
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.26907630522088355,"Self-distillation
Additionally, we show that ProtoCPC loss can enhance the representation learn-
ing of a self-supervised model, where we interpret it as a self-distillation method. We built on
DINO (Caron et al., 2021), which is the state-of-the-art method in self-supervised learning that ﬁrst
regarded the self-supervised learning as a knowledge distillation problem."
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.27309236947791166,"Let the student network be the composition of a base encoder fθS, we append projection head hθS
consists of MLP layers and a prototypical layer WθS. Then we set the teacher by the momentum
encoder (He et al., 2020; Chen et al., 2020b; Grill et al., 2020; Caron et al., 2021) on the student
network, where it is a composition of encoder fθT , projection head hθT , and prototype WθT . We use
EMA for the weights of teacher network, where it is update by θt →λθt + (1 −λ)θs, where λ is a
momentum rate. Within the training, we generate a pair of views (x1, x2) from a data x ∼X and
they are passed to each student and teacher networks. Then we compute ProtoCPC loss between the
probability of teacher network pt(x1) and probability of student network ps(x2), and symmetrically
between pt(x2) and ps(x1). The objectives are given by:"
APPLICATIONS OF PROTOCPC TO DISTILLATION TASKS,0.27710843373493976,"min
θs Ex∼X,x1,x2∼A(x) 1"
LPROTOCPC,0.28112449799196787,"2LProtoCPC
 
pt(x1), ps(x2)

+ 1"
LPROTOCPC,0.285140562248996,"2LProtoCPC
 
pt(x2), ps(x1)

,
(17)"
LPROTOCPC,0.2891566265060241,"where A(·) is a data augmentation operator. Note that multi-crops data augmentation can be further
applied."
LPROTOCPC,0.2931726907630522,Published as a conference paper at ICLR 2022
RELATED WORK,0.2971887550200803,"3
RELATED WORK"
RELATED WORK,0.30120481927710846,"Contrastive learning
There is a large body of works on contrastive objectives for representation
learning. The contrastive objectives such as CPC (Oord et al., 2018; Song & Ermon, 2020; Bachman
et al., 2019; Hjelm et al., 2018) and multi-view data augmentation (Tian et al., 2020) are keys
for the success of contrastive representation learning. With sophisticated implementation such as
momentum encoder (He et al., 2020; Chen et al., 2020b; Grill et al., 2020), or caching negative
samples (Wu et al., 2018; Chen et al., 2020b;c) had dramatically reduced the gap between self-
supervised and supervised models. While the contrastive objectives are proven to be a lower bound
to the mutual information (Poole et al., 2019; Song & Ermon, 2020), some studies attribute that the
success of representation learning to the contrastive objective itself rather than the tightness of mutual
information estimation (Bachman et al., 2019). Then many works focus on analyzing the contrastive
objective itself (Wang & Isola, 2020) or count on the metric-learning perspective of contrastive
learning that deviates into different objectives (Grill et al., 2020; Chen & He, 2021; Zbontar et al.,
2021; Bardes et al., 2021). The key difference between many contrastive objectives and our method
is that their discrepancy measure is given by the ℓ2-norm of two features, while our method projects
feature into a probability space and characterize the discrepancy with probabilistic measure. Our
work is also related to methods that use clustering for representation learning (Tian et al., 2017;
Zhuang et al., 2019; Li et al., 2020), which have been developed into prototypical methods (Asano
et al., 2019; Li et al., 2020; Caron et al., 2020; 2021)."
RELATED WORK,0.30522088353413657,"Knowledge distillation
The idea that transferring the large pre-trained model’s representation into
a smaller one has been embodied by knowledge distillation (Hinton et al., 2015; Buciluˇa et al., 2006).
Then various distillation criteria or utilization of intermediate feature maps were studied to enhance
the performance (Romero et al., 2014; Zagoruyko & Komodakis, 2016a; Tung & Mori, 2019; Peng
et al., 2019; Ahn et al., 2019; Park et al., 2019; Passalis & Tefas, 2018; Heo et al., 2019; Kim et al.,
2018; Yim et al., 2017; Huang & Wang, 2017). However, many of them were not able to outperform
KD by far. Recently, Tian et al. (2019) introduced contrastive representation distillation (CRD)
which utilizes binary contrastive objective for distillation loss and shows the empirical superiority on
various knowledge distillation benchmarks."
RELATED WORK,0.3092369477911647,"Moreover, recent studies focus on distilling the knowledge of large self-supervised models to the
smaller ones using the concept of knowledge distillation (Fang et al., 2021; Shen et al., 2021;
Noroozi et al., 2018; Chen et al., 2020a). Fang et al. (2021) proposed self-supervised representation
distillation (SEED) which used features of teacher networks to compute probability distribution for
distillation. One can interpret SEED as the prototypical method where prototypes are given by the
queue of teacher features."
EXPERIMENT,0.3132530120481928,"4
EXPERIMENT"
SUPERVISED MODEL COMPRESSION,0.3172690763052209,"4.1
SUPERVISED MODEL COMPRESSION"
SUPERVISED MODEL COMPRESSION,0.321285140562249,"Setup
We experiment on CIFAR-100 (Krizhevsky et al., 2009) and ImageNet (Deng et al.,
2009) with various teacher-student combinations such as ResNet (He et al., 2016) and Wide
ResNet (WRN) (Zagoruyko & Komodakis, 2016b). We compare with various distillation base-
lines such as KD (Hinton et al., 2015) and CRD (Tian et al., 2019)."
SUPERVISED MODEL COMPRESSION,0.3253012048192771,"Results on CIFAR-100
Table 1 and Table 2 compare top-1 accuracies of our method on super-
vised model compression on CIFAR-100. Table 1 investigates teachers and students of the same
architectural style, while Table 2 is focused on students and teachers from different architectures. We
observe that our ProtoCPC consistently outperforms KD and other distillation methods, yet ProtoCPC
is on par with CRD where it also uses a contrastive learning method for distillation. Remark that
CRD requires a large memory buffer of negative samples with careful sampling according to the class
information and additional training of embeddings. However, our ProtoCPC does not require massive
negative samples and additional training of linear embeddings since we use the last linear layer as
prototypes for our ProtoCPC."
SUPERVISED MODEL COMPRESSION,0.3293172690763052,Published as a conference paper at ICLR 2022
SUPERVISED MODEL COMPRESSION,0.3333333333333333,"Teacher
Student
WRN-40-2
WRN-16-2
WRN-40-2
WRN-40-1
resnet56
resnet20
resnet110
resnet20
resnet110
resnet32
resnet32x4
resnet8x4
vgg13
vgg8"
SUPERVISED MODEL COMPRESSION,0.3373493975903614,"Teacher
75.61
75.61
72.34
74.31
74.31
79.42
74.64
Student
73.26
71.98
69.06
69.06
71.14
72.50
70.36"
SUPERVISED MODEL COMPRESSION,0.3413654618473896,"KD
74.92
73.54
70.66
70.67
73.08
73.33
72.98
FitNet
73.58 (↓)
72.24 (↓)
69.21 (↓)
68.99 (↓)
71.06 (↓)
73.50 (↑)
71.02 (↓)
AT
74.08 (↓)
72.77 (↓)
70.55 (↓)
70.22 (↓)
72.31 (↓)
73.44 (↑)
71.43 (↓)
SP
73.83 (↓)
72.43 (↓)
69.67 (↓)
70.04 (↓)
72.69 (↓)
72.94 (↓)
72.68 (↓)
CC
73.56 (↓)
72.21 (↓)
69.63 (↓)
69.48 (↓)
71.48 (↓)
72.97 (↓)
70.71 (↓)
VID
74.11 (↓)
73.30 (↓)
70.38 (↓)
70.16 (↓)
72.61 (↓)
73.09 (↓)
71.23 (↓)
RKD
73.35 (↓)
72.22 (↓)
69.61 (↓)
69.25 (↓)
71.82 (↓)
71.90 (↓)
71.48 (↓)
PKT
74.54 (↓)
73.45 (↓)
70.34 (↓)
70.25 (↓)
72.61 (↓)
73.64 (↑)
72.88 (↓)
AB
72.50 (↓)
72.38 (↓)
69.47 (↓)
69.53 (↓)
70.98 (↓)
73.17 (↓)
70.94 (↓)
FT
73.25 (↓)
71.59 (↓)
69.84 (↓)
70.22 (↓)
72.37 (↓)
72.86 (↓)
70.58 (↓)
FSP
72.91 (↓)
n/a
69.95 (↓)
70.11 (↓)
71.89 (↓)
72.62 (↓)
70.23 (↓)
NST
73.68 (↓)
72.24 (↓)
69.60 (↓)
69.53 (↓)
71.96 (↓)
73.30 (↓)
71.53 (↓)
CRD
75.48 (↑)
74.14 (↑)
71.16 (↑)
71.46 (↑)
73.48 (↑)
75.51 (↑)
73.94 (↑)
ProtoCPC
75.79 (↑)
74.23 (↑)
71.41 (↑)
71.04 (↑)
73.55 (↑)
75.02 (↑)
73.79 (↑)"
SUPERVISED MODEL COMPRESSION,0.3453815261044177,"KD+CRD
75.64 (↑)
74.38 (↑)
71.63 (↑)
71.56 (↑)
73.75 (↑)
75.46 (↑)
74.29 (↑)
ProtoCPC+CRD
75.92 (↑)
74.75 (↑)
70.99 (↑)
71.47 (↑)
73.52 (↑)
75.55 (↑)
74.40 (↑)"
SUPERVISED MODEL COMPRESSION,0.3493975903614458,"Table 1: Top-1 test accuracy (%) of student networks on CIFAR-100 with various distillation methods (our
method denoted by ProtoCPC). (↑) denotes outperformance over KD and bold font denotes the best accuracy
within the baseline. Note that ProtoCPC always outperform KD as well as other baselines except CRD. Our
ProtoCPC outperforms CRD in 4 out of 7 benchmarks. We also provide results on combining ProtoCPC and
CRD, showing that our method is compatible with CRD as they learn different structure. The results are averaged
over 5 runs."
SUPERVISED MODEL COMPRESSION,0.3534136546184739,"Teacher
Student
vgg13
MobileNetV2
ResNet50
MobileNetV2
ResNet50
vgg8
resnet32x4
ShufﬂeNetV1
resnet32x4
ShufﬂeNetV2
WRN-40-2
ShufﬂeNetV1"
SUPERVISED MODEL COMPRESSION,0.357429718875502,"Teacher
74.64
79.34
79.34
79.42
79.42
75.61
Student
64.6
64.6
70.36
70.5
71.82
70.5"
SUPERVISED MODEL COMPRESSION,0.3614457831325301,"KD
67.37
67.35
73.81
74.07
74.45
74.83
FitNet
64.14 (↓)
63.16 (↓)
70.69 (↓)
73.59 (↓)
73.54 (↓)
73.73 (↓)
AT
59.40 (↓)
58.58 (↓)
71.84 (↓)
71.73 (↓)
72.73 (↓)
73.32 (↓)
SP
66.30 (↓)
68.08 (↑)
73.34 (↓)
73.48 (↓)
74.56 (↑)
74.52 (↓)
CC
64.86 (↓)
65.43 (↓)
70.25 (↓)
71.14 (↓)
71.29 (↓)
71.38 (↓)
VID
65.56 (↓)
67.57 (↑)
70.30 (↓)
73.38 (↓)
73.40 (↓)
73.61 (↓)
RKD
64.52 (↓)
64.43 (↓)
71.50 (↓)
72.28 (↓)
73.21 (↓)
72.21 (↓)
PKT
67.13 (↓)
66.52 (↓)
73.01 (↓)
74.10 (↑)
74.69 (↑)
73.89 (↓)
AB
66.06 (↓)
67.20 (↓)
70.65 (↓)
73.55 (↓)
74.31 (↓)
73.34 (↓)
FT
61.78 (↓)
60.99 (↓)
70.29 (↓)
71.75 (↓)
72.50 (↓)
72.03 (↓)
NST
58.16 (↓)
64.96 (↓)
71.28 (↓)
74.12 (↑)
74.68 (↑)
74.89 (↑)
CRD
69.73 (↑)
69.11 (↑)
74.30 (↑)
75.11 (↑)
75.65 (↑)
76.05 (↑)
ProtoCPC
69.09 (↑)
69.50 (↑)
74.32 (↑)
75.24 (↑)
76.50 (↑)
76.28 (↑)"
SUPERVISED MODEL COMPRESSION,0.3654618473895582,"KD+CRD
69.94 (↑)
69.54 (↑)
74.58 (↑)
75.12 (↑)
76.05 (↑)
76.27 (↑)
ProtoCPC+CRD
69.77 (↑)
70.79 (↑)
74.95 (↑)
76.01 (↑)
76.27 (↑)
76.82 (↑)"
SUPERVISED MODEL COMPRESSION,0.36947791164658633,"Table 2: Top-1 test accuracy(%) of student networks on CIFAR-100 of a various distillation methods (ours is
ProtoCPC) for transfer across very different teacher and student architectures. ProtoCPC outperforms KD and
all other methods except CRD. Our method outperforms CRD on 4 out of 6 benchmarks. We also observe that
combining ProtoCPC and CRD boosts the performance signiﬁcantly. Average over 3 runs."
SUPERVISED MODEL COMPRESSION,0.37349397590361444,"Results on ImageNet
In Table 3, we compare our ProtoCPC to different distillation methods such
as AT (Zagoruyko & Komodakis, 2016a) and Online-KD (Lan et al., 2018) on ImageNet, where
pre-trained ResNet-34 is used for teacher and ResNet-18 is a student. We observe that ProtoCPC
outperforms various knowledge distillation baselines such as KD, and is slightly better than CRD.
Remark that our method is simpler in its implementation and shows better performance than CRD."
SUPERVISED MODEL COMPRESSION,0.37751004016064255,Published as a conference paper at ICLR 2022
SUPERVISED MODEL COMPRESSION,0.3815261044176707,"Teacher
Student
AT
KD
SP
CC
Online KD
CRD
ProtoCPC"
SUPERVISED MODEL COMPRESSION,0.3855421686746988,"Top-1
26.69
30.25
29.30
29.34
29.38
30.04
29.45
28.83
28.54
Top-5
8.58
10.93
10.00
10.12
10.20
10.83
10.41
9.87
9.49"
SUPERVISED MODEL COMPRESSION,0.3895582329317269,"Table 3: Top-1 and Top-5 error rates (%) of student network ResNet-18 on ImageNet validation set. For fair
comparison, we use same setting as in Tian et al. (2019). We compare our ProtoCPC with KD (Hinton et al.,
2015), AT (Zagoruyko & Komodakis, 2016a), SP (Tung & Mori, 2019), CC (Peng et al., 2019), Online KD (Lan
et al., 2018), and CRD (Tian et al., 2019)."
SELF-SUPERVISED MODEL COMPRESSION,0.39357429718875503,"4.2
SELF-SUPERVISED MODEL COMPRESSION"
SELF-SUPERVISED MODEL COMPRESSION,0.39759036144578314,"Setup
We experiment distillation of various self-supervised networks to ResNet-18 (He et al.,
2016) on ImageNet (Deng et al., 2009) without class labels. We consider following self-supervised
teacher networks: MoCo-v2 (Chen et al., 2020b) pre-trained ResNet-50, SwAV (Caron et al., 2020)
pre-trained ResNet-50 and DINO (Caron et al., 2021) pre-trained ResNet-50 and vision trans-
former (Dosovitskiy et al., 2020). We train for 100 epochs and we additionally conduct experiments
on using multi-crops data augmentation for SwAV and DINO pre-trained ResNet-50 networks. For
evaluation, we follow linear evaluation protocol which conducts supervised learning on the linear
layer appended at the top of the frozen feature and k-nearest neighbor classiﬁcation (k-NN)."
SELF-SUPERVISED MODEL COMPRESSION,0.40160642570281124,"Main results
Table 4 show the main results of our self-supervised model compression compared to
self-supervised learning (SSL) of itself. We observe that ProtoCPC outperforms SSL with a large
margin, especially showing superior performance in k-NN classiﬁcation. Note that our method works
well for various self-supervised teacher networks and even works well when the teacher and student
networks are of different architectures (vision transformer teacher to ResNet student)."
SELF-SUPERVISED MODEL COMPRESSION,0.40562248995983935,"MoCo ResNet-50
SwAV ResNet-50
DINO ResNet-50
DINO DeiT-S/16"
SELF-SUPERVISED MODEL COMPRESSION,0.40963855421686746,"Linear
k-NN
Linear
k-NN
Linear
k-NN
Linear
k-NN"
SELF-SUPERVISED MODEL COMPRESSION,0.41365461847389556,"Teacher
71.1
61.9
75.3
65.7
75.3
67.5
77.0
74.3"
SELF-SUPERVISED MODEL COMPRESSION,0.41767068273092367,"Supervised
69.5
69.5
69.5
69.5
69.5
69.5
69.5
69.5
SSL
52.5
36.7
57.5
48.2
58.2
50.3
58.2
50.3
ProtoCPC
61.1
55.6
63.1
57.7
63.5
60.3
65.5
63.2"
SELF-SUPERVISED MODEL COMPRESSION,0.42168674698795183,"Table 4: Main result of our ProtoCPC on distillation of various self-supervised teacher models to ResNet-18.
The teacher models are MoCo (Chen et al., 2020b) ResNet-50, SwAV (Caron et al., 2020) ResNet-50 and
DINO (Caron et al., 2021) ResNet-50 and DeiT small with patch size 16. The self-supervised denotes the result
of self-supervised learning on ResNet-18 with the same method of teacher network."
SELF-SUPERVISED MODEL COMPRESSION,0.42570281124497994,"Teacher
Method
Epochs
Linear
k-NN"
SELF-SUPERVISED MODEL COMPRESSION,0.42971887550200805,"MoCo
SEED
200
60.5
49.1
ProtoCPC
100
61.1
55.6 SwAV"
SELF-SUPERVISED MODEL COMPRESSION,0.43373493975903615,"SEED
100
61.1
-
SEED
200∗
62.6
-
ProtoCPC
100
63.1
57.7
ProtoCPC
100∗
63.9
57.0"
SELF-SUPERVISED MODEL COMPRESSION,0.43775100401606426,"DINO
ProtoCPC
100
63.5
60.3
ProtoCPC
100∗
65.3
60.7"
SELF-SUPERVISED MODEL COMPRESSION,0.44176706827309237,"Table 5: Comparison of our method with SEED. ∗de-
notes training with multi-crops. Every teacher networks
are ResNet-50 and student networks are ResNet-18."
SELF-SUPERVISED MODEL COMPRESSION,0.4457831325301205,"Comparison with SEED
Table 5 compares
our method with SEED (Fang et al., 2021), an
original method for self-supervised model com-
pression. We observe that our method consis-
tently outperforms SEED in both k-NN and lin-
ear evaluation with the same teacher network
applied. Although training for shorter epochs,
our method achieves outperforms SEED. When
the teacher is pre-trained by SwAV, our method
outperforms SEED without using multi-crops
data augmentation, and the gap becomes larger
when we use multi-crops as well. When using
DINO self-supervised teacher and multi-crops
data augmentation, we achieve the best results
in representation learning of ResNet-18."
SELF-DISTILLATION,0.4497991967871486,"4.3
SELF-DISTILLATION"
SELF-DISTILLATION,0.4538152610441767,"Setup
We evaluate our ProtoCPC objective in self-supervised learning, where we cast it as a self-
distillation. We follow DINO (Caron et al., 2021) for experimental procedures, where the teacher"
SELF-DISTILLATION,0.4578313253012048,Published as a conference paper at ICLR 2022
SELF-DISTILLATION,0.46184738955823296,"network is set by the momentum encoder, and linear prototypes are attached to the features to distill
the knowledge."
SELF-DISTILLATION,0.46586345381526106,"Architecture
Method
Linear
k-NN"
SELF-DISTILLATION,0.46987951807228917,"ResNet-50
DINO
70.9
62.3
ProtoCPC
71.8(+0.9)
63.7(+1.4)"
SELF-DISTILLATION,0.4738955823293173,"DeiT-S/16
DINO
74.0
69.3
ProtoCPC
75.0(+1.0)
70.6(+1.3)"
SELF-DISTILLATION,0.4779116465863454,"Table 6: Results of representation learning trained by
DINO (Caron et al., 2021) and ProtoCPC (ours). All
experiments are run by ours with 100 epochs."
SELF-DISTILLATION,0.4819277108433735,"mp
0.0
0.9
0.99"
SELF-DISTILLATION,0.4859437751004016,"Linear
73.4
75.0
74.5
k-NN
69.6
70.6
70.5"
SELF-DISTILLATION,0.4899598393574297,"Table 7: Ablations on ProtoCPC loss with prior momen-
tum rate mp on DeiT-S/16 trained for 100 epochs."
SELF-DISTILLATION,0.4939759036144578,"We change the loss function from cross-entropy
loss to ProtoCPC loss without any adjustment
in other settings. We use a prior momentum
rate of 0.9 for ProtoCPC loss. We evaluate on
both ResNet-50 and DeiT-S/16, where DINO
performs well on both architectures. For evalu-
ation, we report the results of linear evaluation
protocol and k-nn classiﬁcation."
SELF-DISTILLATION,0.4979919678714859,"Results
Table 6 compare the performance
of representation learning of our method and
DINO. We observe that ProtoCPC enhances the
performance of representation learning without
the adjustment of hyper-parameters. Also, in
Table 7, we demonstrate the effect of prior mo-
mentum rate mp and observe that non-zero mp
results in better representation learning."
ABLATION STUDY,0.5020080321285141,"4.4
ABLATION STUDY"
ABLATION STUDY,0.5060240963855421,"Cross-entropy v.s. ProtoCPC and Softmax v.s. Sinkhorn-Knopp
The original KD is imple-
mented by cross-entropy loss between the softmax output of the teacher and student network. Our
method uses ProtoCPC loss and SK operator for teacher network. We provide ablation studies on the
choice of the loss function and probability assignment operator on the subset of supervised model
compression tasks. In Table 8, we observe that using the SK operator boosts the performance of KD,
and using ProtoCPC loss further enhances the performance."
ABLATION STUDY,0.5100401606425703,"Teacher’s prototypes for self-supervised model compression
For prototypical self-supervised
teachers, one can use the pre-trained prototypes for distillation. We present an ablation between using
pre-trained prototypes and copying student’s prototypes for teachers. Table 9 show the results on
distillation from SwAV ResNet-50 and DINO ResNet-50 teachers. We observe that when distilling
from SwAV teacher, using pre-trained prototypes performs better, while distilling from DINO teacher,
copying from student’s prototypes performs better. We suspect that as SwAV used single prototypes
throughout pre-training, the pre-trained prototypes contain representational knowledge. On the other
hand, the pre-trained prototypes of DINO lack such representational knowledge."
ABLATION STUDY,0.5140562248995983,"Loss
pt
WRN-40-2
WRN-16-2
resnet110
resnet20
resnet110
resnet32
resnet32x4
resnet8x4
vgg13
vgg8"
ABLATION STUDY,0.5180722891566265,"CE
SM
74.92
70.67
73.08
73.33
72.98
SK
75.20
71.06
72.97
73.78
73.31"
ABLATION STUDY,0.5220883534136547,"ProtoCPC
SM
75.36
71.08
73.38
74.84
73.66
SK
75.79
71.04
73.55
75.02
73.79"
ABLATION STUDY,0.5261044176706827,"Table 8: Ablation study of losses and assignments of pt on super-
vised model compression on CIFAR-100. We compare ProtoCPC
and cross-entropy (CE), and Sinkhorn-Knopp (SK) operator and
softmax (SM) operator. Average over 5 runs."
ABLATION STUDY,0.5301204819277109,"Teacher
Method
Linear
k-NN"
ABLATION STUDY,0.5341365461847389,"SwAV
New P
60.8
54.5
Old P
63.1
57.7"
ABLATION STUDY,0.5381526104417671,"DINO
New P
63.5
60.2
Old P
60.3
56.6"
ABLATION STUDY,0.5421686746987951,"Table 9: Ablation of setting teacher’s pro-
totypes for self-supervised model compres-
sion on ResNet-18. New P denotes copy-
ing student’s prototype and Old P denotes
using pre-trained prototypes."
CONCLUSION,0.5461847389558233,"5
CONCLUSION"
CONCLUSION,0.5502008032128514,"In this paper, we propose prototypical contrastive predictive coding, a simple yet effective method
for the distillation of a network by combining the prototypical method and contrastive learning. Our
experiments show the effectiveness of our objective on various applications such as supervised/
self-supervised model compression and self-supervised learning by self-distillation."
CONCLUSION,0.5542168674698795,Published as a conference paper at ICLR 2022
REFERENCES,0.5582329317269076,REFERENCES
REFERENCES,0.5622489959839357,"Ibrahim Ahmad and Pi-Erh Lin. A nonparametric estimation of the entropy for absolutely continuous
distributions (corresp.). IEEE Transactions on Information Theory, 22(3):372–375, 1976."
REFERENCES,0.5662650602409639,"Sungsoo Ahn, Shell Xu Hu, Andreas Damianou, Neil D Lawrence, and Zhenwen Dai. Variational
information distillation for knowledge transfer. In Proceedings of the IEEE/CVF Conference on
Computer Vision and Pattern Recognition, pp. 9163–9171, 2019."
REFERENCES,0.570281124497992,"Jason Altschuler, Jonathan Weed, and Philippe Rigollet. Near-linear time approximation algorithms
for optimal transport via sinkhorn iteration. arXiv preprint arXiv:1705.09634, 2017."
REFERENCES,0.5742971887550201,"Yuki Markus Asano, Christian Rupprecht, and Andrea Vedaldi. Self-labelling via simultaneous
clustering and representation learning. arXiv preprint arXiv:1911.05371, 2019."
REFERENCES,0.5783132530120482,"Philip Bachman, R Devon Hjelm, and William Buchwalter. Learning representations by maximizing
mutual information across views. arXiv preprint arXiv:1906.00910, 2019."
REFERENCES,0.5823293172690763,"Adrien Bardes, Jean Ponce, and Yann LeCun. Vicreg: Variance-invariance-covariance regularization
for self-supervised learning. arXiv preprint arXiv:2105.04906, 2021."
REFERENCES,0.5863453815261044,"Cristian Buciluˇa, Rich Caruana, and Alexandru Niculescu-Mizil. Model compression. In Proceedings
of the 12th ACM SIGKDD international conference on Knowledge discovery and data mining, pp.
535–541, 2006."
REFERENCES,0.5903614457831325,"Mathilde Caron, Ishan Misra, Julien Mairal, Priya Goyal, Piotr Bojanowski, and Armand Joulin.
Unsupervised learning of visual features by contrasting cluster assignments. arXiv preprint
arXiv:2006.09882, 2020."
REFERENCES,0.5943775100401606,"Mathilde Caron, Hugo Touvron, Ishan Misra, Hervé Jégou, Julien Mairal, Piotr Bojanowski, and
Armand Joulin. Emerging properties in self-supervised vision transformers. arXiv preprint
arXiv:2104.14294, 2021."
REFERENCES,0.5983935742971888,"Ting Chen, Simon Kornblith, Kevin Swersky, Mohammad Norouzi, and Geoffrey Hinton. Big
self-supervised models are strong semi-supervised learners. arXiv preprint arXiv:2006.10029,
2020a."
REFERENCES,0.6024096385542169,"Xinlei Chen and Kaiming He. Exploring simple siamese representation learning. In Proceedings of
the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pp. 15750–15758, 2021."
REFERENCES,0.606425702811245,"Xinlei Chen, Haoqi Fan, Ross Girshick, and Kaiming He. Improved baselines with momentum
contrastive learning. arXiv preprint arXiv:2003.04297, 2020b."
REFERENCES,0.6104417670682731,"Xinlei Chen, Haoqi Fan, Ross Girshick, and Kaiming He. Improved baselines with momentum
contrastive learning. arXiv preprint arXiv:2003.04297, 2020c."
REFERENCES,0.6144578313253012,"Marco Cuturi. Sinkhorn distances: Lightspeed computation of optimal transport. Advances in neural
information processing systems, 26:2292–2300, 2013."
REFERENCES,0.6184738955823293,"Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale
hierarchical image database. In 2009 IEEE conference on computer vision and pattern recognition,
pp. 248–255. Ieee, 2009."
REFERENCES,0.6224899598393574,"Alexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas
Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, et al. An
image is worth 16x16 words: Transformers for image recognition at scale.
arXiv preprint
arXiv:2010.11929, 2020."
REFERENCES,0.6265060240963856,"Zhiyuan Fang, Jianfeng Wang, Lijuan Wang, Lei Zhang, Yezhou Yang, and Zicheng Liu. Seed:
Self-supervised distillation for visual representation. arXiv preprint arXiv:2101.04731, 2021."
REFERENCES,0.6305220883534136,"Jean-Bastien Grill, Florian Strub, Florent Altché, Corentin Tallec, Pierre H Richemond, Elena
Buchatskaya, Carl Doersch, Bernardo Avila Pires, Zhaohan Daniel Guo, Mohammad Gheshlaghi
Azar, et al. Bootstrap your own latent: A new approach to self-supervised learning. arXiv preprint
arXiv:2006.07733, 2020."
REFERENCES,0.6345381526104418,Published as a conference paper at ICLR 2022
REFERENCES,0.6385542168674698,"Michael Gutmann and Aapo Hyvärinen. Noise-contrastive estimation: A new estimation principle
for unnormalized statistical models. In Proceedings of the thirteenth international conference on
artiﬁcial intelligence and statistics, pp. 297–304. JMLR Workshop and Conference Proceedings,
2010."
REFERENCES,0.642570281124498,"Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image
recognition. In Proceedings of the IEEE conference on computer vision and pattern recognition,
pp. 770–778, 2016."
REFERENCES,0.6465863453815262,"Kaiming He, Haoqi Fan, Yuxin Wu, Saining Xie, and Ross Girshick. Momentum contrast for
unsupervised visual representation learning. In Proceedings of the IEEE/CVF Conference on
Computer Vision and Pattern Recognition, pp. 9729–9738, 2020."
REFERENCES,0.6506024096385542,"Byeongho Heo, Minsik Lee, Sangdoo Yun, and Jin Young Choi. Knowledge transfer via distillation
of activation boundaries formed by hidden neurons. In Proceedings of the AAAI Conference on
Artiﬁcial Intelligence, volume 33, pp. 3779–3787, 2019."
REFERENCES,0.6546184738955824,"Geoffrey Hinton, Oriol Vinyals, and Jeff Dean. Distilling the knowledge in a neural network. arXiv
preprint arXiv:1503.02531, 2015."
REFERENCES,0.6586345381526104,"R Devon Hjelm, Alex Fedorov, Samuel Lavoie-Marchildon, Karan Grewal, Phil Bachman, Adam
Trischler, and Yoshua Bengio. Learning deep representations by mutual information estimation
and maximization. arXiv preprint arXiv:1808.06670, 2018."
REFERENCES,0.6626506024096386,"Zehao Huang and Naiyan Wang. Like what you like: Knowledge distill via neuron selectivity transfer.
arXiv preprint arXiv:1707.01219, 2017."
REFERENCES,0.6666666666666666,"Jangho Kim, SeongUk Park, and Nojun Kwak. Paraphrasing complex network: Network compression
via factor transfer. arXiv preprint arXiv:1802.04977, 2018."
REFERENCES,0.6706827309236948,"Alex Krizhevsky, Geoffrey Hinton, et al. Learning multiple layers of features from tiny images. 2009."
REFERENCES,0.6746987951807228,"Xu Lan, Xiatian Zhu, and Shaogang Gong. Knowledge distillation by on-the-ﬂy native ensemble.
arXiv preprint arXiv:1806.04606, 2018."
REFERENCES,0.678714859437751,"Junnan Li, Pan Zhou, Caiming Xiong, and Steven CH Hoi. Prototypical contrastive learning of
unsupervised representations. arXiv preprint arXiv:2005.04966, 2020."
REFERENCES,0.6827309236947792,"Ningning Ma, Xiangyu Zhang, Hai-Tao Zheng, and Jian Sun. Shufﬂenet v2: Practical guidelines for
efﬁcient cnn architecture design. In Proceedings of the European conference on computer vision
(ECCV), pp. 116–131, 2018."
REFERENCES,0.6867469879518072,"Mehdi Noroozi, Ananth Vinjimoor, Paolo Favaro, and Hamed Pirsiavash. Boosting self-supervised
learning via knowledge transfer. In Proceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pp. 9359–9367, 2018."
REFERENCES,0.6907630522088354,"Aaron van den Oord, Yazhe Li, and Oriol Vinyals. Representation learning with contrastive predictive
coding. arXiv preprint arXiv:1807.03748, 2018."
REFERENCES,0.6947791164658634,"Wonpyo Park, Dongju Kim, Yan Lu, and Minsu Cho. Relational knowledge distillation. In Proceed-
ings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pp. 3967–3976,
2019."
REFERENCES,0.6987951807228916,"Nikolaos Passalis and Anastasios Tefas. Learning deep representations with probabilistic knowledge
transfer. In Proceedings of the European Conference on Computer Vision (ECCV), pp. 268–284,
2018."
REFERENCES,0.7028112449799196,"Baoyun Peng, Xiao Jin, Jiaheng Liu, Dongsheng Li, Yichao Wu, Yu Liu, Shunfeng Zhou, and
Zhaoning Zhang. Correlation congruence for knowledge distillation. In Proceedings of the
IEEE/CVF International Conference on Computer Vision, pp. 5007–5016, 2019."
REFERENCES,0.7068273092369478,"Ben Poole, Sherjil Ozair, Aaron Van Den Oord, Alex Alemi, and George Tucker. On variational
bounds of mutual information. In International Conference on Machine Learning, pp. 5171–5180.
PMLR, 2019."
REFERENCES,0.7108433734939759,Published as a conference paper at ICLR 2022
REFERENCES,0.714859437751004,"Adriana Romero, Nicolas Ballas, Samira Ebrahimi Kahou, Antoine Chassang, Carlo Gatta, and
Yoshua Bengio. Fitnets: Hints for thin deep nets. arXiv preprint arXiv:1412.6550, 2014."
REFERENCES,0.7188755020080321,"Mark Sandler, Andrew Howard, Menglong Zhu, Andrey Zhmoginov, and Liang-Chieh Chen. Mo-
bilenetv2: Inverted residuals and linear bottlenecks. In Proceedings of the IEEE conference on
computer vision and pattern recognition, pp. 4510–4520, 2018."
REFERENCES,0.7228915662650602,"Zhiqiang Shen, Zechun Liu, Jie Qin, Lei Huang, Kwang-Ting Cheng, and Marios Savvides. S2-bnn:
Bridging the gap between self-supervised real and 1-bit neural networks via guided distribution cali-
bration. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition,
pp. 2165–2174, 2021."
REFERENCES,0.7269076305220884,"Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale image
recognition. arXiv preprint arXiv:1409.1556, 2014."
REFERENCES,0.7309236947791165,"Jiaming Song and Stefano Ermon.
Multi-label contrastive predictive coding.
arXiv preprint
arXiv:2007.09852, 2020."
REFERENCES,0.7349397590361446,"Kai Tian, Shuigeng Zhou, and Jihong Guan. Deepcluster: A general clustering framework based on
deep learning. In Joint European Conference on Machine Learning and Knowledge Discovery in
Databases, pp. 809–825. Springer, 2017."
REFERENCES,0.7389558232931727,"Yonglong Tian, Dilip Krishnan, and Phillip Isola. Contrastive representation distillation. arXiv
preprint arXiv:1910.10699, 2019."
REFERENCES,0.7429718875502008,"Yonglong Tian, Dilip Krishnan, and Phillip Isola. Contrastive multiview coding. In Computer
Vision–ECCV 2020: 16th European Conference, Glasgow, UK, August 23–28, 2020, Proceedings,
Part XI 16, pp. 776–794. Springer, 2020."
REFERENCES,0.7469879518072289,"Michael Tschannen, Josip Djolonga, Paul K Rubenstein, Sylvain Gelly, and Mario Lucic. On mutual
information maximization for representation learning. arXiv preprint arXiv:1907.13625, 2019."
REFERENCES,0.751004016064257,"Frederick Tung and Greg Mori. Similarity-preserving knowledge distillation. In Proceedings of the
IEEE/CVF International Conference on Computer Vision, pp. 1365–1374, 2019."
REFERENCES,0.7550200803212851,"Tongzhou Wang and Phillip Isola. Understanding contrastive representation learning through align-
ment and uniformity on the hypersphere. In International Conference on Machine Learning, pp.
9929–9939. PMLR, 2020."
REFERENCES,0.7590361445783133,"Zhirong Wu, Yuanjun Xiong, Stella X Yu, and Dahua Lin. Unsupervised feature learning via non-
parametric instance discrimination. In Proceedings of the IEEE conference on computer vision
and pattern recognition, pp. 3733–3742, 2018."
REFERENCES,0.7630522088353414,"Junho Yim, Donggyu Joo, Jihoon Bae, and Junmo Kim. A gift from knowledge distillation: Fast
optimization, network minimization and transfer learning. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, pp. 4133–4141, 2017."
REFERENCES,0.7670682730923695,"Sergey Zagoruyko and Nikos Komodakis. Paying more attention to attention: Improving the perfor-
mance of convolutional neural networks via attention transfer. arXiv preprint arXiv:1612.03928,
2016a."
REFERENCES,0.7710843373493976,"Sergey Zagoruyko and Nikos Komodakis. Wide residual networks. arXiv preprint arXiv:1605.07146,
2016b."
REFERENCES,0.7751004016064257,"Jure Zbontar, Li Jing, Ishan Misra, Yann LeCun, and Stéphane Deny. Barlow twins: Self-supervised
learning via redundancy reduction. arXiv preprint arXiv:2103.03230, 2021."
REFERENCES,0.7791164658634538,"Xiangyu Zhang, Xinyu Zhou, Mengxiao Lin, and Jian Sun. Shufﬂenet: An extremely efﬁcient
convolutional neural network for mobile devices. In Proceedings of the IEEE conference on
computer vision and pattern recognition, pp. 6848–6856, 2018."
REFERENCES,0.7831325301204819,"Chengxu Zhuang, Alex Lin Zhai, and Daniel Yamins. Local aggregation for unsupervised learning
of visual embeddings. In Proceedings of the IEEE/CVF International Conference on Computer
Vision, pp. 6002–6012, 2019."
REFERENCES,0.7871485943775101,Published as a conference paper at ICLR 2022
REFERENCES,0.7911646586345381,"A
DETAILS IN EXPERIMENTS"
REFERENCES,0.7951807228915663,"A.1
PSEUDOCODE FOR PROTOCPC LOSS"
REFERENCES,0.7991967871485943,The PyTorch style pseudo-code for our ProtoCPC is demonstrated in Algorithm 1.
REFERENCES,0.8032128514056225,Algorithm 1 ProtoCPC loss PyTorch-style pseudocode.
REFERENCES,0.8072289156626506,"# tps, tpt: student and teacher temperatures
# m: prior momentum rate
prior = torch.ones(1, K) # initialize prior with uniform
def ProtoCPC(zt, zs):
zt = zt.detach()
pt = SK(zt / tpt)
zs = zs / tps"
REFERENCES,0.8112449799196787,"prior = m*prior + (1-m)* K * torch.mean(pt, dim=0) # sum of prior is always K"
REFERENCES,0.8152610441767069,"loss_align = -torch.sum(pt * zs, dim=1)
loss_unif = torch.logsumexp(zs + torch.log(prior), 1)
loss = loss_align + loss_unif
return loss.mean()"
REFERENCES,0.8192771084337349,"A.2
SUPERVISED MODEL COMPRESSION"
REFERENCES,0.8232931726907631,"Many of followings are borrowed from CRD (Tian et al., 2019)."
REFERENCES,0.8273092369477911,"A.2.1
OTHER METHODS
We compare to the following other state-of-the-art methods from the literature:"
REFERENCES,0.8313253012048193,"1. Knowledge Distillation (KD) (Hinton et al., 2015)"
REFERENCES,0.8353413654618473,"2. Fitnets: Hints for thin deep nets (Romero et al., 2014)"
REFERENCES,0.8393574297188755,"3. Attention Transfer (AT) (Zagoruyko & Komodakis, 2016a)"
REFERENCES,0.8433734939759037,"4. Similarity-Preserving Knowledge Distillation (SP) (Tung & Mori, 2019);"
REFERENCES,0.8473895582329317,"5. Correlation Congruence (CC) (Peng et al., 2019)"
REFERENCES,0.8514056224899599,"6. Variational information distillation for knowledge transfer (VID) (Ahn et al., 2019)"
REFERENCES,0.8554216867469879,"7. Relational Knowledge Distillation (RKD) (Park et al., 2019)"
REFERENCES,0.8594377510040161,"8. Learning deep representations with probabilistic knowledge transfer (PKT) (Passalis &
Tefas, 2018)"
REFERENCES,0.8634538152610441,"9. Knowledge transfer via distillation of activation boundaries formed by hidden neurons (AB)
(Heo et al., 2019)"
REFERENCES,0.8674698795180723,"10. Paraphrasing complex network: Network compression via factor transfer (FT) (Kim et al., 2018)"
REFERENCES,0.8714859437751004,"11. A gift from knowledge distillation: Fast optimization, network minimization and transfer
learning (FSP) (Yim et al., 2017)"
REFERENCES,0.8755020080321285,"12. Like what you like: Knowledge distill via neuron selectivity transfer (NST) (Huang & Wang, 2017)"
REFERENCES,0.8795180722891566,"13. Contrastive representation distillation (CRD) (Tian et al., 2019)"
REFERENCES,0.8835341365461847,"A.2.2
NETWORK ARCHITECTURES"
REFERENCES,0.8875502008032129,"• Wide Residual Network (WRN) (Zagoruyko & Komodakis, 2016b). WRN-d-w represnets
wide resnet with depth d and width factor w."
REFERENCES,0.891566265060241,"• resnet (He et al., 2016). We use resnet-d to represent cifar-style resnet with 3 groups of
basic blocks, each with 16, 32, and 64 channels respectively. In our experiments, resnet8 x4
and resnet32 x4 indicate a 4 times wider network (namely, with 64, 128, and 256 channels
for each of the block)"
REFERENCES,0.8955823293172691,Published as a conference paper at ICLR 2022
REFERENCES,0.8995983935742972,"• ResNet (He et al., 2016). ResNet-d represents ImageNet-style ResNet with Bottleneck
blocks and more channels.
• MobileNetV2 Sandler et al. (2018). In our experiments, we use a width multiplier of 0.5.
• vgg (Simonyan & Zisserman, 2014). the vgg net used in our experiments are adapted from
its original ImageNet counterpart.
• ShufﬂeNetV1 (Zhang et al., 2018), ShufﬂeNetV2 (Ma et al., 2018). ShufﬂeNets are proposed
for efﬁcient training and we adapt them to input of size 32x32."
REFERENCES,0.9036144578313253,"A.2.3
IMPLEMENTATION DETAILS"
REFERENCES,0.9076305220883534,All methods evaluated in our experiments use SGD.
REFERENCES,0.9116465863453815,"• For CIFAR-100, we initialize the learning rate as 0.05, and decay it by 0.1 every 30 epochs
after the ﬁrst 150 epochs until the last 240 epoch. For MobileNetV2, ShufﬂeNetV1 and
ShufﬂeNetV2, we use a learning rate of 0.01 as this learning rate is optimal for these models
in a grid search, while 0.05 is optimal for other models.
• For ImageNet, we follow the standard PyTorch practice but train for 10 more epochs. Batch
size is 64 for CIFAR-100 or 256 for ImageNet."
REFERENCES,0.9156626506024096,"The student is trained by a combination of cross-entropy classiﬁcation objective and a knowledge
distillation objective, shown as follows:"
REFERENCES,0.9196787148594378,"L = αLsup + βLdistill
(18)"
REFERENCES,0.9236947791164659,"For the weight balance factor β, we directly use the optimal value from the original paper if it is
speciﬁed, or do a grid search with teacher WRN-40-2 and student WRN-16-2. This results in the
following list of β used for different objectives:"
REFERENCES,0.927710843373494,"1. KD (Hinton et al., 2015): α = 0.1, β = 0.9 and T = 4
2. Fitnets (Romero et al., 2014): α = 1, β = 100
3. AT (Zagoruyko & Komodakis, 2016a): α = 1, β = 1000
4. SP (Tung & Mori, 2019): α = 1, β = 3000
5. CC (Peng et al., 2019): α = 1, β = 0.02
6. VID (Ahn et al., 2019): α = 1, β = 1
7. RKD (Park et al., 2019): α = 1, β1 = 25 for distance and β2 = 50 for angle. For this loss,
we combine both term following the original paper.
8. PKT (Passalis & Tefas, 2018): α = 1, β = 30000
9. AB (Heo et al., 2019): β = 0, distillation happens in a separate pre-training stage where
only distillation objective applies.
10. FT (Kim et al., 2018): α = 1, β = 500
11. FSP (Yim et al., 2017): β = 0, distillation happens in a separate pre-training stage where
only distillation objective applies.
12. NST (Huang & Wang, 2017): α = 1, β = 50
13. CRD (Tian et al., 2019): α = 1, β = 0.8"
REFERENCES,0.9317269076305221,"Similar to KD, our ProtoCPC used α = 1, β = 1.75 and temperature T = 4. For ablation study in
Table 8, we used α = 0.1, β = 0.9 for CE losses and α = 1, β = 1.75 for ProtoCPC losses."
REFERENCES,0.9357429718875502,"A.3
SELF-SUPERVISED MODEL COMPRESSION"
REFERENCES,0.9397590361445783,"A.3.1
PRE-TRAINED TEACHERS"
REFERENCES,0.9437751004016064,"• MoCo-v2 (Chen et al., 2020b) uses InfoNCE loss and momentum encoder. Since InfoNCE
requires large negatives, they pertain a large queue which updates by ﬁrst-in-ﬁrst-out rule
with features of momentum encoder. We used the MoCo-v2 ResNet-50 (He et al., 2016)
trained for 800 epochs."
REFERENCES,0.9477911646586346,Published as a conference paper at ICLR 2022
REFERENCES,0.9518072289156626,"• SwAV (Caron et al., 2020) is a prototypical method that generates probability by adopting
prototypes. They generate probability of a given feature by computing similarity with
respect to prototypes and minimize the cross-entropy between probability outputs of two
different views of an image. They used Sinkhorn-Knopp iteration for probability output.
Also, they ﬁrst proposed multi-crops strategy, which additionally use small crops of an
image to expedite the training. We used the SwAV ResNet-50 trained for 800 epochs with
multi-crops applied.
• DINO (Caron et al., 2021) is a prototypical method which uses momentum encoder. The
training progress is similar to SwAV except that they use momentum encoder on the
prototypes and use online centering before the softmax operator. They showed that their
method is effective in training vision transformer as well as convnet such as ResNet-50. We
used the DINO ResNet-50 and DeiT-S/16 (Dosovitskiy et al., 2020) trained for 800 epochs
with multi-crops applied."
REFERENCES,0.9558232931726908,We archive the checkpoints of teacher models from the author’s original implementation.
REFERENCES,0.9598393574297188,"For each method, we also conduct self-supervised learning on ResNet-18 for fair comparison. We
used same hyper-parameters that were used to train ResNet-50 except that we trained for 100 epochs.
In Table 4, we report the results of self-supervised learning on ResNet-18."
REFERENCES,0.963855421686747,"A.3.2
NETWORK ARCHITECTURES"
REFERENCES,0.9678714859437751,"We set the projection heads of student network to be same as the teacher network. When teacher is
DINO DeiT, the teacher network do not contain batch normalization, but we add batch normalization
to projection heads when training ResNet-18 student. Remark that the projection heads of MoCo
and SwAV have output dimension of 128, and the projection head of DINO has output of 256. Then
we set the number of prototypes to be K = 65536 throughout the experiments. For SwAV, since we
use pre-trained prototypes, the number of prototypes is 3000. Every features are normalized before
computation with prototypes, and prototypes are normalized during the training."
REFERENCES,0.9718875502008032,"A.3.3
TRAINING HYPERPARAMETERS"
REFERENCES,0.9759036144578314,"For probability of teacher, we use SK operator with 3 steps of iteration and τt = 0.04. For probability
of student, we set τs = 0.1. The prior momentum for ProtoCPC loss is 0.9. We use SGD optimizer
with batch size 512 and weight decay is 1e-4. The learning rate is 0.6 and is decayed by cosine
learning rate schedule to 1e-6."
REFERENCES,0.9799196787148594,"A.3.4
EVALUATION"
REFERENCES,0.9839357429718876,"For evaluation, we use both linear evaluation protocol and k-nearest neighbor classiﬁcation. For
linear evaluation protocol, we freeze the trained weight and train a linear classiﬁer at the top of the
frozen feature. We train with SGD optimizer with batch size 256 and use learning rate of 0.3 with
100 epochs. We use cosine learning rate decay schedule and we don’t use weight decay. For k-NN
classiﬁcation, we follow weighted k-NN with τ = 0.07 as done in (Wu et al., 2018)."
REFERENCES,0.9879518072289156,"A.4
SELF-DISTILLATION"
REFERENCES,0.9919678714859438,"Most of our implementation is borrowed from DINO (Caron et al., 2021). For self-distillation
experiments, we only changed cross-entropy loss to ProtoCPC loss. Detailed hyper-parameters are
following:"
REFERENCES,0.9959839357429718,"• ResNet-50: we used 2 layers MLP projection head with output dimension 65536. We trained
for 100 epochs with 2x224 + 6x96 multi-crops, batch size 512, learning rate 0.6 with cosine
annealing schedule, weight decay 1e-4, teacher temperature τt = 0.04, student temperature
τs = 0.1, prior momentum mp=0.9.
• DeiT-S/16: we used 3 layers MLP projection head with output dimension 65536. We trained
for 100 epochs with 2x224 + 8x96 multi-crops, batch size 512, learning rate 0.001 with
cosine annealing schedule, weight decay 1e-4, teacher temperature τt = 0.04, student
temperature τs = 0.1, prior momentum mp=0.9."
