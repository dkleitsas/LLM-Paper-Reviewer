Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.00558659217877095,"Recently, Neural ODE (Ordinary Differential Equation) models have been pro-
posed, which use ordinary differential equation solving to predict the output of
neural network. Due to the low memory usage, Neural ODE models can be con-
sidered as an alternative that can be deployed in resource-constrained devices (e.g.,
IoT devices, mobile devices). However, to deploy a Deep Learning model in
resource-constrained devices, low inference energy cost is also required along
with low memory cost. Unlike the memory cost, the energy consumption of the
Neural ODEs during inference can be adaptive because of the adaptive nature of
the ODE solvers. Attackers can leverage the adaptive behaviour of Neural ODEs
to attack the energy consumption of Neural ODEs. However, energy-based at-
tack scenarios have not been explored against Neural ODEs. To show the vul-
nerability of Neural ODEs against adversarial energy-based attack, we propose
NODEAttack. The objective of NODEAttack is to generate adversarial inputs
that require more ODE solvers computations, therefore increasing neural ODEs
inference-time energy consumption. Our extensive evaluation on two datasets and
two popular ODE solvers show that the samples generated through NODEAttack
can increase up to 168% energy consumption than average energy consumption of
benign test data during inference time. Our evaluation also shows the attack trans-
ferability is feasible across solvers and architectures. Also, we perform a case
study showing the impact of the generated adversarial examples, which shows
that NODEAttack generated adversarial examples can decrease 50% efﬁciency
of an object-recognition-based mobile application."
INTRODUCTION,0.0111731843575419,"1
INTRODUCTION"
INTRODUCTION,0.01675977653631285,"Deep Neural Networks (DNNs) have shown great potential in many challenging tasks (image classi-
ﬁcation, natural language process, and playing games). To cope with tasks with higher complexity,
the number of DNN parameters is increasing rapidly. Because of this reason, DNNs require con-
siderable memory usage both in training and inference. To address the issue of increased memory
usage, researchers simulate the solver of ordinary differential equation (ODE) and propose Neural
ODE techniques (Chen et al., 2018). Neural ODE does not store any intermediate quantities of the
forward pass and allows us to train DNNs with constant memory cost. Neural ODE also performs
better than traditional DNNs for irregularly sampled time series data. Because of decreased memory
cost, Neural ODEs are viable options to be used in resource-constrained devices like mobile devices
or UAVs (Unmanned Aerial Vehicle)."
INTRODUCTION,0.0223463687150838,"Due to the adaptive energy consumption of Neural ODE models (Section 3), the model robustness
in terms of energy consumption or energy robustness (Deﬁned in 4.1) of the model needs to be
investigated to deploy Neural ODE models in resource-constrained devices. Otherwise, lack of
energy robustness in Neural ODEs can lead to tragic situations. For example, we assume that Neural
ODE model is deployed for mobile apps, which are used to help visually impaired people. The
energy consumption of the model is not robust, then the battery of the mobile device will be drained
faster. This can be fatal for the visually impaired person. To avoid such scenarios, evaluating energy
robustness of Neural ODEs is required to avoid unwanted incidents."
INTRODUCTION,0.027932960893854747,Under review as a conference paper at ICLR 2022
INTRODUCTION,0.0335195530726257,"Although energy robustness of Neural ODEs has not been explored, unlike accuracy-based robust-
ness. Recent work shows that Neural ODE models are more robust against accuracy-based adver-
sarial attacks (Yan et al. (2019)) than traditional DNNs. However, ﬁnding a relationship between
input and energy consumption is more challenging because the relation between input and energy
consumption of DNNs is not well-deﬁned. To explore the energy robustness of Neural ODEs, the
relationship between input and energy consumption of Neural ODEs needs to be deﬁned."
INTRODUCTION,0.03910614525139665,"Recent works, ILFO (Haque et al. (2020)) and DeepSloth (Hong et al. (2020)), have evaluated
energy robustness of Adaptive Neural Networks (AdNNs) by proposing white-box attack. However,
optimizing the loss function proposed by the aforementioned AdNN attacks can not evaluate the
energy robustness of Neural ODEs. AdNNs activate or deactivate certain components of DNNs
based on the intermediate outputs of certain computing units and consumes a different amount of
energy based on different inputs. Both the attack’s objective is to increase the number of activated
DNN components by modifying the speciﬁc computing unit outputs, and both attack use speciﬁc
loss function optimization to achieve that. However, Neural ODE functionality is different than
traditional AdNN functionality because, for Neural ODE, no component is deactivated or activated
during inference. The adaptive behavior of a Neural ODE model depends on the adaptive ODE
solver used to predict the output. Furthermore, for a speciﬁc trained Neural ODE model, we can
ﬁnd variable energy consumption for single input depending on the type of ODE solver used, where
for traditional AdNNs, energy consumption based on a speciﬁc input will be the same always for a
speciﬁc trained AdNN. Therefore, a novel approach is needed to explore the energy robustness of
Neural ODEs."
INTRODUCTION,0.0446927374301676,"To explore the energy robustness of Neural ODEs, We propose NODEAttack, a white-box ap-
proach that uses step-size of the ODE solvers to formulate attack. ODE solvers use an iterative way
to approximate a function, and the objective of our approach is to increase the number of iterations,
increasing the energy consumption of Neural ODEs. Our attack formulation is based on the fact that
decreasing step-size would increase the number of iterations. Speciﬁcally, we develop two attack
techniques to evaluate Neural ODE’s energy robustness, namely Input-based attack and Universal
attack. Input-based attack evaluates energy robustness where testing inputs are semantically mean-
ingful to the Neural ODE model (e.g., meaningful images). On the other hand, Universal attack
evaluates worst-case energy robustness where each testing input maximizes the energy consumption
for each target ODE solver. To the best of our knowledge, this is the ﬁrst energy-based adversarial
attack against Neural ODEs."
INTRODUCTION,0.05027932960893855,"We evaluate NODEAttack on mainly two criteria:
effectiveness and transferability using
the CIFAR-10 and MNIST datasets (Krizhevsky et al. (2009); Deng (2012)).
We evaluated
NODEAttack on two popular ODE solvers: Dopri5 (Dormand and Prince (1980)) and Adaptive
Heun S¨uli and Mayers (2003). We evaluate the the effectiveness of NODEAttack against natural
perturbations and corruptions Hendrycks and Dietterich (2019a). We observed that NODEAttack
generated adversarial inputs can increase up to 168 % energy consumption than the average energy
consumed by benign test inputs. Also, we noticed that transferability is feasible between two Neural
ODEs differentiated by ODE solver or model architecture."
INTRODUCTION,0.055865921787709494,Our paper makes the following contributions:
INTRODUCTION,0.061452513966480445,"• Problem Formulation and Approach. Our work is the ﬁrst attempt to formulate energy-
based adversarial attack against Neural ODE models. Also, our work proposes a novel loss
function based on step-size of ODE solvers to generate adversarial inputs."
INTRODUCTION,0.0670391061452514,"• Evaluation. We evaluate our approach across two ODE solvers and two datasets based on
two criteria."
BACKGROUND AND RELATED WORKS,0.07262569832402235,"2
BACKGROUND AND RELATED WORKS"
NEURAL ORDINARY DIFFERENTIAL EQUATIONS,0.0782122905027933,"2.1
NEURAL ORDINARY DIFFERENTIAL EQUATIONS"
NEURAL ORDINARY DIFFERENTIAL EQUATIONS,0.08379888268156424,"Neural Ordinary Differential Equations (Neural ODE) (Chen et al. (2018)) have been successful
in attaining accuracy close to the State of the Art DNN techniques but with lesser memory con-
sumption. Neural ODEs incorporate Ordinary Differential Equations solvers into Neural Network"
NEURAL ORDINARY DIFFERENTIAL EQUATIONS,0.0893854748603352,Under review as a conference paper at ICLR 2022
NEURAL ORDINARY DIFFERENTIAL EQUATIONS,0.09497206703910614,"architectures. Models such as residual networks and recurrent neural network decoders create com-
plicated transformations by devising a sequence of transformations to a hidden state:"
NEURAL ORDINARY DIFFERENTIAL EQUATIONS,0.1005586592178771,"ht+1 = ht + f(ht,θt)"
NEURAL ORDINARY DIFFERENTIAL EQUATIONS,0.10614525139664804,"Operation of a residual block can be interpreted as the discrete approximation of an ODE where the
discretization step value is one. In a neural ODE, the discretization step is set to zero and the relation
between input, and output is characterized by the following set of equations: dh(t)"
NEURAL ORDINARY DIFFERENTIAL EQUATIONS,0.11173184357541899,"dt
= f(h(t),t,θ),h(0) = hin,hout = h(T)"
NEURAL ORDINARY DIFFERENTIAL EQUATIONS,0.11731843575418995,Solving h(T) gives the output and ODE solvers can be used for that purpose.
NEURAL ORDINARY DIFFERENTIAL EQUATIONS,0.12290502793296089,"Additionally, Proposed work by Quaglino et al. (2019) expresses the Neural ODE dynamics as
truncated series of Legendre polynomials and accelerate the model. Dupont et al. (2019) explores
the limitations in approximation capabilities of neural ODEs because of the preserving of input
topology. Recent work by Yan et al. (2019) explore the robustness of Neural ODEs against Neural
ODEs and propose TisODE to increase the robustness of Neural ODEs. However, no other work has
focused on the energy robustness perspective or Neural ODEs, and to our knowledge, this is the ﬁrst
work in that direction."
RUNGE KUTTA METHOD,0.12849162011173185,"2.2
RUNGE KUTTA METHOD"
RUNGE KUTTA METHOD,0.1340782122905028,"Runge Kutta method (Runge (1895); Kutta (1901)) is an ODE solver which solved ordinary differ-
ential equations through approximation. First-order differential equation given by,
dy(t)"
RUNGE KUTTA METHOD,0.13966480446927373,"dt
= y
′(t) = f(y(t),t)"
RUNGE KUTTA METHOD,0.1452513966480447,", with y(t0) = y0 Here y is an function of time t and y∗is the value of y at t = 0. Four slope
approximations k1,k2,k3,k4 are used to estimate approximate value of y (y∗) at t = t0 (Detailed
equation in Appendix)."
RUNGE KUTTA METHOD,0.15083798882681565,"Final estimate of y∗(t0 + h) can be represented as,"
RUNGE KUTTA METHOD,0.1564245810055866,y∗(t0 + h) = y∗(t0) + (1
RUNGE KUTTA METHOD,0.16201117318435754,6.k1 + 1
RUNGE KUTTA METHOD,0.16759776536312848,3.k2 + 1
RUNGE KUTTA METHOD,0.17318435754189945,3.k3 + 1
RUNGE KUTTA METHOD,0.1787709497206704,6.k4).h
RUNGE KUTTA METHOD,0.18435754189944134,"Here, h is the step size. This is called fourth order Runge Kutta Method, because the local error
(approximation error at a particular time ) for step-size h is O(h4). For better approximation of
function, multiple works (Dormand and Prince (1980); S¨uli and Mayers (2003)) have proposed to
use adaptive step size."
ADVERSARIAL EXAMPLES,0.18994413407821228,"2.3
ADVERSARIAL EXAMPLES"
ADVERSARIAL EXAMPLES,0.19553072625698323,"Adversarial Examples are the inputs that are fed to machine learning models to change the prediction
of the model. In earlier works by Dalvi et al. (2004); Lowd and Meek (2005); D.Lowd and C.Meek
(2005), ‘good word attacks’ or spelling modiﬁcations have long been used to bypass the spam ﬁlters.
More recently, Szegedy et al. (2013) and Goodfellow et al. (2014) propose adversarial attacks on
deep computer vision models. Karmon et al. (2018) propose a technique to attack CNNs in which a
localized patch is introduced in an image instead of adding noise to the full image. With a similar
approach, adversarial attacks have been extended to various ﬁelds like text and speech processing
(Carlini et al. (2016); Jia and Liang (2017)), and graph models (Z¨ugner et al. (2018); Bojchevski and
G¨unnemann (2019)). Recently, Haque et al. (2020); Hong et al. (2020) have proposed adversarial
energy based attacks against Adaptive Neural Networks. However, as mentioned in the introduction,
existing attacks can not be used to increase energy consumption of Neural ODEs."
ADAPTIVE NATURE OF NEURAL ODE,0.2011173184357542,"3
ADAPTIVE NATURE OF NEURAL ODE"
ADAPTIVE NATURE OF NEURAL ODE,0.20670391061452514,"In this section, we discuss the reason of adaptive energy consumption of Neural ODEs. As discussed
in Section 2, ODE solvers use iterative approximation to calculate the function value at a certain"
ADAPTIVE NATURE OF NEURAL ODE,0.2122905027932961,Under review as a conference paper at ICLR 2022
ADAPTIVE NATURE OF NEURAL ODE,0.21787709497206703,"point. If the number of iterations is increased, the function f is needed to be calculated for a higher
number of times, increasing the energy consumption of the process. The number of iterations can
be increased by decreasing the step-size, which we discuss in Section 4.2."
ADAPTIVE NATURE OF NEURAL ODE,0.22346368715083798,"#iters=3
#iters=4 65 70 75 80 85 90 95 100"
ADAPTIVE NATURE OF NEURAL ODE,0.22905027932960895,Average Energy Consumption
ADAPTIVE NATURE OF NEURAL ODE,0.2346368715083799,"Figure 1: Difference in en-
ergy consumption with differ-
ent number of iterations,"
ADAPTIVE NATURE OF NEURAL ODE,0.24022346368715083,"We also have investigated the adaptive nature of Neural ODEs
through a preliminary study. We have trained a Neural ODE CNN
model (Chen et al. (2018)) with MNIST (Deng (2012)) training data
and used the MNIST test data for inference. For ODE solver, we
used dopri5 (Dormand and Prince (1980)) ODE solver. For each
test data, we measure energy consumption using Nvidia TX2 server."
ADAPTIVE NATURE OF NEURAL ODE,0.24581005586592178,"From the results, we have noticed that ODE solver takes a different
number of iterations (3 and 4 in this experiment) to approximate
a function. Figure 1 describes our ﬁndings. When the number of
iterations is 3, average energy consumption drops more than 15J.
However, the range of inference energy consumption is limited is
low for benign in-distribution data."
NODEATTACK,0.25139664804469275,"4
NODEATTACK"
NODEATTACK,0.2569832402234637,"We elaborate the approach of NODEAttack through this section. First, we deﬁne two types of
energy robustness in this section. Based on the deﬁnitions, we formulate the problem and propose
two type of energy attacks against Neural ODEs."
ENERGY ROBUSTNESS,0.26256983240223464,"4.1
ENERGY ROBUSTNESS"
ENERGY ROBUSTNESS,0.2681564245810056,"We deﬁne energy robustness for Neural ODEs in two ways: Input-based Energy Robustness (Ei)
and Universal Energy Robustness (Eu). Ei is deﬁned based on the maximum energy consumed by
the model for an input which belongs to the training data distribution of the model. Let us assume, x
is an input that is within the data distribution of a DNN f. We want to add perturbation δ to x such
that energy consumption is maximum. In that scenario, Ei can be represented as,"
ENERGY ROBUSTNESS,0.2737430167597765,"Ei = −max
δ∈R ENGf(x + δ)"
ENERGY ROBUSTNESS,0.27932960893854747,", where R is set of admissible perturbations such that x + δ remains within distribution, and ENGf
represents the energy consumption of DNN f."
ENERGY ROBUSTNESS,0.2849162011173184,"Eu can be described based on the highest possible energy consumed by a model for any input. Inputs
used to measure Eu can be out-of-distribution inputs also. For a DNN f and any input x, Eu can be
represented as,
Eu = −max
x
ENGf(x)"
ENERGY ROBUSTNESS,0.2905027932960894,", where ENGf represents energy consumption of DNN. As Ei and Eu represents the highest energy
consumption in two different cases, if we increase the the value of Ei and Eu, the maximum energy
consumption of the model would decrease. As our objective is to decrease model’s maximum energy
consumption, by increasing the value of Ei and Eu, energy robustness of a model can be increased."
PROBLEM FORMULATION,0.29608938547486036,"4.2
PROBLEM FORMULATION"
PROBLEM FORMULATION,0.3016759776536313,"The objective of our approach is to create adversarial samples which can increase energy consump-
tion of Neural ODEs. For this purpose, we mainly focus on increasing the number of iterations
needed for approximation in ODE solvers. As the energy consumption to approximate a value at
any point using ODEs does not vary signiﬁcantly across all the points, increasing the number of
iteration would increase the energy consumption in Neural ODEs."
PROBLEM FORMULATION,0.30726256983240224,"The number of iteration in an ODE solver is dependent on the step size. Each ODE solver approxi-
mates the function based on differentiation of the function at different instance and step-size. ODE
solvers modify the step-size based on the function slope. If the slope is high, then a smaller step-size
is required for the approximation. For smaller step-size, the solver would use more iteration for
approximation causing higher energy and time consumption. However, if the slope is low, larger
step size can be used for approximation."
PROBLEM FORMULATION,0.3128491620111732,Under review as a conference paper at ICLR 2022
PROBLEM FORMULATION,0.31843575418994413,"For ODE solvers, step-size is modiﬁed based on difference in approximations when the function is
approximated multiple times at time t. The multiple approximations can be performed with differ-
ent step-size, or with using a higher order and a lower order approximation (Press and Teukolsky
(1992)). For example, Runge-Kutta-Fehlberg (Fehlberg (1969)) Method creates two different Runge
Kutta method with different orders (order four and ﬁve), but with same intermediate values 1. The
ﬁfth order approximation at time t = t0 + h can be represented as,"
PROBLEM FORMULATION,0.3240223463687151,"y5(t0 + h) = y5(t0) + c1.k1 + c2.k2 + c3.k3 + c4.k4 + c5.k5 + c6.k6
and, the fourth order approximation at time t = t0 + h is,"
PROBLEM FORMULATION,0.329608938547486,"y4(t0 + h) = y4(t0) + d1.k1 + d2.k2 + d3.k3 + d4.k4 + d5.k5 + d6.k6
Here, k1,k2,k3,k4,k5,k6 are the intermediate values, c1,c2,c3,c4,c5,c6,d1,d2,d3,d4,d5,d6 are
the constants. The difference between both approximations can be deﬁned as error estimate,"
PROBLEM FORMULATION,0.33519553072625696,∆≡y5 −y4
PROBLEM FORMULATION,0.3407821229050279,". Based on the value of ∆at a certain t, next step-size is calculated. If the error value ∆is greater
than a certain desired error value, then the step size is decreased than the previously used step size,
on the other hand, if ∆is lesser than the desired error value, the step size is increased. Therefore, it
can be concluded that the adaptive step size is dependent on ∆."
PROBLEM FORMULATION,0.3463687150837989,"As the adaptive step size is dependent on ∆, and the ∆is dependent on multiple approximations
of the function, we can refer that the adaptive-step-size is dependent of the initial value of t (t0).
Therefore, for a Neural ODE, the adaptive-step-size and the number of iterations to approximate
the function will be a function of the model input. We assume that a solver takes N(X) iterations
to approximate a function for input X, where h1(X),h2(X),..hN(X) is the step-size used for N
iterations. We deﬁne the average step-size as,"
PROBLEM FORMULATION,0.35195530726256985,havg(X) = h1(X) + h2(X) + .. + hN(X) N(X)
PROBLEM FORMULATION,0.3575418994413408,"We have mainly two objectives. Our ﬁrst goal is to ﬁnd the input X for which havg(X) is minimum
to evaluate the Universal Energy Robustness (Eu) of Neural ODEs."
PROBLEM FORMULATION,0.36312849162011174,"Xadv = argmin
X
havg(X)"
PROBLEM FORMULATION,0.3687150837988827,"Our second objective is to evaluate Input-based Energy Robustness of Neural-ODEs. To address that,
we ﬁnd the perturbation δ, which can be added to an in distribution input X such that havg(X + δ)
is minimum.
δadv = argmin
δ∈R
havg(X + δ)"
PROBLEM FORMULATION,0.3743016759776536,"Here, R is set of admissible perturbations such that x + δ remains within distribution"
APPROACH,0.37988826815642457,"4.3
APPROACH"
APPROACH,0.3854748603351955,"For exploring the energy robustness of Neural ODEs, we use a gradient-based optimization tech-
nique to create adversarial inputs. Based on the objectives deﬁned in Section 4.2, we propose two
strategies to evaluate Neural ODE: Input-based attack and Universal attack."
APPROACH,0.39106145251396646,"Input-based attack. In this approach, we create adversarial inputs for each input image such that
the semantic meaning of the input is preserved. We assume that x is a test input. Our objective is
to ﬁnd perturbation δ, adding which the energy consumption of the model increases. We can deﬁne
the problem as,"
APPROACH,0.39664804469273746,"minimize(∣δ∣+ c ⋅f(x + δ)) such that, (x + δ) ∈[0,1]n
(1)"
APPROACH,0.4022346368715084,"where f(x + δ) = havg(x + δ) and c is a predeﬁned constant. If c value increases, the average step
size would have greater weightage in the optimization problem, leading to a more noisy input."
APPROACH,0.40782122905027934,"The algorithm is explained through Figure 2 and Algorithm 1. The algorithm can be divided into
following parts. Initializing Perturbation is the ﬁrst step where we initialize different variables, in-
cluding perturbation, which are going to be modiﬁed by the optimization. All the next steps are"
APPROACH,0.4134078212290503,"1For the equation mentioned in Section 2.2, k1,..k4 are the intermediate values"
APPROACH,0.41899441340782123,Under review as a conference paper at ICLR 2022
APPROACH,0.4245810055865922,"performed iteratively. In the second step (Get Step Size), the average step size of the ODE solver
is calculated based on the modiﬁed input generated after adding the initialized perturbation to input
image. Next, we calculate the loss function value based on average step size and optimize the func-
tion (Optimizing Loss Function). Then, we denormalize and normalize the modiﬁed input to nullify
the effect of information loss due to denormalization (Denormalizing and Normalizing Adversarial
Input). Next, we consider the perturbation added to denormalized input as updated perturbation and
we calculate the number of steps induced by denormalized input. If the current number of steps is
greater than previously recorded number of steps, we store the current input perturbation as most
successful perturbation (Update Perturbation and Record Most Successful Perturbation). All the
aforementioned steps are explained below."
APPROACH,0.4301675977653631,Benign Inputs
APPROACH,0.43575418994413406,"Initialize
Perturbation"
APPROACH,0.441340782122905,Get Step Size
APPROACH,0.44692737430167595,Optimize Loss
APPROACH,0.45251396648044695,"Function
Denormalizing and"
APPROACH,0.4581005586592179,Normalizing
APPROACH,0.46368715083798884,"Update
Perturbation"
APPROACH,0.4692737430167598,Record Most
APPROACH,0.4748603351955307,"Successful
Perturbation"
APPROACH,0.48044692737430167,Adversarial
APPROACH,0.4860335195530726,Inputs
APPROACH,0.49162011173184356,Figure 2: Overview of Input-based Attack
APPROACH,0.4972067039106145,"Initializing
Perturbation:
This
step is used for initializing vari-
ables.
We initialize perturbation
(δ), maximum recorded iteration of
ODE solver(Max N), and highest
energy-consuming adversarial input
(X best) (Line 2).
Number of
iterations (T) is also initialized (Line
3)."
APPROACH,0.5027932960893855,"Get Step Size: In this step, a per-
turbed image (X′) is generated by
adding initialized perturbation (δ) to
the input image (X) (Line 6). Then, scale method re-scales the X′ using tanh function. Next,
average step size of the solver for X′ is received using avg step size method (Line 7)."
APPROACH,0.5083798882681564,"Optimizing Loss Function: In this step, the loss function value is calculated ﬁrst. The loss func-
tion L consists of two components: ﬁrst, the euclidean distance between the input image (X) and
perturbed image (X′) (calculated on Line 8), and the average step size (havg). The loss function
is optimized and updated perturbation (δ new) and optimized loss function (L new) is generated
(Line 10). Perturbation variable (δ) is updated using δ new (Line 11)."
APPROACH,0.5139664804469274,Algorithm 1 Input-based Technique
APPROACH,0.5195530726256983,"1: procedure INPUT-BASED TECHNIQUE(X,c)
2:
Initialize δ, X best, max N
3:
T ←number of iterations
4:
iter ←0
5:
while iter < T do
6:
X′ ←scale(δ + X)
7:
havg ←avg step size(X′)
8:
dist ←distance(X′, X)
9:
L ←dist + c ⋅havg
10:
L new, δ new ←optimizer(L, δ)
11:
δ ←δ new
12:
X′′ ←denormalize(X′)
13:
X′′′ ←normalize(X′′)
14:
N ←get no of steps(X′′′)
15:
if max N < N then
16:
X best ←X′′′
17:
max N ←N
18:
end if
19:
end while
20: end procedure"
APPROACH,0.5251396648044693,"Denormalizing and Normalizing Adversar-
ial Input: Adversarial attacks are generally
performed on normalized inputs; therefore,
while denormalizing the generated input, there
can be information loss as the pixel values are
discrete. We have noticed that those informa-
tion losses can be signiﬁcant in terms of energy
consumption of the particular input. To make
sure that the desired energy consumption of the
ﬁnal adversarial input can not be modiﬁed by
the information loss, we denormalize and then
again normalize the generated input X′ (Line
12 and 13). By adding this step, we ensure that
there will not be any information loss while de-
normalizing the ﬁnal adversarial input."
APPROACH,0.5307262569832403,"Update Perturbation and Record Most Suc-
cessful Perturbation: In this step, ﬁrst, we cal-
culate number of steps induced by X′′′ (Line
14). If the current number of steps in ODE solver (N) is greater than the recorded maximum number
of iterations (max N) (Line 15), max N variable is updated (Line 17) and the current adversarial
input is recorded as highest energy-consuming adversarial sample (X best) (Line 16). When the
iterations are ﬁnished, X best is returned as the perturbed output image."
APPROACH,0.5363128491620112,"Universal attack. For Universal attack, we create adversarial inputs for which the energy consump-
tion of the model during inference will be highest. In this approach, we do not preserve the semantic
meaning of input. Therefore, we do not need to minimize the perturbation (δ) added to the input.
Hence, δ is not required to deﬁne Universal attack. Similarly as equation 1, we can deﬁne universal"
APPROACH,0.5418994413407822,Under review as a conference paper at ICLR 2022
APPROACH,0.547486033519553,"attack as,"
APPROACH,0.553072625698324,"minimize(f(x + δ)) such that, (x + δ) ∈[0,1]n
(2)"
APPROACH,0.5586592178770949,where x is the input and f(x + δ) = havg(x + δ).
EVALUATION,0.5642458100558659,"5
EVALUATION"
EVALUATION,0.5698324022346368,"We evaluate the performance of our techniques on two popular different adaptive ode solvers, Do-
pri5 (Dormand and Prince (1980)) and Adaptive Heun (S¨uli and Mayers (2003)). We explore
the Effectiveness and Transferability of NODEAttack through this section. To evaluate effective-
ness of NODEAttack, we evaluate how much increase in energy consumption is achievable by
NODEAttack on different datasets. To evaluate transferability of NODEAttack, we explore if ad-
versarial inputs generated for one solver/architecture can increase the energy consumption for other
solver/architecture."
EXPERIMENTAL SETUP,0.5754189944134078,"5.1
EXPERIMENTAL SETUP"
EXPERIMENTAL SETUP,0.5810055865921788,"Datasets and Models. For evaluation, CIFAR-10 dataset (Krizhevsky et al. (2009)) and MNIST
dataset (Deng (2012)) have been used for the training of the Neural ODE model. We use ODENet
Convolutional Neural Network (CNN) models proposed by Chen et al. (2018) as the trained Neural
ODE models. The main difference between model architectures used for CIFAR-10 and MNIST
is in the input number of channels. For generating Input-based attack we consider c=10000 for
CIFAR-10 and c=1000 for MNIST dataset."
EXPERIMENTAL SETUP,0.5865921787709497,"Baseline. As there are no existing energy-based attack on Neural ODEs, we compare our technique
with natural corruption and perturbation techniques (Hendrycks and Dietterich (2019b)) for CIFAR-
10 dataset. These techniques are commonly used (Xie et al. (2020); Geirhos et al. (2018); Ovadia
et al. (2019)) to evaluate the robustness of neural networks. For MNIST dataset, we use random
Gaussian noise (Cattin, 2013) as baseline."
EXPERIMENTAL SETUP,0.5921787709497207,"Hardware Platform. We use the Nvidia Jetson TX2 board for our energy consumption calculations
used to evaluate Neural ODEs. To avoid noise in calculated energy consumption, we measure the
energy consumption of an inference 20 times, discard the outliers and measure the mean of the
remaining values."
EFFECTIVENESS,0.5977653631284916,"5.2
EFFECTIVENESS"
EFFECTIVENESS,0.6033519553072626,"Cor1
Cor2
Cor3
Cor4
Cor5
Uni 100 110 120 130 140 150"
EFFECTIVENESS,0.6089385474860335,Effect of different attacks on Dopri5
EFFECTIVENESS,0.6145251396648045,(a) Dopri5 (Universal)
EFFECTIVENESS,0.6201117318435754,"Cor1
Cor2
Cor3
Cor4
Cor5
Uni 300 400 500 600 700"
EFFECTIVENESS,0.6256983240223464,Effect of different attacks on Adaptive Heun
EFFECTIVENESS,0.6312849162011173,(b) Heun (Universal)
EFFECTIVENESS,0.6368715083798883,"Figure 3: Energy consumption induced by Universal and corruption
techniques on different ODE solvers"
EFFECTIVENESS,0.6424581005586593,"We have measured the ef-
fectiveness of Input-based
attack by measuring the
average increase in energy
consumption
(in
Joule)
during the inference with
respect to benign inputs,
where
we
measure
the
effectiveness
of
Univer-
sal
attack
by
recording
the highest energy con-
sumption
achieved
by
the adversarial examples
during the inference.
We
measure the effectiveness of our approach for CIFAR-10 and MNIST datasets. For CIFAR-10
dataset, we use images generated by common perturbations and corruptions as baseline. Effec-
tiveness of Universal attack has been measured against the corruption techniques because, in both
cases, the noise present in the input is human perceptible. As the Input-based attack adds small
perturbation to the input, the effectiveness of Input-based attack is measured against the perturbation
techniques. For comparison, we use the ﬁve best performing corruptions and perturbations in terms
of average energy consumption."
EFFECTIVENESS,0.6480446927374302,Under review as a conference paper at ICLR 2022
EFFECTIVENESS,0.6536312849162011,"Figures 3 and 4 show the effectiveness of NODEAttack on Dopri5 and Adaptive Heun solvers for
CIFAR-10 datasets. It can be observed that, for all four scenarios, NODEAttack is able to generate
higher energy consuming examples than baseline methods. For Universal attack, NODEAttack
is able to increase 125% and 50% of the energy consumption of Neural ODE model with re-
spect to average energy consumed by benign CIFAR-10 test data, for Adaptive Heun and Dopri5
solvers, respectively. For Input-based attack, for Adaptive Heun and Dopri5 solvers respectively,
NODEAttack is able to increase 47% and 30% of the energy consumption (in average) of Neural
ODE model than energy consumed by CIFAR-10 test images."
EFFECTIVENESS,0.659217877094972,"Per1
Per2
Per3
Per4
Per5
IP 0 5 10 15 20 25 30"
EFFECTIVENESS,0.664804469273743,Increase in Energy Consumption (J)
EFFECTIVENESS,0.6703910614525139,(a) Dopri5
EFFECTIVENESS,0.6759776536312849,"Per1
Per2
Per3
Per4
Per5
IP 0 100 200 300"
EFFECTIVENESS,0.6815642458100558,Increase in Energy Consumption (J)
EFFECTIVENESS,0.6871508379888268,(b) Heun
EFFECTIVENESS,0.6927374301675978,"Figure 4: Energy consumption increased by Input-based and Pertur-
bation techniques on different ODE solvers"
EFFECTIVENESS,0.6983240223463687,"For MNIST dataset, the av-
erage energy consumption
increased by Input-based
attack is 72J (31.85% avg
increase) and 15J (21.4%
avg increase) for Adaptive
Heun and Dopri5, respec-
tively. For the same datat-
set, Gaussian random noise
can increase 7.9J (3.5% avg
increase) and 2.1J (2.94%
avg increase) for Adaptive
Heun and Dopri5, respec-
tively. Therefore, Input-based attack outperforms the baseline in terms of increase in energy con-
sumption. For Universal attack, the average energy consumption induced for Adaptive Heun solver
is 625J (168% increase than average energy consumed by MNIST test data), where the average en-
ergy consumption induced for Dopri5 solver is 100J (42.8% increase than average energy consumed
by MNIST test data)."
TRANSFERABILITY,0.7039106145251397,"5.3
TRANSFERABILITY"
TRANSFERABILITY,0.7094972067039106,"In this section, we try to evaluate the transferability of the Input-based attack on different ODE
solvers and on network architectures. To measure the transferability, we have selected 1000 im-
ages randomly. To evaluate the transferability of our attack, we will measure two parameters:
1.
What percentage of adversarial inputs can increase the energy consumption for the other
solver/architecture? This is called Input Transferability Percentage (ITP) 2. What is the average per-
centage increase in energy consumption enforced by adversarial inputs in other solver/architecture?
This is called Effectiveness Transferability Percentage (ETP). To evaluate solver-based transferabil-
ity, we consider two aforementioned solver with same network architecture. Table 1 shows our
ﬁndings. We can observe that transferability can exist between two solvers. It can be noticed that
created adversarial inputs for Adaptive Heun are more effective against Dopri5 solver in terms of
transferability."
TRANSFERABILITY,0.7150837988826816,"Type BS
AS Dopri5 Adaptive Heun"
TRANSFERABILITY,0.7206703910614525,"ITP
Dopri5
–
85.3
Adaptive Heun
92.5
–"
TRANSFERABILITY,0.7262569832402235,"ETP
Dopri5
–
17.09
Adaptive Heun
27.2
–"
TRANSFERABILITY,0.7318435754189944,"Table 1: ITP and ETP values for measuring trans-
ferability between Dopri5 and Adaptive Heun
solvers.
AS represents Attacked Solver and BS
represents Base Solver."
TRANSFERABILITY,0.7374301675977654,"To evaluate network-based transferability, we
consider Adaptive Heun ODE solver with two
different Neural ODE architecture (M1 and
M2). M1 is the larger model that has an ex-
tra convolutional layer than M2. For M2 to M1
transferability, the ITP is 61.8%, however the
ETP is lower (2.6%).
For M1 to M2 trans-
ferability, the ITP is 80%, and the ETP is
slightly higher than previously calculated ETP
(4.8%). Therefore, we can observe that cross-
architectural transferability is feasible for this
attack. Additional evaluation on transferability can be found in the appendix."
TRANSFERABILITY,0.7430167597765364,"6
CASE STUDY."
TRANSFERABILITY,0.7486033519553073,"Through a case study, we have tried to demonstrate practical scenarios which can show the adverse
effects of energy attack on Neural ODEs. In this section, we discuss how NODEAttack generated"
TRANSFERABILITY,0.7541899441340782,Under review as a conference paper at ICLR 2022
TRANSFERABILITY,0.7597765363128491,"samples can be used to design poisoning attack against Neural ODE based executable models, which
are used for mobile applications. The poisoning attack is designed based on the features of popular
DNN compilers; therefore, we will brieﬂy discuss the functionality of DNN compilers ﬁrst."
TRANSFERABILITY,0.7653631284916201,"DNN compilers Li et al. (2020) are used to generate executable models for resource-constrained
devices because Deep Learning (DL) libraries have not been able to use the hardware efﬁciently.
DNN compilers take the model deﬁnitions described in the DL frameworks as inputs and then gen-
erate efﬁcient code implementations on various DL hardware as outputs. The generic architecture
of DNN compiler can be divided into two parts: frontend and backend. Each part uses speciﬁc
intermediate data representation (IR). The frontend takes a DL model from existing DL frameworks
as input Then transforms the model into the computation graph representation. DAG-based IR (in
frontend) is one of the most traditional ways for the compilers to build a computation graph. In this
IR, operators and tensors are treated as nodes and edges, respectively and they are organized as a
directed acyclic graph (DAG). It has deﬁciencies such as semantic ambiguity caused by the missing
deﬁnition of computation scope."
TRANSFERABILITY,0.770949720670391,"The poisoning attack is designed based on the feature of popular DNN compilers: The compu-
tational graph generated to create executable model by the DNN compiler is a Directed Acyclic
Graph. The generated computational graph is created using a base input sample. When we feed a
Neural ODE model to generate an executable, the generated graph assumes that the step-size cal-
culated for the base sample is static for all samples (because the adaptive step size calculation is
not captured through DAG). Because of the feasible cross-solver and cross-network transferabil-
ity, if NODEAttack generated energy surging adversarial examples as the base sample, the energy
consumption for each input will be high."
TRANSFERABILITY,0.776536312849162,"Experiment. In this experiment, we use two Neural ODE executable models with Adaptive Heun
ODE solver to detect objects through a mobile application. Both executable models are generated
based on a base CNN trained on CIFAR-10 dataset. The ﬁrst executable ﬁle is initialized with
a benign sample (no of iterations = 43), where the second executable ﬁle is initialized with an
adversarial energy-surging sample generated through Input-based attack (no of iterations = 88). To
create the executable ﬁles, we use pytorch mobile (Paszke et al. (2019)). Based on each executable
model, we create an android application. For each application, we feed inputs to the model till the
battery is drained fully. We also ensure that there is no other application running on the mobile
during the same time."
TRANSFERABILITY,0.7821229050279329,"For the executable ﬁle initialized with the benign sample, the number of classiﬁcations completed by
the model is 30,188 before the battery is drained fully. While for the executable ﬁle initialized with
the adversarial sample, the number of classiﬁcations done by the model is 15,102 before draining out
the battery. We can notice that the adversarial examples can reduce the efﬁciency of the applications
by approximately 50%."
CONCLUSION,0.7877094972067039,"7
CONCLUSION"
CONCLUSION,0.7932960893854749,"In this paper, we have proposed NODEAttack 2 to show the vulnerability of Neural ODEs against
energy-surging adversarial samples. Here, we have proposed two types of adversarial attacks: Uni-
versal attack and Input-based attack. To the best of our knowledge, we are the ﬁrst to explore
energy-based attack against Neural ODEs. We also observe that adversarial examples generated
by NODEAttack can be transferable. Finally, we show the impact of NODEAttack generated
samples on mobile application."
CONCLUSION,0.7988826815642458,2https://github.com/anonymous2015258/NODEAttack
CONCLUSION,0.8044692737430168,Under review as a conference paper at ICLR 2022
REFERENCES,0.8100558659217877,REFERENCES
REFERENCES,0.8156424581005587,"Aleksandar Bojchevski and Stephan G¨unnemann. 2019. Adversarial Attacks on Node Embeddings
via Graph Poisoning. In Proceedings of the International Conference on Machine Learning. 695–
704."
REFERENCES,0.8212290502793296,"Nicholas Carlini, Pratyush Mishra, Tavish Vaidya, Yuankai Zhang, Micah Sherr, Clay Shields, David
Wagner, and Wenchao Zhou. 2016. Hidden Voice Commands. In Proceedings of the USENIX
Security Symposium. 513–530."
REFERENCES,0.8268156424581006,"Dr Philippe Cattin. 2013. Image restoration: Introduction to signal and image processing. MIAC,
University of Basel. Retrieved 11 (2013), 93."
REFERENCES,0.8324022346368715,"Ricky TQ Chen, Yulia Rubanova, Jesse Bettencourt, and David Duvenaud. 2018. Neural ordinary
differential equations. arXiv preprint arXiv:1806.07366 (2018)."
REFERENCES,0.8379888268156425,"Nilesh Dalvi, Pedro Domingos, Sumit Sanghai, Deepak Verma, et al. 2004. Adversarial Classiﬁca-
tion. In Proceedings of the International Conference on Knowledge Discovery and Data Mining.
99–108."
REFERENCES,0.8435754189944135,"Li Deng. 2012. The mnist database of handwritten digit images for machine learning research. IEEE
Signal Processing Magazine 29, 6 (2012), 141–142."
REFERENCES,0.8491620111731844,"D.Lowd and C.Meek. 2005. Good Word Attacks on Statistical Spam Filters. In Proceedings of the
Second Conference on Email and Anti-Spam."
REFERENCES,0.8547486033519553,"John R Dormand and Peter J Prince. 1980. A family of embedded Runge-Kutta formulae. Journal
of computational and applied mathematics 6, 1 (1980), 19–26."
REFERENCES,0.8603351955307262,"Emilien Dupont, Arnaud Doucet, and Yee Whye Teh. 2019. Augmented neural odes. arXiv preprint
arXiv:1904.01681 (2019)."
REFERENCES,0.8659217877094972,"Erwin Fehlberg. 1969. Low-order classical Runge-Kutta formulas with stepsize control and their
application to some heat transfer problems. Vol. 315. National aeronautics and space administra-
tion."
REFERENCES,0.8715083798882681,"Robert Geirhos, Patricia Rubisch, Claudio Michaelis, Matthias Bethge, Felix A Wichmann, and
Wieland Brendel. 2018. ImageNet-trained CNNs are biased towards texture; increasing shape
bias improves accuracy and robustness. arXiv preprint arXiv:1811.12231 (2018)."
REFERENCES,0.8770949720670391,"Ian J Goodfellow, Jonathon Shlens, and Christian Szegedy. 2014. Explaining and Harnessing Ad-
versarial Examples. arXiv preprint arXiv:1412.6572 (2014)."
REFERENCES,0.88268156424581,"Mirazul Haque, Anki Chauhan, Cong Liu, and Wei Yang. 2020.
ILFO: Adversarial Attack on
Adaptive Neural Networks. In Proceedings of the IEEE/CVF Conference on Computer Vision
and Pattern Recognition. 14264–14273."
REFERENCES,0.888268156424581,"Dan Hendrycks and Thomas Dietterich. 2019a. Benchmarking neural network robustness to com-
mon corruptions and perturbations. arXiv preprint arXiv:1903.12261 (2019)."
REFERENCES,0.8938547486033519,"Dan Hendrycks and Thomas Dietterich. 2019b. Benchmarking neural network robustness to com-
mon corruptions and perturbations. arXiv preprint arXiv:1903.12261 (2019)."
REFERENCES,0.8994413407821229,"Sanghyun Hong, Yi˘gitcan Kaya, Ionut¸-Vlad Modoranu, and Tudor Dumitras¸. 2020. A Panda? No,
It’s a Sloth: Slowdown Attacks on Adaptive Multi-Exit Neural Network Inference. arXiv preprint
arXiv:2010.02432 (2020)."
REFERENCES,0.9050279329608939,"Robin Jia and Percy Liang. 2017. Adversarial Examples for Evaluating Reading Comprehension
Systems. arXiv preprint arXiv:1707.07328 (2017)."
REFERENCES,0.9106145251396648,"Danny Karmon, Daniel Zoran, and Yoav Goldberg. 2018. LaVAN: Localized and Visible Adversar-
ial Noise. arXiv preprint arXiv:1801.02608 (2018)."
REFERENCES,0.9162011173184358,"Alex Krizhevsky, Geoffrey Hinton, et al. 2009.
Learning multiple layers of features from tiny
images. (2009)."
REFERENCES,0.9217877094972067,Under review as a conference paper at ICLR 2022
REFERENCES,0.9273743016759777,"Wilhelm Kutta. 1901. Beitrag zur naherungsweisen integration totaler differentialgleichungen. Z.
Math. Phys. 46 (1901), 435–453."
REFERENCES,0.9329608938547486,"Mingzhen Li, Yi Liu, Xiaoyan Liu, Qingxiao Sun, Xin You, Hailong Yang, Zhongzhi Luan, Lin
Gan, Guangwen Yang, and Depei Qian. 2020. The deep learning compiler: A comprehensive
survey. IEEE Transactions on Parallel and Distributed Systems 32, 3 (2020), 708–727."
REFERENCES,0.9385474860335196,"Daniel Lowd and Christopher Meek. 2005. Adversarial Learning. In Proceedings of the Interna-
tional Conference on Knowledge Discovery and Data Mining. 641–647."
REFERENCES,0.9441340782122905,"Yaniv Ovadia, Emily Fertig, Jie Ren, Zachary Nado, David Sculley, Sebastian Nowozin, Joshua V
Dillon, Balaji Lakshminarayanan, and Jasper Snoek. 2019. Can you trust your model’s uncer-
tainty? Evaluating predictive uncertainty under dataset shift. arXiv preprint arXiv:1906.02530
(2019)."
REFERENCES,0.9497206703910615,"Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan,
Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, Alban Desmaison, Andreas
Kopf, Edward Yang, Zachary DeVito, Martin Raison, Alykhan Tejani, Sasank Chilamkurthy,
Benoit Steiner, Lu Fang, Junjie Bai, and Soumith Chintala. 2019.
PyTorch: An Imperative
Style, High-Performance Deep Learning Library. In Advances in Neural Information Processing
Systems 32, H. Wallach, H. Larochelle, A. Beygelzimer, F. d'Alch´e-Buc, E. Fox, and R. Garnett
(Eds.). Curran Associates, Inc., 8024–8035.
http://papers.neurips.cc/paper/
9015-pytorch-an-imperative-style-high-performance-deep-learning-library.
pdf"
REFERENCES,0.9553072625698324,"William H Press and Saul A Teukolsky. 1992. Adaptive Stepsize Runge-Kutta Integration. Comput-
ers in Physics 6, 2 (1992), 188–191."
REFERENCES,0.9608938547486033,"Alessio Quaglino, Marco Gallieri, Jonathan Masci, and Jan Koutnık. 2019. Accelerating neural odes
with spectral elements. arXiv preprint arXiv:1906.07038 (2019)."
REFERENCES,0.9664804469273743,"Carl Runge. 1895. ¨Uber die numerische Auﬂ¨osung von Differentialgleichungen. Math. Ann. 46, 2
(1895), 167–178."
REFERENCES,0.9720670391061452,"Endre S¨uli and David F Mayers. 2003. An introduction to numerical analysis. Cambridge university
press."
REFERENCES,0.9776536312849162,"Christian Szegedy, Wojciech Zaremba, Ilya Sutskever, Joan Bruna, Dumitru Erhan, Ian Goodfellow,
and Rob Fergus. 2013. Intriguing Properties of Neural Networks. arXiv preprint arXiv:1312.6199
(2013)."
REFERENCES,0.9832402234636871,"Qizhe Xie, Minh-Thang Luong, Eduard Hovy, and Quoc V Le. 2020. Self-training with noisy stu-
dent improves imagenet classiﬁcation. In Proceedings of the IEEE/CVF Conference on Computer
Vision and Pattern Recognition. 10687–10698."
REFERENCES,0.9888268156424581,"Hanshu Yan, Jiawei Du, Vincent YF Tan, and Jiashi Feng. 2019. On robustness of neural ordinary
differential equations. arXiv preprint arXiv:1910.05513 (2019)."
REFERENCES,0.994413407821229,"Daniel Z¨ugner, Amir Akbarnejad, and Stephan G¨unnemann. 2018. Adversarial Attacks on Neural
Networks for Graph Data. In Proceedings of the International Conference on Knowledge Discov-
ery and Data Mining. 2847–2856."
