Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.0013386880856760374,"We study reinforcement learning for partially observable multi-agent systems where
each agent only has access to its own observation and reward and aims to maximize
its cumulative rewards. To handle partial observations, we propose graph-assisted
predictive state representations (GAPSR), a scalable multi-agent representation
learning framework that leverages the agent connectivity graphs to aggregate local
representations computed by each agent. In addition, our representations are readily
able to incorporate dynamic interaction graphs and kernel space embeddings of
the predictive states, and thus have strong flexibility and representation power.
Based on GAPSR, we propose an end-to-end MARL algorithm that simultaneously
infers the predictive representations and uses the representations as the input of
a policy optimization algorithm. Empirically, we demonstrate the efficacy of the
proposed algorithm provided on both a MAMuJoCo robotic learning experiment
and a multi-agent particle learning environment."
INTRODUCTION,0.002677376171352075,"1
INTRODUCTION"
INTRODUCTION,0.004016064257028112,"In partially observable decision-making systems, it is pivotal for the agents to infer the latent state
of the system from past observations. The predictive state representation (PSR) (Littman et al.,
2001) is a representation of the history by a vector of predictions of set of tests conditioning on the
history. In particular, a history is a sequence of part observations and actions. A test is sequences
of future actions and future observations, which is true if and only if all the observations occur,
given that all the actions taken. Each entry of the predictive state of representation of is given by
the conditional probability that the corresponding test holds true given that history. A fundamental
assumption of PSR model is that these representations of the history are a sufficient statistics for
predicting future observations and thus are able to represent the underlying state which is unobserved
(Littman et al., 2001; Hefny et al., 2015; Sun et al., 2016). A key feature of PSR is that it only
involves observable actions and observations and also encodes the latent state. Thus, the system
dynamics can be recovered from data without resorting to the estimation of the unobserved latent
states. Furthermore, using kernel embeddings of conditional distributions, PSR can be embedded
into reproducing kernel Hilbert spaces (RKHS) (Boots et al., 2013), which further enhances the
representation powerful of PSR. Furthermore, Littman et al. (2001); James & Singh (2004); Singh
et al. (2012) shows that PSR offers an alternatively more compact state representation than POMDP
models. Therefore, PSR is considered as a powerful representation learning tool and has been used as
an indispensable component of various model-based single-agent reinforcement learning methods
(James & Singh, 2004; Boots et al., 2011; 2013; Hamilton et al., 2014; Sun et al., 2016; Hefny et al.,
2015; 2018a)."
INTRODUCTION,0.00535475234270415,"Furthermore, when it comes to multi-agent systems with partial observations, is desirable to construct
predictive states for multi-agent reinforcement learning (MARL). However, directly extending single-
agent PSR would require building tests based on joint observations and joint actions. As a result,
learning the PSR involves tensor decomposition which is computationally prohibitive (Chen et al.,
2020). Moreover, another drawback of such an approach is that oftentimes the agents only have local
observations. Furthermore, in multi-agent systems, the observations of each agent are influenced by
the actions of other agents. As a result, the representations should also take the other agents into
account. Specifically, we aim to address the following question:"
INTRODUCTION,0.006693440428380187,Published as a conference paper at ICLR 2022
INTRODUCTION,0.008032128514056224,"Can we construct multi-agent predictive representations based on local information for reinforcement
learning?"
INTRODUCTION,0.009370816599732263,"In this work, we provide a positive answer to this question. Specifically, we propose a new framework
of multi-agent PSR named as Graph-Assisted Predictive State Representations (GAPSR), which
utilizes local information possessed by each agent to construct scalable representations. Specifically,
we assume each agent has local observations but is able to observe joint actions. Let n be the number
of agents. For any agent i, we first construct n primitive interaction predictions {qi,j}j∈[n] via
single-agent PSR, where qi,j is constructed using agent i’s local observations and agent j’s local
actions. Then agent i’s final predictive representations qi is obtained by aggregating {qi,j}j∈[n]
according to the underlying agent connectivity graph which characterize the proximity among agents.
Finally, these graph assisted representations are used as the proxy of state variable and fed into a
standard MARL algorithm, e.g., multi-agent actor-critic for decision making."
INTRODUCTION,0.0107095046854083,"Our GAPSR framework enjoys a few desired properties. First, GAPSR aggregates the information
about other agents via the agent connectivity graph, which encodes the interaction among agents.
Such an aggregation mechanism enables us to implement GAPSR on a single-agent level while
maintaining other agents’ interactions through the encoding of the interactive graph topology. Second,
the GAPSR of each agent involve the actions of all the other agents connected to that agent. In
other words, GAPSR correctly captures the non-stationarity caused by the other agents’ actions.
Besides, the agent connectivity graphs can take various forms. In particular, we build our model
under three common graphs, namely static complete graphs, static non-complete graphs, and dynamic
graphs, covering as many real-world scenarios as possible. Third, utilizing kernel embedding of
conditional distributions, the predictive representations lie in RKHS with strong representation power.
Finally, GAPSR are readily to be incorporated into any state-of-the-art MARL algorithm as a proxy
of the state variable in an end-to-end fashion. Thus, we believe that GAPSR could be a promising
representation learning framework for multi-agent partially observable systems."
INTRODUCTION,0.012048192771084338,"Finally, we implement an instantiation of the proposed algorithm that combines GAPSR with multi-
agent actor-critic, where we simultaneously learn GAPSR and the agents’ policies in an end-to-end
manner with fully differentiable neural network structures. We test our algorithm through systematic
numerical experiments on MAMuJoCo robotic learning experiments (de Witt et al., 2020) and multi-
agent particle learning environments (Ryu et al., 2020), and compare our proposed method against
two baselines as detailed in Section 6. The results demonstrate the efficiency of our method."
RELATED WORKS,0.013386880856760375,"2
RELATED WORKS"
RELATED WORKS,0.014725568942436412,"Partially Observable Environment. Real-world agents often experience situations that the observed
signals are aliased and do not fully determine their state in the system. This is particularly true for
multiple agents environments where agents have partial observability due to limited communication
(Oliehoek & Amato, 2016). In accommodation to the partially observable environment, POMDP has
been adopted by Kaelbling et al. (1998), and the algorithms (Kaelbling et al., 1998; Cassandra, 1998;
Thrun, 1999; Pineau et al., 2003; Poupart & Vlassis, 2008; Platt Jr et al., 2010) for determining an
optimal policy have shifted to using the probability distributions (belief state) over the state space
instead of exact state space. In general, they have high complexity or suffer from local optima.
Moreover, the most common POMDP policy learning assumes the agent has access to a priori
knowledge of the system. The access to such prior knowledge has a premise that the agent has
considerable domain knowledge (Kaelbling et al., 1998). However, it is expected that the real-world
agents learn the system model and thus a planning policy further without knowledge of the domain."
RELATED WORKS,0.01606425702811245,"Overview of PSR. Littman et al. (2001); James & Singh (2004) introduced the PSR over an expressive
and robust framework for modeling dynamical systems and defined PSR as a representation of state
by using a vector of predictions of fully observable quantities (tests) conditioned on past events
(histories). A predictive model is constructed directly from execution traces in the PSR framework,
utilizing minimal prior information about the domain. The PSR paradigm subsumes POMDP as a
special case (Littman et al., 2001). PSR is considered much more compact than POMDP (Aberdeen
et al., 2007). The spectral learning method has been proved to show success for learning the PSR
(Boots et al., 2011; Jiang et al., 2018). There are other classes of dynamical system learning algorithms
that are based on likelihood-based optimization or sampling approaches (Frigola et al., 2013), but
they are prone to poor local optima. The spectral learning represents the estimated state by sufficient
statistics of future observations and estimates the model parameters by method of moments. However,"
RELATED WORKS,0.01740294511378849,Published as a conference paper at ICLR 2022
RELATED WORKS,0.018741633199464525,"this line of algorithms is hard to incorporate prior information (Hefny et al., 2015). Thus, Hefny et al.
(2015; 2018a) introduce the supervised learning method to learn PSR and proves its convergence.
Although many works study PSR in discrete action space (Hsu et al., 2012; Siddiqi et al., 2010;
Boots et al., 2011), Boots et al. (2013) propose Hilbert space embedding (HSE)-PSR to deal with
continuous actions. Hefny et al. (2018a) use an approximation of HSE-PSR by Random Fourier
transform (RFF) and built a more principled generalization of PSR to deal with high dimensions.
However, all of these studies aim for the single agent scenario."
RELATED WORKS,0.020080321285140562,"PSR and RL. The predictive states estimated by the PSR are considered as states in a fully observable
Markov Decision Process so that the value function is learned on these states. This line of work has
been done in the single-agent environment (Boots & Gordon, 2010; Boots et al., 2011; Hamilton
et al., 2014; Venkatraman et al., 2017; Hefny et al., 2018b). Especially, Hefny et al. (2018b) propose
the recurrent predictive state in the RNN network. Moreover, the learning PSR and policy functions
are connected with the end-to-end training."
RELATED WORKS,0.0214190093708166,"MAPSR and MARL. A close related work Chen et al. (2020), which proposes a multi-agent PSR
model that is formulated as a n-way tensor, where n is the number of agents. As a result, learning the
parameters is achieved by decomposing the n-way tensor, which becomes computationally prohibitive
when the number of agents is large. Moreover, it seems challenging to incorporate benign structures
such as sparsity into the model, as doing so leads to a more complicated set of moment equations.
Furthermore, our work belongs to the vast literature on MARL for (partially observable) Markov
Games. See, e.g., Lyu & Amato (2020); Son et al. (2019); Zhang et al. (2019); Rashid et al. (2018);
Foerster et al. (2018); Lowe et al. (2017); Baker et al. (2019); Yu et al. (2021) and the references
therein. Also see Zhang et al. (2021); Gronauer & Diepold (2022); Canese et al. (2021) for recent
surveys on MARL. Recent works propose more sophisticated deep MARL algorithms for multi-agent
problems under the paradigm of centralized training with decentralized execution (Zhou et al., 2020;
Sunehag et al., 2017; Lowe et al., 2017; Foerster et al., 2018; Rashid et al., 2018). Our work seems
not directly comparable to these works as our goal is to learn good representations in the partially
observable multi-agent systems via model-based RL, whereas most of these works adopt model-free
methods or focus on Markov games without partial observations."
RELATED WORKS,0.022757697456492636,"3
BACKGROUND: SINGLE-AGENT PSR"
RELATED WORKS,0.024096385542168676,"In this section, we introduce the background on single-agent PSR. Also see §A.1 for a more detailed
introduction."
RELATED WORKS,0.025435073627844713,"Predictive State Representation (PSR). A prediction of a state is defined as the conditional probabil-
ity of seeing a test’s observations in sequence given that actions of the test are taken in sequence from a
history (Littman et al., 2001). Givn a finite observation space O (o ∈O) and action space A (a ∈A).
A test of length k at time t, is defined as a sequence of action-observation pairs that starts at time t
and ends at time t + k −1, {(ol, al)}t+k−1
l=t
= {ot, at, ot+1, at+1, · · · , ol, al, · · · , ot+k−1, at+k−1}.
A history, at time t is a sequence of action-observation pairs that start from the beginning of time
and ends at time t −1, {(ol, al)}t−1
l=1 = {o1, a1, · · · , ol, al, · · · , ot−1, at−1}."
RELATED WORKS,0.02677376171352075,"Hilbert Space Embeddings of Predictive State Representations. In this work, we are interested in
extending PSR to decision makings of controlled systems with continuous actions. So we use the
model introduced by Hefny et al. (2018a). In this model, predictive state qt and extended predictive
state pt satisfies
qtψa
t = E[ψo
t |ψa
t ; ψh
t ],
ptξa
t = E[ξo
t |ξa
t ; ψh
t ],
(1)
(i.e., qt and pt are conditional linear expectation operators which maps to the conditional expectation
of future observations), where
ψo
t := ϕO({ol}t+k−1
l=t
),
ψa
t := ϕA({al}t+k−1
l=t
),
(2)
are feature maps by kernels kO, kA over future observation and action features. The extended
predictive state compared to predictive state adds one more pair of {(at+k, ot+k)} to the prediction.
The ξa
t and ξo
t are the corresponding extended feature maps, which satisfy
ξo
t = ψo
t ⊗ϕo
t,
ξa
t = ψa
t ⊗ϕa
t .
(3)
Here ϕo
t := ϕo(ot) and ϕa
t := ϕa(at) are the shorthands for one time feature map by ko and ka. We
use ⊗to denote the transposed Khatri–Rao product for two matrices with the same number of rows,
and each row of the resultant matrix is the vectorzied outer product of the corresponding row vectors"
RELATED WORKS,0.028112449799196786,Published as a conference paper at ICLR 2022
RELATED WORKS,0.029451137884872823,"in the two matrices. Also, we use
ψh
t := ψh({(ol, al)}t−1
l=1)
(4)
to define a set of features extracted from previous observations and actions (typically from a fixed
length window ending at t −1)."
NOTATION OF PSR FOR MULTI-AGENT SETTING,0.030789825970548863,"3.1
NOTATION OF PSR FOR MULTI-AGENT SETTING"
NOTATION OF PSR FOR MULTI-AGENT SETTING,0.0321285140562249,"In the subsequent section, we will bring the HSE-PSR model to the multi-agent settings. In the
following, we introduce the notation for the multi-agent setup. For any agent i in an n-agent system,
given a set of kernels {kOi}n
i=1,{kAi}n
i=1,{koi}n
i=1,{kai}n
i=1 for every agent, we define agent i’s
feature maps using the single-agent PSR presented in the previous section. In particular, for all i ∈[n],
we let ψo
t,i and ψa
t,i be defined as in (2) using agent i’s local observations and actions, respectively.
Similarly, we let ξo
t,i and ξa
t,i be defined in (3), and let ϕo
t,i and ϕa
t,i be defined using ϕoi and ϕai,
respectively. Furthermore, for all i, j ∈[n], we let ψh
t,i,j be defined as in (4) using the observations
of agent i and the actions of agent j. Moreover, we use the qt,i and pt,i to denote its predictive state
and extended predictive state, whose definitions will be presented in the next section."
DYNAMIC INTERACTION GRAPH FOR GAPSR MODEL,0.03346720214190094,"4
DYNAMIC INTERACTION GRAPH FOR GAPSR MODEL"
DYNAMIC INTERACTION GRAPH FOR GAPSR MODEL,0.03480589022757698,"Many works have considered graph representation of the multi-agent network (Liu et al., 2020b; Ryu
et al., 2020). In general, the relationship between agents is characterized by an undirected graph.
We introduce a dynamic interaction graph to represent the GAPSR by considering the interaction
between agents.
Definition 1. Let G = (V, E), including the set V of nodes and set E of the edges. Each node
represents the agent entry, and the edge represents the relationship between the two adjacent agents."
DYNAMIC INTERACTION GRAPH FOR GAPSR MODEL,0.03614457831325301,"Here we suppose the graph structure is given, that means the number of nodes (n), the number of
edges (m), the edge weights, and the maximum number of degrees (k) are available to us. We think
that this kind of presupposition is very reasonable because in the real world, for example, there
are multiple robots; we can quickly get the geographic position of the robots through sensors, then
calculate the structure of the graph formed by them."
STATIC COMPLETE GRAPH,0.03748326639892905,"4.1
STATIC COMPLETE GRAPH"
STATIC COMPLETE GRAPH,0.038821954484605084,"We starts with a static complete graph Gc, where the relationship between nodes are invariant to time
change. A complete graph has m = n(n −1)/2 edges, where m = |E|. For each agent, we can
represent its PSR by considering other agents’ interactions by
qt,i := g
 
{qt,i,j}n
j=1

=
X"
STATIC COMPLETE GRAPH,0.040160642570281124,"j
qt,i,j,
(5)"
STATIC COMPLETE GRAPH,0.041499330655957165,"same for pt,i. To consider the interactive behavior between agents, we introduce two additional
notations qt,i,j and pt,i,j. Let {(i, j)}n
i,j=1 represents a pair of agents on a n multi-agent system.
The qt,i,j is a primitive predictive state of i’s observation (ψo
t,i) by intervening agent j’s action (ψa
t,j)
and observing agent i’s observation history and agent j’s action history (ψh
t,i,j), and pt,i,j is the
extended counterpart, where they satisfy the relationship for single agent case in (1)
qt,i,jψa
t,j = E[ψo
t,i|ψa
t,j; ψh
t,i,j],
pt,i,jξa
t,j = E[ξo
t,i|ξa
t,j; ψh
t,i,j].
(6)
If i = j, then it becomes an exact single agent scenario. Similarly, we use the same approach to
represent pt,i as shown in (5). Each agent’s PSR qt,i and extended PSR pt,i are modeled by fully
considering all other available agents."
STATIC COMPLETE GRAPH,0.0428380187416332,"Based on equation (5), in practice, estimating qt,i and pt,i denoted as bqt,i and bpt,i requires us to get
bqt,i,j and bpt,i,j at first."
STATIC COMPLETE GRAPH,0.04417670682730924,"4.1.1
ESTIMATION OF qt,i,j AND pt,i,j"
STATIC COMPLETE GRAPH,0.04551539491298527,"To estimate the pt and qt for just one agent, Hefny et al. (2018a) use the supervised learning method.
They show that bqt = Mψo
t |ψa
t ;ψh
t = Cψo
t ψa
t |ψh
t (Cψa
t ψa
t |ϕh
t +λI)−1, where MA|B;c is a linear operator
that satisfies E[A|B = b; C = c] = MA|B;cb, and CXY := E[ϕ(X) ⊗ϕ(Y )] is the uncentered
covariance operator, and CXY |z is covariance of X and Y given Z = z. They estimate Cψo
t ψa
t |ψh
t ,
Cψa
t ψa
t |ϕh
t by sampling data, then get the estimation bqt. The same procedure is used to estimate bpt
by replacing the features ψo
t and ψa
t with their extend counterparts ξo
t and ξa
t ."
STATIC COMPLETE GRAPH,0.04685408299866131,Published as a conference paper at ICLR 2022
STATIC COMPLETE GRAPH,0.04819277108433735,"Similar to the single-agent case above, the representation of qt,i,j can be achieved as"
STATIC COMPLETE GRAPH,0.049531459170013385,"bqt,i,j = Mψo
t,i|ψa
t,j;ψh
t,i,j = Cψo
t,iψa
t,j|ψh
t,i,j"
STATIC COMPLETE GRAPH,0.050870147255689425,"
Cψa
t,jψa
t,j|ϕh
t,i,j + λI
−1
.
(7)"
STATIC COMPLETE GRAPH,0.05220883534136546,"To estimate Cψo
t,iψa
t,j|ψh
t,i,j and Cψa
t,jψa
t,j|ψh
t,i,j, we learn two linear maps Ti,j and Ui,j such that"
STATIC COMPLETE GRAPH,0.0535475234270415,"Cψo
t,iψa
t,j|ψh
t,i,j ≈Ti,j
 
ψh
t,i,j

and Cψa
t,jψa
t,j|ψh
t,i,j ≈Ui,j
 
ψh
t,i,j

. The training examples for Ti,j and"
STATIC COMPLETE GRAPH,0.05488621151271754,"Ui,j consist of pairs (ψh
t,i,j, ψo
t,i ⊗ψa
t,j) and (ψh
t,i,j, ψa
t,j ⊗ψa
t,j). The learning of bpt,i,j can be done
in a similar way. More details can be found in §A.2.1"
STATIC COMPLETE GRAPH,0.05622489959839357,"After calculation of bqt,i,j and bpt,i,j, under the static complete graph setting where the interaction is
considered, defined in equation (5), we can get the estimate of bqt,i and bpt,i."
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.05756358768406961,"4.1.2
THEORETICAL GUARANTEE OF ESTIMATION OF qi AND pi UNDER THE STATIC
COMPLETE GRAPH"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.058902275769745646,"Theoretically, we show that the difference between qi and its estimator bqi is bounded with high
probability."
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.060240963855421686,Theorem 1. Let πΘ be a data collection policy and H is the range of πΘ on joint histories. If
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.06157965194109773,"Equation (5) and (7) used, then for all h ∈H and any ϵ ∈(0, 1), such that N >
t2
Aj log(2dAj /ϵ)"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.06291834002677377,"v

Cψa
j "
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.0642570281124498,"where N is the number of time points we collect sample, then ∥bqi −qi∥is bounded as below with
probability at least 1 −3ϵ,
∥bqi −qi∥≤n∆,
(8)
where ∆="
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.06559571619812583,"v
u
u
u
t"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.06693440428380187,"u

Cψo
i |ψh
i,j "
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.06827309236947791,"v

Cψa
j |ψh
i,j"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.06961178045515395,"3 ·
∥∆1∥2+2u

Cψa
j |ψh
i,j"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.07095046854082998,"
∥∆1∥+λ"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.07228915662650602,"v

Cψa
j |ψh
i,j"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.07362784471218206,"
(1−γ)+λ
+"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.0749665327978581,"Cψo
i ψa
j |ψh
i,j"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.07630522088353414,"∥∆1∥+∥∆2∥
Cψa
j |ψh
i,j"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.07764390896921017,+∥∆2∥∥∆1∥
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.07898259705488621,"v

Cψa
j |ψh
i,j"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.08032128514056225,"2
(1−γ)2+λ ."
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.08165997322623829,"Here ∆1, ∆2 are two other relevant bounds, we provide them in §E.1. u(·), v(·) denote the largest,"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.08299866131191433,"smallest eigenvalue of a matrix. And γ =
t2
Aj log(2dAj /ϵ)"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.08433734939759036,"v

Cψa
j"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.0856760374832664,"
N
< 1 is a constant that depends on the"
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.08701472556894244,"magnitude of the norm of ψa
j (we assume
ψa
j
 ≤tAj), the dimension of ψa
j (dAj), the (uncentered)
covariances (Cψa
j := E

ψa
j ψaT
j

) and the sample size (N)."
"THEORETICAL GUARANTEE OF ESTIMATION OF QI AND PI UNDER THE STATIC
COMPLETE GRAPH",0.08835341365461848,"Theorem 1 says we need at least N samples for the bound in equation (8) to be valid. We give the
proofs in §E. It is not hard to obtain a bound for pi using the same approach. We omit that."
EXTENSION TO STATIC NON-COMPLETE GRAPH,0.08969210174029452,"4.2
EXTENSION TO STATIC NON-COMPLETE GRAPH"
EXTENSION TO STATIC NON-COMPLETE GRAPH,0.09103078982597054,"In large-scale multi-agent systems, the number of agents is large, and not all agents need to interact
with each other. A static non-completed graph can perfectly represent such a situation. For example,
in a given static non-complete graph Gs, we know its maximum number of degree k, and we use the
binary n × n matrix with each entry as Ii,j to indicate the interaction between two agents. Then the
GAPSR for each agent will be
qt,i := g
 
{qt,i,j}n
j=1

=
X"
EXTENSION TO STATIC NON-COMPLETE GRAPH,0.09236947791164658,"j
Ii,jqt,i,j.
(9)"
EXTENSION TO STATIC NON-COMPLETE GRAPH,0.09370816599732262,"Lemma 1. Under the same environment depicted in Theorem 1 and given a Gs with k maxi-
mum number of the degree to represent agents, then the bound in Theorem 1 can be rewritten as
∥bqi −qi∥≤k∆."
EXTENSION TO STATIC NON-COMPLETE GRAPH,0.09504685408299866,"The conclusion of Lemma 1 is evident since we replace the n with the k neighbors, the total error
bound is also decreased approximately as k n."
DYNAMIC GRAPH,0.0963855421686747,"4.3
DYNAMIC GRAPH"
DYNAMIC GRAPH,0.09772423025435073,"Real-world multi-agents can also formulate a time-dependent dynamic graph Gd, rather than a static
graph. A dynamic graph has its structure dynamically changing with time. In other words, the
edges can be inserted or deleted across time. The dynamic graph brings more challenges to the
representation as the interaction relationship among agents changes constantly."
DYNAMIC GRAPH,0.09906291834002677,Published as a conference paper at ICLR 2022
DYNAMIC GRAPH,0.10040160642570281,"Braha & Bar-Yam (2009), Ma et al. (2017) and Zhao et al. (2010) consider a dynamic graph as
a set of ordered static graphs. For each time point, we are given a static graph such that Gd =
{Gd1, Gd2, · · · , Gdt}, and a time-dependent given binary matrix with It,i,j indicating the interaction
between two agents at each time. Then we have the agent-wise PSR as
qt,i := g
 
{qt,i,j}n
j=1

=
X"
DYNAMIC GRAPH,0.10174029451137885,"j
It,i,jqt,i,j.
(10)"
DYNAMIC GRAPH,0.10307898259705489,"Compared to (9), the coefficient It,i,j is time-dependent, which brings a challenge to our theoretical
bound. We consider a dynamic graph experiences a trajectory path, assuming every node has a
chance at least p to interact by connection with another node at any time point. For example, for a
node i, if we take the union set of the nodes interacted with i over the path, then the union set could
form a static complete graph; in other words, if i connects j, then we can obtain a valid sample to
estimate qi,j as the complete static graph does, if not, then we skip to the next time point. For the
complete static graph, we need the trajectory to run at least N time points to collect enough data
to estimate our conditional operator qi,j accurately. Furthermore, The total number of time points
needed by i until the N th interaction with j follows a negative binomial distribution NB(N, p). On
average, we need N"
DYNAMIC GRAPH,0.10441767068273092,"p time points before we see i, j completely connecting N times. Now we consider
node i could interact with every node in a set of nodes (J : |J| = n −1) for N number of time
points. We assume the chances being interacted between two nodes (i, j ∈J) does not affect their
interaction with other nodes. Thus we have a set of independent negative binomial random variables
{Jl}n−1
l=1 ∼NB(N, p) to characterize the interaction of i with j ∈J. So we are interested in the
expectation of the maximum of J1, . . . , Jn−1, a statistics that tells us the expected maximum number
of time points of collection of measurements needed for the node i to be able to connect with every
node j ∈J for at least N number of time points. We denote it as J{1,...,n−1} and we have"
DYNAMIC GRAPH,0.10575635876840696,"E{J{1,...,n−1}} = E{max(J1, · · · , Jn−1)} =
X N≥0"
DYNAMIC GRAPH,0.107095046854083,"
qN + NpqN−1 + · · · +

N
N −1"
DYNAMIC GRAPH,0.10843373493975904,"
pN−1q
n−1
. (11)"
DYNAMIC GRAPH,0.10977242302543508,"Lemma 2. Under the same environment depicted in 1 and given a dynamic graph Gd with every
node has a chance at least p to interact with another node in a one-time point, let N be the number
of time points we collect data of measurements in order to get the bound in Theorem 1, if Equation 10
and 7 used, then we need at least"
DYNAMIC GRAPH,0.1111111111111111,"N ′
=

N −1 2"
DYNAMIC GRAPH,0.11244979919678715,"
+ K (q, n, N) −
γ
log1/q(1/q) + F [K (q, n, N)] + O(1),
(12)"
DYNAMIC GRAPH,0.11378848728246319,"total number of time points, where q
= 1 −p, K (q, n, N) := log1/q(n −1) + (N −"
DYNAMIC GRAPH,0.11512717536813923,"1) log1/q
h
log1/q(n −1)
i
+ (N −1) log1/q p −log1/q(N −1)!, F is a periodic C∞-function of"
DYNAMIC GRAPH,0.11646586345381527,"period 1 and mean value 0 whose Fourier-coefficients are given by ˆF(k) = −
1
log( 1"
DYNAMIC GRAPH,0.11780455153949129,q)Γ(−2kπi
DYNAMIC GRAPH,0.11914323962516733,log( 1 q))
DYNAMIC GRAPH,0.12048192771084337,"for k ∈Z \ {0}. Then ∥bqi −qi∥achieves the same bound as in Theorem 1 with probability at
least 1 −3ϵ. In other words, ∥bqi −qi∥≤n∆. Moreover, (12) is an asymptotic expansion of the
right-hand of (11). We give the proof in §E.3."
DYNAMIC GRAPH,0.12182061579651941,"Lemma 2 gives the worst-case bound for our estimation under the dynamic graph. The result tells us
that if we need 1 more sample of measurement for our algorithm to converge on the complete static
graph, we need roughly log1/q[log1/q(n −1)] more samples on the dynamic graph. So as long as we
allow enough learning time, the algorithm can converge with high probability."
DYNAMIC GRAPH,0.12315930388219545,"Complexity with Increasing Agents. For the complete static graph, we need to evaluate bqi,j and
bpi,j every time point, which requires O(n2) operations and space. Overall, with an increased number
of agents, our GAPSR has a polynomial O(n2) scaled complexity, which is feasible for learning in
a large number of agents environment and is more efficient compared to the centralized MAPSR
(Chen et al., 2020) theoretically, which is combinatorially sample complex, the analysis is shown in
§A.4. For a non-complete static graph with k maximum number of degrees for k ≪n, which is more
common in the real world, because a very far-away robot will not likely affect the targeted robot, the
operation will be significantly decreased to O(k2)."
THE ESTIMATION FOR GAPSR MODEL COMPONENTS,0.12449799196787148,"4.4
THE ESTIMATION FOR GAPSR MODEL COMPONENTS"
THE ESTIMATION FOR GAPSR MODEL COMPONENTS,0.12583668005354753,"As stated by Littman et al. (2001), a complete PSR model can build a recursive rule to update
itself. In other words, given the qt,i,j, the GAPSR model can calculate qt+1,i,j by incorporating
a new observation, a so called filtering process in the dynamical system. We achieve this with"
THE ESTIMATION FOR GAPSR MODEL COMPONENTS,0.12717536813922356,Published as a conference paper at ICLR 2022
THE ESTIMATION FOR GAPSR MODEL COMPONENTS,0.1285140562248996,"three models proposed by Hefny et al. (2018a): For any agent i, pt,i,j = Wi,j(qt,i,j), qt+1,i,j =
Fi,j(pt,i,j, ot,i, at,j), and ot,i = Zi,j(qt,i,j, at,j). The last model is used to predict the observation
ot,i with action at,j and PSR qt,i,j. Typically, Wi,j, Zi,j are learnable linear maps, and Fi,j is
non-linear and differentiable but known in advance. The Wi,j, Zi,j are learned from regression after
we estimate qt,i,j and pt,i,j, see §A.2.2 for details of estimation of Wi,j, Zi,j."
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.12985274431057564,"5
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL"
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.13119143239625167,"Previous work on single-agent proposed an end-to-end training algorithm (Hefny et al., 2018a) for
PSR model and policy learning. Here we design an algorithm for multi-agent settings and incorporate
our GAPSR model containing the interactive graph component."
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.13253012048192772,"We propose an online learning algorithm to learn the GAPSR and agent policies simultaneously. Our
algorithm is shown in §B.2. We use a diagram in §B.3 to illustrate this process."
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.13386880856760375,"Our algorithm has three components. Firstly, we estimate the GAPSR the model parameters Wi,j
and Zi,j (line 4-11). The agents use an existed T length trajectory generated based on the iteration
k −1’s policy (a random policy is used if it is the first time), and learn the GAPSR parameters under
the given interactive graph by regressions with details introduced in 4.4."
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.13520749665327977,"Secondly, we use the just learned GAPSR to generate the predictive state representations q and p
(line 13-28). In particular, by starting from the initialized GAPSR and executing the iteration k −1’s
policy, the agents experience a T length trajectory. The agents perform a series of extension, filtering,
and prediction steps to generate the qt and pt. Every agent also obtains action by executing its policy
function that maps predictive states qt,i to action at,i ∼πk−1
i
(qt,i). Agents then save trajectories
(actions, observations, predictive states, and rewards) over the path."
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.13654618473895583,"Lastly, learning and planning via multi-agent actor-critic (line 30-34): agents use learned rep-
resentations as the state and feed them into a MARL algorithm, e.g., MADDPG (Lowe et al.,
2017).
The MARL algorithm conducts the policy learning.
Here we give two examples of
GAPSR based MARL algorithms, which are implemented for our experiments.
They follow
the actor-critic framework. We first develop an algorithm under partially observable environ-
ments, where each agent has its own critic and actor independently, it is analogous to the in-
dependent actor-critic (IAC) (Foerster et al., 2018).
The gradient of the policy is written as
∇θiJ(θi) = Eτi∼p(τi|Θi)
PT
t=1 ∇θi log πθi(at,i|qt,i)(ri + γV πi
wi (qt+1,i) −V πi
wi (qt,i))

, and the
independent critic is updated by minimizing the loss Lc = Eτi∼p(τi|Θi)[(V πi
wi (qi) −yi)2]. Here
the predictive states qi generated by the GAPSR are considered as states to fit the value func-
tion. πθ : Q × A →[0, 1] is the stochastic policy that maps to the probability density of ac-
tions with parameter θ. We call it GAPSR-1. As we know, IAC would not work well since the
environment is not stationary under a multi-agent setting, the MADDPG by Lowe et al. (2017)
solves a non-stationary environment by considering other agents actions; however, every agent
needs a separate critic that has the global information. We used a centralized critic to minimize
the loss Lc = Eq,r,o

(Qπ
w(q1, · · · , qn, a1, · · · , an) −y)2
. So our policy gradient is written
as ∇θiJ(θi) = Eq,r,o

∇θiπθi(qi)∇aiQπ
w(q1, · · · , qn, a1, · · · , an)|ai=πθi(qi)

. To fully consider
other agents’ information, it uses the joint predictive states as input. Here by abuse of notation, we
use πθ : Q →A to indicate the deterministic policy with parameter θ. We call it GAPSR-2. We put
our integration details in §B.4."
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.13788487282463185,"Our algorithm has the following characteristics. First, due to its decoupled structure, it is a general
algorithm in the sense that planning can utilize any MARL algorithm for multi-agent MDP."
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.1392235609103079,"Second, our algorithm is an end-to-end framework, in the implementation, we build an additive loss
function and fully differentiate it with respect to model parameters. In particular, we update the
MARL and GAPSR model parameter Θ = {ΘGAPSR, ΘMARL} (line 32) by minimizing the following
additive objective function:
L(Θ) = α1L1(ΘMARL) + α2L2 (ΘGAPSR, ΘMARL) ,
(13)
L1(ΘMARL) = −J(θ) + Lc(w),
(14)"
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.14056224899598393,"L2(ΘGAPSR, ΘMARL) = n
X"
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.14190093708165996,"i=1
Eτ∼p(τ|Θ)
hX j"
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.14323962516733602,"Zi,j
 
Fi,j(Wi,j(qt−1,i,j)) ⊗ϕa
t,j

−ϕo
t,i
2
2"
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.14457831325301204,"i
.
(15)"
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.1459170013386881,Published as a conference paper at ICLR 2022
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.14725568942436412,"Here the L1(ΘMARL) is the objective function for MARL, for example, if the actor-critic used, it will
be the negative action value function with policy parameter θ plus the critic loss with parameter w, and
ΘMARL = (θ, w). L2(ΘGAPSR, ΘMARL) is the MSE between prediction and actual observation. And
p(τ|Θ) is the distribution over trajectories induced by the policy and GAPSR. ΘMAPSR = {Wi,j, Zi,j}
denotes GAPSR’s parameters. The α1 and α2 are hyper-parameters to penalize differently on two
losses."
DECISION-MAKING FRAMEWORK WITH GAPSR MODEL,0.14859437751004015,"Third, PSR, as a function of action, can bring agents’ action information into the policy gradient; our
interactive GAPSR even brings the effect of other agents’ actions to the policy gradient as well."
EXPERIMENTS,0.1499330655957162,"6
EXPERIMENTS
(a) 2-Agents Swimmer"
EXPERIMENTS,0.15127175368139223,"0
10
20
30
40
0 20 40 60 80"
EXPERIMENTS,0.15261044176706828,"GAPSR-2
IPSR
Baseline"
EXPERIMENTS,0.1539491298527443,iterations = steps(×1e5)
EXPERIMENTS,0.15528781793842034,Average reward
EXPERIMENTS,0.1566265060240964,(b) 3-Agents Hopper
EXPERIMENTS,0.15796519410977242,"0
10
20
30
40
0 100 200 300 400 500"
EXPERIMENTS,0.15930388219544847,"GAPSR-2
IPSR
Baseline"
EXPERIMENTS,0.1606425702811245,iterations = steps(×1e5)
EXPERIMENTS,0.16198125836680052,Average reward
EXPERIMENTS,0.16331994645247658,(c) 4-Agents Ant
EXPERIMENTS,0.1646586345381526,"0
10
20
30
40
0 250 500 750 1000 1250"
EXPERIMENTS,0.16599732262382866,"GAPSR-2
IPSR
Baseline"
EXPERIMENTS,0.16733601070950468,iterations = steps(×1e5)
EXPERIMENTS,0.1686746987951807,Average reward
EXPERIMENTS,0.17001338688085676,(d) 2-Agents Swimmer
EXPERIMENTS,0.1713520749665328,"0
10
20
30
40
0 10 20 30"
EXPERIMENTS,0.17269076305220885,"GAPSR-1
IPSR
Baseline"
EXPERIMENTS,0.17402945113788487,iterations = steps(×1e5)
EXPERIMENTS,0.1753681392235609,Average reward
EXPERIMENTS,0.17670682730923695,(e) 3-Agents Hopper
EXPERIMENTS,0.17804551539491298,"0
10
20
30
40
0 100 200 300"
EXPERIMENTS,0.17938420348058903,"GAPSR-1
IPSR
Baseline"
EXPERIMENTS,0.18072289156626506,iterations = steps(×1e5)
EXPERIMENTS,0.18206157965194109,Average reward
EXPERIMENTS,0.18340026773761714,(f) 4-Agents Ant
EXPERIMENTS,0.18473895582329317,"0
10
20
30
40
0 200 400 600 800"
EXPERIMENTS,0.18607764390896922,"GAPSR-1
IPSR
Baseline"
EXPERIMENTS,0.18741633199464525,iterations = steps(×1e5)
EXPERIMENTS,0.18875502008032127,Average reward
EXPERIMENTS,0.19009370816599733,"Figure 1: Performance of our method under MA-
MuJoco partially observable environments, the ab-
lation study– IPSR, in which we do not consider
the agent interaction, and the baseline, which is
not using GAPSR. (a)-(c):GAPSR-2 (It uses cen-
tralized critic, and uses gradients of value function
with respect to policy parameter, its baseline is
MADDPG), (d)-(f):GAPSR-1 (Its baseline is IAC).
We run 10 times and the shaded area is the 95%
confidence interval"
EXPERIMENTS,0.19143239625167335,"Environments.
We evaluate the performance
of our GAPSR on a collection of MARL tasks
under some OpenAI Gym MAMuJoco environ-
ments (de Witt et al., 2020), such as multi-agent
swimmer, hopper, and ant. Each robotic agent
is represented as a body graph, where vertices
(joints) are connected by adjacent edges (body
segments) as shown in Appendix Figure 5. Each
agent controls its joints based on the local infor-
mation observed. All tasks are learned under the
partially observable environments by manually
hiding some observations for each agent. The
goals of the multi-agent systems are aligned with
their corresponding single-agent ones. How-
ever, different from the single-agent system, the
agents in the multi-agent system need to collab-
orate to reach their goals. For the interactive
graph, for simplicity, we considered a complete
static graph, where we assume every agent is
connected with all other agents in the graph. We
defer the details of the robotic agents to §C.1 and
the details of the experimental setup to §C.2.
Baselines and Evaluation.
We run 50 iter-
ations for each experiment and collect M =
100 trajectories in every iteration with a max-
imum of 1000 steps in every trajectory. After
each iteration, we compute the average return
R =
1
M
Pn
i=1
PM
b=1
PTb
t=1 rt
i,b on a batch of
M trajectories, where, Tb is the length of the
bth trajectory. We repeat this process using ten
different random seeds and report the average and a standard deviation. To verify the effectiveness of
interactive graph, we introduce a baseline called Independent PSR learning (IPSR); in this model,
we do not consider the graph, so we formulate n independent single PSR without considering their
interactions, which means there are no qi,j any more but only qi. The architecture of GAPSR-1 and
GAPSR-2 remains the same. To verify the advantage of PSR, we introduce another baseline (MARL)
where we take out the GAPSR entirely, so it matches with the MARL run on a partially observable
environment. For GAPSR-1, its MARL baseline is IAC (Foerster et al., 2018), and for GAPSR-2, is
MADDPG (Lowe et al., 2017)."
EXPERIMENTS,0.1927710843373494,"Results And Discussion
Figure 1 illustrates the empirical average return vs. the number of
interactions with the environment measured in time steps. Our GAPSR methods consistently out-
perform IPSR and get the highest rewards under partially observable environments, which justifies
the representation power of the interactive graph to assist agents in learning in the non-stationary
environment with limited observation when the MARL algorithm has a defect (IAC). Moreover, it
can also boost the performance of the existing good MARL algorithm (MADDPG). To further verify
the effect of learning the PSR part, we also plotted the predicted trajectory to verify the GAPSR’s
performance for predicting the observations in Figure 2. We plotted the predicted observations
vs. actual observations in iterations 1, and 40, respectively, for GAPSR-2. We plotted a row ×"
EXPERIMENTS,0.19410977242302543,Published as a conference paper at ICLR 2022
EXPERIMENTS,0.19544846050870146,(a) 2-Agents Swimmer 0 2
EXPERIMENTS,0.19678714859437751,Agent 0 2 0 2
EXPERIMENTS,0.19812583668005354,Agent 1 5 0 5 5 0 5
EXPERIMENTS,0.1994645247657296,"0
200
400
2 0 2"
EXPERIMENTS,0.20080321285140562,"0
200
400 0 2 pred1"
EXPERIMENTS,0.20214190093708165,(b) 3-agents Hopper 0.00 0.25
EXPERIMENTS,0.2034805890227577,Agent 0 0.5 0.0
EXPERIMENTS,0.20481927710843373,Agent 1 5 0
EXPERIMENTS,0.20615796519410978,Agent 2 2.5 0.0 2.5 0.0 0 5 0.5 0.0 5 0 0.5 0.0
EXPERIMENTS,0.2074966532797858,"0
5
10
0.05 0.00 0.05"
EXPERIMENTS,0.20883534136546184,"0
5
10 0.00 0.25"
EXPERIMENTS,0.2101740294511379,"0
5
10
0.05 0.00 0.05 pred1"
EXPERIMENTS,0.21151271753681392,(c) 4-agents Ant 0.5 0.0 0.5
EXPERIMENTS,0.21285140562248997,Agent 0 0.5 0.0 0.5
EXPERIMENTS,0.214190093708166,Agent 1 0.5 0.0 0.5
EXPERIMENTS,0.21552878179384202,Agent 2 0.5 0.0 0.5
EXPERIMENTS,0.21686746987951808,"Agent 3 0.5 0.0 0.5 0.5 0.0 0.5 0.5 0.0 0.5 0.5 0.0 0.5 0
25 0.5 0.0 0.5 0
25 0.5 0.0 0.5 0
25 0.5 0.0 0.5 0
25 0.5 0.0 0.5 pred1"
EXPERIMENTS,0.2182061579651941,(d) 2-Agents Swimmer 2 0
EXPERIMENTS,0.21954484605087016,Agent 0 2 0
EXPERIMENTS,0.22088353413654618,Agent 1 5 0 5 5 0 5
EXPERIMENTS,0.2222222222222222,"0
200
400 2 0"
EXPERIMENTS,0.22356091030789826,"0
200
400
2 0"
EXPERIMENTS,0.2248995983935743,pred40
EXPERIMENTS,0.22623828647925034,(e) 3-agents Hopper 0 1
EXPERIMENTS,0.22757697456492637,Agent 0 2.5 0.0
EXPERIMENTS,0.2289156626506024,Agent 1 2.5 0.0
EXPERIMENTS,0.23025435073627845,"2.5
Agent 2 5 0 5 0 0 5 2.5 0.0 2.5 0.0 2.5 2.5 0.0"
EXPERIMENTS,0.23159303882195448,"0
50
100
0.05 0.00 0.05"
EXPERIMENTS,0.23293172690763053,"0
50
100 0 1"
EXPERIMENTS,0.23427041499330656,"0
50
100
0.05 0.00 0.05"
EXPERIMENTS,0.23560910307898258,pred40
EXPERIMENTS,0.23694779116465864,(f) 4-agents Ant
EXPERIMENTS,0.23828647925033467,"0.5
0.0
0.5"
EXPERIMENTS,0.23962516733601072,Agent 0 0 1
EXPERIMENTS,0.24096385542168675,Agent 1 0 1
EXPERIMENTS,0.24230254350736277,Agent 2 0 1
EXPERIMENTS,0.24364123159303883,Agent 3 1 0 1 0
EXPERIMENTS,0.24497991967871485,"0.5
0.0
0.5"
EXPERIMENTS,0.2463186077643909,"0.5
0.0
0.5 0
20 0.5 0.0 0.5 0
20 0.5 0.0 0.5 0
20 0.5 0.0 0.5"
EXPERIMENTS,0.24765729585006693,"0
20
1 0"
EXPERIMENTS,0.24899598393574296,pred40
EXPERIMENTS,0.250334672021419,"Figure 2: Predicted Trajectories (colored) vs Actual Observations (black). (a)-(c) First iteration; (d)
- (f) Iteration 40. The X axis represents the part of steps encountered for one trajectory under that
iteration, and the Y axis represents the numerical value of the observation, i.e. (a) has three rows to
represent its three coordinates of its observation. We also provide iteration 10, 20 in §D.1"
EXPERIMENTS,0.25167336010709507,"columns figure, with each row representing the observation feature and each column representing
each agent. As we can see from the figures, the first iteration of the learning does not predict the
actual observation very well; it has some mismatches. However, as learning progresses, the predic-
tions get increasingly more accurate. Note that the actual trajectory is changing according to the
current policy, and the current policy is optimized based on the further accurate learning of GAPSR."
EXPERIMENTS,0.25301204819277107,(a) Predator Prey (n=3)
EXPERIMENTS,0.2543507362784471,"0.5
1.0 1e6 20 10 0 10 20 30 40 50"
EXPERIMENTS,0.2556894243641232,"GAPSR-2
IPSR
Baseline"
EXPERIMENTS,0.2570281124497992,iterations = steps(×1e6)
EXPERIMENTS,0.2583668005354752,Average episode reward
EXPERIMENTS,0.2597054886211513,(b) Predator Prey (n=15)
EXPERIMENTS,0.26104417670682734,"0.5
1.0 1e6 0 2000 4000 6000 8000 10000"
EXPERIMENTS,0.26238286479250333,"GAPSR-2
IPSR
Baseline"
EXPERIMENTS,0.2637215528781794,iterations = steps(×1e6)
EXPERIMENTS,0.26506024096385544,Average episode reward
EXPERIMENTS,0.26639892904953144,(c) Predator Prey (n=100)
EXPERIMENTS,0.2677376171352075,"0.5
1.0 1e6 0 20000 40000 60000 80000"
EXPERIMENTS,0.26907630522088355,100000
EXPERIMENTS,0.27041499330655955,"GAPSR-2
IPSR
Baseline"
EXPERIMENTS,0.2717536813922356,iterations = steps(×1e6)
EXPERIMENTS,0.27309236947791166,Average episode reward
EXPERIMENTS,0.2744310575635877,(d) Cooperative Push (n=3)
EXPERIMENTS,0.2757697456492637,"0.5
1.0 1e6 350 300 250 200 150"
EXPERIMENTS,0.27710843373493976,"GAPSR-2
IPSR
Baseline"
EXPERIMENTS,0.2784471218206158,iterations = steps(×1e6)
EXPERIMENTS,0.2797858099062918,Average episode reward
EXPERIMENTS,0.28112449799196787,(e) Cooperative Push(n=15)
EXPERIMENTS,0.2824631860776439,"0.5
1.0 1e6 3200 3000 2800 2600 2400 2200"
EXPERIMENTS,0.2838018741633199,"GAPSR-2
IPSR
Baseline"
EXPERIMENTS,0.285140562248996,iterations = steps(×1e6)
EXPERIMENTS,0.28647925033467203,Average episode reward
EXPERIMENTS,0.2878179384203481,(f) Cooperative Push (n=30)
EXPERIMENTS,0.2891566265060241,"0.5
1.0 1e6 6500 6000 5500 5000 4500 4000 3500 3000"
EXPERIMENTS,0.29049531459170014,"GAPSR-2
IPSR
Baseline"
EXPERIMENTS,0.2918340026773762,iterations = steps(×1e6)
EXPERIMENTS,0.2931726907630522,Average episode reward
EXPERIMENTS,0.29451137884872824,"Figure 3: Performance of our method (GAPSR-2)
under multi-agent particle partially observable en-
vironments. We use a different number of agents in
predator-prey and cooperative push environments.
We run ten times, and the shaded area is the 95%
confidence interval."
EXPERIMENTS,0.2958500669344043,"To enrich our algorithm environment, we also test our
algorithm (GAPSR-2) in multi-agent particle environ-
ments, using the benchmark by (Lowe et al., 2017),
please check §D.2 for experiment details. We test
our algorithm for large n cases. In this environment,
the agents can have cooperative goals such that all
agents must maximize a shared return and conflict-
ing competitive goals. We set up the environments
where agents can only perform physical actions but
not communication; however, to achieve the goals,
agents need explicit communication about others’ lo-
cations to achieve the best reward. These partially
observable environments give us the motivation to
test our method. We report the rewards in Figure 3.
We see that GAPSR outperforms IPSR and baseline,
in terms of the convergence speed and final attained
rewards, with a different number of agents. The pre-
dictive states convey the information that can help
communication between agents in limited communi-
cation and observation environments."
CONCLUSION,0.2971887550200803,"7
CONCLUSION"
CONCLUSION,0.29852744310575635,"We propose a GAPSR model, extending ideas from
single-agent predictive state representations to a
multi-agent scenario, during the process, we intro-
duce the dynamic interactive graph to model agents’ interactions. Furthermore, we provide the
theoretical guarantees of the GAPSR model. Finally, a learning algorithm that supports gradient-
based deep MARL methods is developed. Our method provides a model-based MARL framework
under a partially observable environment. The experiments proved that our model assumption is valid
by observing the highest return while reducing the observations’ prediction error over trajectories."
CONCLUSION,0.2998661311914324,Published as a conference paper at ICLR 2022
REFERENCES,0.30120481927710846,REFERENCES
REFERENCES,0.30254350736278446,"Douglas Aberdeen, Olivier Buffet, and Owen Thomas. Policy-gradients for psrs and pomdps. In
Artificial Intelligence and Statistics, pp. 3–10. PMLR, 2007."
REFERENCES,0.3038821954484605,"Bowen Baker, Ingmar Kanitscheider, Todor Markov, Yi Wu, Glenn Powell, Bob McGrew, and Igor
Mordatch. Emergent tool use from multi-agent autocurricula. arXiv preprint arXiv:1909.07528,
2019."
REFERENCES,0.30522088353413657,"Byron Boots and Geoffrey J Gordon. Predictive state temporal difference learning. arXiv preprint
arXiv:1011.0041, 2010."
REFERENCES,0.30655957161981257,"Byron Boots, Sajid M Siddiqi, and Geoffrey J Gordon. Closing the learning-planning loop with
predictive state representations. The International Journal of Robotics Research, 30(7):954–966,
2011."
REFERENCES,0.3078982597054886,"Byron Boots, Geoffrey Gordon, and Arthur Gretton. Hilbert space embeddings of predictive state
representations. arXiv preprint arXiv:1309.6819, 2013."
REFERENCES,0.3092369477911647,"Dan Braha and Yaneer Bar-Yam. Time-dependent complex networks: Dynamic centrality, dynamic
motifs, and cycles of social interactions. In Adaptive Networks, pp. 39–50. Springer, 2009."
REFERENCES,0.31057563587684067,"Lorenzo Canese, Gian Carlo Cardarilli, Luca Di Nunzio, Rocco Fazzolari, Daniele Giardino, Marco
Re, and Sergio Spanò. Multi-agent reinforcement learning: A review of challenges and applications.
Applied Sciences, 11(11):4948, 2021."
REFERENCES,0.3119143239625167,"Anthony Rocco Cassandra. Exact and approximate algorithms for partially observable Markov
decision processes. Brown University, 1998."
REFERENCES,0.3132530120481928,"Bilian Chen, Biyang Ma, Yifeng Zeng, Langcai Cao, and Jing Tang. Tensor Decomposition for
Multi-agent Predictive State Representation. arXiv:2005.13706 [cs], May 2020."
REFERENCES,0.31459170013386883,"Jakob Foerster, Gregory Farquhar, Triantafyllos Afouras, Nantas Nardelli, and Shimon Whiteson.
Counterfactual multi-agent policy gradients. In Proceedings of the AAAI Conference on Artificial
Intelligence, volume 32, 2018."
REFERENCES,0.31593038821954483,"Roger Frigola, Fredrik Lindsten, Thomas B. Schön, and Carl E. Rasmussen. Bayesian Inference and
Learning in Gaussian Process State-Space Models with Particle MCMC. arXiv:1306.2861 [cs,
stat], December 2013."
REFERENCES,0.3172690763052209,"Peter J Grabner and Helmut Prodinger. Maximum statistics of n random variables distributed by the
negative binomial distribution. Combinatorics, Probability and Computing, 6(2):179–183, 1997."
REFERENCES,0.31860776439089694,"Sven Gronauer and Klaus Diepold. Multi-agent deep reinforcement learning: a survey. Artificial
Intelligence Review, 55(2):895–943, 2022."
REFERENCES,0.31994645247657294,"William Hamilton, Mahdi Milani Fard, and Joelle Pineau. Efficient learning and planning with
compressed predictive states. The Journal of Machine Learning Research, 15(1):3395–3439, 2014."
REFERENCES,0.321285140562249,"Ahmed Hefny, Carlton Downey, and Geoffrey J Gordon. Supervised learning for dynamical system
learning. Advances in neural information processing systems, 28:1963–1971, 2015."
REFERENCES,0.32262382864792505,"Ahmed Hefny, Carlton Downey, and Geoffrey Gordon. An efficient, expressive and local minima-free
method for learning controlled dynamical systems. In Thirty-Second AAAI Conference on Artificial
Intelligence, 2018a."
REFERENCES,0.32396251673360105,"Ahmed Hefny, Zita Marinho, Wen Sun, Siddhartha Srinivasa, and Geoffrey Gordon. Recurrent
predictive state policy networks. In International Conference on Machine Learning, pp. 1949–
1958. PMLR, 2018b."
REFERENCES,0.3253012048192771,"Daniel Hsu, Sham M Kakade, and Tong Zhang. A spectral algorithm for learning hidden markov
models. Journal of Computer and System Sciences, 78(5):1460–1480, 2012."
REFERENCES,0.32663989290495316,"Michael R James and Satinder Singh. Learning and discovery of predictive state representations
in dynamical systems with reset. In Proceedings of the twenty-first international conference on
Machine learning, pp. 53, 2004."
REFERENCES,0.3279785809906292,Published as a conference paper at ICLR 2022
REFERENCES,0.3293172690763052,"Nan Jiang, Alex Kulesza, and Satinder P Singh. Completing state representations using spectral
learning. In NeurIPS, pp. 4333–4342, 2018."
REFERENCES,0.33065595716198126,"Leslie Pack Kaelbling, Michael L Littman, and Anthony R Cassandra. Planning and acting in partially
observable stochastic domains. Artificial intelligence, 101(1-2):99–134, 1998."
REFERENCES,0.3319946452476573,"Timothy P Lillicrap, Jonathan J Hunt, Alexander Pritzel, Nicolas Heess, Tom Erez, Yuval Tassa,
David Silver, and Daan Wierstra. Continuous control with deep reinforcement learning. arXiv
preprint arXiv:1509.02971, 2015."
REFERENCES,0.3333333333333333,"Michael L Littman, Richard S Sutton, and Satinder P Singh. Predictive representations of state. In
NIPS, volume 14, pp. 30, 2001."
REFERENCES,0.33467202141900937,"Iou-Jen Liu, Raymond A Yeh, and Alexander G Schwing. Pic: permutation invariant critic for
multi-agent deep reinforcement learning. In Conference on Robot Learning, pp. 590–602. PMLR,
2020a."
REFERENCES,0.3360107095046854,"Yong Liu, Weixun Wang, Yujing Hu, Jianye Hao, Xingguo Chen, and Yang Gao. Multi-agent game
abstraction via graph attention neural network. In Proceedings of the AAAI Conference on Artificial
Intelligence, volume 34, pp. 7211–7218, 2020b."
REFERENCES,0.3373493975903614,"Ryan Lowe, Yi Wu, Aviv Tamar, Jean Harb, Pieter Abbeel, and Igor Mordatch. Multi-Agent
Actor-Critic for Mixed Cooperative-Competitive Environments. arXiv:1706.02275 [cs], June
2017."
REFERENCES,0.3386880856760375,"Xueguang Lyu and Christopher Amato. Likelihood Quantile Networks for Coordinating Multi-Agent
Reinforcement Learning. arXiv:1812.06319 [cs, stat], June 2020."
REFERENCES,0.34002677376171353,"Shuai Ma, Renjun Hu, Luoshu Wang, Xuelian Lin, and Jinpeng Huai. Fast computation of dense
temporal subgraphs. In 2017 IEEE 33rd International Conference on Data Engineering (ICDE),
pp. 361–372. IEEE, 2017."
REFERENCES,0.3413654618473896,"Frans A Oliehoek and Christopher Amato. A concise introduction to decentralized POMDPs. Springer,
2016."
REFERENCES,0.3427041499330656,"Judea Pearl et al. Models, reasoning and inference. Cambridge, UK: CambridgeUniversityPress, 19,
2000."
REFERENCES,0.34404283801874164,"Joelle Pineau, Geoff Gordon, Sebastian Thrun, et al. Point-based value iteration: An anytime
algorithm for pomdps. In IJCAI, volume 3, pp. 1025–1032. Citeseer, 2003."
REFERENCES,0.3453815261044177,"Robert Platt Jr, Russ Tedrake, Leslie Kaelbling, and Tomas Lozano-Perez. Belief space planning
assuming maximum likelihood observations. 2010."
REFERENCES,0.3467202141900937,"Pascal Poupart and Nikos Vlassis. Model-based bayesian reinforcement learning in partially observ-
able domains. In Proc Int. Symp. on Artificial Intelligence and Mathematics,, pp. 1–2, 2008."
REFERENCES,0.34805890227576974,"Tabish Rashid, Mikayel Samvelyan, Christian Schroeder, Gregory Farquhar, Jakob Foerster, and Shi-
mon Whiteson. Qmix: Monotonic value function factorisation for deep multi-agent reinforcement
learning. In International Conference on Machine Learning, pp. 4295–4304. PMLR, 2018."
REFERENCES,0.3493975903614458,"Heechang Ryu, Hayong Shin, and Jinkyoo Park. Multi-agent actor-critic with hierarchical graph
attention network. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 34,
pp. 7236–7243, 2020."
REFERENCES,0.3507362784471218,"Sajid Siddiqi, Byron Boots, and Geoffrey Gordon. Reduced-Rank Hidden Markov Models. In
Proceedings of the Thirteenth International Conference on Artificial Intelligence and Statistics, pp.
741–748. JMLR Workshop and Conference Proceedings, March 2010."
REFERENCES,0.35207496653279785,"Satinder Singh, Michael James, and Matthew Rudary. Predictive state representations: A new theory
for modeling dynamical systems. arXiv preprint arXiv:1207.4167, 2012."
REFERENCES,0.3534136546184739,"Kyunghwan Son, Daewoo Kim, Wan Ju Kang, David Earl Hostallero, and Yung Yi. Qtran: Learning to
factorize with transformation for cooperative multi-agent reinforcement learning. In International
Conference on Machine Learning, pp. 5887–5896. PMLR, 2019."
REFERENCES,0.35475234270414996,Published as a conference paper at ICLR 2022
REFERENCES,0.35609103078982596,"James H Stock, Mark W Watson, et al. Introduction to econometrics, volume 3. Pearson New York,
2012."
REFERENCES,0.357429718875502,"Wen Sun, Arun Venkatraman, Byron Boots, and J Andrew Bagnell. Learning to filter with predictive
state inference machines. In International conference on machine learning, pp. 1197–1205. PMLR,
2016."
REFERENCES,0.35876840696117807,"Peter Sunehag, Guy Lever, Audrunas Gruslys, Wojciech Marian Czarnecki, Vinicius Zambaldi,
Max Jaderberg, Marc Lanctot, Nicolas Sonnerat, Joel Z. Leibo, Karl Tuyls, and Thore Graepel.
Value-Decomposition Networks For Cooperative Multi-Agent Learning. arXiv:1706.05296 [cs],
June 2017."
REFERENCES,0.36010709504685406,"Ming Tan. Multi-agent reinforcement learning: Independent vs. cooperative agents. In Proceedings
of the tenth international conference on machine learning, pp. 330–337, 1993."
REFERENCES,0.3614457831325301,"Sebastian Thrun. Monte carlo pomdps. In NIPS, volume 12, pp. 1064–1070, 1999."
REFERENCES,0.3627844712182062,"Joel A. Tropp. An Introduction to Matrix Concentration Inequalities. arXiv:1501.01571 [cs, math,
stat], January 2015."
REFERENCES,0.36412315930388217,"Arun Venkatraman, Nicholas Rhinehart, Wen Sun, Lerrel Pinto, Martial Hebert, Byron Boots, Kris M
Kitani, and J Andrew Bagnell. Predictive-state decoders: Encoding the future into recurrent
networks. arXiv preprint arXiv:1709.08520, 2017."
REFERENCES,0.3654618473895582,"Christian Schroeder de Witt, Bei Peng, Pierre-Alexandre Kamienny, Philip Torr, Wendelin Böhmer,
and Shimon Whiteson. Deep Multi-Agent Reinforcement Learning for Decentralized Continuous
Cooperative Control. arXiv:2003.06709 [cs, stat], December 2020."
REFERENCES,0.3668005354752343,"Chao Yu, Akash Velu, Eugene Vinitsky, Yu Wang, Alexandre Bayen, and Yi Wu. The surprising
effectiveness of ppo in cooperative, multi-agent games. arXiv preprint arXiv:2103.01955, 2021."
REFERENCES,0.36813922356091033,"Kaiqing Zhang, Zhuoran Yang, and Tamer Ba¸sar. Multi-agent reinforcement learning: A selective
overview of theories and algorithms. Handbook of Reinforcement Learning and Control, pp.
321–384, 2021."
REFERENCES,0.36947791164658633,"Zhi Zhang, Jiachen Yang, and Hongyuan Zha. Integrating independent and centralized multi-agent
reinforcement learning for traffic signal network optimization. arXiv:1909.10651 [cs, stat],
September 2019."
REFERENCES,0.3708165997322624,"Qiankun Zhao, Yuan Tian, Qi He, Nuria Oliver, Ruoming Jin, and Wang-Chien Lee. Communication
motifs: a tool to characterize social communications. In Proceedings of the 19th ACM international
conference on Information and knowledge management, pp. 1645–1648, 2010."
REFERENCES,0.37215528781793844,"Meng Zhou, Ziyu Liu, Pengwei Sui, Yixuan Li, and Yuk Ying Chung. Learning Implicit Credit
Assignment for Cooperative Multi-Agent Reinforcement Learning. arXiv:2007.02529 [cs, stat],
October 2020."
REFERENCES,0.37349397590361444,Published as a conference paper at ICLR 2022
REFERENCES,0.3748326639892905,"A
METHOD DETAILS"
REFERENCES,0.37617135207496655,"A.1
MATHEMATICAL MODEL OF PSR"
REFERENCES,0.37751004016064255,"Here, we give the mathematical model for PSR. As in Section 3, we let τt := {(ol, al)}t+k−1
l=t
as a
test (a sequence of action-observation pairs) at time t, then we have a subset τ o
t := {ol}t+k−1
l=t
for
observations, and τ a
t := {al}t+k−1
l=t
for actions. And we let ht := {(ol, al)}t−1
l=1 as the history at time
t. A test is executed at time t if we intervene to select the sequence of actions specified by the test. It
is said to succeed at time t if it is executed and the sequence of observations in the test matches the
observations by the system (Boots et al., 2013)."
REFERENCES,0.3788487282463186,"The prediction of a length-k test τt is defined as the probability distribution that the test succeed at
time t, given history ht: Pr(τ o
t |τ a
t , ht) = Pr(τ o
t ,τ a
t |ht)
Pr(τ a
t |ht)"
REFERENCES,0.38018741633199465,"Let T = {τz}, z ∈N is a finite set of core tests. And we use To = {τ o
1 , · · · , τ o
|T|} and Ta =
{τ a
1 , · · · , τ a
|T|} to indicate its observation and action parts."
REFERENCES,0.3815261044176707,"A.1.1
LINEAR PSR"
REFERENCES,0.3828647925033467,A linear PSR is the prediction vector
REFERENCES,0.38420348058902276,"qt :=
h
Pr(τ o
1 |τ a
1 , ht), . . . Pr(τ o
|T||τ a
|T|, ht)
i⊤
(16)
that contains the probabilities of success of the tests in T, if and only if for any test τ
Pr(τ o|τ a, ht) = fτ(qt),
(17)
where fτ : [0, 1]|T| 7→[0, 1] is a linear projection function. For simplicity of notation, we use the
same notations for qtpt, W, F, which only follows the meaning defined in this section."
REFERENCES,0.3855421686746988,"It means that knowing the probabilities for the tests in T is sufficient for computing the probabilities
for all other tests in the system. The prediction vector is a sufficient statistic for the system at time t,
so we call it as state for the PSR at time t. Therefore, PSR can represent state by using a vector of
predictions of fully observable quantities (tests) conditioned on past events (histories). The prediction
function fτ is linear and has one-to-one relationship to a test τ such that fτ(qt) = f ⊤
τ qt
∀t. The
linear PSR can still represent systems with nonlinear dynamics."
REFERENCES,0.3868808567603748,"To maintain predictions in T, we need to update the state qt. To do that, we predict the success of any
core test τz prepended by a new action a and observation o at time t + k −1, which we call oaτz."
REFERENCES,0.38821954484605087,"Based on Bayes rule, we have"
REFERENCES,0.3895582329317269,"Pr(τ o
z,t+1|τ a
z,t+1, ht+1 = (ht, o, a))) = Pr(oτ o
z,t+1|aτ a
z,t+1, ht)
Pr(o|a, ht)
= f ⊤
aoτzqt
f ⊤
aoqt
,
(18)"
REFERENCES,0.3908969210174029,"and faoτz, fao ∈R|T| are linear operators such that (∀τz ∈T, ∀a ∈A, ∀o ∈O). Then let Faoτ be
the matrix with its columns as faoτz for all τz ∈T. Then the updated state in PSR is obtained by"
REFERENCES,0.392235609103079,"qt+1 = F⊤
aoτqt
f ⊤
aoqt
.
(19)"
REFERENCES,0.39357429718875503,"Given the initial prediction vector q1, the PSR can update with equation 19. This recursive application
of Bayes rule to a belief state is called the Bayes filter. Now we have seen the extended prediction
vector, so we define extended predictive state as:"
REFERENCES,0.3949129852744311,"pt :=
h
Pr(aτ o
1 |aτ a
1 , ht), . . . Pr(aτ o
|T||aτ a
|T|, ht)
i⊤
.
(20)"
REFERENCES,0.3962516733601071,"Clearly, we can see there exists a linear extension operator W such that pt = W(qt). And given the
new observation, we can have a Bayes filter F such that qt+1 = F(pt, o, a). We also introduced
these operators in section 4.4."
REFERENCES,0.39759036144578314,"A.1.2
REPRESENTATION OF STATE AS CONDITIONAL EXPECTATION OF SUFFICIENT
STATISTICS"
REFERENCES,0.3989290495314592,"Instead of learning the distribution, here we recover the idea of representation of states as a conditional
expectation of sufficient statistics and using the supervised learning method to learn (Hefny et al.,"
REFERENCES,0.4002677376171352,Published as a conference paper at ICLR 2022
REFERENCES,0.40160642570281124,"2015). Let history ho
t is a sequence of observation that starts from the beginning of time and ends at
time t −1."
REFERENCES,0.4029451137884873,"We define the belief state bt = Pr(st|ho
t), where st is the current state of the world. bt+1 =
Pr(st+1|ho
t+1) is the next time belief state. We call bt as ""belief state"", which represents the
probability distribution over state space, also represents the knowledge and uncertainty about the
true state of the system. In dynamic system, the task of getting the updated bt+1 with given bt and
new observation ot is called filtering. The task of estimating the Pr(st+1|ho
t) with given current bt
without incorporating any new observation is called one-step prediction."
REFERENCES,0.4042838018741633,"Instead maintaining a belief bt over states, spectral algorithms try to recover observable operators
that can be used to perform filtering and prediction directly, by maintaining the expected value of a
sufficient statistic of future observations."
REFERENCES,0.40562248995983935,"Let a test τ o
t is a length k sequence of observation defined before. As the recursive Bayes rule
holds, we can get the next time prediction vector Pr(τ o
t+1|ho
t+1) using the new observation ot+k
and the current prediction Pr(τ o
t |ho
t), we also define an extended prediction vector Pr(τ o
t+1|ho
t).
These prediction vectors characterize the state of the system and they can be estimated by observ-
able quantities. Given Pr(τ o
t+1|ho
t), filtering becomes the task of getting the updated prediction
vector Pr(τ o
t+1|ho
t+1), ""conditioning"" on ot. One-step prediction becomes getting the Pr(τ o
t+1|ho
t),
""marginalizing"" over ot."
REFERENCES,0.4069611780455154,"Therefore, the spectral algorithms avoid explicitly estimating the latent state or the initial, transition,
or observation distributions. We let qt = E [νt|ho
t], where νt a vector of features that determines
the distribution of future observations Pr(τ o
t |ho
t). For simplicity of notation, we use the same
notations for qt, pt, W, F. Let pt = E [φt|ho
t], where φt is a vector of features that determines
the distribution of observations Pr(τ o
t+1|ho
t). We call qt is the transformed predictive state. So
qt+1 = E

νt+1|ho
t+1

, is the updated predictive state, and pt is the extended predictive state. Let ho
t
be the feature vector of history ho
t."
REFERENCES,0.40829986613119146,"In Hidden Markov Models and Kalman filters, the extended state pt is linearly related to the predictive
state qt. Which is pt = Wqt. Estimation of the W can be done using linear regression with samples
νt and φt, however, due to the overlap between observation windows, the noise terms on νt and φt
are correlated, which will cause biased estimate. The instrumental regression (Pearl et al., 2000;
Stock et al., 2012) is employed. ho
t is a instrumental variable that do not overlap with sequence
{l}l=t+k−1
l=t
and {l}l=t+k
l=t
. The correlation corr(ho
t, e(φt)) = 0 and corr(ho
t, e(νt)) = 0, where e is a
measure of error. By taking the conditional expectation of pt = Wqt given ho
t, we have
E[pt|ho
t] = E[Wqt|ho
t],
(21)
E[E[φt|ho
t]|ho
t] = WE[E[νt|ho
t]|ho
t],
E[φt|ho
t] = WE[qt|ho
t].
Based on the above relationship, we first estimate the E[φt|ho
t] and E[qt|ho
t] by sample ho
t, νt, and
φt, we then use the estimates to compute W. So if we start with q1, we can compute p1 = Wq1,
and get the qt+1 = F(p1, o1), where F is the Bayes filter to update the state."
REFERENCES,0.40963855421686746,"A.2
LEARNING FOR GAPSR IN DETAILS"
REFERENCES,0.4109772423025435,"Here we introduce the details about learning GAPSR, which supplements the section 4.4 and 4.1.1."
REFERENCES,0.41231593038821956,"A.2.1
LEARNING FOR bqt,i,j AND bpt,i,j"
REFERENCES,0.41365461847389556,"To calculate bqt,i,j, we introduce two sets of linear operators Ti,j and Ui,j, such that Ti,j(ψh
t,i,j) ≈
Cψo
t,iψa
t,j|ψh
t,i,j and Ui,j(ψh
t,ij) ≈Cψa
t,jψa
t,j|ψh
t,i,j. We estimate them by using two ridge regressions:"
REFERENCES,0.4149933065595716,"arg min
Ti,j T
X"
REFERENCES,0.41633199464524767,"t=1
L(Ti,j(ψh
t,i,j)), ψo
t,i ⊗ψa
t,j) + R(Ti,j),
(22)"
REFERENCES,0.41767068273092367,"arg min
Ui,j T
X"
REFERENCES,0.4190093708165997,"t=1
L(Ui,j(ψh
t,i,j), ψa
t,j ⊗ψa
t,j) + R(Ui,j).
(23)"
REFERENCES,0.4203480589022758,Published as a conference paper at ICLR 2022
REFERENCES,0.42168674698795183,"L represents the ridge regression loss, and R represents the regularizer. After learning Ti,j and Ui,j,
we can get the estimate of Cψo
t,iψa
t,j|ψh
t,i,j and Cψa
t,jψa
t,j|ψh
t,i,j. Then we get the bqt,i,j by equation 7.
Similarly, we use extended features to obtain bpt,i,j."
REFERENCES,0.42302543507362783,"A.2.2
EXTENSION, FILTERING AND PREDICTION FUNCTIONS"
REFERENCES,0.4243641231593039,"Filtering. To obtain bqt+1,i,j from bqt,i,j, bpt,i,j, we use filtering. We denote Fi,j as the filtering
function. We describe the filtering process as below. From {oi}n
i=1 and {aj}n
j=1, we obtain the
embedding {ϕo
t,i}n
i=1 and {ϕa
t,j}n
j=1. We then compute the observation covariance
Cot,i,ot,i|ht,i,j,at,j = Mϕo
t,i⊗ϕo
t,i|ϕa
t,j;ψh
t,i,jϕa
t,j.
(24)
We then multiply the extended state by inverse observation covariance to change predicting ϕo
t,i into
conditioning on ϕo
t,i.
Mψo
t+1,i|ψa
t+1,j,ϕo
t,i,ϕa
t,j;ψh
t,i,j = Mψo
t+1,i⊗ϕo
t,i|ψa
t+1,j,ϕa
t,j;ψh
t,i,j ×ϕo
t,i (Cot,i,ot,i|ht,i,j,at,j + λI)−1. (25)"
REFERENCES,0.42570281124497994,"× here is to denote n −mode (matrix or vector) product, ×ϕo
t,i means multiplying the tensor by a
matrix (or vector) in mode ϕo
t,i."
REFERENCES,0.42704149933065594,"We condition on ϕo
t,i and ϕa
t,j to obtain shifted state.
qt+1,i,j := Mψo
t+1,i|ψa
t+1,j;ϕo
t,i,ϕa
t,j,ψh
t,i = Mψo
t+1,i|ψa
t+1,j,ϕo
t,i,ϕa
t,j;ψh
t,i ×ϕo
t,i ϕo
t,i ×ϕa
t,j ϕa
t,j.
(26)"
REFERENCES,0.428380187416332,"Based on the updating rule, qt+1,i,j = Fi,j(pt,i, ot,i, at,j), and pt,i = Wi,j(qt,i,j), we write the
filtering equation.
qt+1,i,j = Fi,j(pt,i, ot,i, at,j)
(27)"
REFERENCES,0.42971887550200805,":= Mψo
t+1,i⊗ϕo
t,i|ψa
t+1,j,ϕa
t,j;ψh
t,i,j ×ϕo
t,i (Mϕo
t,i⊗ϕo
t,i|ϕa
t,j;ψh
t,i,jϕa
t,j + λI)−1 ×ϕo
t,i ϕo
t,i ×ϕa
t,j ϕa
t,j,
where pt,i := Mψo
t+1,i⊗ϕo
t,i|ψa
t+1,j,ϕa
t,j;ψh
t,i,j. Fi,j usually is known because it is obtained through the
above calculation using known quantities, however, Wi,j, Zi,j must have to be learned by using
regressions."
REFERENCES,0.43105756358768405,"Extension. The Wi,j can be learned by kernel regression if we know the bqt,i,j and bpt,i,j. Previous
work (Hefny et al., 2018a) demonstrated the kernel regression model for learning single-agent PSR,
here we extend to the GAPSR. We set the model parameter Wi,j."
REFERENCES,0.4323962516733601,"We optimized a ridge regression problem for Wi,j,"
REFERENCES,0.43373493975903615,"arg min
Wi,j T
X"
REFERENCES,0.4350736278447122,"t=1
L(Wi,j(bqt,i,j), bpt,i,j) + R(Wi,j).
(28)"
REFERENCES,0.4364123159303882,"Prediction. We can also get the prediction about the next one time observation ot by the regression
function such as:
bot,i := E(ot,i|qt,i,j, at,j) = Zi,j(qt,i,j ⊗ϕa
t,j).
(29)
We solve the prediction regression function Zi,j by another ridge regression:"
REFERENCES,0.43775100401606426,"arg min
Zi,j T
X"
REFERENCES,0.4390896921017403,"t=1
L(Zi,j(bqt,i,j ⊗ϕa
t,j), ϕo
t,i) + R(Zi).
(30)"
REFERENCES,0.4404283801874163,"A.3
TENSOR DECOMPOSITION OF MAPSR"
REFERENCES,0.44176706827309237,"Existed Formulation. (Chen et al., 2020) use a n + 1 multi-dimensional tensor called system
dynamics tensor D ∈R|T1|×···×|Tn|×|H| to represent the system dynamics of the MAPSR, with |T1|
representing the cardinality of the tests for agent 1, n denoting the number of agents, and the |H|
being the cardinality of the joint history. Each element of the tensor is a probability of a joint test
given joint histories. Given the system dynamics tensor, finding the latent predictive state can be
transferred into finding a minimal linearly independent set from the system dynamics tensor, and it
can be solved by spectral method such as tensor decomposition."
REFERENCES,0.4431057563587684,"As mentioned earlier, this formulation can not satisfy our needs. In Proposition 1 of Appendix A.4,
we also give the sample complexity analysis such that the sample size needed to formulate D scales
exponentially with the length of tests and number of agents."
REFERENCES,0.4444444444444444,Published as a conference paper at ICLR 2022
REFERENCES,0.4457831325301205,"Here we give a summary of tensor decomposition of their method. Given a system dynamic tensor D
such that:"
REFERENCES,0.44712182061579653,"D ≈[λ; D1, · · · , Dn, F] = R
X"
REFERENCES,0.4484605087014726,"r=1
λrD1
r ◦· · · ◦Dn
r Fr.
(31)"
REFERENCES,0.4497991967871486,"Here ◦is the outer product. D1, · · · , Dn, F are matrices. The factor matrices D1, Dn, F consist
of the vectors, i.e., D1 = [D1
:1D1
:2 · · · D1
:R] ∈R|T1|×R. A colon is used to indicate all elements of a
mode, thus, the Rth column of D1 is denoted by D1
:R. For any i1 ∈{1, . . . , |T1|}, in ∈{1, . . . , |Tn|},
and k ∈{1, . . . , |H|}, after the decomposition, we get"
REFERENCES,0.45113788487282463,"Di1,··· ,in,k = R
X"
REFERENCES,0.4524765729585007,"r=1
λrD1
i1r · · · Dn
inrFkr,
(32)"
REFERENCES,0.4538152610441767,"where {i1, · · · , in, k} are index corresponding to the specific dimension of the D. The last dimension
of the tensor D is compressed in a matrix F, and its row vector xk = [xk(1) . . . xk(R)] ∈R1×R, k ∈
{1, . . . , |H|} is a summary of joint history and can be considered as a compressed version of the
system predictive state vector p(Q|hk), the joint history hk ∈H(k ∈[1, |H|]) at time step s = |hk|,
where Q is the core joint test set. The whole fibers listed in the set Q form a basis of the space spanned
by the mode-(n+1) fibers of tensor D. Thus, by constructing the vector m = (λ ∗D1
i1: ∗· · · Dn
in:)T ,
where ∗is Hadamard product. D1
i1: denotes the i1-th row vector of D1. Then we could rewrite the
previous equation as"
REFERENCES,0.45515394912985274,"Di1,··· ,in,k = R
X"
REFERENCES,0.4564926372155288,"r=1
m(r)xk(r) = xk(λ ∗D1
i1: ∗· · · Dn
in:)T = xkm.
(33)"
REFERENCES,0.4578313253012048,"m(r) is a scalar that m(r) = λrD1
i1r · · · Dn
inr. And xk is the system state vector and m is the
prediction parameter, both of them are obtained by the tensor decomposition."
REFERENCES,0.45917001338688085,"A.4
ANALYSIS OF SAMPLE COMPLEXITY FOR FORMULATING THE SYSTEM DYNAMIC
TENSOR"
REFERENCES,0.4605087014725569,"The paper (Chen et al., 2020) does not analyze the sample complexity to construct D, which is a
n + 1 multi-dimensional tensor D ∈R|T1|×···×|Tn|×|H|. We give this analysis. The Di1,··· ,in,k :=
Pr(t1i1, · · · , tnin|hk) is an element of that tensor D such that t1i1 is the i1-th test of agent 1,
similarly, the tnin is the in-th test of agent n, and hk is the joint history."
REFERENCES,0.46184738955823296,"Proposition 1. In a n-agents system, assume every agent has the same observation and action space
|O|, |A|, for a length-k test, to formulate a complete system dynamics tensor D defined in equation 32.
Assume each entry of the tensor needs S samples to give a sufficient estimation using Monte-Carlo
roll-out method, then the total sample size is at least (|O||A|)knS, if the agents are homogeneous, in
other words, they are permutation invariant such that identity does not matter, then the total sample
size is
 |O||A|k+n−1
n

S."
REFERENCES,0.46318607764390896,"Proof. At one time step, for any agent, it has |O||A| different combinations for the joint test, then
for a length of k tests, it follows that (|O||A|)k number of different choices. Then the tensor D
would need (|O||A|)kn elements to cover all the possible length k tests. So the total sample size is
(|O||A|)knS. If the agents are homogeneous, then the ordering does not matter, for each agent, we
have (|O||A|)k number of different choices for length k test, so the total choices for n agents are
 |O||A|k+n−1
n

, then we need
 |O||A|k+n−1
n

S samples."
REFERENCES,0.464524765729585,The sample complexity is exponentially scaled with the number of agents and length of tests.
REFERENCES,0.46586345381526106,"B
ALGORITHM AND INTEGRATING WITH MARL METHOD"
REFERENCES,0.46720214190093706,"We first introduce some backgrounds on two multi-agent frameworks: Multi-agent Markov Decision
Process (MMDP) and Multi-agent Partially observable Markov Decision Process (MPOMDP) since
the algorithms in our paper are developed based on the framework of MPOMDP."
REFERENCES,0.4685408299866131,Published as a conference paper at ICLR 2022
REFERENCES,0.46987951807228917,"B.1
MULTI-AGENT MDP AND MULTI-AGENT POMDP MODEL"
REFERENCES,0.47121820615796517,"B.1.1
MMDP"
REFERENCES,0.4725568942436412,"MMDP model is a tuple
 
S, N, {Oi}i∈[n]{Ai}i∈[n], T, R

, where S and N are finite sets of states
and agents. Ai is a finite set of actions available to agent i; T : S × A1 × · · · × An × S →[0, 1] is a
transition function; and R : S →R is the reward function. Each agent i obtains reward as function
of the state and agent’s action ri : S × Ai →R, and receives a private observation from the state by
the observation channel oi : S →Oi. The state has distribution d : S →[0, 1]. Each agent aims to
maximize its own total expected return ri = PT
t=0 γtrt
i where γ is a discounted factor and T is the
time horizon. In a shared reward situation, there is a team reward function r : S × Ai · · · × An →R,
agents aim to maximize one shared total expected return r = PT
t=0 γtrt."
REFERENCES,0.4738955823293173,"B.1.2
MPOMDP"
REFERENCES,0.47523427041499333,"A
MPOMDP
model
is
a
tuple
 
S, N, {Oi}i∈[n]{Ai}i∈[n], {Ωi}i∈[n], T, R

,
where
(S, Ai, Ti, Oi, Ωi, R) describe a single-agent POMDP. Oi is the set of observations the agent i can
make. Ωi : S × Ai × Oi →[0, 1] is the agent’s observation channel function, which specifies
probabilities of observations given agent’s actions and resulting states. (S, Ai, Ti, Ri) describes
a single agent MDP; and each agent i obtaines reward as function of the state and agetn’s action
ri : S × Ai →R. Each agent aims to maximize its own total expected return ri = PT
t=0 γtrt
i where
γ is a discounted factor and T is the time horizon. In POMDP, an agent’s belief about the sate is repre-
sented as probability distribution over S. The agent has prior belief b0,i The agent’s current belief, bt,i
over S, is continuously revised based on new observations and expected results of performed actions.
The belief update takes into account changes in initial belief, bt−1,i, due to action at,i, executed at
time t −1, and the new observation, ot,i. The new time belief state can be obtained from basic
probability theory as follows: bi(st) = βΩi(ot,i, st, at−1,i) P"
REFERENCES,0.47657295850066933,"st−1∈S bt−1,i(st−1)T(st, at,i, st−1),
where β is the normalizing factor."
REFERENCES,0.4779116465863454,"B.2
ALGORITHM: GAPSR"
REFERENCES,0.47925033467202144,We give the details of GAPSR in Algorithm 1.
REFERENCES,0.48058902275769744,"B.3
GAPSR IN DIAGRAM"
REFERENCES,0.4819277108433735,"We also use a diagram (Fig 4) to depict the algorithm. The algorithm runs k iterations; each iteration
first uses the policy to roll out data and uses the regressions to obtain the PSR parameters. Then it uses
the PSR as the input of policy to generate action and using the current PSR parameters to update the
predictive state. At the end of this phase, it updates both the PSR and policy parameters. The policy
parameters and PSR parameters Wi and Zi are parameterized by the neural network, section C.3
has the network architectures. The loss is a composite loss that includes loss from actor-critic and
the loss from the predictive state representation. The next iteration will re-learn the PSR parameters
using the newly generated data based on the current policy obtained from the previous iteration; then,
it does a soft update to update the PSR parameters with ones obtained at the previous iteration."
REFERENCES,0.48326639892904955,"B.4
INTEGRATING TWO COMMON MARL ALGORITHMS INTO GAPSR MODEL"
REFERENCES,0.48460508701472554,"Here we provide a brief intuitive introduction about how we connect existed MARL algorithms with
GAPSR. Please look at Fig 4 for demonstration. ψo
t,i, ψa
t,j, and ψh
t,i,j are embedding of (ot:t+k−1,i,
at:t+k−1,j), and (o1:t−1,i, a1:t−1,j). We also have embedding for extended part, labeled as ξ. qt,i,j
and pt,i,j are estimated by regression using the embedding vectors. G represents the given graph,
the estimation of qt,i and pt,i are based on graph G and equation 5, equation 9 and equation 10 for
reference. Please also go to section 4 for detailed description. The policy network uses the predictive
state as input to return the action or its distribution. The agent takes the action to get the observation.
The filter Fi,j takes predictive state, action, and observation as inputs to get the next predictive state.
We present a centralized critic and give the description in paragraph B.4.2. The loss is composed into
two parts, we give a detailed explanation in section 5. Please also go to section 5 and Algorithm B.2
for more details about the framework."
REFERENCES,0.4859437751004016,Published as a conference paper at ICLR 2022
REFERENCES,0.48728246318607765,Algorithm 1 GAPSRL
REFERENCES,0.4886211512717537,"1: Input: Learning rate η, a graph G, a static complete graph Gc or static non-compete graph Gs
or dynamic graph Gt
2: Initialize MARL Policy ΘMARL randomly
3: for k = 1, 2, 3, · · · iterations do
4:
GAPSR Model Estimation Phase
5:
Sample b = 1, 2, 3, · · · M batch of initial trajectories: {(ob
t, ab
t)}M
b=1 from existed policy
obtained from previous iteration k −1: {πk−1
i
}n
i=1
6:
Let πk
i = πk−1
i
if available or the initial policy
7:
Given G, calculate bqt,i,j and bpt,i,j, and obtain the initial Wi,j, Zi,j, Fi,j:
8:
(1) Regression qt,i,j = Ti,j ◦Ui,j(ht,i,j) to get the bqt,i,j and bpt,i,j
9:
(2) Given the bqt,i,j, bpt,i,j, compute Wi,j, Zi,j, Fi,j
10:
(3) Get initial q1,i,j and p1,i,j by using the Ti,j and Ui,j with the early window of observa-
tions.
11:
(4) Given the graph G, using equation 5, 9, or 10 to obtain q1,i, p1,i
12:
13:
Generation of Predictive Representations
14:
Initialize GAPSR parameters ΘGAP SR = {Wi,j, Zi,j} from GAPSR Model Estimation Phase
and previous iteration by a soft-update:
Wi,j = βWi,j + (1 −β)W k−1
i,j
, Zi,j = βZi,j + (1 −β)Zk−1
i,j , Fi,j = Fi,j
15:
for b = 1, 2, 3, · · · M batch of trajectories from {πk−1
i
}n
i=1 do
16:
Reset episode: ab
1, ob
1 for all agents
17:
for t = 1, 2, · · · T roll-in in each trajectory do
18:
for Each agent i do
19:
Get observation ob
t,i and reward rb
t,i and its neighbor’s action ab
t,j
20:
Extension pb
t,i,j = Wi,j(qb
t,i,j)
21:
Filtering qb
t+1,i,j = Fi,j(qb
t,i,j, ab
t,j, ob
t,i, Wi,j)
22:
Predict bob
t,i = Zi,j(qb
t,i,j, ab
t,j)
23:
Given the graph G, obtain qb
t+1,i
24:
Execute ab
t+1,i ∼πk−1
i
(qb
t+1,i)
25:
Collect ob
t,i, bob
t,i, ab
t,i, rb
t,i, qb
t,i
26:
end for
27:
end for
28:
end for
29:
30:
Learning Multi-agent Actor-Critic
31:
Update Θ using D = {{{ob
t,i, bob
t,i, ab
t,i, rb
t,i, qb
t,i, qb
t,i,j}n
i=1}T
t=1}M
b=1:
Θ ←Update(Θk−1, D, η) as in Equation (13):
32:
L(Θ) = α1L1(ΘMARL) + α2L2 (ΘGAPSR, ΘMARL)
L1(ΘMARL) = −J(θ) + Lc(w)
Lc = Eq,r,o

(Qπ
w(q1, · · · , qn, a1, · · · , an) −y)2"
REFERENCES,0.4899598393574297,"∇θiJ(θi) = Eq,r,o

∇θiπθi(qi)∇aiQπ
w(q1, · · · , qn, a1, · · · , an)|ai=πθi(qi)
"
REFERENCES,0.49129852744310576,"L2(ΘGAPSR, ΘMARL) = Pn
i=1 Eτ∼p(τ|Θ)
hP"
REFERENCES,0.4926372155287818,"j
Zi,j
 
Fi,j(Wi,j(qt−1,i,j)) ⊗ϕa
t,j

−ϕo
t,i
2
2 i"
REFERENCES,0.4939759036144578,"33:
Get W k
i,j,Zk
i,j, and πk
i
34: end for
35: Output: Return Θ = (ΘGAP SR, ΘMARL)"
REFERENCES,0.49531459170013387,"B.4.1
GAPSR-1"
REFERENCES,0.4966532797858099,"It is based on the IAC (Foerster et al., 2018) which directly applies the single-agent policy gradient to
have each agent learn independently, with the idea behind independent Q-learning (Tan, 1993), with
actor-critic in place of Q-learning."
REFERENCES,0.4979919678714859,Published as a conference paper at ICLR 2022
REFERENCES,0.499330655957162,"MARL Part
MAPSR Part . . . . . ."
REFERENCES,0.500669344042838,Regression ＝
REFERENCES,0.5020080321285141,Agent 1
REFERENCES,0.5033467202141901,Agent n
REFERENCES,0.5046854082998661,Embedding
REFERENCES,0.5060240963855421,Agent i
REFERENCES,0.5073627844712182,"Figure 4: GAPSR architecture combining GAPSR and MARL. The left part is the GAPSR model,
which corresponds to the GAPSR Model Estimation Phase in Algorithm 1. The right part is the
MARL, which corresponds to the generation of predictive representations and learning the multi-
agent actor-critic. We use the actor-critic framework, which contains a centralized critic and many
decentralized actors. We could also give a parameter sharing actor network that maps individual PSR
to parameters of a Gaussian distribution over the individual action space if agents are homogeneous.
Both actor and critic are parameterized by neural networks. Section B.4 and section C.3 give a
detailed description about this architecture."
REFERENCES,0.5087014725568942,"IAC trains an actor-critic pair for each agent, resulting in actors πi(ai|oi) and critics Vi(oi, ai)."
REFERENCES,0.5100401606425703,"∇θiJ(θi) = Eo,a,r
h T
X"
REFERENCES,0.5113788487282463,"t=0
∇θi log πi(at,i|ot,i)
 
ri + γV πi
i (ot+1,i, at+1,i) −V πi
i (ot,i, at,i)
i
.
(34)"
REFERENCES,0.5127175368139224,"While IAC agents display a strong ability to optimize individual rewards (Tan, 1993), the lack of
global information and a mechanism for cooperation means they are likely to settle for sub-optimal
solutions."
REFERENCES,0.5140562248995983,"Here we use the predictive state qi to fit the value and policy functions. And we train an actor-critic
pair for each agent, resulting in actors πθi(ai|qi) and critics Vi(qi)."
REFERENCES,0.5153949129852744,"∇θiJ(θi) = Eτi∼p(τi|Θi)
h T
X"
REFERENCES,0.5167336010709505,"t=0
∇θi log πθi(at,i|qt,i)(ri + γV πi
wi (qt+1,i) −V πi
wi (qt,i))
i
.
(35)"
REFERENCES,0.5180722891566265,"If the agents are homogeneous, we can share the critic and actor network. We have the critic loss as
Lc = Eτi∼p(τi|Θi)[(V πi
wi (qi) −yi)2],
yi = ri + γ bV πi
wi (qt+1,i).
(36)
Here bV is the target value function. Thus, the update of parameters is given by:
δt,i = ri + γ bV πi(qt+1,i) −V πi(qi),
(37)"
REFERENCES,0.5194109772423026,"w′
i = wi + 1 T T
X"
REFERENCES,0.5207496653279786,"t=0
ηwδt,i∇wiV πi(qi),
(38)"
REFERENCES,0.5220883534136547,"θ′
i = θi + 1 T T
X"
REFERENCES,0.5234270414993306,"t=0
ηθδt,i∇θi log πθi(at,i|qt,i).
(39)"
REFERENCES,0.5247657295850067,"B.4.2
GAPSR-2"
REFERENCES,0.5261044176706827,"The algorithm extends from MADDPG (Lowe et al., 2017) using the deterministic policy gradient of
the PSR-value function."
REFERENCES,0.5274431057563588,"MADDPG is an extension of deep deterministic actor-critic policy gradient (DDPG) (Lillicrap et al.,
2015) to multi-agent setting such that let each agent’s own critic is augmented with extra information
about the actions of other agents, while their individual actor maintains a local state or observation."
REFERENCES,0.5287817938420348,Published as a conference paper at ICLR 2022
REFERENCES,0.5301204819277109,"The gradient of each agent is:
∇θiJ(θi) = Eo[∇θiπθi(oi)∇aiQπ
i (o1, · · · , on, a1, · · · , an)|ai = π(oi)].
(40)
The critic loss is
L = Eo,a,r[(Qπ
i (ot,1, · · · , ot,n, at,1, · · · , at,n) −yi)2]
yi = ri + γ bQπ
i (ot+1,1, · · · , ot+1,n, at+1,1, · · · , at+1,n),
(41)
where { bQπ
i } is the set of target value functions with delayed parameters."
REFERENCES,0.5314591700133868,"Our method considers the centralized critic. Also, in order to solve the non-stationary environments
when each agent is learning, it uses the joint predictive states with joint actions as input.
∇θiJ(θi) = Eq,r,o[∇θiπθi(qi)∇aiQπ
w(q1, · · · , qn, a1, · · · , an)|ai=π(qi)]
(42)"
REFERENCES,0.5327978580990629,"The critic loss is defined as below:
Lc =
Eq,r,o[(Qπ
w(qt,1, · · · , qt,n, at,1, · · · , at,n) −y)2],"
REFERENCES,0.5341365461847389,"y =
r + γ bQπ
w(qt+1,1, · · · , qt+1,n, at+1,1, · · · , at+1,n).
(43)"
REFERENCES,0.535475234270415,"Thus, the update of parameters is given by:"
REFERENCES,0.536813922356091,"δt = rt + γ bQπ(qt+1,1, · · · , qt+1,n, at+1,1, · · · , at+1,n) −Qπ(qt,1, · · · , qt,n, at,1, · · · , at,n), (44)"
REFERENCES,0.5381526104417671,"w′ = w + 1 T T
X"
REFERENCES,0.5394912985274432,"t=0
ηwδt∇wQπ(qt,1, · · · , qt,n, at,1, · · · , at,n),
(45)"
REFERENCES,0.5408299866131191,"θ′
i = θi + 1 T T
X"
REFERENCES,0.5421686746987951,"t=0
ηθ∇θiπθi(ai|qi)∇aiQπ(q1, · · · , qn, a1, · · · , an)|ai=π(qi).
(46)"
REFERENCES,0.5435073627844712,"C
ENVIRONMENT AND EXPERIMENT"
REFERENCES,0.5448460508701473,"C.1
MAMUJOCO ENVIRONMENT SETUP"
REFERENCES,0.5461847389558233,"(a)
(b)
(c)
(d)
(e)
(f)"
REFERENCES,0.5475234270414994,"Figure 5: The illustration of three environments swimmer, hopper, ant, and their corresponding
MAMuJoCo version. (a) Single swimmer; (b) Single hopper; (c) Single ant; (d) n-agents swimmer;
(e) 3-agents hopper; (f) 4-agents ant."
REFERENCES,0.5488621151271754,"Here, we give the details of setting up our multi-agent environment - MAMuJoCo. As introduced in
section 6, the many agents are constructed by separating a existed single agent into parts, and each
agent will only control a part of the whole agent (Figure 5)."
REFERENCES,0.5502008032128514,"Partially Observable space: MAMuJoCo is a simulated robotic environment, the partially observable
property is achieved by only allowing partial information to the agents. For all environments, only
the angles of the agent’s joints are visible to the network; the velocities are hidden."
REFERENCES,0.5515394912985274,"Action: Each agent’s action space in MAMuJoCo is given by the joint action space overall motors
controllable by that agent."
REFERENCES,0.5528781793842035,"Observation: For each agent i, observations are constructed by inferring which body segments and
joints are observable by an agent i. Each agent can always observe all joints within its sub-graph. A
configurable parameter k ≥0 determines the maximum graph distance to the agent’s subgraph at
which joints are observable. For example, k = 0 means agents can only observe their own joints and
body parts, while k = 1 means it can observe its adjacent joints, which has 1 graph distance to the"
REFERENCES,0.5542168674698795,Published as a conference paper at ICLR 2022
REFERENCES,0.5555555555555556,Table 1: Configurations for MAMuJoCo environment
REFERENCES,0.5568942436412316,Environments
REFERENCES,0.5582329317269076,"Swimmer
k
0
R
P"
REFERENCES,0.5595716198125836,i( ∆di
REFERENCES,0.5609103078982597,"∆t ) + 0.0001r
r
r = −∥a∥2
2 is a regularizer for joint action a"
REFERENCES,0.5622489959839357,"Hopper
k
2
R
P"
REFERENCES,0.5635876840696118,i( ∆di
REFERENCES,0.5649263721552878,"∆t ) + 0.001r + 1.0
r
r = −∥a∥2
2 is a regularizer for joint action a"
REFERENCES,0.5662650602409639,"Ant
k
0
R
P"
REFERENCES,0.5676037483266398,i( ∆di
REFERENCES,0.5689424364123159,"∆t ) + 5 · 1e(−3) ∥external contact forces∥2
2 + 0.0001r
r
r = −∥a∥2
2 is a regularizer for joint action a"
REFERENCES,0.570281124497992,"agent. The agent observation is then given by a fixed order concatenation of each observable graph
element’s representation vector. Depending on the environment and configuration, representation
vectors may include attributes such as position, velocity, and external body forces. In addition to
joint and body segment-specific observation categories, agents can also be configured to observe the
robot’s central torso’s position and velocity attributes."
REFERENCES,0.571619812583668,"C.2
EXPERIMENT SETUP"
REFERENCES,0.5729585006693441,"We select three experiments from MAMuJoCo and give a detailed description of the experiments’
setup. In all environments, the agent has the goal to maximize the velocity of the first coordinate for
the team. We use k to denote the maximum observation distances to the subgraph. We use ∆d to
denote the first coordinate position difference between a time difference ∆t. Finally, we use R to
denote the reward function. Table 1 has the configuration details for these parameters."
REFERENCES,0.5742971887550201,"C.3
NEURAL NETWORK ARCHITECTURE"
REFERENCES,0.5756358768406962,"We implement all algorithms using deep neural networks as function approximators. We ensure
that all policy and and action-value functions have the same neural network architecture among all
algorithms to the extent each algorithm allows for a fair comparison."
REFERENCES,0.5769745649263721,"Usually, in a continuous environment, each agent’s policy will be parameterized by its actor network
that outputs the mean and diagonal covariance of a Gaussian distribution over the continuous action
space. For our experiments with continuous action spaces, a Gaussian distribution with a diagonal
covariance matrix is used. The policy network maps from the input feature to a Gaussian distribution
vector µ. Moreover, µ = [mean, std], where mean is a vector specifies the action means, and std
vector specifies the standard deviation. For deterministic policy, it maps to the action vector."
REFERENCES,0.5783132530120482,"In the implementation of actor-critic method, all the actor-network is parameterized by a multi-layer
perceptron (MLP) with two hidden layers of size 400 and 300 respectively and ReLU activation,
which takes in the individual agent’s predictive state and outputs the mean and covariance of a
Gaussian policy for stochastic policy, or the action vector for deterministic policy. The critic network
is also an MLP with two hidden layers with 400 and 300 units, respectively. For GAPSR-1, the critic
network is used to approximate per-agent utilities, which receives each agent’s predictive state as
input. For IAC, same as GAPSR-1, it receives agent local observation and individual action as input."
REFERENCES,0.5796519410977242,"In GAPSR-2, there is a shared critic network that approximates all agents utilities, which receives
all agents’ predictive states and the joint action of all agents as input. The global state consists of
the complete state information from the environment. In MADDPG, the critic receives the global
state and the joint action of all agents as input. Each decentralized actor (i.e., policy) network takes
in each agent’s observation and outputs the agent’s action vector."
REFERENCES,0.5809906291834003,Published as a conference paper at ICLR 2022
REFERENCES,0.5823293172690763,Table 2: Model parameters for MAMuJoCo environment
REFERENCES,0.5836680053547524,"Environments
Swimmer
Hopper
Ant"
REFERENCES,0.5850066934404283,"n
2
3
4
µ
0
0
0
σ
0.1
0.1
0.1
γ
0.99
0.99
0.99
Soft target network
0.001
0.001
0.001
α1
0.7
0.65
0.7
α2
0.3
0.35
0.3
β
0.6
0.45
0.5
η learning rate of Adam
0.001
0.001
0.001
λ ridge regression regularization
0.01
0.01
0.01
Total iterations
50
50
50
Number of trajectories
100
100
100
Maximum number of steps per trajectory
1000
1000
1000
Length of test window
8
12
10
Length of history window
8
12
10"
REFERENCES,0.5863453815261044,"C.4
MODEL PARAMETERS"
REFERENCES,0.5876840696117804,The hyper parameters for the the MAMuJoCo environments are in Table 2.
REFERENCES,0.5890227576974565,"D
SUPPLEMENT EXPERIMENTS"
REFERENCES,0.5903614457831325,"D.1
MAMUJOCO SUPPLEMENT EXPERIMENTAL RESULTS"
REFERENCES,0.5917001338688086,"We plotted the predictive observations compared to actual observations in Figure 2 at the beginning
of the learning process (iteration 1) and end of the learning (iteration 40). We also show the results
of iteration ten and iteration 20 in Figure 6. By comparing with iterations 1 and iterations 40 in
Figure 2, we see that the iteration 40 has the smallest difference between predictive observation and
true observation, and the difference gets increased as the iteration goes to the earlier stage of the
learning process. So the predictive accuracy is improved incrementally with the learning progresses."
REFERENCES,0.5930388219544847,"D.2
MULTI-AGENT PARTICLE ENVIRONMENT"
REFERENCES,0.5943775100401606,"We also test GAPSR into another environment, multi-agent particle environment (Lowe et al., 2017).
The agents are displaced into a 2-dimensional coordinate. This environment does not assume that all
agents have identical action and observation spaces. We run experiments using a different number of
agents on two environments, the predator-prey, and cooperative-push. We use the same configuration
in (Liu et al., 2020a). The network has the same design as MAMuJoCo in section C.3, except we use
MLP with two hidden layers with the same 128 units respectively, so we do not repeat the description.
In Table 3, we report the hyperparameters for multi-agent particle environments."
REFERENCES,0.5957161981258366,In the supplementary materials we provide the code and instructions.
REFERENCES,0.5970548862115127,Published as a conference paper at ICLR 2022
REFERENCES,0.5983935742971888,(a) 2-Agents Swimmer 2 0
REFERENCES,0.5997322623828648,Agent 0 2 0
REFERENCES,0.6010709504685409,"2
Agent 1 5 0 5 5 0 5"
REFERENCES,0.6024096385542169,"0
200
400 2 0 2"
REFERENCES,0.6037483266398929,"0
200
400
2 0"
REFERENCES,0.6050870147255689,pred10
REFERENCES,0.606425702811245,(b) 3-agents hopper 0 1
REFERENCES,0.607764390896921,Agent 0 1 0
REFERENCES,0.6091030789825971,Agent 1
REFERENCES,0.6104417670682731,"2.5
0.0
2.5"
REFERENCES,0.6117804551539491,Agent 2 5 0 5 0 5 0 5 1 0
REFERENCES,0.6131191432396251,"2.5
0.0
2.5 1 0 0
50 0.05 0.00 0.05 0
50 0 1 0
50 0.05 0.00 0.05"
REFERENCES,0.6144578313253012,pred10
REFERENCES,0.6157965194109772,(c) 4-agents Ant 0 1
REFERENCES,0.6171352074966533,Agent 0 1 0 1
REFERENCES,0.6184738955823293,Agent 1 1 0 1
REFERENCES,0.6198125836680054,Agent 2 1 0 1
REFERENCES,0.6211512717536813,"Agent 3 0.5 0.0 0.5 0.5 0.0 0.5 0 1 0 1 0
100 0 1 0
100 0 1 0
100 0 1 0
100 0.5 0.0 0.5"
REFERENCES,0.6224899598393574,pred10
REFERENCES,0.6238286479250335,(d) 2-Agents Swimmer 2 0
REFERENCES,0.6251673360107095,Agent 0 2 0 2
REFERENCES,0.6265060240963856,Agent 1 5 0 5 5 0 5
REFERENCES,0.6278447121820616,"0
200
400 2 0 2"
REFERENCES,0.6291834002677377,"0
200
400
2 0"
REFERENCES,0.6305220883534136,pred20
REFERENCES,0.6318607764390897,(e) 3-agents hopper 0 1
REFERENCES,0.6331994645247657,Agent 0 2 0
REFERENCES,0.6345381526104418,Agent 1 2.5 0.0 2.5
REFERENCES,0.6358768406961178,Agent 2
REFERENCES,0.6372155287817939,"2.5
0.0
2.5 5 0"
REFERENCES,0.6385542168674698,"2.5
0.0
2.5 2 0 2.5 0.0 2.5 2 0 0
100 0.05 0.00 0.05 0
100 0 1 0
100 0.05 0.00 0.05"
REFERENCES,0.6398929049531459,pred20
REFERENCES,0.6412315930388219,(f) 4-agents Ant 0.5 0.0 0.5
REFERENCES,0.642570281124498,Agent 0 0.5 0.0
REFERENCES,0.643908969210174,Agent 1 0.5 0.0
REFERENCES,0.6452476572958501,Agent 2 0.5 0.0
REFERENCES,0.6465863453815262,"Agent 3 0.5 0.0 0.5 0.5 0.0 0.5 0.5 0.0 0.5 0.5 0.0 0.5 0
10 0.5 0.0 0.5 0
10 0.5 0.0 0.5 0
10 0.5 0.0 0.5 0
10 0.5 0.0 0.5"
REFERENCES,0.6479250334672021,pred20
REFERENCES,0.6492637215528781,"Figure 6: Additional Experiments Results, Predicted Trajectories vs Actual Observations for Multi-
Agent Environments. (a) - (c) Iteration 10; (d) - (f) Iteration 20; This is the supplement for Figure 2"
REFERENCES,0.6506024096385542,Table 3: Model parameters for multi-agent particle environment
REFERENCES,0.6519410977242303,"Environments
Predator-prey
Cooperative-push
n=3
n=15
n=100
n=3
n=15
n=30"
REFERENCES,0.6532797858099063,"γ
0.99
0.99
0.99
0.99
0.99
0.99
Soft target network
0.001
0.001
0.001
0.001
0.001
0.001
α1
0.8
0.75
0.5
0.8
0.75
0.7
α2
0.2
0.25
0.5
0.2
0.25
0.3
β
0.45
0.5
0.45
0.55
0.5
0.5
η learning rate of Adam
0.05
0.05
0.05
0.05
0.05
0.05
λ ridge regression regularization
0.01
0.01
0.01
0.01
0.01
0.01
Total iterations
30
30
30
30
30
30
Number of trajectories
100
100
100
100
100
100
Maximum number of steps per trajectory
500
500
500
500
500
500
Length of test window
5
5
5
5
5
5
Length of history window
5
5
5
5
5
5"
REFERENCES,0.6546184738955824,"E
DETAILED PROOFS"
REFERENCES,0.6559571619812584,"We give the proof of Theorem 1 in Appendix E.1, and we first introduce the following Lemmas to
prepare the proof.
Definition 2. Let X1 . . . Xk be independent random variables of dimensionality dX1 . . . dXk such
that ∥Xk∥< txk. Let {(x1j . . . , xkj)}N
j=1 be the N i.i.d samples from distribution of X1, . . . , Xk,
the CX1 := E[X1XT
1 ] and bCX1 =
1
N
PN
j=1 x1jxT
1j, and CX1X2 := E[X1XT
2 ] and bCX1,X2 ="
"N
PN",0.6572958500669344,"1
N
PN
j=1 x1jxT
2j. Also, we use the ·), v(·) to denote the largest, smallest eigenvalue of a matrix."
"N
PN",0.6586345381526104,"Lemma 3 ((Tropp, 2015)). Let aj be a finite sequence of independent random, Hermitian matrices
with dimension d. Assume that 0 ≤v(aj) and u(aj) ≤L for each j. Let S = P"
"N
PN",0.6599732262382865,"j aj, then for any
η ∈[0, 1], it follows that"
"N
PN",0.6613119143239625,"Pr(v(S) ≤(1 −η)v(E[S])) ≤d

e−η"
"N
PN",0.6626506024096386,"(1 −η)1−η
v(E[S])/L ≤2de−ηv(E[S])/L.
(47)"
"N
PN",0.6639892904953146,Published as a conference paper at ICLR 2022
"N
PN",0.6653279785809906,"Corollary 1. Let X be a random variable, for any ϵ ∈(0, 1) such that N >
t2
x log(2dX/ϵ)"
"N
PN",0.6666666666666666,"v(CX)
the
following holds with probability at least 1 −ϵ"
"N
PN",0.6680053547523427,"v( bCX) > t2
x log(2dX/ϵ)"
"N
PN",0.6693440428380187,"v(CX)N
."
"N
PN",0.6706827309236948,"In other words, if N large enough, then bCX and CX will be close enough."
"N
PN",0.6720214190093708,"Proof. Define Sj = 1/NxjxT
j .
Then it follows that u(Sj) ≤L = t2
x/N and define ϵ :="
"N
PN",0.6733601070950469,"2dXe−σNv(CX)/t2
x, which implies that σ = t2
x log(2dX/ϵ)"
"N
PN",0.6746987951807228,"v(CX)N
. Then it follows from Matrix Chernoff"
"N
PN",0.6760374832663989,Inequality in Lemma 3 that Pr(v( bCX) ≤(1 −σ)v(CX)) ≤ϵ.
"N
PN",0.677376171352075,"Lemma 4 ((Tropp, 2015)). A finite sequence {aj} of independent, random matrices with common
dimensions a × b, and assume that E[aj] = 0 and ∥aj∥≤L for each j, let S = P"
"N
PN",0.678714859437751,"j aj as a random
matrix. Let V ar(S) be the variance statistics such that V ar(S) = max{
E[SST ]
 ,
E[ST S]
},
then
Pr(∥S∥> c) ≤(a + b)e"
"N
PN",0.6800535475234271,"−c2/2
V ar(S)+Lc/3 .
(48)"
"N
PN",0.6813922356091031,"Corollary 2. With at least probability 1 −ϵ that
 bCY X −CY X
 ≤ r"
"N
PN",0.6827309236947792,2 log(dY + dX)/ϵV ar
"N
PN",0.6840696117804551,"N
+ 2 log((dY + dX)/ϵ)L"
N,0.6854082998661312,"3N
."
N,0.6867469879518072,"where L = tytx + ∥CY X∥≤2tytx and V ar = max{t2
y ∥CX∥, t2
x ∥CY ∥} + ∥CY X∥2 ≤2t2
yt2
x."
N,0.6880856760374833,"Proof. Let X, Y be two random variables, and let a finite sequence {aj} of independent random
matrices to satisfy aj = yjxT
j −CY X. So the aj will have dimensions dX × dY . Let random matrix
S = P"
N,0.6894243641231593,"j aj. It follows that E[aj] = 0 and ∥aj∥=
yjxT
j −CY X
 ≤∥yk∥∥xk∥+ ∥CY X∥≤
tytx + ∥CY X∥,"
N,0.6907630522088354,"E[SST ]
 =  X i,j"
N,0.6921017402945113," 
E[yixT
i xjyT
j ] −CY XCXY
 =  X i"
N,0.6934404283801874,"
E[∥xi∥2 yiyT
i ] −CY XCXY

+
X i̸=j"
N,0.6947791164658634," 
E[yixT
i ]E[xjyT
j ] −CY XCXY
 =  X"
N,0.6961178045515395,"i
(E[∥xi∥2 yiyT
i ] −CY XCXY ) "
N,0.6974564926372155,"≤N(t2
x ∥CY ∥+ ∥CY X∥2)."
N,0.6987951807228916,"Similarly,
E[SST ]
 ≤N(t2
y ∥CX∥+ ∥CY X∥2). By applying lemma 4, we have ϵ = Pr(∥S∥≥"
N,0.7001338688085676,Nc) ≤(dX + dY )e
N,0.7014725568942436,"
−Nc2/2
V ar+Lc/3 "
N,0.7028112449799196,"and therefore, it implies that"
N,0.7041499330655957,c ≤log((dX + dY )/ϵ)L
N,0.7054886211512718,"3N
+ r"
N,0.7068273092369478,(log(dX + dY /ϵ))2L2
N,0.7081659973226239,"9N 2
+ 2 log((dX + dY )/ϵ)V ar N"
N,0.7095046854082999,≤2 log((dX + dY )/ϵ)L
N,0.7108433734939759,"3N
+ r"
N,0.7121820615796519,"2 log((dX + dY )/ϵ)V ar N
."
N,0.713520749665328,"Corollary 3. For random variable X with dimensionality dX and ∥X∥≤tx, with probability 1 −ϵ,
it follows that
C−1/2
X
( bCX) −CX
 ≤2tx r"
N,0.714859437751004,2 log(2dX/ϵ)
N,0.7161981258366801,"N
+ 2 log(2dX/ϵ)L"
N,0.7175368139223561,"3N
,"
N,0.7188755020080321,"where L =
t2
x
√"
N,0.7202141900937081,v(CX) + tx
N,0.7215528781793842,Published as a conference paper at ICLR 2022
N,0.7228915662650602,"Proof. The proof is similarly to the the proof of corollary 2, define aj = P−1/2
X
xjxT
j −C1/2
X ,"
N,0.7242302543507363,"S = P ajthen it follows that E[aj] = 0 and ∥aj∥≤
t2
x
√"
N,0.7255689424364123,"v(CX) + tx,
E[ST S]
 =
E[SST ]
 ≤N(t2
x + ∥CX∥2) ≤2Nt2
x.
(49)
Applying lemma 4 to get"
N,0.7269076305220884,ϵ = Pr(∥S∥≥Nc) ≤2dXe
N,0.7282463186077643,"−Nc2/2
2t2x+Lc/3 ,
(50)
it follows that"
N,0.7295850066934404,c ≤2 log(2dX/ϵ)L
N,0.7309236947791165,"3N
+ 2tx r"
N,0.7322623828647925,log(2dX/ϵ)
N,0.7336010709504686,"N
.
(51)"
N,0.7349397590361446,"Lemma 5. For two random variables X, Y , let bCY X = CY X + ∆Y X, and bCX = CX + ∆X where
E[∆Y X] and E[∆X] are not necessarily zero and bCX is symmetric positive semidefinite. Define
A = CY XC−1
X and bA = bCY X( bCX + λ)−1. Then it follows that:
 bA −A
 ≤ s"
N,0.7362784471218207,u (CY ) v(CX)   p
N,0.7376171352074966,"v(CX)
C−1/2
X
 ∆X + λ"
N,0.7389558232931727,v( bCX) + λ 
N,0.7402945113788487,"+
∥∆Y X∥"
N,0.7416331994645248,"v( bCX) + λ
."
N,0.7429718875502008,Proof.
N,0.7443105756358769,"bA −A = CY X((CX + ∆X + λI)−1 −C−1
X ) + ∆Y X(CX + ∆X + λI)−1 = M1 + M2."
N,0.7456492637215528,"It follows that
∥M2∥≤
∆Y X
v( bCX) + λ
."
N,0.7469879518072289,"For M1, by using facts U −1 −V −1 = U −1(V −U)V −1 and CY X = C1/2
Y
PC1/2
X , where P is a
correlation matrix with ∥P∥≤1,
M1 = −CY XC−1
X (∆X + λI)(CX + ∆X + λI)−1"
N,0.7483266398929049,"= −C1/2
Y
PC−1/2
X
(∆X + λI)(CX + ∆X + λI)−1,"
N,0.749665327978581,"∥M1∥≤
p"
N,0.751004016064257,u (CY )
N,0.7523427041499331,"C−1/2
X
∆X
 + λ
C−1/2
X"
N,0.7536813922356091,v( bCX) + λ ≤ s
N,0.7550200803212851,"u(CY )
v(CX) p"
N,0.7563587684069611,"v(CX)
C−1/2
X
∆X
 + λ"
N,0.7576974564926372,"v( bCX) + λ
."
N,0.7590361445783133,"Corollary 4. Let {(xk, yk)}N
k=1 be i.i.d samples from two random variables X, Y with dimensions
dX and dY and (uncentered) covariances CX and CY . Assume ∥X∥≤tx and ∥Y ∥≤ty. Define"
N,0.7603748326639893,"A = CY XC−1
X and bA = bCY X( bCX + λ)−1. For any ϵ ∈(0, 1) such that N > t2
x log(2dX/ϵ)"
N,0.7617135207496654,"v(CX)
the
following holds with probability at least 1 −3ϵ:
 bA −A
 ≤ s"
N,0.7630522088353414,"u(CY )
v(CX) p"
N,0.7643908969210174,"v(CX)α + λ
v(CX)(1 −γ) + λ !"
N,0.7657295850066934,"+
β
v(CX)(1 −γ) + λ, where"
N,0.7670682730923695,α = 2tx r
N,0.7684069611780455,2 log(2dX/ϵ)
N,0.7697456492637216,"N
+ 2 log(2dX/ϵ)"
N,0.7710843373493976,"3N
(
c2
x
p"
N,0.7724230254350736,"v(CX)
+ tx),"
N,0.7737617135207496,β = 2tytx r
N,0.7751004016064257,log(dY + dX)/ϵ
N,0.7764390896921017,"N
+ 3tytx log((dY + dX)/ϵ)"
N,0.7777777777777778,"3N
,"
N,0.7791164658634538,"γ = t2
x log(2dX/ϵ)"
N,0.7804551539491299,"v(CX)N
."
N,0.7817938420348058,Published as a conference paper at ICLR 2022
N,0.7831325301204819,"Proof. It follows by applying Corollaries 1,2,3 to Lemma 5. By union bound, each condition has
probability 1 −ϵ, so the total events are bounded by"
N,0.784471218206158,Pr(bounds satisfied) := 1 −Pr( 3[
N,0.785809906291834,"i=1
Ai) ≥1 −"
X,0.7871485943775101,"3
X"
X,0.7884872824631861,"i=1
Pr(Ai) = 1 −3ϵ."
X,0.7898259705488622,"Lemma 6. For two random variables X, Y , let bCY X = CY X + ∆Y X, and bCX = CX + ∆X where
E[∆Y X] and E[∆X] are not necessarily zero and bCX is symmetric but not positive semidefinite.
Define A = CY XC−1
X and bA = bCY X bCX( bC2
X + λI)−1. Then it follows that:
 bA −A
 ≤ s"
X,0.7911646586345381,"u(CY )
v(CX)3
∥∆x∥2 + 2u(CX) ∥∆X∥+ λ"
X,0.7925033467202142,"v( bCX) + λ
+ ∥CY X∥∥∆X∥+ ∥∆Y X∥∥CX∥+ ∥∆Y X∥∥∆X∥"
X,0.7938420348058902,"v( bCX)2 + λ
."
X,0.7951807228915663,Proof.
X,0.7965194109772423,"bA −A = (CY X + ∆yx)(CX + ∆X)((CX + ∆X)2 + λI)−1 −CY XCXC−2
X
= CY XCX(((CX + ∆X)2 + λI)−1 −C−2
X ) + (CY X∆X + ∆Y XCX + ∆Y X∆X)((CX + ∆X)2 + λI)
= M1 + M2."
X,0.7978580990629184,"For M1, by using facts U −1 −V −1 = U −1(V −U)V −1 and CY X = C1/2
Y
PC1/2
X , where P is a
correlation matrix with ∥P∥≤1, it follows that
M1 = −C1/2
Y
PC−3/2
X
(∆2
X + CX∆X + ∆XCX + λI)((CX + ∆X)2 + λI)−1.
Therefore, ∥M1∥≤ s"
X,0.7991967871485943,"u(CY )
v(CX)3
∥∆x∥2 + 2u(CX) ∥∆X∥+ λ"
X,0.8005354752342704,"v( bCX) + λ
,"
X,0.8018741633199464,∥M2∥≤∥CY X∥∥∆X∥+ ∥CY X∥∥CX∥+ ∥CY X∥∥∆X∥
X,0.8032128514056225,"v( bCX)2 + λ
."
X,0.8045515394912985,"Corollary 5. Let {(xk, yk)}N
k=1 be i.i.d samples from two random variables X, Y with dimensions
dX and dY and (uncentered) covariances CX and CY . The E[∆Y X] and E[∆X] is not necessarily
zero and Cx is symmetric but not necessarily positive semidefinite. Assume ∥X∥≤tx and ∥Y ∥≤ty."
X,0.8058902275769746,"Define A = CY XC−1
X and bA = bCY X bCX( bC2
X+λ)−1. For any ϵ ∈(0, 1) such that N > t2
x log(2dX/ϵ)"
X,0.8072289156626506,"v(CX)
the following holds with probability at least 1 −3ϵ:
 bA −A
 ≤ s"
X,0.8085676037483266,"u(CY )
v(CX)3
∥∆x∥2 + 2u(CX) ∥∆X∥+ λ"
X,0.8099062918340026,"v(CX)(1 −γ) + λ
+ ∥CY X∥∥∆X∥+ ∥∆Y X∥∥CX∥+ ∥∆Y X∥∥∆X∥"
X,0.8112449799196787,"v(CX)2(1 −γ)2 + λ
, where"
X,0.8125836680053548,"γ = t2
x log(2dX/ϵ)"
X,0.8139223560910308,"v(CX)N
."
X,0.8152610441767069,"Proof. It follows by applying Corollaries 1,2,3 to Lemma 6. Also by union bound, so the total events
are bounded 1 −3ϵ."
X,0.8165997322623829,"Theorem 2. Grabner 1997 (3.3) (Grabner & Prodinger, 1997) Consider there are n independent
copies X1, . . . Xn i.i.d negative binomial random variables, with parameters defined as NB(b, p),
and our goal is to calculate the expectation of the maximum of these N random variables En =
E{max(X1, . . . , Xn)} then we have following asymptotic solution:"
X,0.8179384203480589,En = log 1
X,0.8192771084337349,q (n) + (b −1) log 1
X,0.820615796519411,q log 1
X,0.821954484605087,q (n) + (b −1) log 1
X,0.8232931726907631,q p + (b −1) −log 1
X,0.8246318607764391,q (b −1)! + 1
X,0.8259705488621151,"2 +
γ
log 1"
X,0.8273092369477911,q (1/q)
X,0.8286479250334672,+ F(log 1
X,0.8299866131191432,q (n) + (b −1) log 1
X,0.8313253012048193,q log 1
X,0.8326639892904953,q (n) + (b −1) log 1
X,0.8340026773761714,q p −log 1
X,0.8353413654618473,"q (b −1)!) + o(1),
(52)"
X,0.8366800535475234,Published as a conference paper at ICLR 2022
X,0.8380187416331994,"(where F is a periodic C∞−function of period 1 and mean value 0 whose Fourier-coefficients are
given by ˆF(k) = −
1
log( 1"
X,0.8393574297188755,q )Γ(−2kπi
X,0.8406961178045516,log( 1
X,0.8420348058902276,"q )) for k ∈Z \ {0}, and q = 1 −p)."
X,0.8433734939759037,"We omit the proof, interested readers could go to (Grabner & Prodinger, 1997) for details."
X,0.8447121820615796,"E.1
PROOF OF THEOREM 1"
X,0.8460508701472557,"We first prove the bound for ∥bqi,j −qi,j∥."
X,0.8473895582329317,"Proposition 2. Let πΘ be a data collection policy and H is the range of πΘ on joint histories. If
Equation 7 used, then for all h ∈H and any ϵ ∈(0, 1),
bqi,j(ψh) −qi,j(ψh)
 is bounded as below
with probability at least 1 −3ϵ."
X,0.8487282463186078,"∥bqi,j −qi,j∥≤"
X,0.8500669344042838,"v
u
u
u
u
t"
X,0.8514056224899599,"u

Cψo
i |ψh
i,j "
X,0.8527443105756358,"v

Cψa
j |ψh
i,j"
X,0.8540829986613119,"3
∥∆1∥2 + 2u

Cψa
j |ψh
i,j"
X,0.8554216867469879,"
∥∆1∥+ λ"
X,0.856760374832664,"v

Cψa
j |ψh
i,j"
X,0.85809906291834,"
(1 −γ) + λ +"
X,0.8594377510040161,"Cψo
i ψa
j |ψh
i,j"
X,0.8607764390896921,"∥∆1∥+ ∥∆2∥
Cψa
j |ψh
i,j"
X,0.8621151271753681,+ ∥∆2∥∥∆1∥
X,0.8634538152610441,"v

Cψa
j |ψh
i,j"
X,0.8647925033467202,"2
(1 −γ)2 + λ
,"
X,0.8661311914323963,"where ∆1 follows the bound (55) and ∆2 follows the bound (53), and γ =
t2
Aj log(2dAj /ϵ)"
X,0.8674698795180723,"v

Cψa
j 
N
."
X,0.8688085676037484,"Proof. Let Ti,j is the tensor such that Cψo
i ψa
j |ψh
i,j = Ti,j ×h ψh
i,j, and Ui,j is the tensor such"
X,0.8701472556894244,"that Cψa
j |ψh
i,j = Ui,j ×h ψh
i,j and for simplicity without loss meaning, we use Cψa
j |ψh
i,j to denote
Cψa
j ψa
j |ψh
i,j. Then we have
 bCψo
i ψa
j |ψh
i,j −Cψo
i ψa
j |ψh
i,j"
X,0.8714859437751004,"≤
 bTi,j −Ti,j

ψh
i,j
 ,
 bCψa
j |ψh
i,j −Cψa
j |ψh
i,j"
X,0.8728246318607764,"≤
bUi,j −Ui,j

ψh
i,j
 ."
X,0.8741633199464525,"We finish the above proof by proofing the ∥Ti,j −Ti,j∥and ∥Ui,j −Ui,j∥are bounded by using
Corollary 4."
X,0.8755020080321285,"bTi,j −Ti,j

ψh
i,j
 ≤th"
X,0.8768406961178046,"v
u
u
u
t"
X,0.8781793842034806,"u

Cψo
i ,ψa
j
"
X,0.8795180722891566,"v

Cψh
i,j   

 r"
X,0.8808567603748326,"v

Cψh
i,j"
X,0.8821954484605087,"
α + λ"
X,0.8835341365461847,"v

Cψh
i,j"
X,0.8848728246318608,"
(1 −γ) + λ "
X,0.8862115127175368,"

+
β"
X,0.8875502008032129,"v

Cψh
i,j"
X,0.8888888888888888,"
(1 −γ) + λ
, (53) where"
X,0.8902275769745649,"α
=
2th r"
X,0.891566265060241,2 log(2dh/ϵ)
X,0.892904953145917,"N
+ 2 log(2dh/ϵ)"
N,0.8942436412315931,3N 
N,0.8955823293172691,"


t2
h
r"
N,0.8969210174029452,"v

Cψh
i,j"
N,0.8982597054886211, + th 
N,0.8995983935742972,"

,"
N,0.9009370816599732,"β
=
2tOitAjth r"
N,0.9022757697456493,log(dOidAj + dh)/ϵ
N,0.9036144578313253,"N
+ 4tOitAjth log((dOidAj + dh)/ϵ)"
N,0.9049531459170014,"3N
,"
N,0.9062918340026773,"γ
=
t2
h log(2dh/ϵ)"
N,0.9076305220883534,"v

Cψh
i,j"
N,0.9089692101740294,"
N
;
(54) and"
N,0.9103078982597055,Published as a conference paper at ICLR 2022
N,0.9116465863453815,"bUi,j −Ui,j

ψh
i,j
 ≤th"
N,0.9129852744310576,"v
u
u
u
t"
N,0.9143239625167336,"u

Cψa
j
"
N,0.9156626506024096,"v

Cψh
i,j   

 r"
N,0.9170013386880856,"v

Cψh
i,j"
N,0.9183400267737617,"
α + λ"
N,0.9196787148594378,"v

Cψh
i,j"
N,0.9210174029451138,"
(1 −γ) + λ "
N,0.9223560910307899,"

+
β"
N,0.9236947791164659,"v

Cψh
i,j"
N,0.9250334672021419,"
(1 −γ) + λ
, (55) where"
N,0.9263721552878179,"α
=
2th r"
N,0.927710843373494,2 log(2dh/ϵ)
N,0.92904953145917,"N
+ 2 log(2dh/ϵ)"
N,0.9303882195448461,3N 
N,0.9317269076305221,"


t2
h
r"
N,0.9330655957161981,"v

Cψh
i,j"
N,0.9344042838018741, + th 
N,0.9357429718875502,"

,"
N,0.9370816599732262,"β
=
2tAjth r"
N,0.9384203480589023,log(dAj + dh)/ϵ
N,0.9397590361445783,"N
+ 4tAjth log((dAj + dh)/ϵ)"
N,0.9410977242302544,"3N
,"
N,0.9424364123159303,"γ
=
t2
h log(2dh/ϵ)"
N,0.9437751004016064,"v

Cψh
i,j"
N,0.9451137884872824,"
N
.
(56)"
N,0.9464524765729585,"Then using the equation (7) and corollary 5 to obtain the bound for qi,j"
N,0.9477911646586346,"∥bqi,j −qi,j∥≤"
N,0.9491298527443106,"v
u
u
u
u
t"
N,0.9504685408299867,"u

Cψo
j |ψh
i,j "
N,0.9518072289156626,"v

Cψa
j |ψh
i,j"
N,0.9531459170013387,"3
∥∆1∥2 + 2u

Cψa
j |ψh
i,j"
N,0.9544846050870147,"
∥∆1∥+ λ"
N,0.9558232931726908,"v

Cψa
j |ψh
i,j"
N,0.9571619812583668,"
(1 −γ) + λ +"
N,0.9585006693440429,"Cψo
i ψa
j |ψh
i,j"
N,0.9598393574297188,"∥∆1∥+ ∥∆2∥
Cψa
j |ψh
i,j"
N,0.9611780455153949,+ ∥∆2∥∥∆1∥
N,0.9625167336010709,"v

Cψa
j |ψh
i,j"
N,0.963855421686747,"2
(1 −γ)2 + λ
,"
N,0.965194109772423,"where ∆1 follows the bound (55) and ∆2 follows the bound (53), and γ =
t2
Aj log(2dAj /ϵ)"
N,0.9665327978580991,"v

Cψa
j 
N
."
N,0.9678714859437751,Now we start to prove our Theorem 1.
N,0.9692101740294511,"Proof. The Equation (5) says:
qt,i := g
 
{qt,i,j}n
j=1

=
X"
N,0.9705488621151271,"j
qt,i,j,"
N,0.9718875502008032,"here we assume the agents are homogeneous, in other words, each pair of {(oi, ai)}n
i=1 coming from
the same spaces O, A. They are permutation invariant and their identities do not matter. Thus, the
bound of qi,j is invariant to agents. Under the assumption of static fully complete graph, for any
agent qi = Pn
j=1 qi,j, thus"
N,0.9732262382864793,"∥bqi −qi∥
=
P"
N,0.9745649263721553,"j bqi,j −P"
N,0.9759036144578314,"j qi,j"
N,0.9772423025435074,"≤n ∥bqi,j −qi,j∥.
(57)"
N,0.9785809906291834,"E.2
PROOF OF LEMMA 1"
N,0.9799196787148594,Here we prove Lemma 1.
N,0.9812583668005355,"Proof. Equation (9) says
qt,i := g
 
{qt,i,j}n
j=1

=
X"
N,0.9825970548862115,"j
Ii,jqt,i,j,"
N,0.9839357429718876,Published as a conference paper at ICLR 2022
N,0.9852744310575636,"where Ii,j is an indicator function to denote if two agents are connected. Under the assumption that
the static non-complete graph has maximum of number of degrees k and the agents are homogeneous,
we have P"
N,0.9866131191432396,"j Ii,j <= k. Thus,"
N,0.9879518072289156,"∥bqi −qi∥
=

P"
N,0.9892904953145917,"j Ii,jbqi,j −P"
N,0.9906291834002677,"j Ii,jqi,j"
N,0.9919678714859438,"≤k ∥bqi,j −qi,j∥.
(58)"
N,0.9933065595716198,"E.3
INFORMAL PROOF OF LEMMA 2"
N,0.9946452476572959,"Here we make some intuitions for the proof of Lemma 2. As we already give the proof sketch
in our main paper. Lemma 2 is a direct application of Theorem 2. Here our random variable
J1, · · · , Jn ∼NB(r, p), where {(Ji)}n
i=1 represents the number of time points node i needs before
it meets node j number of r times."
N,0.9959839357429718,"For the complete static graph, we need at least N sample for the bound in equation 8 to be valid; in
other words, we need the trajectory to run at least N time points to collect enough data to estimate
our conditional operator accurately qi,j."
N,0.9973226238286479,"For the dynamic graph, each time t, the two nodes are randomly connected with probability p, if it
connects, then we can obtain a valid sample to estimate qi,j; if not, then we skip to the next time step.
For the dynamic graph node i, if we take the union set of the nodes i connected over the trajectory
path, then the union set could form a static complete graph. We say the two graphs are equivalent. The
number of time points needed by i until the N th connection with j for each of the pairs (i, j) follows
the same distribution J ∼NB(N, p). Then we are interested in the expectation of the maximum of
J1, . . . , Jn−1, we denote it as J{1,...,n−1}."
N,0.998661311914324,"E{J{1,...,n−1}} means on average, how many time points (N ′) we need for all nodes other than i
at least meets N times with i. Obviously, this N ′ >= N since p ∈[0, 1]. The calculation of this
expectation is solved by (Grabner & Prodinger, 1997). And we also put their result in Theorem 2."
