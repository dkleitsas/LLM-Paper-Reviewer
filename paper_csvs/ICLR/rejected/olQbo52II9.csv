Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.004098360655737705,"From logistics to the natural sciences, combinatorial optimisation on graphs un-
derpins numerous real-world applications.
Reinforcement learning (RL) has
shown particular promise in this setting as it can adapt to speciﬁc problem struc-
tures and does not require pre-solved instances for these, often NP-hard, problems.
However, state-of-the-art (SOTA) approaches typically suffer from severe scala-
bility issues, primarily due to their reliance on expensive graph neural networks
(GNNs) at each decision step. We introduce ECORD; a novel RL algorithm that
alleviates this expense by restricting the GNN to a single pre-processing step, be-
fore entering a fast-acting exploratory phase directed by a recurrent unit. Experi-
mentally, we demonstrate that ECORD achieves a new SOTA for RL algorithms
on the Maximum Cut problem, whilst also providing orders of magnitude im-
provement in speed and scalability. Compared to the nearest competitor, ECORD
reduces the optimality gap by up to 73 % on 500 vertex graphs with a decreased
wall-clock time. Moreover, ECORD retains strong performance when generalis-
ing to larger graphs with up to 10 000 vertices."
INTRODUCTION,0.00819672131147541,"1
INTRODUCTION"
INTRODUCTION,0.012295081967213115,"Combinatorial optimisation (CO) problems seek to ﬁnd the ordering, labelling, or subset of discrete
elements that maximises some objective function. Despite this seemingly abstract mathematical for-
mulation, CO arises at the heart of many practical applications, from logistics (Yanling et al., 2010)
to protein folding (Perdomo-Ortiz et al., 2012) and fundamental science (Barahona, 1982). However,
with these tasks often being NP-hard, solving CO problems becomes increasingly challenging for all
but the simplest of systems. This combination of conceptual simplicity, computational complexity,
and practical importance has made CO a canonical challenge, and motivated signiﬁcant efforts into
developing approximate and heuristic algorithms for these tasks. Whilst approximate methods can
offer guarantees on the solution quality, in practice they frequently lack sufﬁciently strong bounds
and have limited scalability (Williamson & Shmoys, 2011). By contrast, well-designed heuristics
offer no such guarantees but can prove highly efﬁcient (Halim & Ismail, 2019)."
INTRODUCTION,0.01639344262295082,"As a result, recent years have seen a surge in the application of automated learning methods that
parameterise CO heuristics with deep neural networks (Bengio et al., 2021). In particular, rein-
forcement learning (RL) has become a popular paradigm, as it can facilitate the discovery of novel
heuristics without the need for labelled data. Moreover, many CO problems are naturally formulated
as Markov decision processes (MDPs) on graphs, where vertices correspond to discrete variables and
edges denote their interaction or dependence. Accordingly, graph neural networks (GNNs) have be-
come the de-facto function approximator of choice as they reﬂect the underlying structure of the
problem whilst seamlessly handling variable problem sizes and irregular topological structures."
INTRODUCTION,0.020491803278688523,"However, despite the demonstrated success of RL-GNN approaches, scalability remains an outstand-
ing challenge. Running a GNN for every decision results in impractical computational overheads for
anything beyond small- to medium-sized problems. This is exacerbated by the fact that directly pre-
dicting the solution to an NP-hard problem is typically unrealistic. As such, leading approaches often
utilise stochastic exploration or structured search to generate multiple candidate solutions (Chen &
Tian, 2019; Joshi et al., 2019; Gupta et al., 2020; Barrett et al., 2020; Bresson & Laurent, 2021) –
which ultimately requires longer solving times and an increased computational burden."
INTRODUCTION,0.02459016393442623,Under review as a conference paper at ICLR 2022
INTRODUCTION,0.028688524590163935,"The notion of exploratory combinatorial optimisation – reframing the task from predicting a single
solution to exploring the solution space using reversible single-vertex actions (Barrett et al., 2020)
– also hints at a mitigation to the scalability issue it highlights. Intuitively, when any decisions can
be reversed, the quality of any single decision is less critical, so long as overall improvements are
made over the course of many such actions. In this work, we leverage this notion to introduce a new
algorithm, ECORD (Exploratory Combinatorial Optimisation with Rapid Decoding), that combines
a single GNN preprocessing step with fast action-decoding that replaces further geometric inference
with simple per-vertex observations and a learnt representation of the ongoing optimisation trajec-
tory. The result is a theoretical and demonstrated speed-up over expensive GNN action-decoding
with the action-selection time of ECORD being independent of the graph topology and, in practice,
near constant regardless of graph size."
INTRODUCTION,0.03278688524590164,"Experimentally, we consider the Maximum Cut (Max-Cut) problem, a canonical CO problem chosen
because of its generality (11 of the 21 NP-complete problems presented by Karp (1972) can be
reduced to Max-Cut, including graph coloring, clique cover, knapsack and Steiner Tree) and the fact
that it presents a challenging problem for scalable CO as the optimal solution requires every vertex
to be correctly labelled (rather than simply a subset). This combination of wide-ranging applicability
and intractability has motivated signiﬁcant commercial and research efforts into Max-Cut solvers,
from bespoke hardware based on classical (Goto et al., 2019) and quantum annealing (Yamamoto
et al., 2017; Djidjev et al., 2018) to hand-crafted (Goemans & Williamson, 1995; Benlic & Hao,
2013) or learnt (Barrett et al., 2020) heuristic algorithms."
INTRODUCTION,0.036885245901639344,"ECORD is found to equal or surpass the performance of expensive SOTA RL-GNN methods on
graphs with up to 500 vertices (where all methods are computationally feasible), even when com-
pared on number of actions instead of wall-clock time. Moreover, the low computational overhead of
ECORD is seen to provide orders of magnitude improvements in speed and scalability, with strong
performance, and a nearly 300× increase in throughput when compared to conventional RL-GNN
methods, demonstrated on graphs with up to 10 000 vertices."
RELATED WORK,0.040983606557377046,"2
RELATED WORK"
RELATED WORK,0.045081967213114756,"The application of neural networks to graph-based CO problems dates back to Hopﬁeld & Tank
(1985) who considered the Travelling Salesman Problem (TSP). However RL techniques were not
applied until a decade later in the work of Zhang & Dietterich (1995) on the NP-hard job-shop
problem. More recently, the advancement of deep learning and RL has triggered a resurgence in
the ML community’s interest in developing CO solvers, with multiple reviews providing detailed
taxonomies (Bengio et al., 2021; Mazyavkina et al., 2020; Vesselinova et al., 2020)."
RELATED WORK,0.04918032786885246,"Learning to solve non-Euclidean CO. This resurgence began by considering Euclidean approaches
that did not reﬂect the underlying graph structure of the problems. In this context, Bello et al. (2016)
used RL to train pointer networks (PNs), which treat the discrete variables of the CO problem as
a sequence of inputs to a recurrent unit (Vinyals et al., 2015) to solve TSP. By avoiding the need
for labelled data sets, they were able to scale beyond the 40 vertex limit of Vinyals et al. (2015),
inferring on 20 to 100 vertex graphs. Gu & Yang (2020) further scaled this approach to instances
of up to 300, using a hybrid supervised-reinforcement learning framework that combined PNs and
A3C (Mnih et al., 2016). However, although PNs can handle graphs of different sizes (with the
help of manual input/output engineering, such as zero padding), these Euclidean approaches fail to
capture the topological structures and intricate relationships contained within graphs, and typically
require a large number of training instances in order to generalise."
RELATED WORK,0.05327868852459016,"This issue was addressed by Dai et al. (2017), who trained a Structure-to-Vector (S2V) GNN with
DQN to solve TSP and Max-Cut. The resulting algorithm, S2V-DQN, generalised to graphs with
different size and structure to the training set and achieved excellent performance across a range
of problems without the need for manual algorithmic design, demonstrating the value in exploiting
underlying graph structure."
RELATED WORK,0.05737704918032787,"Advances in optimality. Various works since Dai et al. (2017) have sought to harness GNN embed-
dings to improve solution quality. Abe et al. (2019) combined a GNN with a Monte Carlo tree search
approach to learn a high-quality constructive heuristic. Ultimately, they demonstrated a greater abil-
ity to generalise to more graph types than S2V-DQN on Max-Cut, but their method could only scale"
RELATED WORK,0.06147540983606557,Under review as a conference paper at ICLR 2022
RELATED WORK,0.06557377049180328,"to 100 vertex Erd˝os-Rényi and Barabasi-Albert graphs. Li et al. (2018) combined a graph convo-
lution network (GCN) with guided tree search to synthesise a diverse set of solutions and thereby
more fully explore the space of possible solutions. However, they used supervised learning and so
required labelled data which limits scalability, and they did not consider Max-Cut. Barrett et al.
(2020) proposed ECO-DQN, the SOTA RL algorithm for Max-Cut, which reframed the role of the
RL agent to looking to improve on any given solution, rather than directly predict the optimal so-
lution. The key insight is that exploration at test time is beneﬁcial, since individual sub-optimal
decisions (which are to be expected for NP-hard problems) need not matter so long as the ﬁnal
solution is of high quality. However, ECO-DQN utilises an expensive GNN at each decision step
and extends the overall number of decisions taken to be theoretically limitless, thereby restricting its
scalability to be even worse than that of S2V-DQN. ECORD remedies this by using an initial GNN
embedding followed by a recurrent unit to balance the richness provided by graph networks with
fast-action selection."
RELATED WORK,0.06967213114754098,"Advances in scalability. Manchanda et al. (2020) furthered the work of Dai et al. (2017) by ﬁrst
training an embedding GCN in a supervised manner, and then training a Q-network with RL to
predict per-vertex action values. By using the GCN embeddings to prune nodes unlikely to be
in the solution set, their method provided signiﬁcantly more scalability than S2V-DQN on the the
Maximum Vertex Cover problem. However, it was not applicable to problems whose nodes cannot
be pruned, which precludes it from solving some of the most fundamental CO problems such as
Max-Cut. Drori et al. (2020) took a different approach, proposing a general RL-GNN framework
that uses a graph attention network to create a dense embedding of the input graph followed by a
recurrent attention mechanism for action selection. They achieved impressive scalability, reaching
instance sizes of 1000 vertices on the minimum spanning tree problem and TSP. However, unlike
ECORD, the Drori et al. (2020) framework restricts the decoding stage to condition only on the
previously selected action, and considers only node ordering problems in a non-exploratory setting."
METHODS,0.07377049180327869,"3
METHODS"
BACKGROUND,0.0778688524590164,"3.1
BACKGROUND"
BACKGROUND,0.08196721311475409,"Max-Cut problem. The Max-Cut problem seeks a binary labelling of all nodes in a graph, such
that the number (or cumulative weight) of edges connecting nodes of opposite labels is maximised.
Concretely, for a graph, G(V, E), with vertices V and edges E, we wish to ﬁnd a subset of vertices,
S ⊂V that maximises the ‘cut-value’, C(S, G) = P"
BACKGROUND,0.0860655737704918,"i∈S,j∈V \S w(eij), where w(eij) is the weight
of an edge eij ∈E."
BACKGROUND,0.09016393442622951,"Q-learning. We formulate the optimisation as a Markov Decision Process (MDP) deﬁned by a tuple
{S, A, T , R, γ}, where S and A are the state and action spaces, respectively, T : S×A×S →[0, 1]
is the transition function, R : S →R the reward function and γ ∈[0, 1] the discount factor.
Q-learning methods seek to directly learn the Q-value function mapping state-action pairs, (s ∈
S, a ∈A), to the expected discounted sum of immediate and future rewards when following a policy
π : S →A, Qπ(s, a) = Eπ[P∞
t′=t+1 γt′−1r(s(t′))|s(t)=s, a(t)=a]. Conventional DQN (Mnih
et al., 2015) optimises Qθ by minimising the mean-squared-error between the network predictions
and a bootstrapped estimate of the Q-value. By deﬁnition, an optimal policy maximises the true
Q-value of every selected action, therefore, after training, an approximation of an optimal policy is
obtained by acting greedily with respect to the learnt value function, πθ(s) = arg maxa′ Qθ(s, a′)."
BACKGROUND,0.0942622950819672,"Munchausen DQN. Munchausen DQN (M-DQN) (Vieillard et al., 2020) makes two fundamental
adjustments to conventional DQN. Firstly, the Q-values are considered to deﬁne a stochastic policy
with action probabilities given by πθ(·|s) = softmax( Qθ(s,·)"
BACKGROUND,0.09836065573770492,"τ
), where τ is a temperature parameter.
Secondly, M-DQN adds the log-probability of the selected action to the reward at each step. All
together, the regression target for the Q-function is modiﬁed to"
BACKGROUND,0.10245901639344263,"Qm−dqn(s(t), a(t), s(t+1)) = r(s(t+1)) + ατ ln πθ(a(t)|s(t))+"
BACKGROUND,0.10655737704918032,"γEa′∼π(·|s(t+1))[Qθ(s(t+1), a′) −τ ln πθ(a′|s(t+1))],
(1)"
BACKGROUND,0.11065573770491803,"where α scales the additional log-policy contribution to the reward. Note that as α →0 and τ →0
we recover the standard DQN regression target."
BACKGROUND,0.11475409836065574,Under review as a conference paper at ICLR 2022
BACKGROUND,0.11885245901639344,"Figure 1: Diagram of the proposed ECORD architecture applied to solving a Max-Cut instance.
(a) A GNN generates initial embeddings for each vertex at t = 0. (b) At each step in the episode,
a recurrent unit takes as input the initial graph embedding, the node-level observation from the
previous time step, and the global observation from the current time step, and updates the hidden
state vector. To select an action (node to ﬂip), the hidden state is concatenated with the node-level
observation at the current time step and passed to a Q-network."
ECORD,0.12295081967213115,"3.2
ECORD"
ECORD,0.12704918032786885,"MDP formulation. The state, s(t) ≡(G(V, E), S) ∈S, at a given time-step corresponds to the
graph and a binary labelling of all vertices. An action selects a single vertex and ‘ﬂips’ its label
to the opposite state, adding or removing it from the solution subset. Rewards correspond to the
(normalised and clipped) increase in best cut-value, r(s(t)) = max((C(s(t)) −C(s∗)))/|V | , 0),
where C(s∗) is the the best solution found in the episode thus far. This choice of reward structure
motivates the agent to maximise the cut-value at any step within the episode, without discouraging
it from searching through unseen solutions. Naturally, the transition function is known and fully
deterministic for our mathematically deﬁned optimisation problem."
ECORD,0.13114754098360656,"Concretely, we represent the state, s(t), with per-vertex observations, o(t)
i ∈R3 for i∈V , and a global
observation of the current state, o(t)
G ∈R2. For each vertex, we provide: (i) the current label, (ii)
the immediate change in cut-value if the vertex is ﬂipped (which we refer to as a ‘peek’) and (iii)
the number of steps since the node was last ﬂipped. Our global observations are the (normalised)
difference in cut-value between the current and best observed state, and the maximum peek of any
vertex in the current state."
ECORD,0.13524590163934427,"Importantly, these features are readily available without introducing any signiﬁcant computational
burden. Indeed, even the peeks – one-step look-aheads for each action – can be calculated for all
vertices once at the beginning of each episode, after which they can be efﬁciently updated quickly at
each step for only the ﬂipped vertex and it’s immediate neighbours (details can be found appendix
A.3). Besides this being a cheap operation, this approach is also the most efﬁcient way to track the
cut-value over the course of multiple vertex ﬂips, and thus is a necessary calculation to evaluate each
environmental state regardless of whether the peeks form part of the observation."
ECORD,0.13934426229508196,"Architecture. ECORD splits an optimisation into two stages (see ﬁgure 1 for an overview of the
entire architecture). (i) A GNN prepares per-vertex embeddings conditioned on only the geometric
structure (i.e. weighted adjacency matrix) of the graph itself. (ii) Starting from a random labelling
of the vertices, ECORD sequentially ﬂips vertices between subsets, with each action conditioned on
the static GNN embeddings, the previous trajectory steps (through the hidden state of an RNN) and
simple observations of the current state (described above). Full details of the architecture can be
found in appendix A.1, with this section providing a higher level summary."
ECORD,0.14344262295081966,Under review as a conference paper at ICLR 2022
ECORD,0.14754098360655737,"To generate the per-vertex embeddings, we use a gated graph convolution network (Li et al., 2015).
The ﬁnal embeddings after L rounds of message-passing are linearly projected to per-vertex embed-
dings, xi = Wpx(L)
i
where i denotes the vertex, that remain ﬁxed for the remainder of the episode."
ECORD,0.15163934426229508,"To select an action at time t, we ﬁrst combine the GNN outputs with the observation to obtain per-
vertex embeddings of the form v(t)
i
= [xi, Woo(t)
i ], where square brackets denote concatenation.
This local information is then used in conjunction with the RNN hidden state, h(t), to predict the
Q-value for ﬂipping vertex i. The Q-network itself uses a duelling architecture (Wang et al., 2016),
where separate MLPs estimate the value of the state, V (·), and advantage for each action, A(·),"
ECORD,0.1557377049180328,"Q(v(t)
i , h(t)) = V (h(t)) + A(v(t)
i , h(t)) = MLPV(h(t)) + MLPA([v(t)
i , Whh(t)]).
(2)"
ECORD,0.1598360655737705,"h(t) is shared across each vertex when calculating the advantage function as our reward function
depends on the current best score within the trajectory’s history, a global feature contained in the
state-level embedding. However, before concatenating them together, we project the high dimen-
sional (1024 in our case) hidden state to match the lower dimensional (32) per-vertex embeddings."
ECORD,0.16393442622950818,"Finally, we update the RNN using the embedding of the selected action, v(t)
∗, and our global obser-
vation after taking it, o(t+1)
G
,"
ECORD,0.1680327868852459,"h(t+1) = GRU(h(t), m(t+1)),
where
m(t+1) = MLPm([v(t)
∗, o(t+1)
G
]).
(3)"
ECORD,0.1721311475409836,"Training. ECORD is trained using M-DQN. As the Q-values are conditioned upon the internal state
of an RNN, see eq. (2), we train using truncated backpropagation through time (BPTT). Concretely,
when calculating the Q-values at time t during training, we reset the environment and the internal
state of the RNN to their state at time t −kBPTT and replay the trajectory to time t. In doing so, we
only have to backpropagate through the previous kBPTT time steps when minimising the loss."
ECORD,0.1762295081967213,"The intuition behind M-DQN’s modiﬁcations are (i) the entropy of the policy is jointly optimised
with the returns, in the spirit of maximum entropy RL (Haarnoja et al., 2018), and (ii) the agent
is rewarded for being more conﬁdent about the correct action. The second point is based on the
assumption that an optimal policy is deterministic, since it will always take the action with maximum
Q-value. One could observe that as ECORD’s action space is large (equal to the number of vertices
in the graph, |V | ) the structured exploration of M-DQN’s stochastic policy may allow for more
meaningful trajectories than the standard epsilon-greedy approaches used in DQN. Moreover, the
underlying postulate of M-DQN, that despite the stochastic exploration policy, the true optimal
policy is deterministic, aligns exactly with our problem setting."
EXPERIMENTS,0.18032786885245902,"4
EXPERIMENTS"
EXPERIMENTS,0.18442622950819673,"Baselines. We compare ECORD to the previous two SOTA RL-GNN algorithms for Max-Cut, S2V-
DQN (Khalil et al., 2017) and ECO-DQN (Barrett et al., 2020). Our implementation of ECORD
contains several speed improvements in comparison to the publicly available implementation of
ECO-DQN (e.g. parallelised optimisation trajectories, compiled calculations, sparse matrix opera-
tions). To ensure the fairest possible comparison, when directly comparing performance independent
of speed (section 4.1), we use the public implementation, however when comparing scalability (sec-
tion 4.2 and 4.3) we use a re-implementation of ECO-DQN within the same codebase as ECORD."
EXPERIMENTS,0.1885245901639344,"Additionally, a simple heuristic, Max-Cut Approx (MCA), that greedily selects actions that max-
imise the immediate increase in cut value is also considered. Besides from providing surprisingly
strong performance, the choice of MCA baselines is motivated by the observation that the one-step
look-ahead ‘peek’ features make learning a greedy policy straightforward. Moreover, whilst MCA
terminates once a locally optimal solution is found (i.e. one from which no single action can further
increase the cut value), a network learning to only approximate a greedy policy may fortuitously
escape these solutions and ultimately obtain better results. To address this concern, we introduce a
simple extension of (and signiﬁcant improvement over) MCA called MCA-soft, where actions are
selected by a soft-greedy policy with the temperature tuned to maximise performance on the target
dataset (see appendix A.4 for details)."
EXPERIMENTS,0.19262295081967212,"Datasets. We consider graph datasets for which the optimal (or best known) solutions are publicly
available. The dataset published by Barrett et al. (2020) consists of Erd˝os-Rényi (Erd˝os & Rényi,"
EXPERIMENTS,0.19672131147540983,Under review as a conference paper at ICLR 2022
EXPERIMENTS,0.20081967213114754,"1960) and Barabasi-Albert (Albert & Barabási, 2002) graphs (ER and BA, respectively) with edge
weights w(eij) ∈{0, ±1} and up to 500 vertices. Each graph type and size is represented by 150
random instances, with 50 used for model selection and results reported on the remaining 100 at test
time. We refer to these distributions as ER40/BA40 to ER500/BA500."
EXPERIMENTS,0.20491803278688525,"To test on larger graphs we use the GSet (Benlic & Hao, 2013), a well-studied dataset containing
multiple distribution, from which we focus on random (ER) graphs with binary edge weights and
800 to 10 000 vertices. To aide model selection and parameter tuning, we generate 10 additional
graphs for each distribution in the GSet. We refer to these validation sets as ER800 to ER10000."
EXPERIMENTS,0.20901639344262296,"Metrics. Our analysis considers the raw performance, wall-clock speed, and memory usage of
algorithms. Following prior work, we use the approximation ratio, given by AR(s∗) = C(s∗)/Copt
where Copt is the best known cut value, as a metric of solution quality. All experiments were
performed on the same system with an Nvidia GeForce RTX 2080 Ti 11 GB GPU and 80 processors
(Intel(R) Xeon(R) Gold 6248 CPU @ 2.50 GHz)."
EXPERIMENTS,0.21311475409836064,"Reproducability. All datasets considered in this work are either available or linked in the supporting
code at https://github.com/[MASKED-FOR-BLIND-REVIEW], along with source code
and scripts to reproduce the reported results."
COMPARISON TO SOTA RL METHODS,0.21721311475409835,"4.1
COMPARISON TO SOTA RL METHODS"
COMPARISON TO SOTA RL METHODS,0.22131147540983606,"Table 1: Agent scores trained on ER40 (best in bold). Error bars denote 68 % conﬁdence intervals.
RL baseline scores are taken directly from Barrett et al. (2020) for fair comparison. Results are
averaged across 5 random seeds for the RL baselines and 3 random seeds for ECORD."
COMPARISON TO SOTA RL METHODS,0.22540983606557377,"Heuristics
RL baselines"
COMPARISON TO SOTA RL METHODS,0.22950819672131148,"MCA
MCA-soft
S2V-DQN
ECO-DQN
ECORD"
COMPARISON TO SOTA RL METHODS,0.2336065573770492,"ER40
0.997+0.001
−0.010
1.000+0.000
−0.000
0.980+0.014
−0.023
1.000+0.000
−0.000
1.000+0.000
−0.000
ER60
0.994+0.003
−0.013
0.999+0.001
−0.004
0.973+0.021
−0.024
1.000+0.000
−0.000
1.000+0.000
−0.000
ER100
0.977+0.017
−0.017
0.993+0.007
−0.008
0.961+0.029
−0.028
1.000+0.000
−0.001
1.000+0.000
−0.001
ER200
0.959+0.014
−0.014
0.973+0.012
−0.012
0.951+0.020
−0.020
0.999+0.001
−0.002
1.000+0.000
−0.001
ER500
0.941+0.012
−0.012
0.958+0.009
−0.009
0.921+0.019
−0.019
0.985+0.006
−0.006
0.996+0.004
−0.004"
COMPARISON TO SOTA RL METHODS,0.23770491803278687,"BA40
0.999+0.000
−0.006
1.000+0.000
−0.000
0.967+0.023
−0.040
1.000+0.000
−0.000
1.000+0.000
−0.000
BA60
0.989+0.007
−0.018
0.997+0.003
−0.008
0.968+0.022
−0.036
1.000+0.000
−0.000
1.000+0.000
−0.000
BA100
0.965+0.020
−0.020
0.984+0.012
−0.013
0.940+0.032
−0.033
1.000+0.000
−0.000
1.000+0.000
−0.000
BA200
0.911+0.033
−0.037
0.929+0.034
−0.034
0.865+0.058
−0.061
0.978+0.014
−0.033
0.983+0.017
−0.033
BA500
0.889+0.015
−0.015
0.899+0.014
−0.014
0.744+0.052
−0.052
0.967+0.014
−0.015
0.963+0.012
−0.012"
COMPARISON TO SOTA RL METHODS,0.24180327868852458,"Methods. Our ﬁrst set of experiments compares ECORD to both heuristic node-ﬂipping, and SOTA
RL, baselines. To facilitate a fair and direct comparison, we use exactly the models, datasets, and re-
sults published by Barrett et al. (2020) for S2V-DQN and ECO-DQN. All RL algorithms are trained
on 40 vertex ER graphs and evaluated on both ER and BA graphs with up to 500 vertices. S2V-
DQN is deterministic and incrementally constructs the solution set one vertex at a time, therefore
each optimisation trajectory consists of |V | sequential actions. MCA-soft, ECO-DQN and ECORD
allow any vertex to be ‘ﬂipped’ at each step, and therefore can in principle run indeﬁnitely on a
target graph. The baselines presented are chosen as they consider the same sequential node-ﬂipping
paradigm as ECORD, however their exits multiple algorithms for solving Max-Cut that do not ﬁt
this paradigm – notably simulated annealing (SA) (Tiunov et al., 2019; Leleu et al., 2019), semideﬁ-
nite programming (SDP) (Goemans & Williamson, 1995) and mixed integer programming (CPLEX,
ILOG, 2007). We provide additional results using SOTA or commercial algorithms spanning these
paradigms in appendix A.5, where ECORD is found to outperform SDP and MIP and either beat or
be competitive with SOTA SA methodologies."
COMPARISON TO SOTA RL METHODS,0.2459016393442623,"In practice, we use ECORD and the MCA heuristics with ECO-DQN’s default settings; 50 optimisa-
tion trajectories per graph, each starting from a random node labelling, acting greedily with respect
to the learnt Q-values, and terminating after 2|V | sequential actions. We note that this disadvantages
ECORD as (i) despite learning a stochastic policy, ECORD acts deterministically at test time, and
(ii) ECORD’s signiﬁcant speed and memory advantages over ECO-DQN are not accounted for."
COMPARISON TO SOTA RL METHODS,0.25,"Results. Despite the disadvantages described above, ECORD either outperforms or essentially
matches ECO-DQN on all tests (see table 1), whilst signiﬁcantly improving over all other baselines"
COMPARISON TO SOTA RL METHODS,0.2540983606557377,Under review as a conference paper at ICLR 2022
COMPARISON TO SOTA RL METHODS,0.2581967213114754,"101
102
103
104
105"
COMPARISON TO SOTA RL METHODS,0.26229508196721313,"Graph size, |V | 0 25 50 75 100 125"
COMPARISON TO SOTA RL METHODS,0.26639344262295084,Action time (ms)
COMPARISON TO SOTA RL METHODS,0.27049180327868855,"ECORD
ECO-DQN"
COMPARISON TO SOTA RL METHODS,0.27459016393442626,"40
1000
2000
0 4 8"
COMPARISON TO SOTA RL METHODS,0.2786885245901639,(a) Inference speed for single action. 10−4 10−2
COMPARISON TO SOTA RL METHODS,0.2827868852459016,Step time. (ms)
COMPARISON TO SOTA RL METHODS,0.28688524590163933,"30
100
300
1000
3000
10000
Graph size, |V | 102 105"
COMPARISON TO SOTA RL METHODS,0.29098360655737704,Num. traj.
COMPARISON TO SOTA RL METHODS,0.29508196721311475,(b) Practical throughput for batched trajectories.
COMPARISON TO SOTA RL METHODS,0.29918032786885246,"Figure 2: ECORD (blue) vs. ECO-DQN (orange) scaling performance. (a) Action selection time
when running a single trajectory. (b) Step time (action selection and environment update time) when
running the maximum number of tradjectories that ﬁt on the GPU. ECORD’s relative throughput
at |V | = {30, 100, 300, 1000, 3000, 10 000} is {1.8, 3.0, 12.2, 39.3, 104.5, 298.9}× ECO-DQN’s
(beyond |V |≈10 000, ECO-DQN no longer ﬁts on the GPU)."
COMPARISON TO SOTA RL METHODS,0.30327868852459017,"and generalising to unseen graph topologies and sizes. This seems surprising when we consider
that, in contrast to ECO-DQN, ECORD does not directly condition per-node decisions on the state
of other nodes. However, ECORD does have access to the optimisation trajectory via the RNN hid-
den state, suggesting that in exploratory settings, the temporal structure (in addition to the geometric
structure of the graph) is highly informative. This experiment was repeated for a model trained
instead on BA40 with the results (provided in appendix A.5) being qualitatively the same."
COMPUTATIONAL COMPLEXITY AND PRACTICAL SCALING PERFORMANCE,0.3073770491803279,"4.2
COMPUTATIONAL COMPLEXITY AND PRACTICAL SCALING PERFORMANCE"
COMPUTATIONAL COMPLEXITY AND PRACTICAL SCALING PERFORMANCE,0.3114754098360656,"Whilst ECORD has already been shown to match or surpass SOTA RL baselines when ignoring
computational cost, this is not a sufﬁcient metric of algorithmic utility. In this section, we consider
the theoretical complexity and practical scaling cost of ECORD."
COMPUTATIONAL COMPLEXITY AND PRACTICAL SCALING PERFORMANCE,0.3155737704918033,"Theoretical complexity. The runtime complexity of any optimisation trajectory scales linearly with
the number of actions. In CO problems where every vertex must be correctly labelled, such as Max-
Cut, episode length scales at best linearly with the number of nodes. A typical approach, which
encapsulates both S2V-DQN and ECO-DQN, for applying RL to CO on graphs parameterises the
policy or value function with a GNN. The precise complexity of a GNN depends on the chosen ar-
chitecture and graph topology, however, typically the per-layer performance scales linearly with the
number of edges in the graph, as this is the number of unique communication channels along which
information must be passed. In practice, this results in a (worst case and typical) polynomial scaling
of O(|V | 2) per-action and O(|V | 3) per optimisation, which makes even modest sized graphs with
the order of hundreds of nodes very computationally expensive in practice."
COMPUTATIONAL COMPLEXITY AND PRACTICAL SCALING PERFORMANCE,0.319672131147541,"In contrast, ECORD only runs the GNN once, regardless of the graph size or episode length, and
then selects actions without any additional message passing between nodes. As a result, per-action
computational cost scales linearly as O(|V | ), regardless of the graph topology, and the entire opti-
misation scales as O(|V | 2). Moreover, action selection in ECORD also has a far smaller memory
footprint than using a GNN over the entire graph, and each vertex can be processed in parallel up to
the limits of hardware. Therefore, in practice, we typically obtain a constant, O(1), scaling of the
per-action computational cost and, as the single graph network pass is typically negligible compared
to the long exploratory phase, complete the entire optimisation in O(|V | )."
COMPUTATIONAL COMPLEXITY AND PRACTICAL SCALING PERFORMANCE,0.3237704918032787,"Practical performance. Figure 2 demonstrates the practical performance realised from these theo-
retical improvements. In 2a, the action time of ECORD and ECO-DQN are compared on graphs with
up to 500 k vertices. Whilst ECORD is always faster, both take near constant time for small graphs
where batched inference across all nodes is still efﬁcient. However, even when ECO-DQN begins to
increase in cost (|V | ≈500) and eventually ﬁlls the entire GPU memory (|V | ≈10 k), ECORD retains
a ﬁxed low-cost inference which only appreciably begins to increase for large graphs (|V | >100 k)."
COMPUTATIONAL COMPLEXITY AND PRACTICAL SCALING PERFORMANCE,0.32786885245901637,Under review as a conference paper at ICLR 2022
COMPUTATIONAL COMPLEXITY AND PRACTICAL SCALING PERFORMANCE,0.3319672131147541,"Moreover, the reduced memory footprint of ECORD also allows for more (randomly initialised) op-
timisation trajectories to be run in parallel. Figure 2b contrasts ECORD and ECO-DQN by running
as many parallel trajectories as possible for a single graph with up to |V | =10 k, and plotting the
effective step time (action selection plus environmental step) per trajectory. The practical increase
in throughput of ECORD compared to ECO-DQN increases with graph size from a modest 1.8×
with |V | =30 to 100× for |V | =3 k and 298.9× for |V | =100 k."
SCALING TO LARGE GRAPHS,0.3360655737704918,"4.3
SCALING TO LARGE GRAPHS"
SCALING TO LARGE GRAPHS,0.3401639344262295,"Methods. ECORD is trained on graphs with binary edge weights, w(eij) ∈{0, 1} and |V | =
500. The optimal parameters are selected according to the performance of the greedy policy on
the generated ER10000 set. For the computational reasons discussed previously, ECO-DQN was
trained on ER200 graphs with binary edge weights, and used ER500 graphs for model selection.
The temperature of MCA-soft was tuned independently on each graph, as detailed in appendix A.4."
SCALING TO LARGE GRAPHS,0.3442622950819672,"Stochastic exploration. Despite ECORD using a stochastic soft-greedy policy during training, at
test time we previously used a deterministic policy (which, ultimately, still provided near optimal
performance on small and intermediate graphs). To investigate the performance of a soft-greedy
policy, we evaluated ECORD on the large-graph datasets ER5000, ER7000 and ER10000 – using
20 trajectories of 4|V | steps for all graphs in the test sets – across a range of temperatures."
SCALING TO LARGE GRAPHS,0.3483606557377049,"0.0002
0.0004
0.0006
0.0008
0.0010
τ 0.97 0.98 0.99 1.00"
SCALING TO LARGE GRAPHS,0.3524590163934426,AR/ARmax
SCALING TO LARGE GRAPHS,0.35655737704918034,"ER5000
ER7000
ER10000"
SCALING TO LARGE GRAPHS,0.36065573770491804,"Figure 3: Effect of temperature on ECORD’s per-
formance for |V | = {5000, 7000, 10 000} graphs.
The dashed lines are simply to guide the eye."
SCALING TO LARGE GRAPHS,0.36475409836065575,"The results are summarised in ﬁgure 3. The
key points are that a non-zero temperature is
optimal for larger graphs, and that the optimal
temperature decreases with graph size. The in-
terpretation is that even an exploratory agent
such as ECORD can still eventually get stuck
in closed trajectories when acting determinis-
tically. Therefore, introducing some stochas-
ticity allows ECORD to escape these regions
of the solution space and ultimately continue
to search for improved conﬁgurations. How-
ever, this must be balanced with the need for
a sufﬁciently deterministic policy that a good
solution is found with high probability. Intu-
itively, longer sequences of actions are required
to reach a good conﬁguration for larger graphs,
which aligns with the observed dependence of
the optimal temperature with graph size."
SCALING TO LARGE GRAPHS,0.36885245901639346,"GSet results. We validate ECORD’s performance on large graphs by testing it on all GSet graphs
with random binary edges, as summarised in table 2. For each graph we run 20 parallel optimisation
trajectories for a maximum of 180 s. For G5000, G7000 and G10000 we use tuned temperatures, τ,
of 3.5e−4, 2e−4 and 1e−4 respectively, and set τ=5e−4 for all other graphs."
SCALING TO LARGE GRAPHS,0.3729508196721312,"ECORD shows consistently strong performance, matching or beating ECO-DQN and MCA-soft on
every instance by a margin that increases with graph size. The speed of ECORD is emphasised by
the fact that it obtains approximation ratios of above 0.99 on all graphs with |V | ≤2 k in under
10 s. Whilst in principle it is possible to reach the optimal solution in |V | actions, on larger graphs
the obtained cut values consistently increase with longer exploration (for reference, ECORD takes
>28 k actions in 180 s when |V | =10 k). This clearly demonstrates that ECORD learns to search
through the solution space without getting stuck, rather than generating a single mode of solutions."
SCALING TO LARGE GRAPHS,0.3770491803278688,"A natural ﬁnal question is whether the slight decrease in performance on the largest graphs is due to
an insufﬁcient time budget, or the learnt policy being less suitable for these problems. To test this,
ECORD was allowed to continue optimising G70 for 1 h. Whilst the obtained solution improved to
have an approximation ratio of 0.978 (obtained in only 233 s), the optimal solution was not found.
Ultimately, whilst previous RL-GNN methods were limited by the scalability of GNNs, now we ﬁnd
ourselves limited by the ability of the agent to reason about larger systems – opening the door to,
and deﬁning a challenge for, future research."
SCALING TO LARGE GRAPHS,0.38114754098360654,Under review as a conference paper at ICLR 2022
SCALING TO LARGE GRAPHS,0.38524590163934425,"Table 2: ECORD, ECO-DQN and MCA-soft performance on the GSet graphs given a time budget
of 10, 30, and 180 s (best in bold)."
SCALING TO LARGE GRAPHS,0.38934426229508196,"MCA-soft
ECO-DQN
ECORD"
SCALING TO LARGE GRAPHS,0.39344262295081966,"Graph
|V |
10 s
30 s
180 s
10 s
30 s
180 s
10 s
30 s
180 s"
SCALING TO LARGE GRAPHS,0.3975409836065574,"G1
800
0.994
0.999
0.999
0.993
0.993
0.998
0.998
1.000
—
G2
800
0.995
0.996
0.998
0.986
0.995
0.996
0.998
0.998
1.000
G3
800
0.996
0.999
0.999
0.992
0.993
0.996
0.999
1.000
—
G4
800
0.996
0.997
0.999
0.985
0.992
0.998
0.999
1.000
—
G5
800
0.996
0.997
0.997
0.993
0.994
0.998
1.000
—
—"
SCALING TO LARGE GRAPHS,0.4016393442622951,"G43
1000
0.990
0.997
1.000
0.985
0.992
0.998
0.996
0.997
1.000
G44
1000
0.992
0.995
0.999
0.987
0.994
0.996
0.999
0.999
1.000
G45
1000
0.995
0.998
0.998
0.988
0.992
0.996
0.998
0.999
0.999
G46
1000
0.992
0.994
0.998
0.990
0.992
0.997
0.998
0.999
1.000
G47
1000
0.996
0.997
0.998
0.988
0.993
0.994
0.997
0.998
0.998"
SCALING TO LARGE GRAPHS,0.4057377049180328,"G22
2000
0.985
0.990
0.995
0.966
0.981
0.991
0.990
0.995
0.997
G23
2000
0.985
0.992
0.996
0.967
0.983
0.989
0.991
0.995
0.997
G24
2000
0.986
0.991
0.997
0.967
0.983
0.989
0.992
0.994
0.997
G25
2000
0.985
0.993
0.997
0.966
0.985
0.990
0.991
0.996
0.998
G26
2000
0.987
0.993
0.995
0.963
0.982
0.984
0.991
0.996
0.999"
SCALING TO LARGE GRAPHS,0.4098360655737705,"G55
5000
0.952
0.968
0.969
0.832
0.873
0.939
0.947
0.969
0.985"
SCALING TO LARGE GRAPHS,0.4139344262295082,"G60
7000
0.934
0.963
0.968
0.764
0.847
0.930
0.916
0.960
0.981"
SCALING TO LARGE GRAPHS,0.4180327868852459,"G70
10 000
0.865
0.934
0.957
0.677
0.818
0.898
0.837
0.944
0.972"
SCALING TO LARGE GRAPHS,0.42213114754098363,"Ablations. ECORD’s key components are: (i) the use of a single (GNN) encoding step to embed
the problem structure, (ii) rapid decoding steps where per-vertex actions are conditioned on only
local observations and an (RNN) leant embedding of the optimisation trajectory, and (iii) an ex-
ploratory CO setting where actions can be reversed. Ablations (detailed in appendix A.5) of the
GNN and RNN show that both are necessary for strong performance. ECORD’s contribution to the
exploratory CO setting is evidencing that a suitably stochastic policy outperforms a deterministic
one. To emphasise that this is not simply because of algorithmic improvements in M-DQN com-
pared to DQN, a deterministic-acting ECORD trained with DQN is shown to also not match the
performance reported in table 2."
DISCUSSION,0.4262295081967213,"5
DISCUSSION"
DISCUSSION,0.430327868852459,"We present ECORD, a new SOTA RL algorithm for the Max-Cut problem in term of both perfor-
mance and scalability. ECORD’s demonstrated efﬁcacy on graphs with up 10 k vertices, and highly
favourable computational complexity, suggests even larger problems could be tackled. By replacing
multiple expensive GNN operations with a single embedding stage and rapid action-selection di-
rected by a recurrent unit, this work highlights the importance of, and a method to achieve, efﬁcient
exploration when solving CO problems, all within the broader pursuit of scalable geometric learning."
DISCUSSION,0.4344262295081967,"Algorithmic improvements are a possible direction for further research. An adaptive (or learnt) tem-
perature schedule could better trade-off stochastic exploration and deterministic solution improve-
ment. ECORD also runs multiple optimisation trajectories in parallel, and so utilising information
from other trajectories to either better inform future decisions or ensure sufﬁcient diversity between
them, would be another approach for improving performance."
DISCUSSION,0.4385245901639344,"With regards to further scaling improvements, any algorithm that labels vertices sequentially will
at best have O(|V |) complexity. An interesting prospect for future work would be to note that
ECORD does not rely on observing the current state of the neighbourhood of a vertex to evaluate
the action quality – therefore one could envisage ﬂipping multiple vertices in a single step, with a
single centralised, or decentralised multi-agent, system."
DISCUSSION,0.4426229508196721,"An alternative direction would be to apply our algorithm to other complex problems and, in principle,
ECORD could be applied to any vertex-labelling CO problem deﬁned on a graph. However, its use
of ‘peeks’ (one-step look aheads for each action), does not directly translate to problems where
the quality of intermediate actions are not naturally evaluated (e.g. those where an arbitrary node
labelling may be invalid such as maximum clique). Considering only valid actions or utilising
indirect metrics of solution quality are possible solutions, but this remains a topic for future research."
DISCUSSION,0.44672131147540983,Under review as a conference paper at ICLR 2022
REFERENCES,0.45081967213114754,REFERENCES
REFERENCES,0.45491803278688525,"Kenshin Abe, Zijian Xu, Issei Sato, and Masashi Sugiyama. Solving NP-Hard Problems on Graphs
by Reinforcement Learning without Domain Knowledge. arXiv:1905.11623, 2019."
REFERENCES,0.45901639344262296,"Réka Albert and Albert-László Barabási. Statistical mechanics of complex networks. Reviews of
Modern Physics, 74(1):47, 2002."
REFERENCES,0.46311475409836067,"Francisco Barahona. On the computational complexity of Ising spin glass models. Journal of Physics
A: Mathematical and General, 15(10):3241, 1982."
REFERENCES,0.4672131147540984,"Thomas Barrett, William Clements, Jakob Foerster, and Alex Lvovsky. Exploratory combinatorial
optimization with reinforcement learning. In Proceedings of the AAAI Conference on Artiﬁcial
Intelligence, volume 34, pp. 3243–3250, 2020."
REFERENCES,0.4713114754098361,"Irwan Bello, Hieu Pham, Quoc V Le, Mohammad Norouzi, and Samy Bengio. Neural Combinatorial
Optimization with Reinforcement Learning. arXiv:1611.09940, 2016."
REFERENCES,0.47540983606557374,"Yoshua Bengio, Andrea Lodi, and Antoine Prouvost.
Machine learning for combinatorial opti-
mization: A methodological tour d’horizon. European Journal of Operational Research, 290(2):
405–421, 2021. ISSN 0377-2217."
REFERENCES,0.47950819672131145,"Una Benlic and Jin-Kao Hao. Breakout Local Search for the Max-Cut problem. Engineering Appli-
cations of Artiﬁcial Intelligence, 26(3):1162 – 1173, 2013. ISSN 0952-1976."
REFERENCES,0.48360655737704916,"Xavier Bresson and Thomas Laurent. The transformer network for the traveling salesman problem.
arXiv:2103.03012, 2021."
REFERENCES,0.48770491803278687,"Xinyun Chen and Yuandong Tian. Learning to perform local rewriting for combinatorial optimiza-
tion. arXiv:1810.00337, 2019."
REFERENCES,0.4918032786885246,"CPLEX, ILOG. 11.0 user’s manual. ILOG SA, Gentilly, France, pp. 32, 2007."
REFERENCES,0.4959016393442623,"Hanjun Dai, Elias B. Khalil, Yuyu Zhang, Bistra Dilkina, and Le Song. Learning combinatorial
optimization algorithms over graphs. In Proceedings of the 31st International Conference on
Neural Information Processing Systems, NIPS’17, pp. 6351–6361, Red Hook, NY, USA, 2017.
Curran Associates Inc. ISBN 9781510860964."
REFERENCES,0.5,"Hristo N Djidjev, Guillaume Chapuis, Georg Hahn, and Guillaume Rizk. Efﬁcient combinatorial
optimization using quantum annealing. arXiv preprint arXiv:1801.08653, 2018."
REFERENCES,0.5040983606557377,"Iddo Drori, Anant Kharkar, William R. Sickinger, Brandon Kates, Qiang Ma, Suwen Ge, Eden
Dolev, Brenda Dietrich, David P. Williamson, and Madeleine Udell. Learning to solve combina-
torial optimization problems on real-world graphs in linear time. arXiv:2006.03750, 2020."
REFERENCES,0.5081967213114754,"Paul Erd˝os and Alfréd Rényi. On the Evolution of Random Graphs. Publ. Math. Inst. Hung. Acad.
Sci, 5(1):17–60, 1960."
REFERENCES,0.5122950819672131,"Michel X Goemans and David P Williamson. Improved Approximation Algorithms for Maximum
Cut and Satisﬁability Problems using Semideﬁnite Programming. Journal of the ACM (JACM),
42(6):1115–1145, 1995."
REFERENCES,0.5163934426229508,"Hayato Goto, Kosuke Tatsumura, and Alexander R Dixon. Combinatorial optimization by simulat-
ing adiabatic bifurcations in nonlinear hamiltonian systems. Science advances, 5(4):eaav2372,
2019."
REFERENCES,0.5204918032786885,"Shenshen Gu and Yue Yang. A Deep Learning Algorithm for the Max-Cut Problem Based on Pointer
Network Structure with Supervised Learning and Reinforcement Learning Strategies. Mathemat-
ics, 8(2), 2020. ISSN 2227-7390."
REFERENCES,0.5245901639344263,"Prateek Gupta, Maxime Gasse, Elias B. Khalil, M. Pawan Kumar, Andrea Lodi, and Yoshua Bengio.
Hybrid models for learning to branch. arXiv:2006.15212, 2020."
REFERENCES,0.5286885245901639,Under review as a conference paper at ICLR 2022
REFERENCES,0.5327868852459017,"Tuomas Haarnoja, Aurick Zhou, Pieter Abbeel, and Sergey Levine. Soft actor-critic: Off-policy
maximum entropy deep reinforcement learning with a stochastic actor. In International Confer-
ence on Machine Learning, pp. 1861–1870. PMLR, 2018."
REFERENCES,0.5368852459016393,"A. Halim and I. Ismail. Combinatorial optimization: Comparison of heuristic algorithms in travel-
ling salesman problem. Archives of Computational Methods in Engineering, 26:367–380, 2019."
REFERENCES,0.5409836065573771,"Sung-Pil Hong. Inapproximability of the Max-cut Problem with Negative Weights. International
Journal of Management Science, 14(1), 2008."
REFERENCES,0.5450819672131147,"John J Hopﬁeld and David W Tank. “Neural” Computation of Decisions in Optimization Problems.
Biological Cybernetics, 52(3):141–152, 1985."
REFERENCES,0.5491803278688525,"Chaitanya K. Joshi, Thomas Laurent, and Xavier Bresson. An efﬁcient graph convolutional network
technique for the travelling salesman problem. arXiv:1906.01227, 2019."
REFERENCES,0.5532786885245902,"Richard M Karp. Reducibility Among Combinatorial Problems. In Complexity of Computer Com-
putations, pp. 85–103. Springer, 1972."
REFERENCES,0.5573770491803278,"Elias Khalil, Hanjun Dai, Yuyu Zhang, Bistra Dilkina, and Le Song. Learning Combinatorial Op-
timization Algorithms over Graphs. In Advances in Neural Information Processing Systems, pp.
6348–6358, 2017."
REFERENCES,0.5614754098360656,"Timothée Leleu, Yoshihisa Yamamoto, Peter L. McMahon, and Kazuyuki Aihara. Destabilization
of local minima in analog spin systems by correction of amplitude heterogeneity. Phys. Rev. Lett.,
122:040607, 2019."
REFERENCES,0.5655737704918032,"Yujia Li, Daniel Tarlow, Marc Brockschmidt, and Richard Zemel. Gated graph sequence neural
networks. arXiv:1511.05493, 2015."
REFERENCES,0.569672131147541,"Zhuwen Li, Qifeng Chen, and Vladlen Koltun. Combinatorial Optimization with Graph Convolu-
tional Networks and Guided Tree Search. In Advances in Neural Information Processing Systems,
pp. 539–548, 2018."
REFERENCES,0.5737704918032787,"Timothy P Lillicrap, Jonathan J Hunt, Alexander Pritzel, Nicolas Heess, Tom Erez, Yuval Tassa,
David Silver, and Daan Wierstra.
Continuous control with deep reinforcement learning.
arXiv:1509.02971, 2015."
REFERENCES,0.5778688524590164,"Sahil Manchanda, Akash Mittal, Anuj Dhawan, Sourav Medya, Sayan Ranu, and Ambuj Singh.
Learning heuristics over large graphs via deep reinforcement learning. arXiv:1903.03332, 2020."
REFERENCES,0.5819672131147541,"Nina Mazyavkina, Sergey Sviridov, Sergei Ivanov, and Evgeny Burnaev. Reinforcement learning
for combinatorial optimization: A survey. arXiv:2003.03600, 2020."
REFERENCES,0.5860655737704918,"Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A Rusu, Joel Veness, Marc G Belle-
mare, Alex Graves, Martin Riedmiller, Andreas K Fidjeland, Georg Ostrovski, et al. Human-level
control through deep reinforcement learning. Nature, 518(7540):529, 2015."
REFERENCES,0.5901639344262295,"Volodymyr Mnih, Adria Puigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy Lillicrap, Tim
Harley, David Silver, and Koray Kavukcuoglu. Asynchronous methods for deep reinforcement
learning. In International Conference on Machine Learning, pp. 1928–1937. PMLR, 2016."
REFERENCES,0.5942622950819673,"Alejandro Perdomo-Ortiz, Neil Dickson, Marshall Drew-Brook, Geordie Rose, and Alán Aspuru-
Guzik. Finding low-energy conformations of lattice protein models by quantum annealing. Sci-
entiﬁc Reports, 2:571, 2012."
REFERENCES,0.5983606557377049,"Imre Pólik and Tamás Terlaky.
Interior Point Methods for Nonlinear Optimization, pp.
215–276.
Springer Berlin Heidelberg, Berlin, Heidelberg, 2010.
ISBN 978-3-642-
11339-0.
doi:
10.1007/978-3-642-11339-0_4.
URL https://doi.org/10.1007/
978-3-642-11339-0{_}4."
REFERENCES,0.6024590163934426,"Ilya Sutskever. Training Recurrent Neural Networks. PhD thesis, CAN, 2013. AAINS22066."
REFERENCES,0.6065573770491803,"Egor S Tiunov, Alexander E Ulanov, and AI Lvovsky. Annealing by simulating the coherent Ising
machine. Optics Express, 27(7):10288–10295, 2019."
REFERENCES,0.610655737704918,Under review as a conference paper at ICLR 2022
REFERENCES,0.6147540983606558,"Natalia Vesselinova, Rebecca Steinert, Daniel F. Perez-Ramirez, and Magnus Boman. Learning
combinatorial optimization on graphs: A survey with applications to networking. IEEE Access,
8:120388–120416, 2020."
REFERENCES,0.6188524590163934,"Nino Vieillard, Olivier Pietquin, and Matthieu Geist.
Munchausen reinforcement learning.
arXiv:2007.14430, 2020."
REFERENCES,0.6229508196721312,"Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly. Pointer Networks. In Advances in Neural
Information Processing Systems, pp. 2692–2700, 2015."
REFERENCES,0.6270491803278688,"Ziyu Wang, Tom Schaul, Matteo Hessel, Hado Hasselt, Marc Lanctot, and Nando Freitas. Dueling
network architectures for deep reinforcement learning. In International Conference on Machine
Learning, pp. 1995–2003. PMLR, 2016."
REFERENCES,0.6311475409836066,"P. J. Werbos. Backpropagation through time: what it does and how to do it. Proceedings of the
IEEE, 78(10):1550–1560, 1990. doi: 10.1109/5.58337."
REFERENCES,0.6352459016393442,"David P. Williamson and David B. Shmoys. The Design of Approximation Algorithms. Cambridge
University Press, 2011. ISBN 978-0-521-19527-0."
REFERENCES,0.639344262295082,"Yoshihisa Yamamoto, Kazuyuki Aihara, Timothee Leleu, Ken-ichi Kawarabayashi, Satoshi Kako,
Martin Fejer, Kyo Inoue, and Hiroki Takesue. Coherent Ising machines—optical neural networks
operating at the quantum limit. npj Quantum Information, 3(1):49, 2017."
REFERENCES,0.6434426229508197,"Wang Yanling, Yang Deli, and Yan Guoqing. Logistics supply chain management based on multi-
constrained combinatorial optimization and extended simulated annealing. In 2010 International
Conference on Logistics Systems and Intelligent Management (ICLSIM), volume 1, pp. 188–192,
2010."
REFERENCES,0.6475409836065574,"Wei Zhang and Thomas G. Dietterich. A reinforcement learning approach to job-shop scheduling.
In Proceedings of the 14th International Joint Conference on Artiﬁcial Intelligence - Volume 2,
IJCAI’95, pp. 1114–1120, San Francisco, CA, USA, 1995. Morgan Kaufmann Publishers Inc.
ISBN 1558603638."
REFERENCES,0.6516393442622951,"A
APPENDIX"
REFERENCES,0.6557377049180327,"A.1
ARCHITECTURE DETAILS"
REFERENCES,0.6598360655737705,"Here we provide further details on the network architecture described in section 3.2 and ﬁgure 1 of
the main text. For simplicity, we implicitly drop any bias terms in the below equations."
REFERENCES,0.6639344262295082,"Graph Neural Network. The gated graph convolution network of Li et al. (2015) is modiﬁed to
include layer normalisation, LN(·), where the 16-dimensional embedding of node i at layer l + 1 is
given by,"
REFERENCES,0.6680327868852459,"x(l+1)
i
= LN(GRU(x(l)
i , m(l+1)
i
)),
m(l+1)
i
=
1
|N(i)| X"
REFERENCES,0.6721311475409836,"j∈N(i)
w(eij)Wgx(l)
j ,
(4)"
REFERENCES,0.6762295081967213,"where Wg ∈R16×16. The ﬁnal embeddings after 4 rounds of message-passing are linearly projected
to per-vertex embeddings, xi = Wpx(4)
i
with Wp ∈R16×16, that remain ﬁxed for the remainder of
the episode."
REFERENCES,0.680327868852459,Value network. Recall from the main text that Q-values at time t are predicted as
REFERENCES,0.6844262295081968,"Q(v(t)
i , h(t)) = V (h(t)) + A(v(t)
i , h(t)) = MLPV(h(t)) + MLPA([v(t)
i , Whh(t)]).
(5)"
REFERENCES,0.6885245901639344,"where h(t) ∈R1024 is the hidden state of the RNN and v(t)
i
= [xi, Woo(t)
i ] ∈R32 are the per-node
embeddings with xi ∈R16, Wo ∈R16×3 and Wh ∈R32×1014."
REFERENCES,0.6926229508196722,"The value head, MLPV(·) : R1024 →R, is a 2-layer network that applies a tanh activation to the
input and leaky ReLU to the intermediate activations."
REFERENCES,0.6967213114754098,Under review as a conference paper at ICLR 2022
REFERENCES,0.7008196721311475,"The advantage head, MLPA(·) : R64 →R, is a 2-layer network that applies layer norm and leaky
ReLU to the intermediate activations."
REFERENCES,0.7049180327868853,"Recurrent network. The RNN hidden state is 1024-dimensional and initialised to zeros. It is
updated using the embedding of the selected action, v(t)
∗, and our global observation from the next
step,"
REFERENCES,0.7090163934426229,"h(t+1) = GRU(h(t), m(t+1)),
where
m(t+1) = LeakyReLU(Wm([v(t)
∗, o(t+1)
G
])),
(6)"
REFERENCES,0.7131147540983607,where Wm ∈R64×34.
REFERENCES,0.7172131147540983,"A.2
TRAINING DETAILS"
REFERENCES,0.7213114754098361,"The ECORD pseudocode is given in algorithm 1. Note that to update the network at time t we make
use of truncated backpropagation through time (BPTT) (Werbos, 1990; Sutskever, 2013) using the
previous tBPTT experiences. We perform network updates every fupd time steps, where we update
the online network parameters θ using stochastic gradient descent (SGD) on the M-DQN loss and
the target network parameters θ using a soft update (Lillicrap et al., 2015) with update parameter
τupd. The hyperparameters used are summarised in table 3."
REFERENCES,0.7254098360655737,Table 3: Parameters used for ECORD unless otherwise stated.
REFERENCES,0.7295081967213115,"Parameter
Value"
REFERENCES,0.7336065573770492,"Number of training steps
40 000
Batch size
64
Update frequency (fupd)
8
Learning rate
1e−3
Optimizer
Adam (β1 = 0.9, β2 = 0.999)
Soft update rate (τupd)
0.01
BPTT length (kBPTT)
5
Buffer size (|M|)
40 000
Discount factor (γ)
0.7
Initial exploration probability (ε(t=0))
1
Final exploration probability (ε(tε))
0.05
Time of exploration decay (tε)
5000
M-DQN temperature (τ)
0.01
M-DQN bootstrap (α)
0.9
M-DQN clipping (l0)
-1"
REFERENCES,0.7377049180327869,"A.3
EFFICIENT RE-CALCULATION OF CUT VALUE AND PEEKS"
REFERENCES,0.7418032786885246,"Given a graph, G(V, E), with edge weights wij ≡w(eij) for eij ∈E, and a node labelling repre-
sented as a binary vector, z ∈{0, 1}|V |, the cut value is given by,"
REFERENCES,0.7459016393442623,C(z|G) = 1 2 X
REFERENCES,0.75,"ij
wij (zi(1 −zj) + (1 −zi)zj) , = 1 2 X"
REFERENCES,0.7540983606557377,"ij
wij(zi + zj −2zizj).
(7)"
REFERENCES,0.7581967213114754,It is straightforward to decompose this into the sum of ‘local’ cuts
REFERENCES,0.7622950819672131,C(z|G) = 1 2 X
REFERENCES,0.7663934426229508,"i
Ci,
Ci =
X"
REFERENCES,0.7704918032786885,"j∈N(i)
wij(zi + zj −2zizj),
(8)"
REFERENCES,0.7745901639344263,"where Ci, the cut value of the sub-graph containing node only i and its neighbours, N(i). Similarly,
we can deﬁne the total weight of un-cut edges connected to each vertex as"
REFERENCES,0.7786885245901639,"Ci =
X"
REFERENCES,0.7827868852459017,"j∈N(i)
wij(1 −zi −zj + 2zizj).
(9)"
REFERENCES,0.7868852459016393,Under review as a conference paper at ICLR 2022
REFERENCES,0.7909836065573771,"Algorithm 1: Training ECORD
Initialise experience replay memory M.
for each batch of episodes do
Sample BG graphs G(V, E) from distribution D
Calculate per-vertex embeddings using GNN
Initialise a random solution set for each graph, S0 ⊂V
for each step t in the episode do
k′ = min(t −kBPTT, 0)
for each graph Gj in the batch do"
REFERENCES,0.7950819672131147,// Flip a vertex. a(t)∼
REFERENCES,0.7991803278688525,"(
randomly from V with prob. ε"
REFERENCES,0.8032786885245902,"softmax( Qθ(s(t),·)"
REFERENCES,0.8073770491803278,"τ
) with prob. 1 −ε"
REFERENCES,0.8114754098360656,S(t+1) :=
REFERENCES,0.8155737704918032,"(
S(t) ∪{a(t)},
if a(t) /∈S(t)"
REFERENCES,0.819672131147541,"S(t) \ {a(t)},
if a(t) ∈S(t)"
REFERENCES,0.8237704918032787,"// Add experience to buffer.
Add tuple m(t) = (s(t−k′), . . . , s(t+1), a(t−k′), . . . , a(t), r(t), d) to M
if t mod fupd == 0 then"
REFERENCES,0.8278688524590164,"// Sample batch of experiences from buffer.
M (t) ⊂M"
REFERENCES,0.8319672131147541,"// Update online network.
Update θ with one SGD step using BPTT from t down to t −k′ on Lm−dqn (??)"
REFERENCES,0.8360655737704918,"// Update target network.
θ ←θτupd + θ(1 −τupd)
end
end
end
end
return θ"
REFERENCES,0.8401639344262295,"The change in cut value (referred to as the ‘peek’ feature in the main text) if the label of vertex i is
ﬂipped is then then given by"
REFERENCES,0.8442622950819673,"∆Ci = Ci −Ci, =
X"
REFERENCES,0.8483606557377049,"j∈N(i)
wij(4zizj −2(zi + zj) + 1), =
X"
REFERENCES,0.8524590163934426,"j∈N(i)
wij(2zi −1)(2zj −1). (10)"
REFERENCES,0.8565573770491803,"Calculating these one-step look-aheads to the change in cut for each action clearly has the same
complexity as calculating the cut-value itself (equation (7)). Moreover, they only have to be calcu-
lated once at the start of each episode, as when vertex i is ﬂipped from zi to zi, only the ‘peeks’ of
vertrices i and j ∈N(i) need to be updated. These updates follow directly from the above and are
given by
∆Ci →−∆Ci,
∆Cj →∆Cj −wij(2zi −1)(2zj −1).
(11)"
REFERENCES,0.860655737704918,"A.4
MCA-SOFT"
REFERENCES,0.8647540983606558,"MCA-soft attempts to upper bound the performance simple policies that condition actions based
solely on the provided ‘peeks’ for each action. Denoting the known change in cut value if vertex i
was to be ﬂipped as ∆Ci (see eq. (11)), MCA-soft follows a stochastic policy given by"
REFERENCES,0.8688524590163934,"a(t) ∼softmax
∆Ci τmca"
REFERENCES,0.8729508196721312,"
.
(12)"
REFERENCES,0.8770491803278688,"To maximise the performance of MCA-soft, the temperature, τmca ∈R, is independently tuned to
maximise performance on every set of graphs considered. In practice, this process is a grid search
over τmca ∈{0, 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1, 3} for results in table 1 and 4, and τmca ∈
{0, 0.0001, 0.001, 0.01, 0.1, 1} for results in table 2."
REFERENCES,0.8811475409836066,Under review as a conference paper at ICLR 2022
REFERENCES,0.8852459016393442,"A.5
EXTENDED RESULTS"
REFERENCES,0.889344262295082,"Training on BA graphs.
For completeness, we repeat the experiments shown in the main
manuscript but now training on 40-vertex BA graphs and evaluating on both ER and BA graphs
with up to 500 vertices, with the results shown in Table 4."
REFERENCES,0.8934426229508197,"Table 4: Scores for agents trained on BA40. Error bars denote 68 % conﬁdence intervals. RL base-
line scores are taken directly from Barrett et al. (2020) to provide the fairest possible comparison.
ECORD results averaged across 3 seeds."
REFERENCES,0.8975409836065574,"Heuristics
RL baselines"
REFERENCES,0.9016393442622951,"MCA
MCA-soft
S2V-DQN
ECO-DQN
ECORD"
REFERENCES,0.9057377049180327,"BA40
0.999+0.000
−0.006
1.000+0.000
−0.000
0.961+0.027
−0.048
1.000+0.000
−0.000
1.000+0.000
−0.000
BA60
0.989+0.007
−0.018
0.997+0.008
−0.008
0.959+0.030
−0.040
1.000+0.000
−0.000
1.000+0.000
−0.000
BA100
0.965+0.020
−0.020
0.984+0.012
−0.013
0.941+0.037
−0.044
1.000+0.000
−0.001
1.000+0.000
−0.001
BA200
0.911+0.033
−0.037
0.929+0.034
−0.034
0.808+0.107
−0.102
0.983+0.009
−0.034
0.980+0.020
−0.033
BA500
0.889+0.015
−0.015
0.899+0.014
−0.014
0.499+0.114
−0.114
0.990+0.008
−0.008
0.967+0.012
−0.012
ER40
0.997+0.001
−0.010
1.000+0.000
−0.000
0.970+0.020
−0.037
1.000+0.000
−0.000
1.000+0.000
−0.000
ER60
0.994+0.003
−0.013
0.999+0.001
−0.004
0.951+0.036
−0.041
1.000+0.000
−0.000
1.000+0.000
−0.000
ER100
0.977+0.017
−0.017
0.993+0.007
−0.008
0.941+0.035
−0.037
1.000+0.000
−0.001
1.000+0.000
−0.001
ER200
0.959+0.014
−0.014
0.973+0.012
−0.012
0.933+0.024
−0.024
0.994+0.004
−0.005
1.000+0.000
−0.001
ER500
0.941+0.012
−0.012
0.958+0.009
−0.009
0.905+0.019
−0.019
0.979+0.006
−0.006
0.996+0.004
−0.004"
REFERENCES,0.9098360655737705,"Baseline comparison. Here we conduct a thorough solver comparison by training and inferring on
both ER and BA graphs of up to 500 vertices. We compare ECORD to seven baselines; six taken
directly from Barrett et al. (2020) (ECO-DQN, S2V-DQN, MCA, CPLEX, SimCIM, and Leleu
et al. (2019); refer to Barrett et al. (2020) for implementation details), and one an extension of
MCA (MCA-soft, as described in this manuscript). The results are summarised in Table 5, with the
approximation ratios shown taken from averaging the solvers’ performances across 100 BA and ER
graphs of up to 500 vertices."
REFERENCES,0.9139344262295082,"Table 5: Comparison of the approximation ratios for the Greedy (MCA and MCA-soft), branch-and-
bound (CPLEX), simulated annealing (SimCIM and Leleu), and RL (S2V-DQN and ECO-DQN)
Max-Cut solver baselines."
REFERENCES,0.9180327868852459,"MCA
MCA-soft
CPLEX
SimCIM
Leleu
S2V-DQN
ECO-DQN
ECORD
ER40
0.997
1.000
1.000
1.000
1.000
0.980
1.000
1.000
ER60
0.994
0.999
1.000
1.000
1.000
0.973
1.000
1.000
ER100
0.977
0.993
0.870
1.000
1.000
0.961
1.000
1.000
ER200
0.959
0.973
0.460
0.990
1.000
0.951
0.999
1.000
ER500
0.941
0.958
0.160
0.990
1.000
0.921
0.985
0.996
BA40
0.999
1.000
1.000
1.000
1.000
0.961
1.000
1.000
BA60
0.989
0.997
1.000
1.000
1.000
0.959
1.000
1.000
BA100
0.965
0.984
1.000
0.990
1.000
0.961
1.000
0.996
BA200
0.911
0.929
0.830
0.990
0.940
0.808
0.983
0.980
BA500
0.889
0.899
0.170
0.970
1.000
0.499
0.990
0.967"
REFERENCES,0.9221311475409836,"Semideﬁnite programming comparison. In addition to heuristics, another important branch of
Max-Cut solver research is that of approximation algorithms. Such algorithms can offer a theoretical
guarantee on the approximation ratio while still solving a relaxed formulation of the original problem
in polynomial time. One such approximation method is the canonical semideﬁnite programming
(SDP) approach of Goemans & Williamson (1995). Goemans & Williamson (1995) ﬁrst formulate
Max-Cut as an SDP by framing the objective as a linear function of a symmetric matrix subject
to linear equality constraints (as in a linear programme) but with the additional constraint that the
matrix must be positive semideﬁnite (whereby, for an n × n matrix A, ∀x ∈Rn, xtAx ≥0). This
relaxed Max-Cut SDP formulation can be solved efﬁciently using algorithms such as a generalised
Simplex method (Pólik & Terlaky, 2010). The insight of Goemans & Williamson (1995) was to
then apply a geometric randomised rounding technique to convert the SDP solution into a feasible
Max-Cut solution. Crucially, the randomised rounding method gives a guarantee to be within at least
0.87856 times the optimal Max-Cut value."
REFERENCES,0.9262295081967213,Under review as a conference paper at ICLR 2022
REFERENCES,0.930327868852459,"To the best of our knowledge, no open-access Goemans & Williamson (1995) solver exists which can
handle Max-Cut problems with negatively weighted edges (Hong, 2008). However, G1-5 of the GSet
graphs used in Table 2 of this manuscript have all-positive edge weights, therefore we ran the open-
source cvx solver (https://github.com/hermish/cvx-graph-algorithms), which
implements Goemans & Williamson (1995), on these 5 problems to obtain approximation ratios of
0.971, 0.970, 0.975, 0.970, and 0.967 in 449, 484, 496, 521, and 599 s respectively. In addition to
ECORD outperforming Goemans & Williamson (1995) on these 5 GSet graphs (see Table 2) in both
solving time and optimality, we note that ECORD also exceeds the 0.87856 approximation ratio
guarantee across all the GSet, ER, and BA graphs examined in our work (see Tables 1, 2, 4, and 5)."
REFERENCES,0.9344262295081968,"Ablations. We provide ablations to further investigate the key components of ECORD, highlighted
in the main text as"
REFERENCES,0.9385245901639344,"1. a GNN to encode the spatial structure of the problem,"
REFERENCES,0.9426229508196722,"2. a rapid decoding conditioned on local per-node observations and an RNN’s internal state
that represents the optimisation trajectory,"
REFERENCES,0.9467213114754098,3. an exploratory CO setting.
REFERENCES,0.9508196721311475,"We ablate the GNN and RNN by using ﬁxed zero-vectors in-place of the static per-node embeddings,
xi, and the RNN hidden state, h(t), respectively. As the advantage of exploratory CO has already
been demonstrated in prior works (Barrett et al., 2020), we instead ablate the stochastic policies we
ﬁnd provide further improved exploration at test time (see section 4.3 of the main text). Speciﬁcally,
we train the agent using DQN instead of M-DQN, as this optimises for a deterministic policy."
REFERENCES,0.9549180327868853,"For all ablations, we otherwise use the same procedure as the full ECORD agent from section 4.3 of
the main text, including tuning temperature of the agents policy with a grid-search. DQN is, unsur-
prisingly, found to be best at τ = 0, as is the agent with the GNN ablated. The agent with the RNN
ablated uses τ of 1e−4, 8.5e−5 and 5e−5 for For G55, G60 and G70, respectively, with τ=5e−4
for all other graphs. Results are presented in table 6 with ECORD signiﬁcantly outperforming all
ablations on larger graphs."
REFERENCES,0.9590163934426229,"Table 6: ECORD, including both a GNN and RNN trained with M-DQN, and ablations (as described
in the text) on the GSet graphs given a time budget of 10, 30, and 180 s (best in bold)."
REFERENCES,0.9631147540983607,"No GNN
No RNN
DQN
ECORD"
REFERENCES,0.9672131147540983,"Graph
|V |
10 s
30 s
180 s
10 s
30 s
180 s
10 s
30 s
180 s
10 s
30 s
180 s"
REFERENCES,0.9713114754098361,"G1
800
1.000
—
—
0.998
1.000
—
0.996
0.999
0.999
0.998
1.000
—
G2
800
0.999
1.000
—
0.998
0.998
0.999
0.998
0.998
0.999
0.998
0.998
1.000
G3
800
0.999
1.000
—
0.998
0.999
0.999
0.996
0.999
0.999
0.999
1.000
—
G4
800
1.000
—
—
0.999
1.000
—
0.998
0.999
0.999
0.999
1.000
—
G5
800
1.000
—
—
0.999
0.999
0.999
0.998
0.998
0.998
1.000
—
—"
REFERENCES,0.9754098360655737,"G43
1000
0.997
0.998
0.999
0.996
0.999
0.999
0.991
0.991
0.991
0.996
0.997
1.000
G44
1000
0.997
0.998
1.000
0.999
0.999
0.999
0.995
0.995
0.995
0.999
0.999
1.000
G45
1000
0.995
0.997
0.999
0.997
1.000
—
0.994
0.994
0.994
0.998
0.999
0.999
G46
1000
0.997
0.998
0.999
0.995
0.996
0.998
0.995
0.995
0.995
0.998
0.999
1.000
G47
1000
0.996
0.998
1.000
0.996
0.996
1.000
0.992
0.993
0.993
0.997
0.998
0.998"
REFERENCES,0.9795081967213115,"G22
2000
0.990
0.991
0.994
0.990
0.995
0.999
0.987
0.989
0.989
0.990
0.995
0.997
G23
2000
0.990
0.995
0.997
0.989
0.993
0.998
0.987
0.991
0.991
0.991
0.995
0.997
G24
2000
0.989
0.993
0.998
0.990
0.993
0.996
0.987
0.989
0.989
0.992
0.994
0.997
G25
2000
0.991
0.995
0.996
0.989
0.994
0.997
0.988
0.993
0.993
0.991
0.996
0.998
G26
2000
0.989
0.994
0.997
0.991
0.994
0.998
0.991
0.994
0.994
0.991
0.996
0.999"
REFERENCES,0.9836065573770492,"G55
5000
0.924
0.949
0.951
0.950
0.971
0.981
0.951
0.953
0.956
0.947
0.969
0.985"
REFERENCES,0.9877049180327869,"G60
7000
0.796
0.933
0.950
0.900
0.953
0.972
0.918
0.949
0.951
0.916
0.960
0.981"
REFERENCES,0.9918032786885246,"G70
10 000
0.703
0.703
0.931
0.766
0.837
0.879
0.761
0.929
0.933
0.837
0.944
0.972"
REFERENCES,0.9959016393442623,"Graph network timing.
As stated in the main text, the single pass of the graph neural net-
work is negligible compared to the overall run time of ECORD. To be concrete, on the largest
graph for which results are reported (G70 with |V | = 10 k nodes), our embedding stage takes
(1.96 ± 0.09) ms, compared to the tens of seconds of exploratory decoding."
