Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.0024330900243309003,"Graph neural networks (GNNs) have become the standard learning architectures
for graphs. GNNs have been applied to numerous domains ranging from quantum
chemistry, recommender systems to knowledge graphs and natural language pro-
cessing. A major issue with arbitrary graphs is the absence of canonical positional
information of nodes, which decreases the representation power of GNNs to distin-
guish e.g. isomorphic nodes and other graph symmetries. An approach to tackle
this issue is to introduce Positional Encoding (PE) of nodes, and inject it into the
input layer, like in Transformers. Possible graph PE are Laplacian eigenvectors.
In this work, we propose to decouple structural and positional representations to
make easy for the network to learn these two essential properties. We introduce a
novel generic architecture which we call LSPE (Learnable Structural and Positional
Encodings). We investigate several sparse and fully-connected (Transformer-like)
GNNs, and observe a performance increase for molecular datasets, from 1.79% up
to 64.14% when considering learnable PE for both GNN classes. 1"
INTRODUCTION,0.004866180048661801,"1
INTRODUCTION"
INTRODUCTION,0.0072992700729927005,"GNNs have recently emerged as a powerful class of deep learning architectures to analyze datasets
where information is present in the form of heteregeneous graphs that encode complex data con-
nectivity. Experimentally, these architectures have shown great promises to be impactful in diverse
domains such as drug design (Stokes et al., 2020; Gaudelet et al., 2020), social networks (Monti et al.,
2019; Pal et al., 2020), trafﬁc networks (Derrow-Pinion et al., 2021), physics (Cranmer et al., 2019;
Bapst et al., 2020), combinatorial optimization (Bengio et al., 2021; Cappart et al., 2021) and medical
diagnosis (Li et al., 2020c)."
INTRODUCTION,0.009732360097323601,"Most GNNs (such as Defferrard et al. (2016); Sukhbaatar et al. (2016); Kipf & Welling (2017);
Hamilton et al. (2017); Monti et al. (2017); Bresson & Laurent (2017); Veliˇckovi´c et al. (2018); Xu
et al. (2019)) are designed with a message-passing mechanism (Gilmer et al., 2017) that builds node
representation by aggregating local neighborhood information. It means that this class of GNNs
is fundamentally structural, i.e. the node representation only depends on the local structure of the
graph. As such, two atoms in a molecule with the same neighborhood are expected to have similar
representation. However, it can be limiting to have the same representation for these two atoms as
their positions in the molecule are distinct, and their role may be speciﬁcally separate (Murphy et al.,
2019). As a consequence, the popular message-passing GNNs (MP-GNNs) fail to differentiate two
nodes with the same 1-hop local structure. This restriction is now properly understood in the context
of the equivalence of MP-GNNs with Weisfeiler-Leman (WL) test (Weisfeiler & Leman, 1968) for
graph isomorphism (Xu et al., 2019; Morris et al., 2019)."
INTRODUCTION,0.012165450121654502,1Code: https://github.com/vijaydwivedi75/gnn-lspe
INTRODUCTION,0.014598540145985401,"Published as a conference paper at ICLR 2022 3 2
1 4 5"
INTRODUCTION,0.0170316301703163,Node Structural Features
INTRODUCTION,0.019464720194647202,Node Positional Features
INTRODUCTION,0.021897810218978103,Edge Features
INTRODUCTION,0.024330900243309004,"Figure 1: Block diagram illustration of the proposed MPGNNs-LSPE architecture along with the
inputs, general framework of a layer, and the output and loss components."
INTRODUCTION,0.0267639902676399,"The said limitation can be alleviated, to certain extents, by (i) stacking multiple layers, (ii) applying
higher-order GNNs, or (iii) considering positional encoding (PE) of nodes (and edges). Let us
assume two structurally identical nodes in a graph with the same 1-hop neighborhood, but different
with respect to 2-hop or higher-order neighborhoods. Then, stacking several layers (Bresson &
Laurent, 2017; Li et al., 2019) can propagate the information from a node to multiple hops, and thus
differentiate the representation of two far-away nodes. However, this solution can be deﬁcient for
long-distance nodes because of the over-squashing phenomenon (Alon & Yahav, 2020). Another
approach is to compute higher-order node-tuple aggregations such as in WL-based GNNs (Maron
et al., 2019; Chen et al., 2019); though these models are computationally more expensive to scale
than MP-GNNs, even for medium-sized graphs (Dwivedi et al., 2020). An alternative technique is
to consider a global positioning of the nodes in the graph that can encode a graph-based distance
between the nodes (You et al., 2019; Dwivedi et al., 2020; Li et al., 2020b; Dwivedi & Bresson, 2021),
or can inform about speciﬁc sub-structures (Bouritsas et al., 2020; Bodnar et al., 2021)."
INTRODUCTION,0.029197080291970802,"Contribution. In this work, we turn to the idea of learning positional representation that can be
combined with structural GNNs to generate more expressive node embedding. Our main intent is to
alleviate the lack of canonical positioning of nodes in arbitrary graphs to improve the representation
power of MP-GNNs, while keeping their linear complexity for large-scale applications. For this
objective, we propose a novel framework, illustrated with Figure 1, that enables GNNs to learn both
structural and positional representations at the same time (thus named MPGNNs-LSPE). Alongside,
we present a random-walk diffusion based positional encoding scheme to initialize the positional
representations of the nodes. We show that the proposed architecture with learnable PE can be
used with any graph network that ﬁts to the MP-GNNs framework, and improves its performance
(1.79% to 64.14%). In our demonstrations, we formulate LSPE instances of both sparse GNNs,
such as GatedGCNs (Bresson & Laurent, 2017) and PNA (Corso et al., 2020) and fully-connected
Transformers-based GNNs (Kreuzer et al., 2021; Mialon et al., 2021). Our numerical experiments
on three standard molecular benchmarks show that different instantiations of MP-GNNs with LSPE
surpass the previous state-of-the-art (SOTA) on one dataset by a considerable margin (26.23%),
while achieving SOTA-comparable score on the other two datasets. The architecture also shows
consistent improvements on three non-molecular benchmarks. In addition, our evaluations ﬁnd the
sparse MP-GNNs to be outperforming fully-connected GNNs, hence suggesting greater potential
towards the development of highly efﬁcient, yet powerful architectures for graphs."
RELATED WORK,0.031630170316301706,"2
RELATED WORK"
RELATED WORK,0.0340632603406326,"In this section, we review brieﬂy the three research directions theoretical expressivity of GNNs, graph
positional encoding, and Transformer-based GNNs."
RELATED WORK,0.0364963503649635,Published as a conference paper at ICLR 2022
RELATED WORK,0.038929440389294405,"Theoretical expressivity and Weisfeiler-Leman GNNs. As the theoretical expressiveness of MP-
GNNs is bounded by the 1-WL test (Xu et al., 2019; Morris et al., 2019), they may perform poorly on
graphs that exhibit several symmetries (Murphy et al., 2019), and additionally some message-passing
functions may not be discriminative enough (Corso et al., 2020). To this end, k-order Equivariant-
GNNs were introduced in Maron et al. (2018) requiring O(nk) memory and speed complexities.
Although the complexity was improved to O(n2) memory and O(n3) respectively (Maron et al.,
2019; Chen et al., 2019; Azizian & Lelarge, 2020), it is still inefﬁcient compared with the linear
complexity of MP-GNNs."
RELATED WORK,0.0413625304136253,"Graph Positional Encoding. The idea of positional encoding, i.e. the notion of global position
of pixels in images, words in texts and nodes in graphs, plays a central role in the effectiveness
of the most prominent neural networks with ConvNets (LeCun et al., 1998), RNNs (Hochreiter &
Schmidhuber, 1997), and Transformers (Vaswani et al., 2017). For GNNs, the position of nodes
is more challenging due to the fact that there does not exist a canonical positioning of nodes in
arbitrary graphs. Despite these issues, graph positional encoding are as much critical for GNNs as
they are for ConvNets, RNNs and Transformers, as demonstrated for prediction tasks on graphs
(Srinivasan & Ribeiro, 2019; Cui et al., 2021). Nodes in a graph can be assigned index positional
encoding (PE). However, such a model must be trained with the n! possible index permutations
or else sampling needs to be done (Murphy et al., 2019). Another PE candidate for graphs can be
Laplacian Eigenvectors (Dwivedi et al., 2020; Dwivedi & Bresson, 2021) as they form a meaningful
local coordinate system, while preserving the global graph structure. However, there exists sign
ambiguity in such PE as eigenvectors are deﬁned up to ±1, leading to 2k number of possible sign
values when selecting k eigenvectors which a network needs to learn. Similarly, the eigenvectors
may be unstable due to eigenvalue multiplicities. You et al. (2019) proposed learnable position-aware
embeddings based on random anchor sets of nodes, where the random selection of anchors has its
limitations, which makes their approach less generalizable on inductive tasks. There also exists
methods that encode prior information about a class of graphs of interest such as rings for molecules
(Bouritsas et al., 2020; Bodnar et al., 2021) which make MP-GNNs more expressive. But the prior
information regarding graph sub-structures needs to be pre-computed, and sub-graph matching and
counting require O(nk) for k-tuple sub-structure."
RELATED WORK,0.043795620437956206,"Transformer-based GNNs. Although sparse MP-GNNs are very efﬁcient, they are susceptible to the
information bottleneck limitation (Alon & Yahav, 2020) in addition to vanishing gradient (similar to
RNNs) on tasks when long-range interactions between far away nodes are critical. To overcome these
limitations, there have been recent works that generalize Transformers to graphs (Dwivedi & Bresson,
2021; Kreuzer et al., 2021; Ying et al., 2021; Mialon et al., 2021) which alleviates the long-range
issue as ‘everything is connected to everything’. However, these methods either use non-learnable
PEs to encode graph structure information (Dwivedi & Bresson, 2021; Ying et al., 2021; Mialon
et al., 2021), or inject learned PEs to the Transformer network that relies on Laplacian eigenvectors
(Kreuzer et al., 2021), thus inheriting the sign ambiguity limitation."
RELATED WORK,0.046228710462287104,"A detailed review of the above research directions is available in the supplementary Section B. We
attempt to address some of the major limitations of GNNs by proposing a novel architecture with
consistent performance gains."
PROPOSED ARCHITECTURE,0.04866180048661801,"3
PROPOSED ARCHITECTURE"
PROPOSED ARCHITECTURE,0.051094890510948905,"In this work, we decouple structural and positional representations to make it easy for the network
to learn these two critical characteristics. This is in contrast with most existing architectures s.a.
Dwivedi & Bresson (2021); Beani et al. (2021); Kreuzer et al. (2021) that inject the positional
information into the input layer of the GNNs, and You et al. (2019) that rely on distance-measured
anchor sets of nodes limiting general, inductive usage. Given the recent theoretical results on the
importance of informative graph PE for expressive GNNs (Murphy et al., 2019; Srinivasan & Ribeiro,
2019; Loukas, 2020), we are interested in a generic framework that can enable GNNs to separate
positional and structural representations to increase their expressivity. Section 3.1 will introduce
our approach to augment GNNs with learnable graph PE. Our framework can be used with different
GNN architectures. We illustrate this ﬂexibility in Sections C.1 and C.2 where the decoupling of
structural and positional information is applied to both sparse MP-GNNs and fully-connected GNNs."
PROPOSED ARCHITECTURE,0.0535279805352798,Published as a conference paper at ICLR 2022
PROPOSED ARCHITECTURE,0.05596107055961071,"3.1
GENERIC FORMULATION: MP-GNNS-LSPE"
PROPOSED ARCHITECTURE,0.058394160583941604,"Notation. Let G = (V, E) be a graph with V being the set of nodes and E the set of edges. The graph
has n = |V| nodes and E = |E| edges. The connectivity of the graph is represented by the adjacency
matrix A ∈Rn×n where Aij = 1 if there exists an edge between the nodes i and j; otherwise
Aij = 0. The degree matrix is denoted D ∈Rn×n. The node features and positional features for
node i is denoted by hi and pi respectively, while the features for an edge between nodes i and j is
indicated by eij. A GNN model is composed of three main components; an embedding layer for the
input features, a stack of convolutional layers, and a ﬁnal task-based layer, as in Figure 1. The layers
are indexed by ℓand ℓ= 0 denotes the input layer."
PROPOSED ARCHITECTURE,0.06082725060827251,"Standard MP-GNNs. Considering a graph which has available node and edge features, and these
are transformed at each layer, the update equations for a conventional MP-GNN layer are deﬁned as:"
PROPOSED ARCHITECTURE,0.06326034063260341,"MP-GNNs :
hℓ+1
i
=
fh

hℓ
i,

hℓ
j"
PROPOSED ARCHITECTURE,0.06569343065693431,"j∈Ni, eℓ
ij

, hℓ+1
i
, hℓ
i ∈Rd,
(1)"
PROPOSED ARCHITECTURE,0.0681265206812652,"eℓ+1
ij
=
fe

hℓ
i, hℓ
j, eℓ
ij

, eℓ+1
ij , eℓ
ij ∈Rd,
(2)"
PROPOSED ARCHITECTURE,0.0705596107055961,"where fh and fe are functions with learnable parameters, and Ni is the neighborhood of the node i.
The design of functions fh and fe depends on the GNN architecture used, see Zhou et al. (2020) for
a review. As Transformer neural networks (Vaswani et al., 2017) are a special case of MP-GNNs
(Joshi, 2020), Eq. (1) can be simpliﬁed to encompass the original Transformers by dropping the edge
features and making the graph fully connected."
PROPOSED ARCHITECTURE,0.072992700729927,"Input features and initialization. The node and edge features at layer ℓ= 0 are produced by a linear
embedding of available input node and edge features denoted respectively by hin
i ∈Rdv, ein
ij ∈Rde:
hℓ=0
i
= LLh(hin
i ) = A0hin
i + a0 ∈Rd, eℓ=0
ij
= LLe(ein
ij) = B0ein
ij + b0 ∈Rd, where A0 ∈Rd×dv,
B0 ∈Rd×de and a0, b0 ∈Rd are the learnable parameters of the linear layers."
PROPOSED ARCHITECTURE,0.07542579075425791,"Positional Encoding. Existing MP-GNNs that integrate positional information usually propose to
concatenate the PE with the input node features, similarly to Transformers (Vaswani et al., 2017):"
PROPOSED ARCHITECTURE,0.07785888077858881,"MP-GNNs-PE :
hℓ+1
i
= fh

hℓ
i,

hℓ
j"
PROPOSED ARCHITECTURE,0.08029197080291971,"j∈Ni, eℓ
ij

, hℓ+1
i
, hℓ
i ∈Rd,
(3)"
PROPOSED ARCHITECTURE,0.0827250608272506,"eℓ+1
ij
= fe

hℓ
i, hℓ
j, eℓ
ij

, eℓ+1
ij , eℓ
ij ∈Rd,
(4)"
PROPOSED ARCHITECTURE,0.0851581508515815,"with initial hℓ=0
i
= LLh"
PROPOSED ARCHITECTURE,0.08759124087591241,"
hin
i
pin
i"
PROPOSED ARCHITECTURE,0.09002433090024331,"
= D0

hin
i
pin
i"
PROPOSED ARCHITECTURE,0.09245742092457421,"
+ d0 ∈Rd,
(5)"
PROPOSED ARCHITECTURE,0.0948905109489051,"and eℓ=0
ij
= LLe(ein
ij) = B0ein
ij + b0 ∈Rd,
(6)"
PROPOSED ARCHITECTURE,0.09732360097323602,"where pin
i ∈Rk is the input PE of node i, D0 ∈Rd×(dv+k), d0 ∈Rd are parameters for the linear
transformation. Such architecture merges the positional and structural representations together. It has
the advantage to keep the same linear complexity for learning, but it does not allow the positional
representation to be changed and better adjusted to the task at hand."
PROPOSED ARCHITECTURE,0.09975669099756691,"Decoupling position and structure in MP-GNNs. We decouple the positional information from the
structural information such that both representations are learned separately resulting in an architecture
with Learnable Structural and Positional Encodings, which we call MP-GNNs-LSPE. The layer
update equations are deﬁned as:"
PROPOSED ARCHITECTURE,0.10218978102189781,"MP-GNNs-LSPE :
hℓ+1
i
= fh"
PROPOSED ARCHITECTURE,0.10462287104622871,"
hℓ
i
pℓ
i"
PROPOSED ARCHITECTURE,0.1070559610705596,"
,
 hℓ
j
pℓ
j "
PROPOSED ARCHITECTURE,0.10948905109489052,"j∈Ni
, eℓ
ij !"
PROPOSED ARCHITECTURE,0.11192214111922141,", hℓ+1
i
, hℓ
i ∈Rd,
(7)"
PROPOSED ARCHITECTURE,0.11435523114355231,"eℓ+1
ij
= fe

hℓ
i, hℓ
j, eℓ
ij

, eℓ+1
ij , eℓ
ij ∈Rd,
(8)"
PROPOSED ARCHITECTURE,0.11678832116788321,"pℓ+1
i
= fp

pℓ
i,

pℓ
j"
PROPOSED ARCHITECTURE,0.1192214111922141,"j∈Ni, eℓ
ij

, pℓ+1
i
, pℓ
i ∈Rd,
(9)"
PROPOSED ARCHITECTURE,0.12165450121654502,"The difference of this architecture with the standard MP-GNNs is the addition of the positional
representation update Eq. (9), along with the concatenation of these learnable PEs with the node
structural features, Eq. (7). As we will see in the next section, the design of the message-passing
function fp follows the same analytical form of fh but with the use of the tanh activation function to
allow positive and negative values for the positional coordinates. It should be noted that the inclusion"
PROPOSED ARCHITECTURE,0.12408759124087591,Published as a conference paper at ICLR 2022
PROPOSED ARCHITECTURE,0.12652068126520682,nodes: 24 | unique RWPEs: 24 0 5 10 15 20
PROPOSED ARCHITECTURE,0.12895377128953772,(a) ZINC molecule (val index 91)
PROPOSED ARCHITECTURE,0.13138686131386862,nodes: 14 | unique RWPEs: 10 0 1 2 3 4 5 6 7 8 9
PROPOSED ARCHITECTURE,0.13381995133819952,(b) ZINC molecule (val index 212)
PROPOSED ARCHITECTURE,0.1362530413625304,"Figure 2: Sample graph plots from the ZINC validation set with each node color in a graph represent-
ing a unique RWPE vector, when k = 24. The corresponding graph ids, the number of nodes in the
graphs and the number of unique RWPEs are labelled against the ﬁgures."
PROPOSED ARCHITECTURE,0.1386861313868613,"of the edge features, eℓ
ij in the h or p update is optional as several MP-GNNs do not include edge
features in their h updates. Nevertheless, the architecture we present is made as generic so as to be
used for future extensions in a convenient way."
PROPOSED ARCHITECTURE,0.1411192214111922,"Deﬁnition of initial PE. The choice of the initial PE is critical. In this work, we consider two
PEs: Laplacian PE (LapPE) and Random Walk PE (RWPE). LapPE are deﬁned in Section B.2 as
pLapPE
i
= [ Ui1, Ui2, · · · , Uik ] ∈Rk. LapPE provide a unique node representation and are distance-
sensitive w.r.t. the Euclidean norm. However, they are limited by the sign ambiguity, which requires
random sign ﬂipping during training for the network to learn this invariance (Dwivedi et al., 2020)."
PROPOSED ARCHITECTURE,0.1435523114355231,"Inspired by Li et al. (2020b), we propose RWPE, a PE based on the random walk (RW) diffusion
process (although other graph diffusions can be considered s.a. PageRank (Mialon et al., 2021)).
Formally, RWPE are deﬁned with k-steps of random walk as:"
PROPOSED ARCHITECTURE,0.145985401459854,"pRWPE
i
=

RWii, RW2
ii, · · · , RWk
ii

∈Rk,
(10)"
PROPOSED ARCHITECTURE,0.14841849148418493,"where RW = AD−1 is the random walk operator. In contrast of Li et al. (2020b) which uses the full
matrix RWij for all pairwise nodes, we adopt a low-complexity usage of the random walk matrix by
considering only the landing probability of a node i to itself, i.e. RWii. Note that these PE do not
suffer from the sign ambiguity of LapPE, so the network is not required to learn additional invariance.
RWPE provide a unique node representation under the condition that each node has a unique k-hop
topological neighborhood for a sufﬁcient large k. This assumption can be discussed. If we consider
synthetic strongly regular graphs like the CSL graphs (Murphy et al., 2019), then all nodes in a graph
have the same RWPE for any k value, since they are isomorphic by construction. However, despite
RWPE being the same for all nodes in a graph, these PE are unique for each class of isomorphic
graphs, resulting in a perfect classiﬁcation of the CSL dataset, see Section A.1. For graphs such as
Decalin and Bicyclopentyl (Sato, 2020), nodes which are not isomorphic receive different RWPE for
k ≥5, also in Section A.1. Finally, for real-world graphs like ZINC molecules, most nodes receive a
unique node representation for k ≥24, see Figure 2 for an illustration, where the two molecules have
100% and 71.43% unique RWPEs respectively. Section A.3 presents a detailed study."
PROPOSED ARCHITECTURE,0.15085158150851583,"Experimentally, we will show that RWPE outperform LapPE, suggesting that learning the sign
invariance is more difﬁcult (as there exist 2k possible sign ﬂips for each graph) than not exactly
having unique node representation for each node. As mentioned above for CSL, RWPE are related
to the problem of graph isomorphism and higher-order node interactions. Precisely, iterating the
random walk operator for a suitable number of steps allows coloring non-isomorphic nodes, thus
distinguishing several cases of non-isomorphic graphs on which the 1-WL test, and equivalently
MP-GNNs, fail s.a. the CSL, Decalin and Bicyclopentyl graphs. We refer to Section A.2 for a formal
presentation of the iterative algorithm. Finally, the initial PE of the network is obtained by embedding
the LapPE or RWPE into a d-dimensional feature vector:"
PROPOSED ARCHITECTURE,0.15328467153284672,"pℓ=0
i
=
LLp(pPE
i ) = C0pPE
i
+ c0 ∈Rd,
where C0 ∈Rd×k, c0 ∈Rd.
(11)"
PROPOSED ARCHITECTURE,0.15571776155717762,"Positional loss. As we separate the learning of the structual and positional representations, it is
possible to consider a speciﬁc positional encoding loss along with the task loss. A natural candidate"
PROPOSED ARCHITECTURE,0.15815085158150852,Published as a conference paper at ICLR 2022
PROPOSED ARCHITECTURE,0.16058394160583941,"is the Laplacian eigenvector loss (Belkin & Niyogi, 2003; Lai & Osher, 2014) that enforces the PE
to form a coordinate system constrained by the graph topology. As such, the ﬁnal loss function of
MP-GNNs-LSPE is composed of two terms:"
PROPOSED ARCHITECTURE,0.1630170316301703,Loss = LossTask
PROPOSED ARCHITECTURE,0.1654501216545012,"
hℓ=L pℓ=L"
PROPOSED ARCHITECTURE,0.1678832116788321,"
+ α LossLapEig(pℓ=L),
(12)"
PROPOSED ARCHITECTURE,0.170316301703163,"where hℓ=L ∈Rn×d, pℓ=L ∈Rn×k, k is the dimension of learned PE, ℓ= L is the ﬁnal GNN layer,
and α > 0 an hyper-parameter. Observe also that we enforce the ﬁnal positional vectors pℓ=L to have
centered and unit norm with mean(pℓ=L
·,k ) = 0, ∥pℓ=L
·,k ∥= 1, ∀k to better approximate the Laplacian"
PROPOSED ARCHITECTURE,0.17274939172749393,"eigenvector loss deﬁned by LossLapEig(p) =
1
k trace
 
pT ∆p

+ λ"
PROPOSED ARCHITECTURE,0.17518248175182483,"k
pT p −Ik
2
F with λ > 0 and
∥· ∥2
F being the Frobenius norm."
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.17761557177615572,"3.2
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS"
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.18004866180048662,"We instantiate two classes of GNN architectures, both sparse MP-GNNs and fully-connected Trans-
former GNNs using our proposed LSPE framework. For sparse MP-GNNs, we consider GatedGCN
(Bresson & Laurent, 2017) and PNA (Corso et al., 2020), while we extend the recently developed
SAN (Kreuzer et al., 2021) and GraphiT (Mialon et al., 2021) with LSPE to develop Transformer-
LSPE architectures. We brieﬂy demonstrate here how a GNN can be instantiated using LSPE (Eqs.
(7-9)) by developing GatedGCN-LSPE (Eqs. (14-16)), while the complete equations for the four
models are deﬁned in Section C of the supplementary material, given the space constraint."
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.18248175182481752,"GatedGCN-LSPE: Originally, GatedGCNs are sparse MP-GNNs equipped with a soft-attention
mechanism that is able to learn adaptive edge gates to improve the message aggregation step of GCN
networks (Kipf & Welling, 2017). Our proposed extension of this model with LSPE is deﬁned as:"
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.18491484184914841,"hℓ+1, eℓ+1, pℓ+1 = GatedGCN-LSPE

hℓ, eℓ, pℓ
, h ∈Rn×d, e ∈RE×d, p ∈Rn×d,
(13)"
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.1873479318734793,"with hℓ+1
i
= hℓ
i + ReLU

BN

Aℓ
1"
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.1897810218978102,"
hℓ
i
pℓ
i 
+
X"
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.1922141119221411,"j∈N(i)
ηℓ
ij ⊙Aℓ
2"
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.19464720194647203," hℓ
j
pℓ
j"
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.19708029197080293," 
,
(14)"
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.19951338199513383,"eℓ+1
ij
= eℓ
ij + ReLU
 
BN
 
ˆηℓ
ij

,
(15)"
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.20194647201946472,"pℓ+1
i
= pℓ
i + tanh

Cℓ
1pℓ
i +
X"
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.20437956204379562,"j∈N(i)
ηℓ
ij ⊙Cℓ
2pℓ
j

,
(16)"
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.20681265206812652,"where ηℓ
ij = σ
 
ˆηℓ
ij

/
  P"
INSTANCES OF LSPE WITH MP-GNNS AND TRANSFORMER GNNS,0.20924574209245742,"j′∈N(i) σ
 
ˆηℓ
ij′

+ ϵ

, ˆηℓ
ij = Bℓ
1hℓ
i + Bℓ
2hℓ
j + Bℓ
3eℓ
ij, hℓ
i, eℓ
ij, pℓ
i, ηℓ
ij, ˆηℓ
ij ∈
Rd, Aℓ
1, Aℓ
2 ∈Rd×2d and Bℓ
1, Bℓ
2, Bℓ
3, Cℓ
1, Cℓ
2 ∈Rd×d. Notice the p-update in Eq. (16) follows the
same analytical form as the h-update in Eq. (14) except for the difference in activation function, and
omission of BN, which was not needed in our experiments."
NUMERICAL EXPERIMENTS,0.2116788321167883,"4
NUMERICAL EXPERIMENTS"
NUMERICAL EXPERIMENTS,0.2141119221411192,"We evaluate the proposed MPGNNs-LSPE architecture on the instances of sparse GNNs and
Transformer GNNs deﬁned in Section 3.2 (all models are presented in Section C), using PyTorch
(Paszke et al., 2019) and DGL (Wang et al., 2019) on standard molecular benchmarks – ZINC (Irwin
et al., 2012), OGBG-MOLTOX21 and OGBG-MOLPCBA (Hu et al., 2020). ZINC and MOLTOX21
are of medium scale with 12K and 7.8K graphs respectively, whereas MOLPCBA is of large scale
with 437.9K graphs. These datasets, each having a global graph-level property to be predicted, consist
of molecules which are represented as graphs of atoms as nodes and bonds between the atoms as
edges. Additionally, we evaluate our architecture on three non-molecular graph datasets to show the
usefulness of LSPE on any graph domain in general, see Section D in the supplementary."
DATASETS AND EXPERIMENTAL SETTINGS,0.21654501216545013,"4.1
DATASETS AND EXPERIMENTAL SETTINGS"
DATASETS AND EXPERIMENTAL SETTINGS,0.21897810218978103,"ZINC is a graph regression dataset where the property to be predicted for a graph is its constrained
solubility which is a vital chemical property in molecular design (Jin et al., 2018). We use the 12,000
subset of the dataset with the same splitting deﬁned in Dwivedi et al. (2020). Mean Absolute Error"
DATASETS AND EXPERIMENTAL SETTINGS,0.22141119221411193,Published as a conference paper at ICLR 2022
DATASETS AND EXPERIMENTAL SETTINGS,0.22384428223844283,"(MAE) of the property being regressed is the evaluation metric. OGBG-MOLTOX21 is a multi-task
binary graph classiﬁcation dataset where a qualitative (active/inactive) binary label is predicted
against 12 different toxicity measurements for each molecular graph (Tox21, 2014; Wu et al., 2018).
We use the scaffold-split version of the dataset included in OGB (Hu et al., 2020) that consists of
7,831 graphs. ROC-AUC averaged across the tasks is the evaluation metric. OGBG-MOLPCBA
is also a multi-task binary graph classiﬁcation dataset from OGB where an active/inactive binary
label is predicted for 128 bioassays (Wang et al., 2012; Wu et al., 2018). It has 437,929 graphs with
scaffold-split and the evaluation metric is Average Precision (AP) averaged over the tasks."
DATASETS AND EXPERIMENTAL SETTINGS,0.22627737226277372,"To evaluate different instantiations of our proposed MPGNNs-LSPE, we follow the same bench-
marking protocol in Dwivedi et al. (2020) to fairly compare several models on a ﬁxed number of
500k model parameters, for ZINC. We relax the model sizes to larger parameters for evaluation on
the two OGB datasets as observed being practised on their leaderboards (Hu et al., 2020). The total
size of parameters of each model, including the number of layers used, are indicated in the respective
experiment tables, with the remaining implementation details included in supplementary Section E."
RESULTS AND DISCUSSION,0.22871046228710462,"4.2
RESULTS AND DISCUSSION"
RESULTS AND DISCUSSION,0.23114355231143552,"The results of all our experiments on different instances of LSPE along with performance without
using PE are presented in Table 1 whereas the comparison of the best results from Table 1 with
baseline models and SOTA is shown in Table 2. We now summarize our observations and insights."
RESULTS AND DISCUSSION,0.23357664233576642,"Table 1: Results on the ZINC, OGBG-MOLTOX21 and OGBG-MOLPCBA datasets. All scores are
averaged over 4 runs with 4 different seeds. Bold: GNN’s best score, Red: Dataset’s best score. ZINC"
RESULTS AND DISCUSSION,0.2360097323600973,"Model
Init PE
LSPE
PosLoss
L
#Param
TestMAE±s.d.
TrainMAE±s.d.
Epochs
Epoch/Total"
RESULTS AND DISCUSSION,0.2384428223844282,"GatedGCN
x
x
x
16
504309
0.251±0.009
0.025±0.005
440.25
8.76s/1.08hr
GatedGCN
LapPE
x
x
16
505011
0.202±0.006
0.033±0.003
426.00
8.91s/1.22hr
GatedGCN
RWPE
D
x
16
522870
0.093±0.003
0.014±0.003
440.75
15.17s/1.99hr
GatedGCN
RWPE
D
D
16
522870
0.090±0.001
0.013±0.004
460.50
33.06s/4.39hr"
RESULTS AND DISCUSSION,0.24087591240875914,"PNA
x
x
x
16
369235
0.141±0.004
0.020±0.003
451.25
79.67s/10.03hr
PNA
RWPE
D
x
16
503061
0.095±0.002
0.022±0.002
462.25
127.69s/16.61hr"
RESULTS AND DISCUSSION,0.24330900243309003,"SAN
x
x
x
10
501314
0.181±0.004
0.017±0.004
433.50
74.33s/9.23hr
SAN
RWPE
D
x
10
588066
0.104±0.004
0.016±0.002
462.50
134.74s/17.23hr"
RESULTS AND DISCUSSION,0.24574209245742093,"GraphiT
x
x
x
10
501313
0.181±0.006
0.021±0.003
493.25
63.54s/9.37hr
GraphiT
RWPE
D
x
10
588065
0.106±0.002
0.028±0.002
420.50
125.39s/14.84hr"
RESULTS AND DISCUSSION,0.24817518248175183,MOLTOX21
RESULTS AND DISCUSSION,0.25060827250608275,"Model
Init PE
LSPE
PosLoss
L
#Param
TestAUC±s.d.
TrainAUC±s.d.
Epochs
Epoch/Total"
RESULTS AND DISCUSSION,0.25304136253041365,"GatedGCN
x
x
x
8
1003739
0.772±0.006
0.933±0.010
304.25
5.12s/0.46hr
GatedGCN
LapPE
x
x
8
1004355
0.774±0.007
0.921±0.006
275.50
5.23s/0.48hr
GatedGCN
RWPE
D
x
8
1063821
0.775±0.003
0.906±0.003
246.50
5.99s/0.63hr"
RESULTS AND DISCUSSION,0.25547445255474455,"PNA
x
x
x
8
5244849
0.755±0.008
0.876±0.014
214.75
6.25s/0.38hr
PNA
RWPE
D
x
8
5357393
0.761±0.007
0.871±0.009
215.50
7.61s/0.56hr
PNA
RWPE
D
D
8
5357393
0.758±0.003
0.875±0.012
194.25
18.09s/1.07hr"
RESULTS AND DISCUSSION,0.25790754257907544,"SAN
x
x
x
10
957871
0.744±0.007
0.915±0.015
279.75
18.06s/1.44hr
SAN
RWPE
D
x
10
1051017
0.744±0.008
0.918±0.018
281.75
30.82s/2.84hr"
RESULTS AND DISCUSSION,0.26034063260340634,"GraphiT
x
x
x
10
957870
0.743±0.003
0.919±0.023
276.50
16.73s/1.36hr
GraphiT
RWPE
D
x
10
1051788
0.746±0.010
0.934±0.016
279.75
27.92s/2.57hr"
RESULTS AND DISCUSSION,0.26277372262773724,MOLPCBA
RESULTS AND DISCUSSION,0.26520681265206814,"Model
Init PE
LSPE
PosLoss
L
#Param
TestAP±s.d.
TrainAP±s.d.
Epochs
Epoch/Total"
RESULTS AND DISCUSSION,0.26763990267639903,"GatedGCN
x
x
x
8
1008263
0.262±0.001
0.401±0.057
190.50
149.10s/7.91hr
GatedGCN
LapPE
x
x
8
1008879
0.266±0.002
0.391±0.003
177.00
152.94s/8.29hr
GatedGCN
RWPE
D
x
8
1068721
0.267±0.002
0.403±0.006
181.00
206.43s/11.64hr"
RESULTS AND DISCUSSION,0.27007299270072993,"PNA
x
x
x
4
6550839
0.279±0.003
0.448±0.004
129.25
174.75s/6.34hr
PNA
RWPE
D
x
4
6521029
0.284±0.002
0.383±0.005
320.00
201.05s/22.99hr"
RESULTS AND DISCUSSION,0.2725060827250608,"No PE results in lowest performance. In Table 1, the GNNs which do not use PE tend to give the
worse performance on all the three datasets. This ﬁnding is aligned to the recent literature (Sec.
B.2) that has guided research towards powerful PE methods for expressive GNNs. Besides, it can
be observed that the extent of poor performance of models without PE against using a PE (LapPE
or LSPE) is greater for ZINC than the two OGBG-MOL* datasets used. This difference can be
explained by the fact that ZINC features are purely atom and bond descriptors whereas OGB-MOL*
features consist additional information that is informative of e.g. if an atom is in ring, among others."
RESULTS AND DISCUSSION,0.2749391727493917,Published as a conference paper at ICLR 2022
RESULTS AND DISCUSSION,0.2773722627737226,"Table 2: Comparison of our best LSPE results from Table 1 with baselines and state-of-the-art GNNs
(Sec. A.4) on each dataset. For ZINC, all the scores in Table 2a are the models with the ∼500k
parameters. The scores on OGBG-MOL* in Tables 2b and 2c are taken from the OGB project and its
leaderboards (Hu et al., 2020), where models have different number of parameters."
RESULTS AND DISCUSSION,0.2798053527980535,(a) ZINC
RESULTS AND DISCUSSION,0.2822384428223844,"Model
Test MAE"
RESULTS AND DISCUSSION,0.2846715328467153,"GCN
0.367±0.011
GAT
0.384±0.007
GatedGCN-LapPE
0.202±0.006
GT
0.226±0.014
SAN
0.139±0.006
Graphormer
0.122±0.006"
RESULTS AND DISCUSSION,0.2871046228710462,"GatedGCN-LSPE
0.090±0.001"
RESULTS AND DISCUSSION,0.2895377128953771,(b) OGBG-MOLTOX21
RESULTS AND DISCUSSION,0.291970802919708,"Model
Test ROC-AUC"
RESULTS AND DISCUSSION,0.2944038929440389,"GCN
0.7529±0.0069
GCN-VN
0.7746±0.0086
GIN
0.7491±0.0051
GIN-VN
0.7757±0.0062
GatedGCN-LapPE
0.7743±0.0073"
RESULTS AND DISCUSSION,0.29683698296836986,"GatedGCN-LSPE
0.7754±0.0032"
RESULTS AND DISCUSSION,0.29927007299270075,(c) OGBG-MOLPCBA
RESULTS AND DISCUSSION,0.30170316301703165,"Model
Test AP"
RESULTS AND DISCUSSION,0.30413625304136255,"GIN
0.2266±0.0028
GIN-VN
0.2703±0.0023
DeeperGCN-VN
0.2781±0.0038
PNA
0.2838±0.0035
DGN
0.2885±0.0030
PHC-GNN
0.2947±0.0026"
RESULTS AND DISCUSSION,0.30656934306569344,"PNA-LSPE
0.2840±0.0021"
RESULTS AND DISCUSSION,0.30900243309002434,"LSPE boosts the capabilities of existing GNNs. Both sparse GNNs and Transformer GNNs are
improved signiﬁcantly when they are augmented with LSPE having RWPE as initial PE, see Table 1.
For instance, the best GNN without PE for ZINC, i.e. PNA, gives an improvement of 32.62% (0.095
vs. 0.141) when LSPE is used to learn the structural and positional representations in a decoupled
manner. On other GNNs, this boost is even higher, see GatedGCN-LSPE which shows a gain of
64.14% (0.090 vs. 0.251). On MOLTOX21, PNA-LSPE improves 0.79% (0.761 vs. 0.755) over
PNA while the remaining models show either minor gains or attain the same performance when not
using PE. This consistent trend is also observed for MOLPCBA where LSPE boosts PNA by 1.79%."
RESULTS AND DISCUSSION,0.31143552311435524,"Sparse vs. Transformer GNNs. When we compare the performance of sparse GNNs (GatedGCN,
PNA) against Transformer GNNs (SAN, GraphiT) augmented with LSPE in Table 1, the performance
of the sparse GNNs is surprisingly better than the latter, despite Transformer GNNs being theoretically
well-posed to counter the limitations of long-range interactions of the former. Notably, the evaluation
of our proposed architecture, in this work, is on molecular graphs on which the information among
local structures seems to be the most critical, diminishes the need of full attention. This also aligns
with the insight put forward in Kreuzer et al. (2021) where the SAN, a Transformer model, beneﬁted
less from full attention on molecules. Beyond molecular graphs, there may be other domains where
Transformer GNNs could give better performance, but still these would not scale in view of the
quadratic computational complexity. Indeed, it is important to notice the much lesser training times
of sparse GNNs compared to Transformer GNNs in Table 1."
RESULTS AND DISCUSSION,0.31386861313868614,"LSPE improves the state-of-the-art for domain-agnostic GNNs. When we compare the best
performing instantiation of the LSPE from Table 1 with baseline GNN models from the literature on
the three benchmark datasets, our proposed architecture improves the SOTA on ZINC, while achieving
SOTA-comparable performance on remaining datasets, see Table 2. On ZINC, GatedGCN-LSPE
surpasses most baselines by a large margin to give a test MAE of 0.090 which is an improvement
of 35.25% and 26.23% respectively over the two recent-most Transformer based GNNs, SAN and
Graphormer. On MOLTOX21, GatedGCN-LSPE reports a test ROC-AUC score of 0.7754 which is
similar to the best baseline GIN (0.7757) that uses virtual node (VN). Finally, LSPE enables PNA
to achieve comparable performance to SOTA on MOLPCBA while boosting its performance when
no PE was used. We note here that ZINC scores can even be boosted beyond LSPE’s SOTA when
domain expertise is used (Bouritsas et al., 2020; Bodnar et al., 2021) while Graphormer (Ying et al.,
2021) achieved the top score on MOLPCBA when pre-trained on a very large (3.8M graphs) dataset.
To ensure fair comparison with other scores, we did not use these two results in Table 2."
RESULTS AND DISCUSSION,0.31630170316301703,"On Positional loss. It can be observed in Table 1 that the positional loss Eq. (12), further pushes
the best LSPE score on ZINC slightly from 0.093 to 0.090, while on MOLTOX21 it only improves
the train score though obtaining comparable test performance. We will investigate a more consistent
positional loss in a future work."
RESULTS AND DISCUSSION,0.31873479318734793,"Finally, we would like to highlight the generic nature of our proposed architecture which can be
applied to any MP-GNN in practice as demonstrated by four diverse GNNs in this work."
ABLATION STUDIES,0.32116788321167883,"4.3
ABLATION STUDIES"
ABLATION STUDIES,0.3236009732360097,"Through ablation studies, we show – i) the usefulness of learning positional representation at every
layer vs. simply injecting a pre-computed positional encoding in the input layer, and ii) the selection
of the number of k for the steps in RWPE in the proposed LSPE architecture."
ABLATION STUDIES,0.3260340632603406,Published as a conference paper at ICLR 2022
ABLATION STUDIES,0.3284671532846715,"Table 3: Comparing the ﬁnal LSPE architecture against simpler models which add pre-computed
PE at input layer (or ﬁnal layer) of a GNN, using GatedGCN model on ZINC. The column ‘Final
h’ denotes whether only the node structural features are used as ﬁnal node features (denoted by
hL), or are concatenated with (i) node positional features (denoted by [hL, pL]) at the ﬁnal layer, (ii)
pre-computed RWPE (denoted by [hL, RWPE])."
ABLATION STUDIES,0.3309002433090024,"Model
Init PE
LSPE
Final h
L
#Param
Test MAE±s.d.
Train MAE±s.d.
#Epochs
Epoch/Total"
ABLATION STUDIES,0.3333333333333333,"GatedGCN
x
x
hL
16
504309
0.251±0.009
0.025±0.005
440.25
8.76s/1.08hr
GatedGCN
LapPE
x
hL
16
505011
0.202±0.006
0.033±0.003
426.00
8.91s/1.22hr"
ABLATION STUDIES,0.3357664233576642,"GatedGCN
RWPE
x
hL
16
505947
0.122±0.003
0.013±0.003
436.25
9.14s/1.28hr
GatedGCN
x
x
[hL, RWPE]
16
515249
0.249±0.012
0.024±0.002
437.50
10.05s/1.55hr"
ABLATION STUDIES,0.3381995133819951,"GatedGCN
LapPE
D
hL
16
516722
0.202±0.008
0.032±0.005
405.25
15.10s/1.84hr
GatedGCN
LapPE
D
[hL, pL]
16
520734
0.196±0.008
0.023±0.004
454.00
15.22s/2.06hr"
ABLATION STUDIES,0.340632603406326,"GatedGCN
RWPE
D
hL
16
518150
0.100±0.006
0.018±0.012
395.00
15.09s/1.73hr
GatedGCN
RWPE
D
[hL, pL]
16
522870
0.093±0.003
0.014±0.003
440.75
15.17s/1.99hr"
ABLATION STUDIES,0.34306569343065696,"Learning PE at every layer provides the best performance. In Table 3, GatedGCN-RWPE corre-
sponds to the model where LapPE are replaced with k-dim pre-computed random walk features at
the ﬁrst layer, and the PE are not updated in the subsequent layers. First, we observe a signiﬁcant
leap in performance (from 0.202 to 0.122) when the RWPE are injected in place of LapPE at the
ﬁrst layer, suggesting that RWPE could encode better positional information in GNNs as they are
not limited by the sign ambiguity of LapPE. See Section A.1 in the supplementary material for an
example of RWPE’s representation power. Note that the injection of RWPE at the ﬁnal layer instead
of the input layer gives poor performance. The reason behind the better performance of concatenating
RWPE at the input layer is to inform the GNN aggregation function of the node positions in order to
distinguish them in the case of graph symmetries like isomorphic nodes."
ABLATION STUDIES,0.34549878345498786,"Now, if we observe the training performance, GatedGCN-RWPE leads to an overﬁt on ZINC.
However, when the positional representations are also updated, the overﬁt is considerably alleviated
improving the test score to 0.100. Finally, when we further fuse the learned positional features at the
ﬁnal layer with the structural features, Eq. (12), the model achieves the best MAE test of 0.093. This
study justiﬁes how the GNN model learns best when the positional representations can be tuned and
better adjusted to the learning task being dealt with."
ABLATION STUDIES,0.34793187347931875,"The choice of k steps to initialize RWPE. In Figure 7 (see Section A.5), we study the effect of
choosing a suitable number of k steps for the random walk features that are used as initial positional
encoding in Section 3.1. This value k is also used to set the ﬁnal dimension of the learned positional
representation in the last layer. Numerical experiments show the best values of k to be 20 and 16
for ZINC with GatedGCN-LSPE and OGBG-MOLTOX21 with PNA-LSPE respectively, which are
larger values from what was used in Li et al. (2020b) (k = 3, 4) where the RW features are treated
as distance encoding. The difference of k value is due to two reasons. First, the proposed RWPE
requires to use a large k value to possibly provide a unique node representation with different k-hop
neighborhoods. Second, Li et al. (2020b) not only uses RWk
ii but also considers all pairwise RWk
ij
between nodes i and j in a target set of nodes, which increases the computational complexity."
CONCLUSION,0.35036496350364965,"5
CONCLUSION"
CONCLUSION,0.35279805352798055,"This work presents a novel approach to learn structural and positional representations separately
in a graph neural network. The resultant architecture, LSPE enables a principled and effective
learning of these two key properties that make GNN representation even more expressive. Main
design components of LSPE are – i) higher-order position informative random walk features as PE
initialization, ii) decoupling positional representations at every GNN layer, and iii) the fusion of the
structural and positional features ﬁnally to generate hybrid features for the learning task. We observe
a consistent increase of performance across several instances of our model on the benchmark datasets
used for evaluation. Our architecture is simple and universal to be used with any sparse GNNs or
Transformer GNNs as demonstrated by two sparse GNNs and two fully connected Transformer based
GNNs in our numerical experiments. Given the importance of incorporating expressive positional
encodings to theoretically improve GNNs as seen in the recent literature, we believe this paper
provides a useful architectural framework that can be considered when developing future models
which improve graph positional encodings, for both GNNs and Transformers."
CONCLUSION,0.35523114355231145,Published as a conference paper at ICLR 2022
ETHICS STATEMENT,0.35766423357664234,ETHICS STATEMENT
ETHICS STATEMENT,0.36009732360097324,"In this work, we present an approach to improve neural network methods for graphs by considering
efﬁcient learnable positional encoding while keeping the linear complexity of the model w.r.t to
the number of nodes. This improves the cost of training such models, as contrast to some previous
works that improved GNNs at the cost of higher-order tensor computation. We discover another
insight that the linear complexity models (sparse GNNs) can outperform quadratic complexity models
(Transformers). Consequently, one beneﬁcial impact of our work is that its use can reduce GPU and
computational resources, eventually contributing to minimizing the adverse effect of deep learning
training on environment. However, the method we propose belongs to a class of architectures that
can be used on malicious applications since the internet and several of the processes in its ecosystem
can be represented in form of graphs. To prevent such applications, ethical guidelines can be set and
enforced which constraint the usage of our proposed model."
REPRODUCIBILITY STATEMENT,0.36253041362530414,REPRODUCIBILITY STATEMENT
REPRODUCIBILITY STATEMENT,0.36496350364963503,"The authors support and advocate the principles of open science and reproducible research. The
algorithms and architectures proposed in this work are open-sourced in a free and public code
repository with easy-to-use scripts to reproduce different experiments and evaluations presented. The
tables included in the paper mention critical details on the number of layers and the total number of
model parameters that are trained. Similarly, the visualization and illustrations presented in the main
paper as well as the supplementary material contain the exact details on the dataset examples (such as
index) used. Finally, a detailed table consisting of several hyperparameters used for the experiments
are included in the supplementary, ensuring the reproducibility of the results discussed in this work."
REPRODUCIBILITY STATEMENT,0.36739659367396593,ACKNOWLEDGMENTS
REPRODUCIBILITY STATEMENT,0.36982968369829683,"XB is supported by NRF Fellowship NRFF2017-10 and NUS-R-252-000-B97-133. This research is
supported by Nanyang Technological University, under SUG Grant (020724-00001). VPD would
like to thank Andreea Deac for her helpful feedback, Quan Gan for his support on the DGL library,
Gabriele Corso for answering questions related to the PNA model, and Chaitanya K. Joshi for
useful comments. Finally, the authors would like to thank the anonymous reviewers for their helpful
suggestions and feedbacks."
REFERENCES,0.3722627737226277,REFERENCES
REFERENCES,0.3746958637469586,"Uri Alon and Eran Yahav. On the bottleneck of graph neural networks and its practical implications.
arXiv preprint arXiv:2006.05205, 2020."
REFERENCES,0.3771289537712895,"Wa¨ıss Azizian and Marc Lelarge. Expressive power of invariant and equivariant graph neural networks.
arXiv preprint arXiv:2006.15646, 2020."
REFERENCES,0.3795620437956204,"Victor Bapst, Thomas Keck, A Grabska-Barwi´nska, Craig Donner, Ekin Dogus Cubuk, Samuel S
Schoenholz, Annette Obika, Alexander WR Nelson, Trevor Back, Demis Hassabis, et al. Unveiling
the predictive power of static structure in glassy systems. Nature Physics, 16(4):448–454, 2020."
REFERENCES,0.3819951338199513,"Dominique Beani, Saro Passaro, Vincent L´etourneau, Will Hamilton, Gabriele Corso, and Pietro
Li`o. Directional graph networks. In International Conference on Machine Learning, pp. 748–758.
PMLR, 2021."
REFERENCES,0.3844282238442822,"Mikhail Belkin and Partha Niyogi. Laplacian eigenmaps for dimensionality reduction and data
representation. Neural computation, 15(6):1373–1396, 2003."
REFERENCES,0.38686131386861317,"Yoshua Bengio, Andrea Lodi, and Antoine Prouvost. Machine learning for combinatorial optimization:
a methodological tour d’horizon. European Journal of Operational Research, 290(2):405–421,
2021."
REFERENCES,0.38929440389294406,"Cristian Bodnar, Fabrizio Frasca, Nina Otter, Yu Guang Wang, Pietro Li`o, Guido Mont´ufar,
and Michael Bronstein.
Weisfeiler and lehman go cellular: Cw networks.
arXiv preprint
arXiv:2106.12575, 2021."
REFERENCES,0.39172749391727496,Published as a conference paper at ICLR 2022
REFERENCES,0.39416058394160586,"Giorgos Bouritsas, Fabrizio Frasca, Stefanos Zafeiriou, and Michael M Bronstein. Improving graph
neural network expressivity via subgraph isomorphism counting. arXiv preprint arXiv:2006.09252,
2020."
REFERENCES,0.39659367396593675,"Xavier Bresson and Thomas Laurent.
Residual gated graph convnets.
arXiv preprint
arXiv:1711.07553, 2017."
REFERENCES,0.39902676399026765,"Quentin Cappart, Didier Ch´etelat, Elias Khalil, Andrea Lodi, Christopher Morris, and Petar Veliˇckovi´c.
Combinatorial optimization and reasoning with graph neural networks. arXiv:2102.09544, 2021."
REFERENCES,0.40145985401459855,"Zhengdao Chen, Lei Chen, Soledad Villar, and Joan Bruna. On the equivalence between graph
isomorphism testing and function approximation with gnns. Advances in neural information
processing systems, 2019."
REFERENCES,0.40389294403892945,"Gabriele Corso, Luca Cavalleri, Dominique Beaini, Pietro Li`o, and Petar Veliˇckovi´c. Principal
neighbourhood aggregation for graph nets. Advances in Neural Information Processing Systems,
33, 2020."
REFERENCES,0.40632603406326034,"Miles D Cranmer, Rui Xu, Peter Battaglia, and Shirley Ho. Learning symbolic physics with graph
networks. arXiv preprint arXiv:1909.05862, 2019."
REFERENCES,0.40875912408759124,"Hejie Cui, Zijie Lu, Pan Li, and Carl Yang. On positional and structural node features for graph
neural networks on non-attributed graphs. arXiv preprint arXiv:2107.01495, 2021."
REFERENCES,0.41119221411192214,"Micha¨el Defferrard, Xavier Bresson, and Pierre Vandergheynst. Convolutional neural networks on
graphs with fast localized spectral ﬁltering. In NIPS, 2016."
REFERENCES,0.41362530413625304,"Austin Derrow-Pinion, Jennifer She, David Wong, Oliver Lange, Todd Hester, Luis Perez, Marc
Nunkesser, Seongjae Lee, Xueying Guo, Peter W Battaglia, Vishal Gupta, Ang Li, Zhongwen Xu,
Alvaro Sanchez-Gonzalez, Yujia Li, and Petar Veliˇckovi´c. Trafﬁc Prediction with Graph Neural
Networks in Google Maps. 2021."
REFERENCES,0.41605839416058393,"Philipp Dufter, Martin Schmitt, and Hinrich Sch¨utze. Position information in transformers: An
overview. arXiv preprint arXiv:2102.11090, 2021."
REFERENCES,0.41849148418491483,"Vijay Prakash Dwivedi and Xavier Bresson. A generalization of transformer networks to graphs. In
AAAI Workshop on Deep Learning on Graphs: Methods and Applications, 2021."
REFERENCES,0.4209245742092457,"Vijay Prakash Dwivedi, Chaitanya K Joshi, Thomas Laurent, Yoshua Bengio, and Xavier Bresson.
Benchmarking graph neural networks. arXiv preprint arXiv:2003.00982, 2020."
REFERENCES,0.4233576642335766,"Charless Fowlkes, Serge Belongie, Fan Chung, and Jitendra Malik. Spectral grouping using the
nystrom method. IEEE transactions on pattern analysis and machine intelligence, 26(2):214–225,
2004."
REFERENCES,0.4257907542579075,"Thomas Gaudelet, Ben Day, Arian R Jamasb, Jyothish Soman, Cristian Regep, Gertrude Liu,
Jeremy BR Hayter, Richard Vickers, Charles Roberts, Jian Tang, et al. Utilising graph machine
learning within drug discovery and development. arXiv preprint arXiv:2012.05716, 2020."
REFERENCES,0.4282238442822384,"Justin Gilmer, Samuel S Schoenholz, Patrick F Riley, Oriol Vinyals, and George E Dahl. Neural
message passing for quantum chemistry. In International Conference on Machine Learning, pp.
1263–1272. PMLR, 2017."
REFERENCES,0.4306569343065693,"William L Hamilton, Rex Ying, and Jure Leskovec. Inductive representation learning on large graphs.
In Proceedings of the 31st International Conference on Neural Information Processing Systems,
pp. 1025–1035, 2017."
REFERENCES,0.43309002433090027,"Sepp Hochreiter and J¨urgen Schmidhuber. Long short-term memory. Neural computation, 9(8):
1735–1780, 1997."
REFERENCES,0.43552311435523117,"Weihua Hu, Matthias Fey, Marinka Zitnik, Yuxiao Dong, Hongyu Ren, Bowen Liu, Michele Catasta,
and Jure Leskovec. Open graph benchmark: Datasets for machine learning on graphs. arXiv
preprint arXiv:2005.00687, 2020."
REFERENCES,0.43795620437956206,Published as a conference paper at ICLR 2022
REFERENCES,0.44038929440389296,"Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by
reducing internal covariate shift. In International conference on machine learning, pp. 448–456.
PMLR, 2015."
REFERENCES,0.44282238442822386,"John J Irwin, Teague Sterling, Michael M Mysinger, Erin S Bolstad, and Ryan G Coleman. Zinc: a
free tool to discover chemistry for biology. Journal of chemical information and modeling, 52(7):
1757–1768, 2012."
REFERENCES,0.44525547445255476,"Md Amirul Islam, Sen Jia, and Neil D. B. Bruce. How much position information do convolutional
neural networks encode? In International Conference on Learning Representations, 2020."
REFERENCES,0.44768856447688565,"Wengong Jin, Regina Barzilay, and Tommi Jaakkola. Junction tree variational autoencoder for
molecular graph generation. In International conference on machine learning, pp. 2323–2332.
PMLR, 2018."
REFERENCES,0.45012165450121655,"Chaitanya Joshi. Transformers are graph neural networks. The Gradient, 2020."
REFERENCES,0.45255474452554745,"Amir Hosein Khasahmadi, Kaveh Hassani, Parsa Moradi, Leo Lee, and Quaid Morris. Memory-
based graph networks. In International Conference on Learning Representations, 2020. URL
https://openreview.net/forum?id=r1laNeBYPB."
REFERENCES,0.45498783454987834,"Thomas N. Kipf and Max Welling. Semi-supervised classiﬁcation with graph convolutional networks.
In International Conference on Learning Representations (ICLR), 2017."
REFERENCES,0.45742092457420924,"Devin Kreuzer, Dominique Beaini, William L Hamilton, Vincent L´etourneau, and Prudencio Tossou.
Rethinking graph transformers with spectral attention. arXiv preprint arXiv:2106.03893, 2021."
REFERENCES,0.45985401459854014,"Alex Krizhevsky, Geoffrey Hinton, et al. Learning multiple layers of features from tiny images. 2009."
REFERENCES,0.46228710462287104,"Rongjie Lai and Stanley Osher. A splitting method for orthogonality constrained problems. Journal
of Scientiﬁc Computing, 58(2):431–449, 2014."
REFERENCES,0.46472019464720193,"Tuan Le, Marco Bertolini, Frank No´e, and Djork-Arn´e Clevert. Parameterized hypercomplex graph
neural networks for graph classiﬁcation. arXiv preprint arXiv:2103.16584, 2021."
REFERENCES,0.46715328467153283,"Yann LeCun, L´eon Bottou, Yoshua Bengio, and Patrick Haffner. Gradient-based learning applied to
document recognition. Proceedings of the IEEE, 86(11):2278–2324, 1998."
REFERENCES,0.46958637469586373,"Guohao Li, Matthias Muller, Ali Thabet, and Bernard Ghanem. Deepgcns: Can gcns go as deep
as cnns? In Proceedings of the IEEE/CVF International Conference on Computer Vision, pp.
9267–9276, 2019."
REFERENCES,0.4720194647201946,"Guohao Li, Chenxin Xiong, Ali Thabet, and Bernard Ghanem. Deepergcn: All you need to train
deeper gcns. arXiv preprint arXiv:2006.07739, 2020a."
REFERENCES,0.4744525547445255,"Pan Li, Yanbang Wang, Hongwei Wang, and Jure Leskovec. Distance encoding: Design provably
more powerful neural networks for graph representation learning. Advances in Neural Information
Processing Systems, 33, 2020b."
REFERENCES,0.4768856447688564,"Yang Li, Buyue Qian, Xianli Zhang, and Hui Liu. Graph neural network-based diagnosis prediction.
Big Data, 8(5):379–390, 2020c."
REFERENCES,0.4793187347931874,"Andreas Loukas. What graph neural networks cannot learn: depth vs width. In International
Conference on Learning Representations, 2020."
REFERENCES,0.48175182481751827,"Haggai Maron, Heli Ben-Hamu, Nadav Shamir, and Yaron Lipman. Invariant and equivariant graph
networks. arXiv preprint arXiv:1812.09902, 2018."
REFERENCES,0.48418491484184917,"Haggai Maron, Heli Ben-Hamu, Hadar Serviansky, and Yaron Lipman. Provably powerful graph
networks. arXiv preprint arXiv:1905.11136, 2019."
REFERENCES,0.48661800486618007,"Gr´egoire Mialon, Dexiong Chen, Margot Selosse, and Julien Mairal. Graphit: Encoding graph
structure in transformers. arXiv preprint arXiv:2106.05667, 2021."
REFERENCES,0.48905109489051096,Published as a conference paper at ICLR 2022
REFERENCES,0.49148418491484186,"Federico Monti, Davide Boscaini, Jonathan Masci, Emanuele Rodola, Jan Svoboda, and Michael M
Bronstein. Geometric deep learning on graphs and manifolds using mixture model cnns. In
Proceedings of the IEEE conference on computer vision and pattern recognition, pp. 5115–5124,
2017."
REFERENCES,0.49391727493917276,"Federico Monti, Fabrizio Frasca, Davide Eynard, Damon Mannion, and Michael M Bronstein. Fake
news detection on social media using geometric deep learning. arXiv preprint arXiv:1902.06673,
2019."
REFERENCES,0.49635036496350365,"Christopher Morris, Martin Ritzert, Matthias Fey, William L Hamilton, Jan Eric Lenssen, Gaurav
Rattan, and Martin Grohe. Weisfeiler and leman go neural: Higher-order graph neural networks. In
Proceedings of the AAAI Conference on Artiﬁcial Intelligence, volume 33, pp. 4602–4609, 2019."
REFERENCES,0.49878345498783455,"Christopher Morris, Nils M Kriege, Franka Bause, Kristian Kersting, Petra Mutzel, and Marion
Neumann. Tudataset: A collection of benchmark datasets for learning with graphs. arXiv preprint
arXiv:2007.08663, 2020."
REFERENCES,0.5012165450121655,"Ryan Murphy, Balasubramaniam Srinivasan, Vinayak Rao, and Bruno Ribeiro. Relational pooling for
graph representations. In International Conference on Machine Learning, pp. 4663–4673. PMLR,
2019."
REFERENCES,0.5036496350364964,"Moni Naor and Larry Stockmeyer. What can be computed locally? SIAM Journal on Computing, 24
(6):1259–1277, 1995."
REFERENCES,0.5060827250608273,"Aditya Pal, Chantat Eksombatchai, Yitong Zhou, Bo Zhao, Charles Rosenberg, and Jure Leskovec.
Pinnersage: Multi-modal user embedding framework for recommendations at pinterest. In Pro-
ceedings of the 26th ACM SIGKDD International Conference on Knowledge Discovery & Data
Mining, pp. 2311–2320, 2020."
REFERENCES,0.5085158150851582,"Jia-Yu Pan, Hyung-Jeong Yang, Christos Faloutsos, and Pinar Duygulu. Automatic multimedia cross-
modal correlation discovery. In Proceedings of the tenth ACM SIGKDD international conference
on Knowledge discovery and data mining, pp. 653–658, 2004."
REFERENCES,0.5109489051094891,"Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor
Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, et al. Pytorch: An imperative style,
high-performance deep learning library. Advances in neural information processing systems, 32:
8026–8037, 2019."
REFERENCES,0.51338199513382,"Ryoma Sato.
A survey on the expressive power of graph neural networks.
arXiv preprint
arXiv:2003.04078, 2020."
REFERENCES,0.5158150851581509,"Ryoma Sato, Makoto Yamada, and Hisashi Kashima. Approximation ratios of graph neural networks
for combinatorial problems. In Advances in Neural Information Processing Systems, pp. 4081–
4090, 2019."
REFERENCES,0.5182481751824818,"Balasubramaniam Srinivasan and Bruno Ribeiro. On the equivalence between positional node
embeddings and structural graph representations. In International Conference on Learning Repre-
sentations, 2019."
REFERENCES,0.5206812652068127,"Jonathan M Stokes, Kevin Yang, Kyle Swanson, Wengong Jin, Andres Cubillos-Ruiz, Nina M
Donghia, Craig R MacNair, Shawn French, Lindsey A Carfrae, Zohar Bloom-Ackermann, et al. A
deep learning approach to antibiotic discovery. Cell, 180(4):688–702, 2020."
REFERENCES,0.5231143552311436,"Sainbayar Sukhbaatar, Rob Fergus, et al. Learning multiagent communication with backpropagation.
Advances in neural information processing systems, 29:2244–2252, 2016."
REFERENCES,0.5255474452554745,Tox21. Tox21 challenge. 2014. URL https://tripod.nih.gov/tox21/challenge/.
REFERENCES,0.5279805352798054,"Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz
Kaiser, and Illia Polosukhin. Attention is all you need. In NIPS, 2017."
REFERENCES,0.5304136253041363,"Petar Veliˇckovi´c, Guillem Cucurull, Arantxa Casanova, Adriana Romero, Pietro Li`o, and Yoshua
Bengio. Graph attention networks. In International Conference on Learning Representations,
2018."
REFERENCES,0.5328467153284672,Published as a conference paper at ICLR 2022
REFERENCES,0.5352798053527981,"Minjie Wang, Lingfan Yu, Da Zheng, Quan Gan, Yu Gai, Zihao Ye, Mufei Li, Jinjing Zhou, Qi Huang,
Chao Ma, et al. Deep graph library: Towards efﬁcient and scalable deep learning on graphs. 2019."
REFERENCES,0.537712895377129,"Yanli Wang, Jewen Xiao, Tugba O Suzek, Jian Zhang, Jiyao Wang, Zhigang Zhou, Lianyi Han, Karen
Karapetyan, Svetlana Dracheva, Benjamin A Shoemaker, et al. Pubchem’s bioassay database.
Nucleic acids research, 40(D1):D400–D412, 2012."
REFERENCES,0.5401459854014599,"Boris Weisfeiler and Andrei Leman. The reduction of a graph to canonical form and the algebra
which appears therein. NTI Series, 2(9):12–16, 1968."
REFERENCES,0.5425790754257908,"Z Wu, B Ramsundar, EN Feinberg, J Gomes, C Geniesse, AS Pappu, K Leswing, and V Pande.
Moleculenet: a benchmark for molecular machine learning. chem sci 9: 513–530, 2018."
REFERENCES,0.5450121654501217,"Keyulu Xu, Weihua Hu, Jure Leskovec, and Stefanie Jegelka. How powerful are graph neural
networks? In International Conference on Learning Representations, 2019."
REFERENCES,0.5474452554744526,"Chengxuan Ying, Tianle Cai, Shengjie Luo, Shuxin Zheng, Guolin Ke, Di He, Yanming Shen,
and Tie-Yan Liu. Do transformers really perform bad for graph representation? arXiv preprint
arXiv:2106.05234, 2021."
REFERENCES,0.5498783454987834,"Jiaxuan You, Rex Ying, and Jure Leskovec. Position-aware graph neural networks. In International
Conference on Machine Learning, pp. 7134–7143. PMLR, 2019."
REFERENCES,0.5523114355231143,"Jie Zhou, Ganqu Cui, Shengding Hu, Zhengyan Zhang, Cheng Yang, Zhiyuan Liu, Lifeng Wang,
Changcheng Li, and Maosong Sun. Graph neural networks: A review of methods and applications.
AI Open, 1:57–81, 2020."
REFERENCES,0.5547445255474452,Published as a conference paper at ICLR 2022
REFERENCES,0.5571776155717761,"A
SUPPLEMENTARY"
REFERENCES,0.559610705596107,"A.1
DISTINGUISHING NON-ISOMORPHIC GRAPHS USING RANDOM WALK FEATURES"
REFERENCES,0.5620437956204379,"The choice of the initial PE in our proposed architecture can be several based on graph diffusion or
other related techniques. In this section, we study RWPE (Eqn. 10) which we initialize with k-steps
of random walk. Precisely we use a k-dim vector that encodes the landing probabilities of a node i to
itself in 1 to k steps. This initial PE vector for a node i is given by [RWii, RW2
ii, . . . , RWk
ii] ∈Rk
which is pre-computed before the model training. Here, we demonstrate that such PE vector can
help distinguish i) structurally dissimilar nodes and ii) non-isomorphic graphs on which 1-WL, and
equivalently MP-GNNs, fail, thus illustrating the empirically powerful nature of MPGNNs-LSPE
that relies on this choice of positional features initialization."
REFERENCES,0.5644768856447688,"Figure 3: Left: Example 3-regular graph with 8 nodes from Li et al. (2020b) where the nodes are
structurally different and colored accordingly. The 4-dim initial RWPE vector is shown against the
corresponding nodes with their respective colors. Right: Example pair of non-isomorphic graphs
with 11 nodes and skip-links 2 and 3 from Murphy et al. (2019). Each node in a graph gets the
same 4-dim RWPE vector, and shown above in colors are the respective graphs’ RWPE vectors after
averaging across all the nodes."
REFERENCES,0.5669099756690997,"Figure 4: A pair of non-isomorphic and non-regular graphs (Left: Decalin, Right: Bicyclopentyl)
from Sato (2020). The 5-dim initial PE vector is shown against the corresponding nodes with their
respective colors."
REFERENCES,0.5693430656934306,"We show the simulation of the nodes’ initial RWPE vectors on three examples in Figure 3 (Left),
Figure 3 (Right), and Figure 4 where the graphs either do not have any node attributes (Figure 3), or
have the same node attributes (Figure 4 where each node denotes a Carbon atom). When we apply
MPGNNs on the graph in 3 (Left), each node will have the same feature representation as it is a
regular graph without any node attributes. However, there are structurally 3 different kinds of nodes
denoted by the same number of different colors. If we initialize the PE for these nodes for k = 4"
REFERENCES,0.5717761557177615,Published as a conference paper at ICLR 2022
REFERENCES,0.5742092457420924,"random walk steps, we can observe that the nodes are being assigned the 4-dim feature vectors that is
consistent to their initial structural roles in the graph, thus being distinguishable."
REFERENCES,0.5766423357664233,"Similarly, Figure 3 (Right) is a pair of non-isomorphic graphs from the theoretically challenging and
highly symmetric Circulant Skip Link (CSL) dataset from Murphy et al. (2019). It can be noticed
that every node in a graph here has the same structural role as the each node has edges with other
nodes at same hops. However, in Gskip(11, 2), the edges are between nodes at 1, 2 hops whereas in
Gskip(11, 3), the edges are between the nodes at 1, 3 hops, with 2 and 3 being the skip-links of the
two graphs, respectively. In such a scenario, the node in the Gskip(11, 2) gets a different 4-dim initial
PE than a node in Gskip(11, 3), thus helping eventually to distinguish the two graphs when these node
features are pooled to generate the graph feature vector."
REFERENCES,0.5790754257907542,"Finally, in Figure 4, a pair of non-isomorphic and non-regular graphs is shown from Sato (2020) that
MPGNNs fail to distinguish. If we use 5 steps of Random Walk to initialize the node’s PE vector,
we can observe that the two graphs can easily be distinguished. We note here that the random walk
based PE initialization (RWPE) is close to one of the Distance Encoding instantiations used in Li
et al. (2020b). However, we do not require to consider pairwise scores RWk
ij between nodes i and
j and any sub-set of nodes from the original graph, thus making our method less computationally
demanding."
REFERENCES,0.5815085158150851,"A.2
RANDOM WALK PE FEATURE AND GRAPH ISOMORPHISM TEST"
REFERENCES,0.583941605839416,"Similar to the 1-WL test for graph isomorphism (Weisfeiler & Leman, 1968; Morris et al., 2019; Sato,
2020), the RWPE can be used as a node coloring algorithm to test if two graphs are non-isomorphic,
as described in Algorithm 1. Note that this algorithm cannot guarantee that two graphs are isomorphic,
like the WL test. However, our analysis in Section A.1 shows this algorithm to be strictly powerful
than the 1-WL test as the pairs of graphs in Figure 3 (Right) and in Figure 4 are not distinguishable
by 1-WL. Although this increase in power is being achieved without the need of maintaining colors
for tuple of nodes to encode higher order interactions (as in k-WL), the algorithm’s complexity is of
O(k ∗n3) due to the matrix multiplication in Step 5 (b) and Step 5 (c), compared to O(k ∗n2) of
1-WL, with k being the number of iterations until convergence."
REFERENCES,0.5863746958637469,"Algorithm 1 Algorithm to decide whether a pair of graphs are not isomorphic based on random walk
landing probabilities of each node to itself.
Input: A pair of graphs G1 = (V1, E1), G2 = (V2, E2) with n nodes and e edges in each graph.
A1 ∈Rn×n and A2 ∈Rn×n denote the adjacency matrices, D1 ∈Rn×n and D2 ∈Rn×n denote
the degree matrices of graphs G1 and G2 respectively.
Output: Return “non-isomorphic” if G1 and G2 are not isomorphic else “possibly isomorphic”."
REFERENCES,0.5888077858880778,"1. M (0) ←A1D−1
1
∈Rn×n"
REFERENCES,0.5912408759124088,"2. N (0) ←A2D−1
2
∈Rn×n"
REFERENCES,0.5936739659367397,"3. c(0)
u
←M (0)
u,u
∀u ∈V1"
REFERENCES,0.5961070559610706,"4. d(0)
v
←N (0)
v,v
∀v ∈V2
5. for k = 1, 2, · · · (until convergence to stationary distribution)"
REFERENCES,0.5985401459854015,"(a) if HASH

{{c(k−1)
u
∈Rk | u ∈V1}}

̸= HASH

{{d(k−1)
v
∈Rk | v ∈V2}}

then
return “non-isomorphic”
(b) M (k) ←M (k−1)M (0) ∈Rn×n"
REFERENCES,0.6009732360097324,(c) N (k) ←N (k−1)N (0) ∈Rn×n
REFERENCES,0.6034063260340633,"(d) c(k)
u
←append M (k)
u,u to c(k−1)
u
∀u ∈V1
(e) d(k)
v
←append N (k)
v,v to d(k−1)
v
∀v ∈V2
6. return “possibly isomorphic”"
REFERENCES,0.6058394160583942,where HASH is an injective hash function and {{. . .}} denotes a multiset.
REFERENCES,0.6082725060827251,Published as a conference paper at ICLR 2022
REFERENCES,0.610705596107056,"A.3
STUDY OF LAPPE AND RWPE AS INITIAL PE"
REFERENCES,0.6131386861313869,"10
15
20
25
30
35
Number of nodes 10 15 20 25 30 35"
REFERENCES,0.6155717761557178,Number of unique LapPEs 0 20 40 60 80 100
REFERENCES,0.6180048661800487,"(a) LapPE, k = 36"
REFERENCES,0.6204379562043796,"10
15
20
25
30
35
Number of nodes 10 15 20 25 30 35"
REFERENCES,0.6228710462287105,Number of unique RWPEs 0 5 10 15 20 25 30
REFERENCES,0.6253041362530414,"(b) RWPE, k = 24"
REFERENCES,0.6277372262773723,"Figure 5: Plot of the number of nodes in a graph vs. the number of unique PE for LapPE and RWPE.
A point in the plots represents a graph in the ZINC validation set (composed of 1000 graphs) where
the x-axis is the number of nodes, the y-axis is the number of unique PEs and the point intensity is
the number of graphs with the same pair (x, y). Besides, Fig. 5a has 36-dim LapPE (trailing dims
padded with zero for a graph with n < 36), and Fig. 5b has 24-dim RWPE."
REFERENCES,0.6301703163017032,nodes: 24 | unique RWPEs: 24 0 5 10 15 20
REFERENCES,0.6326034063260341,(a) ZINC molecule (val index 91)
REFERENCES,0.635036496350365,nodes: 21 | unique RWPEs: 21 0.0 2.5 5.0 7.5 10.0 12.5 15.0 17.5 20.0
REFERENCES,0.6374695863746959,(b) ZINC molecule (val index 967)
REFERENCES,0.6399026763990268,nodes: 14 | unique RWPEs: 10 0 1 2 3 4 5 6 7 8 9
REFERENCES,0.6423357664233577,(c) ZINC molecule (val index 212)
REFERENCES,0.6447688564476886,nodes: 18 | unique RWPEs: 13 0 2 4 6 8 10 12
REFERENCES,0.6472019464720195,(d) ZINC molecule (val index 672)
REFERENCES,0.6496350364963503,"Figure 6: Sample graph plots from the ZINC validation set with each node color in a graph represent-
ing a unique RWPE vector, when k = 24. The corresponding graph ids, the number of nodes in the
graphs and the number of unique RWPEs are labelled against the ﬁgures."
REFERENCES,0.6520681265206812,"Figure 5 visualizes the uniqueness of the node representation with LapPE and RWPE (which serve as
initial PE of our network) using the ZINC validation set of 1000 real-world molecular graphs. If the"
REFERENCES,0.6545012165450121,Published as a conference paper at ICLR 2022
REFERENCES,0.656934306569343,"initial PE is unique for each node in a graph, then the graph lies on the straight diagonal line. Figure
5a shows the result for LapPE, all graphs lie on the diagonal line as Laplacian eigenvectors guarantee
unique node coordinates in the Euclidean transformed space. Figure 5b presents the result for RWPE.
We observe that not all, but a large amount of ZINC molecular graphs stay close to the straight line,
showing that most graphs have a large amount of nodes with unique RWPE. For example, there are
30 graphs with 24 nodes having 21 unique RWPE, equivalent to 87.5% of nodes with unique PE."
REFERENCES,0.6593673965936739,"Additionally, we visualize four sample graph plots from the ZINC validation set in Figure 6 where
the ﬁrst two graphs have completely unique RWPE features, while the next two graphs have partially
unique RWPEs (71.43% and 72.22% respectively). The visualization assigns a unique node color
for each unique RWPE representation. Therefore, graphs in Figures 6a and 6b are plotted with each
node assigned to a unique color based on their RWPE features, and graphs in Figures 6c and 6d
are represented with 10 and 13 unique colors respectively corresponding to their number of unique
RWPE representations. In particular, observe the green-shade colored nodes in Figure 6c (top and
bottom-right) as well as blue-shade (mid-left) and orange-shade (bottom-right) colored nodes in
Figure 6d. We can easily see that the nodes with the same color are isomorphic in the graph, i.e. their
k-hop structural neighborhoods are the same for values k ≥11."
REFERENCES,0.6618004866180048,"We remind that RWPE provides a unique node representation under the condition that each node have a
unique k-hop topological neighborhood for a sufﬁcient large k. While this condition is experimentally
true for most nodes, it is not always satisﬁed. But despite this approximation, for a sufﬁciently large
number k of random walk iterations, RWPE is still able to capture global higher-order positioning of
nodes that is used as initial PE, and is beneﬁcial to the proposed LSPE architecture as demonstrated
by the gain of performance in several experiments."
REFERENCES,0.6642335766423357,"A.4
MODELS USED FOR COMPARISON IN TABLE 2"
REFERENCES,0.6666666666666666,"As a complete reference, the different GNN baselines and SOTA models that are used for the
comparison in Table 2 are Graph Convolutional Networks (GCN) (Kipf & Welling, 2017), Graph
Attention Networks (GAT) (Veliˇckovi´c et al., 2018), GatedGCN-LapPE (Bresson & Laurent, 2017;
Dwivedi et al., 2020), Graph Transformer (GT) (Dwivedi & Bresson, 2021), Spectral Attention
Networks (SAN) (Kreuzer et al., 2021), Graphormer (Ying et al., 2021), Graph Isomorphism Networks
(GIN) (Xu et al., 2019), DeeperGCN (Li et al., 2020a), Principle Neighborhood Aggregation (PNA)
(Corso et al., 2020), Directional Graph Networks (DGN) (Beani et al., 2021) and Parameterized
Hypercomplex GNNs (PHC-GNN) (Le et al., 2021)."
REFERENCES,0.6690997566909975,"A.5
FIGURE FOR THE STUDY OF k STEPS IN RWPE (SECTION 4.3)"
REFERENCES,0.6715328467153284,"2
4
8
12
16
20
24
28
32
k 0.10 0.11 0.12 0.13 0.14"
REFERENCES,0.6739659367396593,Test MAE
REFERENCES,0.6763990267639902,GatedGCN-LSPE on ZINC (lower is better)
REFERENCES,0.6788321167883211,"2
4
8
12
16
20
24
28
32
k 0.73 0.74 0.75 0.76 0.77 0.78"
REFERENCES,0.681265206812652,Test ROC-AUC
REFERENCES,0.683698296836983,PNA-LSPE on TOX21 (higher is better)
REFERENCES,0.6861313868613139,"Figure 7: Test scores on selecting different values of k which is used to determine the number of
iterative steps of RW in RWPE as well as the dimension of the learned PE at the ﬁnal layer, Eqn. 12."
REFERENCES,0.6885644768856448,"B
RELATED WORK IN DETAIL"
REFERENCES,0.6909975669099757,"In this detailed section on related work, we ﬁrst review the limitations of existing MP-GNN architec-
tures in terms of their theoretical expressiveness, suggesting possible improvements to make GNNs
more powerful. Then, we introduce a number of non-learned and learning techniques that can be
studied under the umbrella of graph positional encoding. Finally, we highlight the recent develop-
ments for generalizing Transformers to graphs. Our aim is to connect meaningful innovations through"
REFERENCES,0.6934306569343066,Published as a conference paper at ICLR 2022
REFERENCES,0.6958637469586375,"the detailed background on these three research directions, the uniﬁcation of which spearheaded the
development of this work."
REFERENCES,0.6982968369829684,"B.1
THEORETICAL EXPRESSIVITY AND WEISFEILER-LEMAN GNNS"
REFERENCES,0.7007299270072993,"Weisfeiler-Leman test. The limitation of MP-GNNs in failing to distinguish non-isomorphic graphs
was ﬁrst carefully studied in Xu et al. (2019) and Morris et al. (2019), based on the equivalence
of MP-GNNs and the 1-WL isomorphism test (Weisfeiler & Leman, 1968). As such, MP-GNNs
may perform poorly on graphs that exhibit several symmetries in their original structure, such as
node and edge isomorphisms (Murphy et al., 2019; Srinivasan & Ribeiro, 2019). Besides, some
message-passing functions may not be discriminative enough (Xu et al., 2019; Corso et al., 2020)."
REFERENCES,0.7031630170316302,"Equivariant GNNs. Graph Isomorphism Networks (GINs) (Xu et al., 2019) were designed to be as
maximally expressive as the original 1-WL test (Weisfeiler & Leman, 1968). However, the 1-WL
test can fail to distinguish (simple) non-isomorphic graphs, thus requiring novel GNNs with more
expressivity power. As the original 1-WL test only considers 2-tuple of nodes, i.e. the standard edges
in a graph, a natural approach to improve the expressivity power of the 1-WL test is to examine
higher-order interactions between nodes with k-tuple of nodes with k ≥3. To this end, k-order
Equivariant-GNNs were introduced in Maron et al. (2018). But these architectures require O(nk)
memory and speed complexities. This is an important practical limitation as k = 3 is at least needed
to design more powerful GNNs than GINs. Along this line, the most efﬁcient WL-GNNs that have
been proposed are in Maron et al. (2019); Chen et al. (2019); Azizian & Lelarge (2020), which have
O(n2) memory and O(n3) speed complexities."
REFERENCES,0.7055961070559611,"B.2
GRAPH POSITIONAL ENCODING"
REFERENCES,0.708029197080292,"Importance of Positional Information. The idea of positional encoding, i.e. the notion of global
position of pixels in images, words in texts and nodes in graphs, plays a central role in the effectiveness
of the most prominent neural networks with ConvNets (LeCun et al., 1998), RNNs (Hochreiter &
Schmidhuber, 1997), and Transformers (Vaswani et al., 2017). These architectures integrate structural
and positional attributes of data when building abstract feature representations. For instances,
ConvNets intrinsically consider regular spatial structure for the position of pixels (Islam et al.,
2020), RNNs also build on the sequential structure of the word positions, and Transformers employ
positional encoding of words (see Dufter et al. (2021) for a review). For GNNs, the position of
nodes is more challenging due to the fact that there does not exist a canonical positioning of nodes in
arbitrary graphs. This implies that there is no obvious notion of global and relative position of nodes,
and consequently no speciﬁc directions on graphs (like the top, down, left and right directions in
images). Despite these issues, graph positional encoding are as much critical for GNNs as they are
for ConvNets, RNNs and Transformers, as demonstrated for prediction tasks on graphs (Srinivasan &
Ribeiro, 2019; Cui et al., 2021)."
REFERENCES,0.7104622871046229,"Index Positional Encoding. Loukas (2020) identiﬁed another cause of the limited expressivity of
the standard MP-GNNs. Such GNNs do not have the capacity to handle anonymous nodes, i.e.
nodes which do not have unique node features. This property turns out to be critical to show that
MP-GNNs can be universal approximators if each node in the graph can be assigned to a unique or
discriminating feature. The theorem results from an alignment between MP-GNNs and distributed
local algorithms (Naor & Stockmeyer, 1995; Sato et al., 2019). In order to address the issue of
anonymous MP-GNNs and improve their theoretical expressiveness w.r.t the WL test, Murphy et al.
(2019) introduced Graph Relational Pooling. Their model assigns a unique identiﬁer to each node,
deﬁned by an indexing of the nodes. However, such a model must be trained with the n! possible
index permutations to guarantee higher expressivity, which is not computationally feasible. As a
consequence, during training, node indexing is uniformly sampled from the n! possible choices in
order for their network to learn to be independent to the choice of the index PE at test time. Similarly,
random node identiﬁer could be used for breaking the node anonymity. Yet, this PE also suffers from
the lack of generalization for unseen graphs (Loukas, 2020)."
REFERENCES,0.7128953771289538,"Laplacian Positional Encoding. Besides providing a unique representation for each node, meaning-
ful graph PE should also be permutation-invariant and distance-sensitive, meaning that the difference
between the PEs of two nodes far apart on the graph must be large, and small for two nodes nearby.
Laplacian eigenvectors (Belkin & Niyogi, 2003) appear to be good candidates for graph PE, belonging"
REFERENCES,0.7153284671532847,Published as a conference paper at ICLR 2022
REFERENCES,0.7177615571776156,"to the class of unsupervised manifold learning techniques. Precisely, they are spectral techniques that
embed graphs into an Euclidean space, and are deﬁned via the factorization of the graph Laplacian
∆= In −D−1/2AD−1/2 = U T ΛU, where In is the n × n identity matrix, A the n × n adjacency
matrix, D the n × n degree matrix, and n × n matrices Λ and U correspond to the eigenvalues and
eigenvectors respectively. The complexity for computing this full factorization is O(E3/2) and O(n)
with approximate Nystrom method (Fowlkes et al., 2004). Laplacian eigenvectors form a meaningful
local coordinate system, while preserving the global graph structure. As these eigenvectors hold the
key properties of permutation-invariant, uniqueness, computational efﬁciency and distance-aware
w.r.t. the graph topology, they were proposed as graph PE (Dwivedi et al., 2020; Dwivedi & Bresson,
2021). They also naturally generalize the positional encoding used in Transformers (Vaswani et al.,
2017) to arbitrary graphs. The main limitation of this graph PE is the existence of a sign ambiguity as
eigenvectors are deﬁned up to ±1. This leads to 2k number of possible sign values when selecting k
number of eigenvectors. In practice, we choose k ≤n eigenvectors given the manifold assumption,
and therefore 2k is much smaller n! (the number of possible ordering of the nodes), and therefore
smaller amount of ambiguities to be resolved by the network. During the training, eigenvectors are
uniformly sampled at random between the 2k possibilities (Dwivedi et al., 2020; Kreuzer et al., 2021)
in order for the network to learn to be invariant w.r.t the sign of the eigenvectors."
REFERENCES,0.7201946472019465,"Other graph PE. Li et al. (2020b) proposed the use of distance encoding (DE) as node attributes,
and additionally as controller of message aggregation. DE captures relative distances between
nodes in a graph using powers of the random walk matrix. The resulting GNN was shown to have
better expressivity than the 1-WL test. However, the limitation on regular graphs, and the cost and
memory requirement of using power matrices may prevent the use of this technique to larger graphs.
Khasahmadi et al. (2020) used random walk with restart (Pan et al., 2004) as topological embeddings
with the initial node features."
REFERENCES,0.7226277372262774,"You et al. (2019) proposed learnable position-aware embeddings based on random anchor sets of
nodes for pairwise nodes (or link) tasks. This work also seeks to develop positional encoding that can
be learned along with the structural representation within the GNN. However, the random selection
of anchors has its limitations, which makes their approach less generalizable on inductive tasks."
REFERENCES,0.7250608272506083,"Bouritsas et al. (2020); Bodnar et al. (2021) introduced hybrid GNNs based on the WL-test and
the message-passing aggregation mechanism. These networks use prior knowledge about a class of
graphs of interest such as rings for molecules and cliques for social networks. The prior information
is then encoded into MP-GNNs to obtain more expressive models by showing that the such GNNs
are not less powerful than the 3-WL test. They obtained top performance on molecular datasets
but the prior information regarding graph sub-structures needs to be pre-computed, and sub-graph
matching and counting require O(nk) for k-tuple sub-structure. Besides, complexity of the message
passing process depends linearly w.r.t. the size of the sub-graph structure. Note that the core idea
of substructure counting with e.g. the number of rings associated to an atom provides a powerful
higher-order structural information to the network and can improve signiﬁcantly the tasks related to
substructure counting."
REFERENCES,0.7274939172749392,"B.3
TRANSFORMER-BASED GNNS"
REFERENCES,0.7299270072992701,"MP-GNNs are GNNs that leverage the sparse graph structure as computational graph, allowing
training and inference with linear complexity and making them scalable to medium and large-scale
graphs. However, besides their low expressivity, these GNNs hold two important and well-identiﬁed
limitations. Firstly, MP-GNNs are susceptible to the information bottleneck limitation a.k.a. over-
squashing (Alon & Yahav, 2020) when messages from across distant nodes are aggregated to a node.
Secondly, long-range interactions between far away nodes can also be limited, and require multiple
layers that can suffer from the vanishing gradient problem. These limitations are similar to the ones
present in Recurrent Neural Networks (RNNs) (Hochreiter & Schmidhuber, 1997), and can lead
MP-GNNs to perform poorly on tasks where long-range interactions are necessary."
REFERENCES,0.732360097323601,"To overcome these limitations, it seems natural to use Transformer networks (Vaswani et al., 2017)
which alleviates the long-range issue as ‘everything is connected to everything’. However, it was
found that the direct adoption of full-graph operable Transformers perform poorly compared to
MP-GNNs on graph structured datasets (Dwivedi & Bresson, 2021). Besides, Transformer-based
GNNs require to replace O(n) complexity with O(n2). So these GNNs are limited to small graphs"
REFERENCES,0.7347931873479319,Published as a conference paper at ICLR 2022
REFERENCES,0.7372262773722628,"like molecules and cannot scale to larger ones like social graphs or knowledge graphs. Dwivedi &
Bresson (2021) designed a sparsely-connected architecture called GraphTransformer that reduces
the complexity to O(E) by considering the graph topology instead of connecting each node to all
other nodes, similar to GATs (Veliˇckovi´c et al., 2018). Still, the GraphTransformer was unable to
outperform SOTA GNNs on benchmark datasets. Along this line, Kreuzer et al. (2021) recently
proposed Spectral Attention Networks (SANs), a fully-graph operable Transformer model that
improves GraphTransformer (Dwivedi & Bresson, 2021) with two contributions. First, the authors
designed a learnable PE module based on self-attention applied to the Laplacian eigenvectors, and
injected this resultant PE into the input layer of the network. Second, SANs separated the parameters
for real edges and complementary (non-real) edges, enabling the model to process the available sparse
graph structure and long-range node connections in a learnable manner. However, their learned PE,
based on the Laplacian eigenvectors, inherently exhibits the limitation of sign ambiguity. Kreuzer et al.
(2021) attempted at alleviating the sign ambiguity through another architecture named Edge-Wise
LPE. However, the architecture’s complexity being O(n4) makes it a practically infeasible model.
GraphiT (Mialon et al., 2021) and Graphormer (Ying et al., 2021) were also very recently developed
as full-graph operable Transformers for graphs with the idea to weigh (or, control) the attention
mechanism based on the graph topology. Speciﬁcally, GraphiT employs diffusion geometry to capture
short-range and long-range graph information, and Graphormer uses shortest paths. Altogether, these
works exploit different relative positional encoding information to improve the expressivity of
Transformers for graphs."
REFERENCES,0.7396593673965937,"C
INSTANCES OF LSPE WITH SPARSE AND TRANSFORMER GNNS"
REFERENCES,0.7420924574209246,"C.1
SPARSE GNNS WITH LSPE"
REFERENCES,0.7445255474452555,"In this section, we augment two MP-GNN architectures with learnable positional representation,
namely GatedGCN (Bresson & Laurent, 2017) and PNA (Corso et al., 2020)."
REFERENCES,0.7469586374695864,"C.1.1
GATEDGCN-LSPE"
REFERENCES,0.7493917274939172,"GatedGCNs (Bresson & Laurent, 2017) are sparse MP-GNNs equipped with a soft-attention mech-
anism that is able to learn adaptive edge gates to improve the message aggregation step of GCN
networks (Kipf & Welling, 2017). We augment this model to develop GatedGCN-LSPE, deﬁned as:"
REFERENCES,0.7518248175182481,"hℓ+1, eℓ+1, pℓ+1 = GatedGCN-LSPE

hℓ, eℓ, pℓ
, h ∈Rn×d, e ∈RE×d, p ∈Rn×d,
(17)"
REFERENCES,0.754257907542579,"with hℓ+1
i
= hℓ
i + ReLU

BN

Aℓ
1"
REFERENCES,0.7566909975669099,"
hℓ
i
pℓ
i 
+
X"
REFERENCES,0.7591240875912408,"j∈N(i)
ηℓ
ij ⊙Aℓ
2"
REFERENCES,0.7615571776155717," hℓ
j
pℓ
j"
REFERENCES,0.7639902676399026," 
,
(18)"
REFERENCES,0.7664233576642335,"eℓ+1
ij
= eℓ
ij + ReLU
 
BN
 
ˆηℓ
ij

,
(19)"
REFERENCES,0.7688564476885644,"pℓ+1
i
= pℓ
i + tanh

Cℓ
1pℓ
i +
X"
REFERENCES,0.7712895377128953,"j∈N(i)
ηℓ
ij ⊙Cℓ
2pℓ
j

,
(20)"
REFERENCES,0.7737226277372263,"and ηℓ
ij =
σ
 
ˆηℓ
ij
"
REFERENCES,0.7761557177615572,"P
j′∈N(i) σ
 
ˆηℓ
ij′

+ ϵ,
(21)"
REFERENCES,0.7785888077858881,"ˆηℓ
ij = Bℓ
1hℓ
i + Bℓ
2hℓ
j + Bℓ
3eℓ
ij,
(22)"
REFERENCES,0.781021897810219,"where hℓ
i, eℓ
ij, pℓ
i, ηℓ
ij, ˆηℓ
ij ∈Rd, Aℓ
1, Aℓ
2 ∈Rd×2d and Bℓ
1, Bℓ
2, Bℓ
3, Cℓ
1, Cℓ
2 ∈Rd×d."
REFERENCES,0.7834549878345499,"C.1.2
PNA-LSPE"
REFERENCES,0.7858880778588808,"PNA (Corso et al., 2020) is a sparse MP-GNN model which uses a combination of node aggregators
to overcome the theoretical limitation of a single aggregator. We propose PNA-LSPE whose layer"
REFERENCES,0.7883211678832117,Published as a conference paper at ICLR 2022
REFERENCES,0.7907542579075426,update equation is deﬁned as:
REFERENCES,0.7931873479318735,"hℓ+1, pℓ+1 = PNA-LSPE

hℓ, e0, pℓ
, h ∈Rn×d, e0 ∈RE×d, p ∈Rn×d,
(23)"
REFERENCES,0.7956204379562044,"with hℓ+1
i
= hℓ
i + LReLU

BN

U ℓ
h "
REFERENCES,0.7980535279805353,"

hℓ
i
pℓ
i 
,
M"
REFERENCES,0.8004866180048662,"j∈N(i)
M ℓ
h"
REFERENCES,0.8029197080291971,"
hℓ
i
pℓ
i"
REFERENCES,0.805352798053528,"
, e0
ij,
 hℓ
j
pℓ
j "
REFERENCES,0.8077858880778589,"

,
(24)"
REFERENCES,0.8102189781021898,"pℓ+1
i
= pℓ
i + tanh

U ℓ
p "
REFERENCES,0.8126520681265207,"pℓ
i,
M"
REFERENCES,0.8150851581508516,"j∈N(i)
M ℓ
p

pℓ
i, e0
ij, pℓ
j

"
REFERENCES,0.8175182481751825,"

,
(25)"
REFERENCES,0.8199513381995134,"and
M
="
REFERENCES,0.8223844282238443,"""
I
S(D, α = 1)
S(D, α = −1) # ⊗  "
REFERENCES,0.8248175182481752,"µ
σ
max
min "
REFERENCES,0.8272506082725061,",
(26)"
REFERENCES,0.829683698296837,"where L is the principal aggregator designed in (Corso et al., 2020), LReLU stands for LeakyReLU
activation, amd U ℓ
h, U ℓ
p, M ℓ
h and M ℓ
p are linear layers (or multi-layer perceptrons) with learnable
parameters."
REFERENCES,0.8321167883211679,"C.2
TRANSFORMER GNNS WITH LSPE"
REFERENCES,0.8345498783454988,"The recently developed SAN (Kreuzer et al., 2021), GraphiT (Mialon et al., 2021) and Graphormer
(Ying et al., 2021) are promising full-graph operable Transformers incorporating several methods
to encode positional and structural features into the network. In the next sections, we expand these
Transformer-based networks with the proposed LSPE architecture."
REFERENCES,0.8369829683698297,"C.2.1
SAN-LSPE"
REFERENCES,0.8394160583941606,"Like Transformers, Spectral Attention Networks (SAN) (Kreuzer et al., 2021) operate on full graphs
although the network separates the parameters coming from existing edges and non-existing edges
in the graph. Furthemore, the contribution of attentions from existing and non-existing edges are
weighted by an additive positive scalar γ, which can be tuned for different tasks. SAN also considers
a Learnable Positional Encoding (LPE) module which takes in Laplacian eigenvectors and transforms
them into a ﬁxed size PE with a self-attention encoder. This PE is then used in the main architecture
in a manner similar to MP-GNNs-PE as deﬁned in Eq. (5). We propose to extend SAN by replacing
the LPE module with the LSPE architecture proposed in Section 3.1 where positional representation
is learned in line with structural embedding at each GNN layer:"
REFERENCES,0.8418491484184915,"hℓ+1, pℓ+1 = SAN-LSPE

hℓ, e0, pℓ
, h ∈Rn×d, e0 ∈Rn×n×d, p ∈Rn×d,
(27)"
REFERENCES,0.8442822384428224,"with hℓ+1
i
= BN
 ¯hℓ+1
i
+ W ℓ
2 ReLU
 
W ℓ
1 ¯hℓ+1
i

∈Rd
(28)"
REFERENCES,0.8467153284671532,"¯hℓ+1
i
= BN

hℓ
i + ˆhℓ+1
i

∈Rd,
(29)"
REFERENCES,0.8491484184914841,"ˆhℓ+1
i
= Oℓ Hn k=1 X j∈V"
REFERENCES,0.851581508515815,"wk,ℓ
ij
P"
REFERENCES,0.8540145985401459,"j′∈V wk,ℓ
ij′
vk,ℓ
j

∈Rd,
(30)"
REFERENCES,0.8564476885644768,"wk,ℓ
ij ="
REFERENCES,0.8588807785888077,"(
1
1+γ · exp(Ak,ℓ
ij )
if ij ∈E
γ
1+γ · exp( ¯Ak,ℓ
ij )
if ij ̸∈E
,
(31)"
REFERENCES,0.8613138686131386,"(
Ak,ℓ
ij = qk,ℓ
i
T diag(ck,ℓ
ij )kk,ℓ
j /√dk ∈R
if ij ∈E
¯Ak,ℓ
ij = ¯qik,ℓT diag(¯ck,ℓ
ij )¯kk,ℓ
j /√dk ∈R
if ij ̸∈E (32)"
REFERENCES,0.8637469586374696,"Qk,ℓ
=

hℓ pℓ"
REFERENCES,0.8661800486618005,"
W k,ℓ
Q , Kk,ℓ=

hℓ pℓ"
REFERENCES,0.8686131386861314,"
W k,ℓ
K , V k,ℓ=

hℓ pℓ"
REFERENCES,0.8710462287104623,"
W k,ℓ
V
∈Rn×dk
(33)"
REFERENCES,0.8734793187347932,"¯Qk,ℓ
=

hℓ pℓ"
REFERENCES,0.8759124087591241,"
¯W k,ℓ
Q , ¯Kk,ℓ=

hℓ pℓ"
REFERENCES,0.878345498783455,"
¯W k,ℓ
K , ¯V k,ℓ=

hℓ pℓ"
REFERENCES,0.8807785888077859,"
¯W k,ℓ
V
∈Rn×dk
(34)"
REFERENCES,0.8832116788321168,Published as a conference paper at ICLR 2022
REFERENCES,0.8856447688564477,"Ck,0 =e0W k
e , ¯Ck,0 =e0 ¯W k
e ∈Rn×n×dk
(35)"
REFERENCES,0.8880778588807786,"and pℓ+1
i
= pℓ
i + tanh

Oℓ
p
 Hn k=1 X j∈V"
REFERENCES,0.8905109489051095,"wk,ℓ
p,ij
P"
REFERENCES,0.8929440389294404,"j′∈V wk,ℓ
p,ij′
vk,ℓ
p,j

∈Rd,
(36)"
REFERENCES,0.8953771289537713,"wk,ℓ
p,ij ="
REFERENCES,0.8978102189781022,"(
1
1+γ · exp(Ak,ℓ
p,ij)
if ij ∈E
γ
1+γ · exp( ¯Ak,ℓ
p,ij)
if ij ̸∈E
,
(37)"
REFERENCES,0.9002433090024331,"(
Ak,ℓ
p,ij = qk,ℓ
p,i
T diag(ck,ℓ
p,ij)kk,ℓ
p,j/√dk ∈R
if ij ∈E
¯Ak,ℓ
p,ij = ¯qp,ik,ℓT diag(¯ck,ℓ
p,ij)¯kk,ℓ
p,j/√dk ∈R
if ij ̸∈E (38)"
REFERENCES,0.902676399026764,"Qk,ℓ
p
=pℓW k,ℓ
p,Q, Kk,ℓ
p
=pℓW k,ℓ
p,K, V k,ℓ
p
=pℓW k,ℓ
p,V ∈Rn×dk
(39)"
REFERENCES,0.9051094890510949,"¯Qk,ℓ
p
=pℓ¯W k,ℓ
p,Q, ¯Kk,ℓ
p
=pℓ¯W k,ℓ
p,K, ¯V k,ℓ
p
=pℓ¯W k,ℓ
p,V ∈Rn×dk
(40)"
REFERENCES,0.9075425790754258,"Ck,0
p
=e0W k
p,e, ¯Ck,0
p
=e0 ¯W k
p,e ∈Rn×n×dk
(41)"
REFERENCES,0.9099756690997567,"where W ℓ
1, W ℓ
2
∈Rd×d, Oℓ, Oℓ
p ∈Rd×d, W k,ℓ
Q , W k,ℓ
K , W k,ℓ
V , ¯W k,ℓ
Q , ¯W k,ℓ
K , ¯W k,ℓ
V
∈R2d×dk,
W k,ℓ
p,Q, W k,ℓ
p,K, W k,ℓ
p,V , ¯W k,ℓ
p,Q, ¯W k,ℓ
p,K, ¯W k,ℓ
p,V ∈Rd×dk, W k
e , ¯W k
e , W k
p,e, ¯W k
p,e ∈Rd×dk, and dk = d/H
is the dimension of the kth head for a total of H heads. BN denotes the standard Batch Normalization
(Ioffe & Szegedy, 2015). Finally, we make the balance scalar parameter γ ≥0 learnable (also
clipping its range in [0, 1]) differently from (Kreuzer et al., 2021) where its optimal value is computed
by grid search."
REFERENCES,0.9124087591240876,"C.2.2
GRAPHIT-LSPE"
REFERENCES,0.9148418491484185,"Similarly to SAN, GraphiT (Mialon et al., 2021) is a full-graph operable Transformer GNN which
makes use of the diffusion distance to capture short-range and long-range interactions between nodes
depending of the graph topology. This pairwise diffusion distance is used as a multiplicative weight
to adapt the weight scores to the closeness or farness of the nodes. For example, if two nodes are
close on the graph, them the diffusion distance Kij will have a value close to one, and when the two
nodes are far away then the value of Kij will be small."
REFERENCES,0.9172749391727494,"Unlike SAN, the GraphiT model does not consider separate parameters for existing and non-existing
edges for a graph. However, following Kreuzer et al. (2021) and our experiments, separating the
parameters for each type of edges showed to improve the performance. Therefore, we augment the
original GraphiT architecture with learnable positional features and use two sets of parameters for the
edges and the complementary edges to deﬁne GraphiT-LSPE. The GraphiT-LSPE model uses the
same update equation as SAN-LSPE except for the weight score which are re-deﬁned to introduce
the diffusion kernel:"
REFERENCES,0.9197080291970803,"wk,ℓ
ij ="
REFERENCES,0.9221411192214112,"(
Kij · exp(Ak,ℓ
ij )
if ij ∈E
Kij · exp( ¯Ak,ℓ
ij )
if ij ̸∈E
.
(42)"
REFERENCES,0.9245742092457421,"Following (Mialon et al., 2021), the diffusion distance is chosen to be the p-step random walk
kernel deﬁned as K = (In −β∆)p ∈Rn×n where In, ∆∈Rn×n is the identity matrix and the
graph Laplacian matrix respectively. Hyper-parameter β controls the amount of diffusion with value
between [0.25, 0.50]."
REFERENCES,0.927007299270073,"D
EXPERIMENTS ON NON-MOLECULAR GRAPHS"
REFERENCES,0.9294403892944039,"We conduct experiments on 3 non-molecular graph datasets to demonstrate the effectiveness of the
proposed LSPE architecture on any graph domain in general. We select GatedGCN as the GNN
instance here. The datasets used are from the domains of social network (IMDB-BINARY and"
REFERENCES,0.9318734793187348,Published as a conference paper at ICLR 2022
REFERENCES,0.9343065693430657,"Table 4: Results on the IMDB-MULTI, IMDB-BINARY and CIFAR10 superpixels. All scores are
averaged over 4 runs with 4 different seeds. On IMDB- each seed experiment is on 10-fold cross
validation. Bold: GNN’s best score. No PosLoss is used with LSPE. † denotes the result is taken
directly from (Dwivedi et al., 2020)."
REFERENCES,0.9367396593673966,"Dataset
Model
Init PE
LSPE
L
#Param
TestAcc±s.d.
TrainAcc±s.d.
Epochs
Epoch/Total"
REFERENCES,0.9391727493917275,"IMDB-B
GatedGCN
x
x
4
87122
66.050±6.631
67.769±4.675
115.85
0.45s/0.15hr
GatedGCN
RWPE
D
4
91470
70.025±5.147
72.166±1.706
111.17
0.56s/0.19hr"
REFERENCES,0.9416058394160584,"IMDB-M
GatedGCN
x
x
4
87139
45.767±4.906
47.725±1.803
109.18
0.55s/0.17hr
GatedGCN
RWPE
D
4
91483
46.467±3.997
48.781±1.568
100.55
0.72s/0.22hr"
REFERENCES,0.9440389294403893,"CIFAR10
GatedGCN
x
x
4
104357
67.312±0.311
94.553±1.018
97.00
154.15s/4.22hr †
GatedGCN
RWPE
D
4
107237
70.858±0.631
78.616±1.006
185.00
68.51s/3.89hr"
REFERENCES,0.9464720194647201,"IMDB-MULTI (Morris et al., 2020)) and image superpixels (CIFAR10 (Dwivedi et al., 2020)) with
graph classiﬁcation being the prediction task."
REFERENCES,0.948905109489051,"IDBM-BINARY and IMDB-MULTI contain 1,000 and 1,500 graphs respectively which are ego-
networks extracted from actor collaboration graphs. There are 2 classes in IMDB-BINARY and 3
classes in IMDB-MULTI with the class denoting the genre of the graph. CIFAR10 is a superpixel
dataset of 60,000 graphs where each graph represents a connectivity structure of the image superpixels
as nodes. There are 10 classes to be predicted as with the original CIFAR10 image dataset (Krizhevsky
et al., 2009)."
REFERENCES,0.9513381995133819,"In Table 4, we show the advantage of using LSPE by instantiating GatedGCN-LSPE to train and
evaluate on these non-molecular graphs. For evaluation and reporting of results, we follow the
respective protocols as speciﬁed in Morris et al. (2020); Dwivedi et al. (2020) while comparing two
models on a dataset on the similar range of model parameters. In accordance with the molecular
datasets (Section 4.2), we consistently observe performance gains on each of the three datasets
in Table 4. This result further justiﬁes the usefulness of LSPE to be applicable in general for
representation learning on any graph domain."
REFERENCES,0.9537712895377128,"E
ADDITIONAL MODEL CONFIGURATION DETAILS"
REFERENCES,0.9562043795620438,"In Table 5, additional details on the hyperparameters of different models used in Table 1 are provided.
As for hardware information, all models were trained on Intel Xeon CPU E5-2690 v4 server having
4 Nvidia 1080Ti GPUs, with each single GPU running 1 experiment which equals to 4 parallel
experiments on the machine at a single time."
REFERENCES,0.9586374695863747,Published as a conference paper at ICLR 2022
REFERENCES,0.9610705596107056,"Table 5: Additional hyperparamters for the models used in Table 1. k is the dimension of PE, or the
steps of random walk if the PE is RWPE. β and p is applicable to GraphiT (Sec. C.2.2). Init lr and
Min lr are the initial and ﬁnal learning rates for the learning rate decay strategy where the lr decays
with a reduce Factor if the validation score doesn’t improve after the Patience number of epochs. α
and λ are applicable when PosLoss is used (Eqn. 12). ZINC"
REFERENCES,0.9635036496350365,"Model
Init PE
LSPE
PosLoss
k
β
p
Init lr
Patience
Factor
Min lr
α
λ"
REFERENCES,0.9659367396593674,"GatedGCN
x
x
x
-
-
-
1e-3
25
0.5
1e-6
-
-
GatedGCN
LapPE
x
x
8
-
-
1e-3
25
0.5
1e-6
-
-
GatedGCN
RWPE
D
x
20
-
-
1e-3
25
0.5
1e-6
-
-
GatedGCN
RWPE
D
D
20
-
-
1e-3
25
0.5
1e-6
1
1e-1"
REFERENCES,0.9683698296836983,"PNA
x
x
x
-
-
-
1e-3
25
0.5
1e-6
-
-
PNA
RWPE
D
x
16
-
-
1e-3
25
0.5
1e-6
-
-"
REFERENCES,0.9708029197080292,"SAN
x
x
x
-
-
-
3e-4
25
0.5
1e-6
-
-
SAN
RWPE
D
x
16
-
-
7e-4
25
0.5
1e-6
-
-"
REFERENCES,0.9732360097323601,"GraphiT
x
x
x
-
0.25
16
3e-4
25
0.5
1e-6
-
-
GraphiT
RWPE
D
x
16
0.25
16
7e-4
25
0.5
1e-6
-
-"
REFERENCES,0.975669099756691,MOLTOX21
REFERENCES,0.9781021897810219,"Model
Init PE
LSPE
PosLoss
k
β
p
Init lr
Patience
Factor
Min lr
α
λ"
REFERENCES,0.9805352798053528,"GatedGCN
x
x
x
-
-
-
1e-3
25
0.5
1e-5
-
-
GatedGCN
LapPE
x
x
3
-
-
1e-3
25
0.5
1e-5
-
-
GatedGCN
RWPE
D
x
16
-
-
1e-3
25
0.5
1e-5
-
-"
REFERENCES,0.9829683698296837,"PNA
x
x
x
-
-
-
5e-4
10
0.8
2e-5
-
-
PNA
RWPE
D
x
16
-
-
5e-4
10
0.8
2e-5
-
-
PNA
RWPE
D
D
16
-
-
5e-4
10
0.8
2e-5
1e-1
100"
REFERENCES,0.9854014598540146,"SAN
x
x
x
-
-
-
7e-4
25
0.5
1e-6
-
-
SAN
RWPE
D
x
12
-
-
7e-4
25
0.5
1e-6
-
-"
REFERENCES,0.9878345498783455,"GraphiT
x
x
x
-
0.25
16
7e-4
25
0.5
1e-6
-
-
GraphiT
RWPE
D
x
16
0.25
16
7e-4
25
0.5
1e-6
-
-"
REFERENCES,0.9902676399026764,MOLPCBA
REFERENCES,0.9927007299270073,"Model
Init PE
LSPE
PosLoss
k
β
p
Init lr
Patience
Factor
Min lr
α
λ"
REFERENCES,0.9951338199513382,"GatedGCN
x
x
x
-
-
-
1e-3
25
0.5
1e-4
-
-
GatedGCN
LapPE
x
x
3
-
-
1e-3
25
0.5
1e-4
-
-
GatedGCN
RWPE
D
x
16
-
-
1e-3
25
0.5
1e-4
-
-"
REFERENCES,0.9975669099756691,"PNA
x
x
x
-
-
-
5e-4
4
0.8
2e-5
-
-
PNA
RWPE
D
x
16
-
-
5e-4
10
0.8
2e-5
-
-"
