Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.0036496350364963502,"The abundance of data has given machine learning considerable momentum in
natural sciences and engineering. However, the modeling of simulated physical
processes remains difﬁcult. A key problem is the correct handling of geometric
boundaries. While triangularized geometric boundaries are very common in engi-
neering applications, they are notoriously difﬁcult to model by machine learning
approaches due to their heterogeneity with respect to size and orientation. In this
work, we introduce Boundary Graph Neural Networks (BGNNs), which dynam-
ically modify graph structures to address boundary conditions. Boundary graph
structures are constructed via modifying edges, augmenting node features, and
dynamically inserting virtual nodes. The new BGNNs are tested on complex 3D
granular ﬂow processes of hoppers and rotating drums which are standard compo-
nents of industrial machinery. Using precise simulations that are obtained by an
expensive and complex discrete element method, BGNNs are evaluated in terms
of computational efﬁciency as well as prediction accuracy of particle ﬂows and
mixing entropies. Even if complex boundaries are present, BGNNs are able to ac-
curately reproduce 3D granular ﬂows within simulation uncertainties over hundreds
of thousands of simulation timesteps, and most notably particles completely stay
within the geometric objects without using handcrafted conditions or restrictions."
INTRODUCTION,0.0072992700729927005,"1
INTRODUCTION"
INTRODUCTION,0.010948905109489052,"Deep learning (Krizhevsky et al., 2012) dramatically changed scientiﬁc ﬁelds such as computer
vision, natural language processing, or the medical sciences. More recently, deep learning research
has been expanded towards physical simulations such as ﬂuid dynamics, deformable materials, or
aerodynamics (Li et al., 2018; Ummenhofer et al., 2019; Sanchez-Gonzalez et al., 2020; Pfaff et al.,
2020). The progress of deep learning in physical simulations was often driven by Graph Neural
Networks (GNNs) (Scarselli et al., 2009; Defferrard et al., 2016; Kipf & Welling, 2017), which
proved effective when modeling interactions between many entities via forward dynamics (Battaglia
et al., 2018)."
INTRODUCTION,0.014598540145985401,"Here we want to focus on learning practically relevant granular ﬂow simulations. Granular ﬂows are
ubiquitous in nature and industrial processes. Pharmaceutical powders, plastic granulates, or rocks
obtained by mining are just some examples of granular media that are used in industries and which are
processed in a multitude of different ﬂow states. Consequently, simulations of granular ﬂow processes
are required for the design of many industrial processes. Such simulations allow the optimization of
devices and machinery in which particle ﬂow is essential. These simulations are needed for a wide
range of materials and material mixtures, which can have different cohesion or friction properties.
The utilized machines constitute the boundary conditions for the considered granular ﬂow processes.
Many conventional simulation approaches, that are based on a solid mathematical theory and which
take complex boundaries into account, model these boundaries by triangularizations. Therefore,
industrial machinery is often represented by triangular meshes, which can be considered a standard
geometric description in the engineering ﬁeld. Figure 1 exemplarily visualizes triangularized surfaces
for two standard components in industrial setups, namely a hopper (left) and a rotating drum (right)."
INTRODUCTION,0.01824817518248175,"In this work, we try to tackle the problem of accurately modeling granular processes when trian-
gularized boundary surfaces are present. We therefore suggest a simple extension of conventional
GNNs: Boundary Graph Neural Networks (BGNNs). BGNNs dynamically modify graph structures"
INTRODUCTION,0.021897810218978103,Under review as a conference paper at ICLR 2022
INTRODUCTION,0.025547445255474453,"to model interactions of particles and triangulated boundaries. This is achieved by inserting virtual
nodes, adding edges and modifying node and edge attributes."
INTRODUCTION,0.029197080291970802,"We test the effectiveness of BGNNs on complex 3D granular ﬂow simulations of hoppers and
rotating drums. The data for BGNN training is obtained by precise but potentially time-consuming
simulations. The accuracy of our BGNN models is measured via various aggregate quantities,
namely averaged particle positions, ﬂows, and mixing entropies. We ensure that our BGNN models
have high simulation quality by requiring high accuracy of the models in terms of these aggregate
quantities. BGNN predictions have the potential to be considerably faster than traditional granular
ﬂow simulation methods while keeping the same precision. Code, training and test data will be made
public upon publication."
INTRODUCTION,0.032846715328467155,The main contributions of this work are:
INTRODUCTION,0.0364963503649635,"• We introduce Boundary Graph Neural Networks (BGNNs), which dynamically modify
graph structures via boundary graph structures to allow an accurate modeling of particle
interactions with triangularized boundaries."
INTRODUCTION,0.040145985401459854,"• We implement BGNNs for learning complex 3D granular ﬂow simulations of hoppers and
rotating drums."
INTRODUCTION,0.043795620437956206,"• We assess the BGNN simulation quality via the difference of relevant physical quantities
between model predictions and simulations. We show that BGNNs are able to generalize
granular ﬂow dynamics over hundreds of thousands of timesteps while having the potential
to be considerably faster than state-of-the-art simulation methods."
INTRODUCTION,0.04744525547445255,"Figure 1: Triangularized boundary surfaces of the hopper (left) and the rotating drum (right). The
accurate description of rather simple, curved geometries requires a relatively large number of triangles
of different shapes and sizes."
BACKGROUND,0.051094890510948905,"2
BACKGROUND"
BACKGROUND,0.05474452554744526,"Dataset.
Due to the fact that there are no governing equations for granular ﬂow like the Navier-
Stokes equations for ﬂuid ﬂow (Faccanoni & Mangeney, 2013), a method similar to molecular
dynamics, the Discrete Element Method (DEM) (Cundall & Strack, 1979) is used for simulating
granular ﬂow. The key idea of DEM is to represent granular media by discrete particles (e.g.
spheres or polyhedra), which interact by exchanging momentum using established contact models.
LIGGGHTS (Kloss et al., 2012, see App. A) is an open-source DEM implementation, which is able
to simulate particle ﬂow for a wide range of materials and complex mesh-based wall geometries
and, which therefore enables the simulation of many industrial processes. Consequently, we used
LIGGGHTS to generate training, validation and test set simulation trajectories for granular ﬂow
within different hopper and rotating drum environments."
BACKGROUND,0.058394160583941604,"Time transition model.
We build our method upon Sanchez-Gonzalez et al. (2020) and use the
semi-implicit Euler method to numerically integrate the equations of motion using model-predicted
acceleration. The time-transition from time 푡to time 푡+ 1 is given by ¤x푡+1 = ¤x푡+ Δ푡¥x푡and
x푡+1 = x푡+ Δ푡¤x푡+1, where x is the particle location, and ¤x the particle velocity. To calculate the
time-transition x푡+1 the particle acceleration ¥x푡is predicted."
BACKGROUND,0.06204379562043796,Under review as a conference paper at ICLR 2022
BACKGROUND,0.06569343065693431,"Graph Neural Networks.
We consider graphs G = (V, E), with nodes 푣푖∈V and edges 푒푖푗∈E,
where 푁-dimensional node features p푣푖∈R푁are attached to each of the nodes. Whether the graph
G contains an edge between a pair of nodes (푣푖, 푣푗) depends on the distance between the nodes:"
BACKGROUND,0.06934306569343066,"푒푖푗∈E ⇐⇒푑(푣푖, 푣푗) ⩽cut-off,
(1)"
BACKGROUND,0.072992700729927,"where the cut-off radius is usually a hyperparamter of the model. Edges might have 푀-dimensional
edge features a푖푗∈R푀attached to each edge 푒푖푗. Graph networks are designed to learn from
graph-structured data (Scarselli et al., 2009; Kipf & Welling, 2017; Defferrard et al., 2016; Battaglia
et al., 2018). Message passing networks (Gilmer et al., 2017) are a speciﬁc type of graph neural
networks and usually consist of three different types of layers: node and edge feature embedding
layers, the core message passing layers, and read-out layers. Message passing iteratively updates the
embeddings of edges (m푖푗) and nodes (h푖), i.e., the embeddings of a푖푗and p푣푖, at edge 푒푖푗and node
푣푖via:"
BACKGROUND,0.07664233576642336,"m′
푖푗= 휙(h푖, h푗, m푖푗),
h′
푖= 휓

h푖, □푒푖푗∈E m′
푖푗

,
(2)"
BACKGROUND,0.08029197080291971,"where the aggregation □푒푖푗∈E at node 푣푖in Eq. (2) is across all nodes that are connected to node 푣푖
via an edge 푒푖푗. Typically □represents a mean or max operation. The learnable functions 휙and 휓
are commonly presented by Multilayer Perceptrons (MLPs). Equation (2) describes in a compact
form the computation and aggregation of messages, and the subsequent update of node embeddings.
The ﬁnal node embeddings are used for predictions via read-out layers."
BOUNDARY GRAPH NEURAL NETWORKS,0.08394160583941605,"3
BOUNDARY GRAPH NEURAL NETWORKS"
BOUNDARY GRAPH NEURAL NETWORKS,0.08759124087591241,"Boundary Graph Neural Networks.
We introduce Boundary Graph Neural Networks (BGNNs)
for modeling the time transition dynamics in simulations within complex geometries. In BGNNs,
each graph node 푣푖is associated to a particle with location x푣푖, velocity ¤x푣푖and acceleration ¥x푣푖,
which is similar to Sanchez-Gonzalez et al. (2020). BGNNs modify and enhance the graph structure
to include boundaries (see Fig. 2). BGNNs dynamically add ˜푛virtual nodes ˜푣푗∈˜
V for boundary
regions, iff the corresponding boundary region is within a cut-off radius to any other particle. We
augment the set of edges E by boundary edges ˜푒푖푗giving an enhanced edge set ˆE with 푒푖푗∈E and
˜푒푖푗∈˜E. Analogously to Eq. (1), the existence of particle-particle edges 푒푖푗and particle-boundary
edges ˜푒푖푗is determined via:"
BOUNDARY GRAPH NEURAL NETWORKS,0.09124087591240876,"푒푖푗∈E ⊆ˆE ⇐⇒푑(푣푖, 푣푗) ⩽cut-off푒,
(3)"
BOUNDARY GRAPH NEURAL NETWORKS,0.0948905109489051,"˜푒푖푗∈˜E ⊆ˆE ⇐⇒
˜푑(푣푖, ˜푣푗) ⩽cut-off ˜푒.
(4)"
BOUNDARY GRAPH NEURAL NETWORKS,0.09854014598540146,"Note, that the cut-off radii cut-off푒and cut-off ˜푒are not necessarily the same, and, 푑: V × V →R,
while ˜푑: V × ˜
V →R, i.e. bidirectional edges are used between real nodes and unidirectional edges
are used between real and virtual nodes."
BOUNDARY GRAPH NEURAL NETWORKS,0.10218978102189781,"In order to include more information about boundary surfaces into particle-boundary interactions,
˜푁-dimensional node features that encode information about the inclination of triangles in space are
concatenated with the existing node features p푣푖∈R푁. Additionally, coordinate information is used
both for existing nodes (X = {x푣0, . . . , x푣푛−1}) as well as for virtual nodes ( ˜X = { ˜x ˜푣0, . . . , ˜x ˜푣˜푛−1}).
For virtual nodes, the additional coordinates ˜x ˜푣푗are chosen such that they minimize the distance
between points from boundaries and real particles. The resulting set of node features ˆP and node
coordinates ˆX are:
ˆP = {p푣0, . . . , p푣푛−1, ˜p ˜푣0, . . . , ˜p ˜푣˜푛−1},
ˆX = {x푣0, . . . , x푣푛−1, ˜x ˜푣0, . . . , ˜x ˜푣˜푛−1} ,
(5)"
BOUNDARY GRAPH NEURAL NETWORKS,0.10583941605839416,"where ˆp푖∈R푁+ ˜푁and ˆx푖∈R3 denote the elements of ˆP and ˆX, respectively. Similarly to above,
message passing updates the embeddings of edges ( ˆm푖푗) and the embeddings of nodes (ˆh푖) via"
BOUNDARY GRAPH NEURAL NETWORKS,0.10948905109489052,"ˆm′
푖푗= ˆ휙

ˆh푖, ˆh푗, ˆm푖푗

,
ˆh′
푖= ˆ휓

ˆh푖, □ˆ푒푖푗∈ˆE ˆm′
푖푗

,
(6)"
BOUNDARY GRAPH NEURAL NETWORKS,0.11313868613138686,"where the aggregation □ˆ푒푖푗∈ˆE at node 푣푖in Eq. (6) is across all real or virtual nodes that are connected
to 푣푖via an edge ˆ푒푖푗. Similar to Gilmer et al. (2017) and Satorras et al. (2021), we make use of"
BOUNDARY GRAPH NEURAL NETWORKS,0.11678832116788321,Under review as a conference paper at ICLR 2022
BOUNDARY GRAPH NEURAL NETWORKS,0.12043795620437957,"Figure 2: Dynamic modiﬁcation of the graph edges (red lines) and nodes (red points).Left: Calculation
of the distance ˜푑(푣2, ˜푣0) between a real particle at node 푣2 and the triangle corresponding to virtual
particle node ˜푣0. Right: Insertion of an additional edge between ˜푣0 and 푣2 and representation of
the nodes in terms of the corresponding node features p푣푖, x푣푖and ˜p ˜푣푗, ˜x ˜푣푗for real and virtual node
features, respectively."
BOUNDARY GRAPH NEURAL NETWORKS,0.12408759124087591,"pairwise distances (
 ˆx푖−ˆx푗
2 and ˆx푖−ˆx 푗and deterministic functions thereof). These are for
BGNNs between real and between real and virtual particles and we pass this information to the graph
network as edge attributes ˆa푖푗, for which an initial edge embedding ˆm푖푗is determined via an edge
embedding layer. The ﬁnal node embeddings are used for the predictions via the read-out layers.
For aggregation □, we use the mean. The main challenges of the implementation of BGNNs are
the modiﬁcation of the graph structure towards a dynamic boundary graph structure to include
boundary information via the introduction of modiﬁed edges ˜푒푖푗, modiﬁed node features ˆp푖, and
coordinates for virtual nodes ˜x ˜푣푖. In the following section, we discuss how ˜푒푖푗, ˆp푖, and ˜x ˜푣푖are
calculated."
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.12773722627737227,"4
DYNAMIC BOUNDARY GRAPH STRUCTURE"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.13138686131386862,"A boundary graph structure, which is a dynamic modiﬁcation of the graph structure is needed for
two reasons: (i) A static graph structure, which inserts many particles (number proportional to the
surface area) for every boundary surface, may result in large computational costs in 3D scenes. (ii)
For certain time frames, only some parts of the mesh might be relevant and computations can be
saved. For example, as long as particles are in free fall in a container far away from the bottom, the
mesh part describing the bottom is irrelevant for the next time step."
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.13503649635036497,"One virtual particle is enough to describe particle boundary interactions.
Every particle “sees”
at most one virtual particle representing the boundary surface area, namely that particle which has the
shortest distance. Since interaction strength decreases continuously with the distance, it is ensured
that for every particle-boundary interaction that boundary point with the largest contribution is
considered. Table 1 shows average numbers of nodes
V
, as well as average numbers of boundary
edges
 ˜E
 and the relative increase in edges (ratio of the number of added wall edges to the total
number of particle edges). The scalability of BGNNs would suffer if more than one particle per
particle-boundary interaction surface was considered."
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.1386861313868613,"Table 1: Growth of the number of edges due to boundaries in the graph. The table shows statistics
across the training trajectories of non-cohesive particles in a standard setting in hopper and drum
experiments. For each trajectory the frame with maximum relative increase in the number of edges
due to virtual particles
 ˜E
E
 has been selected as a representative frame. This is done since we
are interested in the maximum effect additional virtual particles have on the memory requirements.
Number of particles
V
, number of additional virtual edges
 ˜E
, and % increase are listed."
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.14233576642335766,"Experiment
V

 ˜E

% increase"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.145985401459854,"Hopper
1113 ± 738
5475 ± 3547
72.2
Drum
3283 ± 282
1678 ± 188
54.8"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.14963503649635038,Under review as a conference paper at ICLR 2022
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.15328467153284672,A dynamic boundary graph structure is obtained in three stages:
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.15693430656934307,"• Calculating distances between real particles and triangular boundary surface areas in order
to decide if a virtual particle node needs to be inserted into the graph, and subsequently
obtain additional edges ˜푒푖푗
• Obtaining positional coordinates for virtual nodes ˜x ˜푣푗as representatives of the relevant
fraction of the triangular surface area ˜x ˜푣푗
• Modifying node features ˜p푖by including normal directions to facilitate the learning of
geometric relationships between particles and boundary surfaces"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.16058394160583941,"Modiﬁed edges ˜푒푖푗via calculation of distances to boundaries.
To obtain modiﬁed edges ˜푒푖푗,
boundary particles are dynamically inserted, but only if a real particle is close to the corresponding
boundary. The insertion of unnecessary edges into the graph is avoided. Such edges would connect
nodes of real and virtual particles, although they are far apart. To decide whether a virtual particle
has to be inserted requires the calculation of distances between pairs of real particles and mesh
triangles. Speciﬁcally, the squared distance between the particle center and the closest point on the
mesh triangles is calculated (adopted from (Eberly, 1999)). For this purpose, a location on a triangle
t is parametrized by two scalar values 푢and 푣∈R:"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.16423357664233576,"t(푢, 푣) = b + 푢e0 + 푣e1 ,"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.1678832116788321,"where 푢≥0, 푣≥0, and 푢+ 푣⩽1, b represents one of the nodes of the triangle, and, e0 and e1 are
vectors from b towards the other two nodes (see Fig. 3). The minimal Euclidean squared distance 푞
of the point p to the triangle is given by the optimization problem:"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.17153284671532848,"푑= min
푢,푣
푞(푢, 푣) = ∥t(푢, 푣) −p∥2
(7)"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.17518248175182483,"s.t.
푢≥0 , 푣≥0 , 푢+ 푣⩽1 ."
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.17883211678832117,"The minimizing arguments 푢′ and 푣′ parametrize the closest point t(푢′, 푣′) of the triangle to the point
p. As indicated in Fig. 3, seven cases have to be to distinguished: one case (c0) in which t(푢′, 푣′)
is located within the (closed) triangle, three cases (c1, c3, c5) in which t(푢′, 푣′) is located on one
edge of the triangle (including the edge corner points as special cases), and three cases (c2, c4, c6) in
which t(푢′, 푣′) is located on one of two edges (including the triangle corner points as special cases).
Whether a virtual particle is inserted is determined by Eq. (4) and the particle-triangle distance 푑. v"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.18248175182481752,"u
case 0"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.18613138686131386,case 1
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.1897810218978102,case 2
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.19343065693430658,case 3
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.19708029197080293,"case 4
case 5
case 6
1 1 e1 e0
b"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.20072992700729927,"q (u, v) = const"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.20437956204379562,"t (u, v)"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.20802919708029197,"∇q (u, v) = 0"
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.2116788321167883,"Figure 3: Visualization of point - triangle distance calculations in 3D. The triangle is represented
by a parameterized function t (푢, 푣) = b + 푢e0 + 푣e1 with 푢≥0, 푣≥0, 푢+ 푣⩽1 (indicated by
the orange area). Level sets of 푞(푢, 푣) are indicated by ellipses and describe the squared Euclidean
distance of a triangle point t (푢, 푣) to the point p, for which we compute the minimum distance."
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.21532846715328466,"Positional coordinates ˜x ˜푣푗for virtual nodes.
After having modiﬁed the edges ˜푒푖푗via the calcu-
lation of distances between real particles and triangular boundary surface areas, we now have to
decide where to place the virtual particles on these boundary surface areas. For virtual particles the
coordinates ˜x ˜푣푗correspond to t (푢′, 푣′), i.e., the closest points on the triangular boundary surface
areas with respect to the interacting real particle."
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.21897810218978103,Under review as a conference paper at ICLR 2022
DYNAMIC BOUNDARY GRAPH STRUCTURE,0.22262773722627738,"Modifying node features ˆ푝푖by including boundary normal directions.
Typical granular ﬂow
simulations comprise substantially more particle - particle interactions than particle - boundary
interactions, which may impede the learning of particle - boundary interactions. In Kipf et al. (2018)
the problem of qualitatively different interactions is addressed by introducing a dedicated message
generating network for each interaction type. We avoid such extensions of our model by means of the
following two approaches. First, we introduce additional node features, such that the neural network
is able to distinguish the different types of nodes. Second, we adapt the weight initialization of the
node feature embedding ˆ휓, such that the embedding network can be trained with larger values for the
additional features. Consequently, the network can learn different dynamics for particle - particle
and particle - boundary interactions. The additional node features are: (i) type feature, i.e., a binary
indicator of whether a node represents a particle that is real or virtual, and, in the latter case, (ii) the
components of the normal vector (see App. B for more information on an orientation-independent
representation of the normal vectors) of the triangular surface areas (null vectors for real particles)."
RELATED WORK,0.22627737226277372,"5
RELATED WORK"
RELATED WORK,0.22992700729927007,"There is a rich body of literature on applications of Deep Learning in the context of physics simulations.
Most notably related to BGNNs are the works of Sanchez-Gonzalez et al. (2020), Ummenhofer et al.
(2019), and, Li et al. (2018), all of which propose methods of learning particle simulations without
enforcing constraints. These approaches can be contrasted to works like Ladick`y et al. (2015) or
Schenck & Fox (2018) that utilize strong inductive biases. Ladick`y et al. (2015) construct features
for Random Forest Regression that are inﬂuenced by Smooth Particle Hydrodynamics (Gingold &
Monaghan, 1977; Lucy, 1977). Schenck & Fox (2018) construct a differentiable ﬂuid dynamics
network that is closely related to the Position Based Fluids method (Macklin & Müller, 2013).
Importantly, both methods are built on the assumption that the governing equations of the system are
known, which is typically not the case for granular ﬂow dynamics."
RELATED WORK,0.23357664233576642,"Complex mesh-based wall geometries have been employed to compute updates for nodes of the
mesh itself (Pfaff et al., 2020). In contrast, our simulator utilizes the mesh to represent static
boundaries in a highly efﬁcient way. We share the opinion of Sanchez-Gonzalez et al. (2020) that
the network architecture with continuous convolutions as suggested by Ummenhofer et al. (2019)
can be interpreted as GNNs. In doing so, a difference to Sanchez-Gonzalez et al. (2020) and our
work is that Ummenhofer et al. (2019) use static particles as special nodes in the ﬁrst message
passing step only. Consequently, the framework of Sanchez-Gonzalez et al. (2020), which is based
on Battaglia et al. (2018), appears to be the most general to us, performing well even without explicit
hierarchical clustering as suggested in DPI-Net (Li et al., 2018). Experiments of Sanchez-Gonzalez
et al. (2020) further suggest that their simulation of sand particles are superior to the implementation
of Ummenhofer et al. (2019). However, Sanchez-Gonzalez et al. (2020) only consider simple cuboid
boundaries for their 3D simulations, leaving more realistic complex geometries as an open and yet
untouched challenge. Furthermore, they use sampled, static particles to represent boundaries for 2D
simulations, which in general does not scale well for 3D simulations due to the quadratic increase of
boundary particles (square areas instead of lines)."
EXPERIMENTS,0.23722627737226276,"6
EXPERIMENTS"
EXPERIMENTS,0.24087591240875914,"We test the effectiveness of BGNNs on complex 3D granular ﬂow simulations. The development,
design, and construction of many mechanical devices is based on granular ﬂow simulations. These
devices can have very different geometries and must be designed for a wide range of materials with
highly varying properties. For example, cohesion properties can range from dry, wet, to oily. In the
simulations, we consider very common device geometries and different cohesion properties to cover a
wide range of situations with our available computational resources. The two common geometries are
hoppers and rotating drums (see Fig. 1, Fig. 4, and Fig. 5). The two different cohesion properties are
non-cohesive describing liquid-like, oily materials and cohesive describing dry, sand-like materials.
We compare the BGNN predictions to the simulations in two aspects: speed and accuracy."
EXPERIMENTS,0.24452554744525548,"Simulation Details.
For all experiments, gravitation acts along the 푧-direction. The upper part
of the hopper is delimited along the 푦-axis by two planes, which are parallel to the 푥-푧plane (see
Fig. 4). The 푥-axis is delimited by two planes, that are inclined at certain angles 훼, 180◦−훼to the"
EXPERIMENTS,0.24817518248175183,Under review as a conference paper at ICLR 2022
EXPERIMENTS,0.2518248175182482,"푥-푦plane and at corresponding angles 훼−90◦, 90◦−훼to the 푦-푧plane. The hopper has an initially
closed hole at the bottom, which has an adjustable radius. The rotation axis of the drum is the 푦-axis
(see Fig. 5). The initial ﬁlling of the hopper and drum is done by randomly inserting particles into
a predeﬁned region. More information can be found in App. C. We use around 1000 and around
3000 particles for hopper and rotating drum simulations, respectively. In order to have trajectories
with non-cohesive and cohesive particles, we use the simpliﬁed JKR model (Roessler & Katterfeld,
2019) with a cohesion energy density of 0 J/푚3 and 105 J/푚3 for non-cohesive and cohesive particles.
The training data consists of 30 simulation trajectories, where each trajectory consists of 100.000
(250.000) simulation timesteps for hopper (rotating drum). For BGNN training every 40 (100)-th
timestep is used. Trajectories have different angles 훼and different hole radii (hopper) and different
initial particle placement (drum). Moreover, the number of particles is varied by ±25%."
EXPERIMENTS,0.25547445255474455,"Implementation Details.
We use 5 message passing layers, with 128 and 512 nodes for interme-
diate node and edge representation. The cut-off radii strongly depend on the particle size. We use
cut-off radii of 0.02 and 0.008 for rotating drum and hopper, respectively. Cut-off radii have been
treated as hyperparameter of our model. More details can be found in App. C."
EXPERIMENTS,0.2591240875912409,"Assessment Of Physical Quantities.
Granular ﬂow simulations should correctly describe systems
on macroscopic scales in terms of particle-averaged positions ¯x(푡) and particle ﬂows ¯v(푡) for 푛
particles as a function of time: ¯x(푡) = 1"
EXPERIMENTS,0.26277372262773724,"푛
Í
푖x푖(푡) and ¯v(푡) = 1"
EXPERIMENTS,0.2664233576642336,"푛
Í
푖v푖(푡). Hoppers are devices that aim
at adjusting the ﬂow of particles along the direction of gravity, which coincides with the 푧-axis in
our experiments. Rotating drums are commonly utilized as mixing devices for various applications
in e.g. industry, research, and agriculture. They are essentially rotating cylinders that are partially
ﬁlled with a granular material. The mixing property of these devices is a result of numerous particle
interactions under time-varying boundary conditions. For rotating drum experiments, we quantify
the extend of particle mixing via the mixing entropy (Lai & Fan, 1975). If the z-coordinate of a
particle’s initial position x푖(0) is above (below) the median z-coordinate of all particles in the initial
state, we assign it to class 푐= +1 (−1). Based on this assignment local entropies 푠(g푘푙푚, 푡) at grid
cells g푘푙푚are calculated, where the indices 푘푙푚identify an individual grid cell. The local entropies
푠(g푘푙푚, 푡) are computed from particle counts 푛푐(g푘푙푚, 푡), of the respective classes 푐= ±1. The total
number of particles in a grid cell is obtained by 푛(g푘푙푚, 푡) = 푛+1(g푘푙푚, 푡) + 푛−1(g푘푙푚, 푡). Calculating
the particle-number weighted average of the local mixing entropies yields the mixing entropy S(푡) of
the entire system:"
EXPERIMENTS,0.27007299270072993,"S(푡) =
−1
Í"
EXPERIMENTS,0.2737226277372263,"푘푙푚
푛(g푘푙푚, 푡) Õ 푘푙푚 Õ"
EXPERIMENTS,0.2773722627737226,"푐=±1
푛(g푘푙푚, 푡)   푓푐(g푘푙푚, 푡) log 푓푐(g푘푙푚, 푡),
(8)"
EXPERIMENTS,0.28102189781021897,"where 푓푐(g푘푙푚, 푡) denotes the relative fraction of class 푐particles in cell g푘푙푚at time 푡."
EXPERIMENTS,0.2846715328467153,"Results.
In Fig. 4 and Fig. 5 results for the hopper and the rotating drum simulations are presented.
The left parts visualize granular ﬂow snapshots at different time steps, both for cohesive and non-
cohesive materials. The right parts of the ﬁgures include average position and particle ﬂow plots
for hopper, as well as particle ﬂow and mixing entropy plots for rotating drum simulations. The
simulation uncertainties arise due to the different distributions of the initial ﬁlling and due to a ±25%
variation in the number of particles across simulations. Short video clips of the trajectories are added
as supplement. The difference between cohesive and non-cohesive particles is evident."
EXPERIMENTS,0.28832116788321166,"BGNNs have learned to model granular ﬂow simulations over thousands of time steps. Most notably,
hardly any particle leaves the geometric boundaries. This is achieved without using handcrafted
conditions or restrictions on the positions of the particles. Furthermore, BGNNs have learned to
model particle-boundary interactions and in doing so correctly represent the dynamics within the
system. The predicted quantities are within uncertainties of the simulations. Therefore, we consider
the BGNN predictions as sufﬁciently precise to substitute the simulations. Figure 6 shows out-of-
distribution (OOD) scenarios, where the devices are changed with respect to the training data. The
hole size of the hopper is decreased in mean by ∼50%, while side wall inclination angles have been
increased by ∼15°. For the drum the length of the corresponding cylinder was increased in mean
by ∼50%. Our experiments show that our model generalizes well across variations in the geometry.
This ﬁnding demonstrates that trained BGNNs could be used in the design process of a device to
study variations of geometries without retraining the model."
EXPERIMENTS,0.291970802919708,Under review as a conference paper at ICLR 2022
EXPERIMENTS,0.2956204379562044,"Table 2 gives a run-time comparison of the LIGGGHTS simulation versus a forward pass of BGNNs,
which only predict every 100 time steps. The highly optimized CPU algorithm (LIGGGHTS) and a
non-optimized GPU compatible algorithm (BGNNs) are compared via their wall-clock times since
the hardware settings are quite different. Nevertheless, Tab. 2 shows that the wall-clock time of
BGNNs is shorter than the wall-clock time of the simulation. The usage of more particles, would
further increase the lead of BGNNs over the simulation in terms of wall-clock time. For the time
comparison, we use a typical simulation trajectory from our datasets with 3,408 particles, which
needs approximately 2 GB GPU memory for one forward pass. There is potentially even more
space for improvement of the BGNN predictions over simulations due to the so called Young’s
modulus. For simulations, it is often assumed that energy is purely transmitted through Rayleigh
waves. Thus the time step of DEM simulations is targeted to be a fraction of the propagation time
through a single, solid particle. As such the propagation time depends on material parameters, most
notably the Young’s modulus. However, for several materials the Young’s moduli that reﬂect the
true material properties, would lead to extremely small propagation times, which in turn means
much more simulation steps. Consequently, much smaller Young’s moduli are considered as an
approximation, which is valid for gravity driven ﬂows (Coetzee, 2017). However, for many cases, e.g.
the penetration of a particle bed by an object, this approximation breaks down (Lommen et al., 2014).
BGNNs have the potential to be trained on very small time steps reﬂecting the true Young’s moduli
and consequently generalize over much more than “just” 40 or 100 time steps."
EXPERIMENTS,0.29927007299270075,"Table 2: Runtime comparison for one granular ﬂow process consisting of 250.000 simulation
timesteps, which are 2500 BGNN predictions."
EXPERIMENTS,0.3029197080291971,"method
device
speciﬁcation
time steps
wall-clock time [푠]"
EXPERIMENTS,0.30656934306569344,"LIGGGHTS
CPU
AMD EPYC 7H12
1
356
BGNNs
GPU
NVIDIA A100
100
158"
EXPERIMENTS,0.3102189781021898,"hopper cohesive
hopper non-cohesive
prediction
ground truth
prediction
ground truth Time"
EXPERIMENTS,0.31386861313868614,"Figure 4: Hopper dynamics. Left: Distributions for cohesive and non-cohesive particles. Simulation
data and BGNN predictions are compared. Particles are indicated by green spheres, triangular wall
areas are yellow, the edges of these triangles are indicated by grey lines. In contrast to liquid-like
non-cohesive particles, cohesive particles lead to congestion of the hopper. Right: Position (upper
right) and ﬂow proﬁle (lower right) for non-cohesive particles. Corresponding plots for cohesive
particles can be found in App. C. Simulation data (solid lines) and BGNN predictions (dashed lines)
are compared. Simulation uncertainties are due to a change of the particle numbers (±25%) and to
different initial conditions. To support the reviewing process, we provide simulation predictions for a
hopper with more timesteps in animations at https://bgnn3dsim.bitbucket.io/."
EXPERIMENTS,0.3175182481751825,Under review as a conference paper at ICLR 2022
EXPERIMENTS,0.32116788321167883,"rotating drum cohesive
rotating drum non-cohesive
prediction
ground truth
prediction
ground truth Time"
EXPERIMENTS,0.3248175182481752,"Figure 5: Rotating drum dynamics. Left: Particle distributions for cohesive and non-cohesive
particles. Simulation data and BGNN predictions are compared. Particles are indicated by green
spheres, triangular wall areas are yellow, the edges of these triangles are indicated by grey lines. The
circular arrow indicates the rotation direction of the drum. In contrast to liquid-like non-cohesive
particles, cohesive particles stick together much stronger. Right: position (upper right) and entropy
plot (lower right) for non-cohesive particles. The entropy is shown for particle class assignment
according to the x (blue) and z (red) position. Corresponding plots for cohesive particles can be
found in App. C. Simulation data (solid lines) and BGNN predictions (dashed lines) are compared.
Simulation uncertainties are due to a change of the particle numbers (±25%) and to different initial
conditions. To support the reviewing process, we provide simulation predictions for a rotating drum
with more timesteps in animations at https://bgnn3dsim.bitbucket.io/."
CONCLUSION AND FUTURE DIRECTIONS,0.3284671532846715,"7
CONCLUSION AND FUTURE DIRECTIONS"
CONCLUSION AND FUTURE DIRECTIONS,0.33211678832116787,"OOD hopper non-cohesive
OOD drum non-cohesive
prediction
ground truth
prediction
ground truth Time"
CONCLUSION AND FUTURE DIRECTIONS,0.3357664233576642,"Figure 6: OOD generalization behavior for the hop-
per (left) and the rotating drum (right). In contrast
to the training and validation data the outlet size of
the hopper was decreased, the inclination angles of
the hopper side walls are enlarged, and, the length
of the rotating drum is increased."
CONCLUSION AND FUTURE DIRECTIONS,0.33941605839416056,"We have introduced Boundary Graph Neural
Networks (BGNNs) in order to achieve an ac-
curate neural network modeling of simulated
physical processes with complex geometries.
BGNNs dynamically modify graph structures
via modifying edges, augmenting node features,
and dynamically inserting virtual nodes. We
have tested BGNNs on complex 3D granular
ﬂow processes of hoppers and rotating drums,
where BGNNs are able to accurately reproduce
these ﬂows within simulation uncertainties over
hundreds of thousands of timesteps. Most no-
tably particles stay within the geometric objects
without using handcrafted conditions or restric-
tions. However, it should be mentioned that
successful simulations often require precise hy-
perparameter tuning. So far we have not inves-
tigated materials with high Young’s moduli, and
thus we have not yet tested the full generaliza-
tion properties of BGNNs for such scenarios as
described in Sec. 6. Another interesting exten-
sion of our work might be to introduce a velocity dependent cut-off radius, and in doing so to also
consider those interactions which are going to happen within the next timesteps although the spatial
distance for particles and respective boundaries is still large."
CONCLUSION AND FUTURE DIRECTIONS,0.34306569343065696,Under review as a conference paper at ICLR 2022
REPRODUCIBILITY STATEMENT,0.3467153284671533,"8
REPRODUCIBILITY STATEMENT"
REPRODUCIBILITY STATEMENT,0.35036496350364965,"Nearly all data used in this work is generated by ourselves. The generalization properties strongly
depend on the variability of the training samples since we used a limited number of training samples
due to computational reasons. We made sure to keep track of the used parameters to be able to
reproduce these datasets. To support the reviewing process, we provide simulation predictions for a
hopper with more timesteps in animations at https://bgnn3dsim.bitbucket.io/"
REPRODUCIBILITY STATEMENT,0.354014598540146,"We have included error bars and uncertainty estimates wherever we found it necessary and appropriate.
For example, for the hopper and drum example, we considered simulation uncertainties. We selected
hyperparameters based on a separate validation set. Besides noise terms for the sack of regularization,
one might fairly similar models if applying the same training and hyperparameter selection procedure.
We have described our architecture and implementation details in Appendix C. We have further
provided supporting concepts and experiments in the appendix. For reproducibility, we plan to
provide our code upon acceptance."
REPRODUCIBILITY STATEMENT,0.35766423357664234,"For reproducibility, we plan to provide our code upon acceptance."
ETHICAL STATEMENT,0.3613138686131387,"9
ETHICAL STATEMENT"
ETHICAL STATEMENT,0.36496350364963503,"BGNNs might serve as a valuable tool to obtain speedups for the simulation of industrial processes.
However, models obtained, may strongly depend on the variability of the training data. Although we
performed some OOD experiments, that showed that our models might still perform well under certain
geometric aberrations, it is quite clear that a single model will not be able to properly predict the
ﬂow dynamics of any arbitrary conceivable granular ﬂow setups without ensuring that this behaviour
might have been successfully derived from the limited training data. Therefore, the employment of
BGNNs needs careful validation wrt. the speciﬁc application in mind."
REFERENCES,0.3686131386861314,REFERENCES
REFERENCES,0.3722627737226277,"J.L. Ba, J.R. Kiros, and G.E. Hinton. Layer normalization. arXiv preprint arXiv:1607.06450, 2016."
REFERENCES,0.3759124087591241,"P.W. Battaglia, J.B. Hamrick, V. Bapst, A. Sanchez-Gonzalez, V.F. Zambaldi, M. Malinowski,
A. Tacchetti, D. Raposo, A. Santoro, R. Faulkner, Ç. Gülçehre, H.F. Song, A.J. Ballard, J. Gilmer,
G.E. Dahl, A. Vaswani, K.R. Allen, C. Nash, V. Langston, C. Dyer, N. Heess, D. Wierstra, P. Kohli,
M. Botvinick, O. Vinyals, Y. Li, and R. Pascanu. Relational inductive biases, deep learning, and
graph networks. arXiv preprint arXiv:1806.01261, 2018."
REFERENCES,0.3795620437956204,"N. Bonneel, M. van de Panne, S. Paris, and W. Heidrich. Displacement interpolation using lagrangian
mass transport. 30(6):1–12, December 2011. ISSN 0730-0301. doi: 10.1145/2070781.2024192."
REFERENCES,0.38321167883211676,"C.J. Coetzee. Calibration of the discrete element method. Powder Technology, 310:104–142, 2017."
REFERENCES,0.38686131386861317,"P.A. Cundall and O.D.L. Strack. A discrete numerical model for granular assemblies. Geotechnique,
29(1):47–65, 1979."
REFERENCES,0.3905109489051095,"M. Defferrard, X. Bresson, and P. Vandergheynst. Convolutional neural networks on graphs with fast
localized spectral ﬁltering. In D. Lee, M. Sugiyama, U. Luxburg, I. Guyon, and R. Garnett (eds.),
Advances in Neural Information Processing Systems, volume 29. Curran Associates, Inc., 2016."
REFERENCES,0.39416058394160586,"D. Eberly.
Distance between point and triangle in 3d.
Retrieved from http://www.magic-
software.com/Documentation/pt3tri3.pdf, 1999."
REFERENCES,0.3978102189781022,"G. Faccanoni and A. Mangeney. Exact solution for granular ﬂows. International Journal for
Numerical and Analytical Methods in Geomechanics, 37(10):1408–1433, 2013."
REFERENCES,0.40145985401459855,"R. Flamary and N. Courty. Pot python optimal transport library, 2017. URL https://pythonot.
github.io/."
REFERENCES,0.4051094890510949,"J. Gilmer, S.S. Schoenholz, P.F. Riley, O. Vinyals, and G.E. Dahl. Neural message passing for
quantum chemistry. In International Conference on Machine Learning, pp. 1263–1272. PMLR,
2017."
REFERENCES,0.40875912408759124,Under review as a conference paper at ICLR 2022
REFERENCES,0.4124087591240876,"R.A. Gingold and J.J. Monaghan. Smoothed particle hydrodynamics: theory and application to
non-spherical stars. Monthly Notices of the Royal Astronomical Society, 181(3):375–389, 12
1977. ISSN 0035-8711. doi: 10.1093/mnras/181.3.375. URL https://doi.org/10.1093/
mnras/181.3.375."
REFERENCES,0.41605839416058393,"K. He, X. Zhang, S. Ren, and J. Sun. Delving deep into rectiﬁers: Surpassing human-level perfor-
mance on imagenet classiﬁcation. In Proceedings of the 2015 IEEE International Conference on
Computer Vision (ICCV), pp. 1026–1034, 2015."
REFERENCES,0.4197080291970803,"K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. In Proceedings
of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), June 2016."
REFERENCES,0.4233576642335766,"W. Kahan. Pracniques: further remarks on reducing truncation errors. Communications of the ACM,
8(1):40, 1965."
REFERENCES,0.42700729927007297,"D.P. Kingma and J.L. Ba. Adam: A method for stochastic gradient descent. pp. 1–15, 2015."
REFERENCES,0.4306569343065693,"T. Kipf and M. Welling. Semi-supervised classiﬁcation with graph convolutional networks. In
International Conference on Learning Representations (ICLR), 2017."
REFERENCES,0.4343065693430657,"T. Kipf, E. Fetaya, K.C. Wang, M. Welling, and R. Zemel. Neural relational inference for interacting
systems. In International Conference on Machine Learning, pp. 2688–2697. PMLR, 2018."
REFERENCES,0.43795620437956206,"A. Klein. A generalized kahan-babuška-summation-algorithm. Computing, 76(3-4):279–293, 2006."
REFERENCES,0.4416058394160584,"C. Kloss, C. Goniva, A. Hager, S. Amberger, and S. Pirker. Models, algorithms and validation
for opensource dem and cfd-dem. Progress in Computational Fluid Dynamics, An International
Journal, 12(2/3):140, 2012. ISSN 1468-4349."
REFERENCES,0.44525547445255476,"C. Kloss, A. Aigner, A. Mayrhofer, and C. Goniva. fastdem: A method for faster dem simulations of
granular media. In Particles 2017, 2017."
REFERENCES,0.4489051094890511,"A. Krizhevsky, I. Sutskever, and G.E. Hinton. Imagenet classiﬁcation with deep convolutional neural
networks. Advances in Neural Information Processing Systems, 25:1097–1105, 2012."
REFERENCES,0.45255474452554745,"L. Ladick`y, S. Jeong, B. Solenthaler, M. Pollefeys, and M. Gross. Data-driven ﬂuid simulations using
regression forests. ACM Transactions on Graphics (TOG), 34(6):1–9, 2015."
REFERENCES,0.4562043795620438,"F.S. Lai and L.T. Fan. Application of a discrete mixing model to the study of mixing of multicompo-
nent solid particles. Industrial & Engineering Chemistry Process Design and Development, 14(4):
403–411, 1975. doi: 10.1021/i260056a009."
REFERENCES,0.45985401459854014,"Y. Li, J. Wu, R. Tedrake, J.B. Tenenbaum, and A. Torralba. Learning particle dynamics for manipu-
lating rigid bodies, deformable objects, and ﬂuids. arXiv preprint arXiv:1810.01566, 2018."
REFERENCES,0.4635036496350365,"S. Lommen, D. Schott, and G. Lodewijks. Dem speedup: Stiffness effects on behavior of bulk
material. Particuology, 12:107–112, 2014."
REFERENCES,0.46715328467153283,"L.B. Lucy. A numerical approach to the testing of the ﬁssion hypothesis. Astronomical Journal, 82:
1013–1024, December 1977. doi: 10.1086/112164."
REFERENCES,0.4708029197080292,"M. Macklin and M. Müller. Position based ﬂuids. ACM Transactions on Graphics (TOG), 32(4):
1–12, 2013."
REFERENCES,0.4744525547445255,"J. Mellmann, K.L. Iroba, T. Metzger, E. Tsotsas, C. Mészáros, and I. Farkas. Moisture content and
residence time distributions in mixed-ﬂow grain dryers. Biosystems Engineering, 109(4):297–307,
2011."
REFERENCES,0.4781021897810219,"V. Nair and G.E. Hinton. Rectiﬁed linear units improve restricted boltzmann machines. In Interna-
tional Conference on Machine Learning, pp. 807–814, 2010."
REFERENCES,0.48175182481751827,"T. Pfaff, M. Fortunato, A. Sanchez-Gonzalez, and P.W. Battaglia. Learning mesh-based simulation
with graph networks, 2020."
REFERENCES,0.4854014598540146,Under review as a conference paper at ICLR 2022
REFERENCES,0.48905109489051096,"S. Plimpton. Fast parallel algorithms for short-range molecular dynamics. Journal of computational
physics, 117(1):1–19, 1995."
REFERENCES,0.4927007299270073,"T. Roessler and A. Katterfeld. Dem parameter calibration of cohesive bulk materials using a simple
angle of repose test. Particuology, 45:105–115, 2019."
REFERENCES,0.49635036496350365,"A. Sanchez-Gonzalez, J. Godwin, T. Pfaff, R. Ying, J. Leskovec, and P. Battaglia. Learning to simulate
complex physics with graph networks. In Proceedings of the 37th International Conference on
Machine Learning, volume 119, pp. 8459–8468, 2020."
REFERENCES,0.5,"V.G. Satorras, E. Hoogeboom, and M. Welling. E (n) equivariant graph neural networks. arXiv
preprint arXiv:2102.09844, 2021."
REFERENCES,0.5036496350364964,"F. Scarselli, M. Gori, A.C. Tsoi, M. Hagenbuchner, and G. Monfardini. The graph neural network
model. IEEE Transactions on Neural Networks, 20(1):61–80, 2009."
REFERENCES,0.5072992700729927,"C. Schenck and D. Fox. Spnets: Differentiable ﬂuid dynamics for deep neural networks. In Conference
on Robot Learning, pp. 317–335. PMLR, 2018."
REFERENCES,0.5109489051094891,"B. Ummenhofer, L. Prantl, N. Thuerey, and V. Koltun. Lagrangian ﬂuid simulation with continuous
convolutions. In International Conference on Learning Representations, 2019."
REFERENCES,0.5145985401459854,Under review as a conference paper at ICLR 2022
REFERENCES,0.5182481751824818,"A
DISCRETE ELEMENT METHOD (DEM) SIMULATOR LIGGGHTS"
REFERENCES,0.5218978102189781,"The open source DEM software LIGGGHTS (Kloss et al., 2012) is based on the Molecular Dynamics
code LAMMPS (Plimpton, 1995) developed by Sandia National Labs. Due to the similarity of the
underlying algorithms for neighbor list construction, output and parallelism this provided a stable
basis for the contact models required for DEM. LIGGGHTS added support for triangular mesh walls,
particle insertion and new particle shapes (multispheres and superquadrics). Several of those changes
resulted in upstream contributions in LAMMPS."
REFERENCES,0.5255474452554745,"Over the years LIGGGHTS has become a widely used software in both academia and industry
that supports both cutting edge research and industrial applications. Support for several physical
phenomena as, e.g. liquid transfer on particles, was instrumental in its success. However, it also
highlighted requirements for additional research. In industrial applications there often is the need to
study physical phenomena which occur on different time scales, e.g. particle collisions (O(10−5푠)) vs.
moisture content in particles (O(1푠), (Mellmann et al., 2011)), which can lead to weeks of simulation
time. While advances have been made to overcome such issues (e.g. (Kloss et al., 2017)), they remain
limited in their application, due to the fact that they rely on prior simulation of the exact setup and
cannot be used for interpolation of quantities directly related to the ﬂow behavior."
REFERENCES,0.5291970802919708,"In 2019 LIGGGHTS was again forked and forms the basis of the commercial DEM software
Aspherix® which expands the capabilities of LIGGGHTS with polyhedral particles, a signiﬁcantly
simpliﬁed input language and graphical user interface."
REFERENCES,0.5328467153284672,"B
NORMAL VECTOR REPRESENTATIONS"
REFERENCES,0.5364963503649635,"There is an ambiguity in the representation of planes via normal vectors due to the two possible
orientations of the normal vectors, which correspond to the same geometry. In general, there are
two possibilities of including normal vector information into the model: (i) encoding always that
triangle plane normal vector which always points towards or away from the corresponding particle,
(ii) including positively and negatively oriented versions of the normal vector, and order them. We
decided for option (ii) since pathological cases where the particle is in the same plane as the triangle
are avoided and training is further stabilized. In doing so, we have to deal with the fact that the network
predictions should be invariant with respect to the orientation of the normal vectors. Therefore, we
deﬁne a partial ordering which is able to sort the normal vectors with respect to their orientations.
For a given normal vector n = (푛1, 푛2, 푛3) ∈R3, we use the following partial order function"
REFERENCES,0.5401459854014599,"푓표(n) = 3
Õ"
REFERENCES,0.5437956204379562,"푖=1
3푖−1 (sgn (푛푖) + 1)
(B.1)"
REFERENCES,0.5474452554744526,"to retrieve the scalar values 푓표(n) and 푓표(−n) and sort the two vectors according to their correspond-
ing mapped values. Different sign combinations of the normal vectors are shown in App. Fig. B.1. To
test the performance of our approach, we conduct a toy experiment as well as a simulation experiment
with different representations of normal vectors. We describe both experiments in App. B.1 and
App. B.2."
REFERENCES,0.551094890510949,"B.1
REFLECTION TOY EXAMPLE"
REFERENCES,0.5547445255474452,"We conduct a toy experiment to showcase that a partial ordering of normal vectors is helpful for
learning 3D simulations. In detail, we consider reﬂection (푅푒푓) at a plane n as given by"
REFERENCES,0.5583941605839416,푅푒푓n (v) = v −2 v · n
REFERENCES,0.5620437956204379,"n · nn ,
(B.2)"
REFERENCES,0.5656934306569343,"and try to learn the reﬂection formula by a simple ReLU network, which takes the 3 components of
n and v as input features and predicts the 3 components of 푅푒푓n (v). The training data consists of
reﬂections at four ﬁxed walls: the top, the bottom, the left, and, the right side of a simple cube."
REFERENCES,0.5693430656934306,"We use normal vectors of these walls, that point towards the inner of the cube. When evaluating the
performance of the trained models, we observe decent predictions, if the orientation of the normal
vectors describing the inclination of the walls was equal to the training data (see R1-R4 in Fig. B.2).
However, for inverted normal vectors in the test set, only networks which take a partial ordering of
the normal vectors into account predict the reﬂection correctly (see R3, R4 in Fig. B.3)."
REFERENCES,0.572992700729927,Under review as a conference paper at ICLR 2022
REFERENCES,0.5766423357664233,+1/−1/−1
REFERENCES,0.5802919708029197,+1/−1/+1
REFERENCES,0.583941605839416,−1/+1/−1
REFERENCES,0.5875912408759124,−1/+1/+1
REFERENCES,0.5912408759124088,−1/−1/+1
REFERENCES,0.5948905109489051,+1/+1/−1
REFERENCES,0.5985401459854015,+1/+1/+1
REFERENCES,0.6021897810218978,−1/−1/−1
REFERENCES,0.6058394160583942,"−1/0/+1
0/+1/+1
+1/0/+1
0/−1/+1"
REFERENCES,0.6094890510948905,"0/+1/−1
0/−1/−1
−1/0/−1
+1/0/−1"
REFERENCES,0.6131386861313869,+1/+1/0
REFERENCES,0.6167883211678832,−1/+1/0
REFERENCES,0.6204379562043796,+1/−1/0
REFERENCES,0.6240875912408759,−1/−1/0
REFERENCES,0.6277372262773723,0/0/+1
REFERENCES,0.6313868613138686,0/0/−1
REFERENCES,0.635036496350365,0/+1/0
REFERENCES,0.6386861313868614,−1/0/0
REFERENCES,0.6423357664233577,+1/0/0
REFERENCES,0.6459854014598541,0/−1/0
REFERENCES,0.6496350364963503,"Figure B.1: Partial ordering of normal vectors. The numbers indicate the signs of normal vector
components, which are used in the partial order function. The ﬁgures from left to right visualize
different (ordered) sign combinations. Sets of sign combinations without zero values form volumes
(left), sets with one zero value form planar areas (middle), and sets with two zero values form line
sections (right). The 0/0/0 combination forms a point at the origin."
REFERENCES,0.6532846715328468,"B.2
SIMULATION EXPERIMENT"
REFERENCES,0.656934306569343,"We compare three different versions of how to include normal vector information for the hopper
particle ﬂow experiments:"
REFERENCES,0.6605839416058394,"• not including normal vector information, and ﬁlling six node features up with zero entries
instead (V1)"
REFERENCES,0.6642335766423357,"• including single normal vector orientation, which is given by the triangle corner point order
of the mesh (V2)"
REFERENCES,0.6678832116788321,• including both normal vector orientations (six features) (V3).
REFERENCES,0.6715328467153284,"From an information perspective, it should be noted that (i) distance information (scalar distance and
distance vectors) to the walls is present in the edge features of the graph and (ii) in most cases the
used normal vectors are oriented towards the outside of relevant border walls."
REFERENCES,0.6751824817518248,"The different particle distribution trajectories obtained by the three versions are compared by comput-
ing the Earth Movers distances (Bonneel et al., 2011; Flamary & Courty, 2017, EMD) of predicted
and simulated trajectories. We use Euclidean distances for the cost matrix, which we compute at time
steps 20, 21, · · · , 216 for 5 training trajectories and 5 test trajectories. Table B.1 shows the means (휇)
and standard deviations (휎) of EMD values at different time steps and from 5 different training and
test trajectories. A paired Wilcoxon test on the concatenated trajectories, shows that V3 signiﬁcantly
outperforms V1 (p-value 2.42e-04) and V2 (p-value 1.50e-03) on the test data."
REFERENCES,0.6788321167883211,"Interestingly, there is less signiﬁcance on the training data, which might indicate that the usage of
orientation-independent features to represent walls, helps to improve generalization performance,
while it might not be that helpful for optimization purposes alone."
REFERENCES,0.6824817518248175,"Table B.1: Usage of different normal vector information in hopper particle ﬂow experiment. The
table summarizes means (휇) and standard deviations (휎) of the EMD for the different versions and
shows the results of a paired Wilcoxon test."
REFERENCES,0.6861313868613139,Version
REFERENCES,0.6897810218978102,"Train
Test"
REFERENCES,0.6934306569343066,"휇
휎
p-value"
REFERENCES,0.6970802919708029,"Row < V3
휇
휎
p-value"
REFERENCES,0.7007299270072993,Row < V3
REFERENCES,0.7043795620437956,"V1
No normal vector
5.06e-05
1.17e-04
2.36e-02
6.80e-05
1.59e-04
2.42e-04
V2
Single normal vector
1.15e-04
3.84e-04
3.40e-03
1.21e-04
4.33e-04
1.50e-03
V3
Both orientations
5.99e-05
1.77e-04
6.36e-05
2.06e-04"
REFERENCES,0.708029197080292,Under review as a conference paper at ICLR 2022
REFERENCES,0.7116788321167883,ground truth: n
REFERENCES,0.7153284671532847,wall normal vectors
REFERENCES,0.718978102189781,incident rays
REFERENCES,0.7226277372262774,reﬂected rays
REFERENCES,0.7262773722627737,predicted reﬂected rays
REFERENCES,0.7299270072992701,"R1: n
R2: n, −n"
REFERENCES,0.7335766423357665,"R3:

n
if fo (n) ⩽fo (−n)
−n
otherwise
R4:

n, −n
if fo (n) ⩽fo (−n)
−n, n
otherwise"
REFERENCES,0.7372262773722628,"Figure B.2: Reﬂection of rays at four different walls (left, right, bottom, top). Wall normal vectors are
visualized by bold orange arrows. The incident rays are visualized by blue arrows, reﬂected rays by
green arrows, and neural network predictions by red arrows. Neural network predictions are based on
wall representations that are oriented the same way as in the training phase. The caption above
each plot indicates the wall input features used for training each of the networks."
REFERENCES,0.7408759124087592,Under review as a conference paper at ICLR 2022
REFERENCES,0.7445255474452555,ground truth: −n
REFERENCES,0.7481751824817519,wall normal vectors
REFERENCES,0.7518248175182481,incident rays
REFERENCES,0.7554744525547445,reﬂected rays
REFERENCES,0.7591240875912408,predicted reﬂected rays
REFERENCES,0.7627737226277372,"R1: −n
R2: −n, n"
REFERENCES,0.7664233576642335,"R3:

−n
if fo (−n) ⩽fo (n)
n
otherwise
R4:

−n, n
if fo (−n) ⩽fo (n)
n, −n
otherwise"
REFERENCES,0.7700729927007299,"Figure B.3: Reﬂection of rays at four different walls (left, right, bottom, top). Wall normal vectors
are visualized by bold orange arrows. The incident rays are visualized by blue arrows, reﬂected rays
by green arrows, and neural network predictions by red arrows. Neural network predictions are based
on wall representations that are inversely oriented compared to the training phase. The caption
above each plot indicates the wall input features used for training each of the networks."
REFERENCES,0.7737226277372263,Under review as a conference paper at ICLR 2022
REFERENCES,0.7773722627737226,"C
EXPERIMENTS"
REFERENCES,0.781021897810219,"C.1
SIMULATION DETAILS"
REFERENCES,0.7846715328467153,"Hopper
The initialization consists of two phases. In a ﬁrst step, particles are randomly inserted
into a small cuboid which is positioned at a certain height above the closed hole of the hopper. This
cuboid is continuously ﬁlled with particles during the initialization phase and afterwards particles
freely move downwards (along the direction of gravity). In this way, the hopper is ﬁlled up to a
certain height with 20,000 particles. In a second phase, we cut out particles from the ﬁlled mass of
particles. We do this (i) by applying randomly selected functions and by (ii) randomly ﬁltering out
particles from the whole particle mass. The randomly selected functions are e.g. hyperplanes, where
we only keep particles if they are at the same side of the hyperplane. The inserted particles have a
radius of 0.002 m."
REFERENCES,0.7883211678832117,"Drum
For initialization we assume that the direction of gravity is different than the usual gravitation
direction. We insert particles at two random ﬁxed regions within the drum. After the particles are
inserted, they can move according to the gravitation direction during the initialization phase. In this
way, we obtain different initial particle distributions within the drum. The inserted particles have a
radius of 0.01 m."
REFERENCES,0.791970802919708,"C.2
IMPLEMENTATION DETAILS"
REFERENCES,0.7956204379562044,"Graph Neural Network
Raw inputs to our graph networks are initial particle positions and the
particle positions from the 5 previous frames of the simulations. From these positions velocities are
computed. Further inputs include the particle type and the coordinates of the triangle mesh of the
respective time frame. We use residual connections (He et al., 2016) for both node and edge updates.
For both updates, we use simple two-layer MLP networks, ReLUs (Nair & Hinton, 2010) after the
ﬁrst layer, and layer normalization (Ba et al., 2016) without an additional activation after the second
layer. For layer normalization we consider the 휖-parameter as a hyperparameter and set it to 1.0.
The networks for input embedding and read-out are similar to the message passing layers without
layer normalization. The network weights are initialized similar to He et al. (2015); for the input
embeddings we assume an increased number of input neurons for fan_in, where we consider the
additional neurons as virtual copies of e.g. the wall indication feature in order to be able to upweight
the inﬂuence of these features. We use the mean-squared error as an objective and train with Adam
optimization (Kingma & Ba, 2015). In order to facilitate learning, we provide as hyperparameter
options not only
 ˆx푖−ˆx푗
2, ˆx푖−ˆx푗as features to the network, but also
1
∥ˆx푖−ˆx 푗∥,
ˆx푖−ˆx 푗
∥ˆx푖−ˆx 푗∥
2 and"
REFERENCES,0.7992700729927007,"1
∥ˆx푖−ˆx 푗∥
2 ,
ˆx푖−ˆx 푗
∥ˆx푖−ˆx 푗∥
3 reﬂecting the inverse distance law and the inverse-square law, which are present"
REFERENCES,0.8029197080291971,"in many physical laws. We normalize input and target vectors and use a variant of Kahan summation
(Kahan, 1965; Klein, 2006) in order to compute numerically stable statistics across particles of our
dataset."
REFERENCES,0.8065693430656934,"Hyperparameter Selection
We keep 5 trajectories for each setting aside for validation. Criterions
for hyperparameter selection are (i) that particles stay within the geometric object, and (ii) that the
ground truth trajectory is reproduced."
REFERENCES,0.8102189781021898,"C.3
EXPERIMENTAL RESULTS FOR COHESIVE MATERIAL"
REFERENCES,0.8138686131386861,"In the following, experimental results for a cohesive material are shown. The results in the main
paper are obtained for non-cohesive granular material, i.e. material with a cohesion energy density of
0 J/푚3, which results in liquid-like behaviour. Increasing the cohesion energy density to 105 J/푚3
corresponds to cohesive granular material, i.e. the particles have a strong tendency to clump together.
Figure C.1 shows the corresponding comparison of physical quantities for the cohesive granular
material. Like in the non-cohesive case, the predictions for cohesive granular material are widely in
agreement with the ground truth simulation."
REFERENCES,0.8175182481751825,Under review as a conference paper at ICLR 2022
REFERENCES,0.8211678832116789,"Figure C.1: Experimental results for cohesive granular meterial. Left, top: Time integrated particles
ﬂow in rotating drum in the x and z direction as a function of the position along the z axis. Left,
bottom: Mixing entropies in the rotating drum as a function of time for particle class assignments
according to the x (blue) and z (red) position. Right, top and bottom: Average particle position and
particle ﬂows for the hopper as a function of time."
REFERENCES,0.8248175182481752,Under review as a conference paper at ICLR 2022
REFERENCES,0.8284671532846716,"C.4
A WORD ON HOPPER OOD EXPERIMENTS"
REFERENCES,0.8321167883211679,"For hopper geometries (see e.g. Fig. 4), OOD experiments are characterized by an increase of the
side wall inclination angles and by an decrease of the radii of the outlet sizes. Especially due to
the latter, we expect fewer particles to hit the ground for OOD architectures if particle-particle and
particle-boundary interactions are correctly modeled. In order to statistically test OOD trajectories
against in-distribution trajectories, we consider the proportion of particles which have traversed
through the outlet of the hopper. We therefore create 15 in-distribution and 15 OOD trajectories for
both cohesive and non-cohesive materials. We then apply a Mann-Whitney U test which assesses the
proportion of in-distribution against the proportion of OOD particles traversing the outlet. The null
hypotheses is that the same or a higher proportion of particles traverses the outlet for the case of an
OOD trajectory compared to an in-distribution trajectory."
REFERENCES,0.8357664233576643,"Table C.1: Comparison of the proportion (mean 휇and std 휎) of particles beyond the outlet of the
hopper"
REFERENCES,0.8394160583941606,"cohesive
non-cohesive
domain
휇
휎
휇
휎"
REFERENCES,0.843065693430657,"in-distribution
0.34
0.09
0.89
0.03
OOD
0.14
0.11
0.73
0.15"
REFERENCES,0.8467153284671532,"The Mann-Whitney U test shows that the predicted proportion values are signiﬁcantly lower for OOD
than for in-distribution trajectories (p-value < 1.4 ∗10−4 for the cohesive material and p-value <
1.2 ∗10−4 for the non-cohesive material). We remind the reader that this is expected due to the on
average reduced outlet size in OOD geometries. Furthermore, we compare the predicted proportion
values of the cohesive and the non-cohesive model under the null hypothesis that the same or a
higher proportion of particles traverses the outlet for the case of cohesive trajectories compared to
non-cohesive trajectories. The applied Mann-Whitney U test yields a p-value < 1.70 ∗10−06 for the
alternate hypothesis that the proportion is lower for the cohesive model, which is also in agreement
with rational arguments (cohesive particles tend to clump together) and observations."
REFERENCES,0.8503649635036497,"C.5
MIXER"
REFERENCES,0.8540145985401459,"Additionally to hopper and rotating drum geometries, we apply BGNNs to the geometry of rotating
mixers. Interactions within the mixer geometry are especially challenging, since a large number of
particles is affected indirectly by the blades at the border and especially those in the middle of the
mixer. Figure C.2 shows mixer dynamics The left parts visualize granular ﬂow snapshots at different
time steps, where BGNN predictions and ground truth data are contrasted. The right parts of the
ﬁgure include a ﬂow proﬁle and an entropy curve plot."
REFERENCES,0.8576642335766423,"C.6
ABLATION STUDIES"
REFERENCES,0.8613138686131386,"For ablating BGNNs, three design choices are veriﬁed:"
IS OUR SAMPLING PROCEDURE MORE EFFECTIVE THAN A DENSE SAMPLING OF THE TRIANGULARIZED,0.864963503649635,"1. Is our sampling procedure more effective than a dense sampling of the triangularized
boundary surface areas?"
IS OUR SAMPLING PROCEDURE MORE EFFECTIVE THAN A DENSE SAMPLING OF THE TRIANGULARIZED,0.8686131386861314,"2. Is a unidirectional particle-wall interaction sufﬁcient to learn the corresponding particle-wall
dynamics?"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.8722627737226277,"3. Is the mean node aggregation the right choice for the message passing node updates as
outlined in Eq. (2)."
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.8759124087591241,"In Figs. C.3, C.4, C.5, C.6 these three points are assessed for cohesive and non-cohesive particles in
hopper and rotating drum geometries, respectively. Consistent results across both geometries and
particle types are: (i) dense sampling of the boundary surface areas did not learn particle - wall
interactions well, and, (ii) max node aggregation did not seem to work. For including bidirectional
edges instead of unidirectional ones, the behaviour was not completely consistent."
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.8795620437956204,Under review as a conference paper at ICLR 2022 mixer
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.8832116788321168,"prediction
ground truth Time"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.8868613138686131,"−0.5
0.0
0.5
Position z −20 −15 −10 −5 0 5 10"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.8905109489051095,Flow [ x / z ]
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.8941605839416058,"Flow x Prediction
Flow x Ground Truth"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.8978102189781022,"Flow z Prediction
Flow z Ground Truth"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9014598540145985,"0
500
1000
1500
2000
2500
3000
3500
4000
4500
5000
Time 0.16 0.18 0.20 0.22 0.24 0.26 0.28 0.30"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9051094890510949,Mixing Entropy
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9087591240875912,"Mixing Entropy x Prediction
Mixing Entropy x Ground Truth"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9124087591240876,"Figure C.2: Mixer dynamics. Left: Particle distributions for particles in a mixer. Simulation data and
BGNN predictions are contrasted. Particles are indicated by green spheres, triangular wall areas are
yellow, the edges of these triangles are indicated by grey lines. Right: Flow proﬁle (upper right) and
entropy plot (lower right) for the used particles. The ﬂow proﬁles are average velocities of particles at
a given z coordinate and are shown for the x (blue)and the z (red) coordinate. The mixing entropies
are obtained by splitting particles into two partitions according to a threshold on the respective x
coordinate. The prediction entropy curve is shown in yellow while the ground truth simulation
entropy curve is shown in blue."
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.916058394160584,"A reason, why we have not been able to successfully train models for dense sampling may be an
increased number particle-wall interactions, which might make it more complicated to successfully
train such a model, especially if the number of training trajectories is limited."
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9197080291970803,"For unidirectional particle - wall edges, we could successfully learn a model for cohesive particles of
the hopper and for both particle types of the rotating drum; the ablation experiment was however not
successful for later stages of non-cohesive particles in the hopper. From a methodological point of
view it should be noted that the reason why we skipped bidirectional edges was that unidirectional
particle-wall interactions are simpler and easier to train. In any case, the ablation experiments did not
show advantages over our default model architecture, but seemed to conﬁrm our choice."
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9233576642335767,"Throughout all ablation experiments max-node aggregation did not work well compared to mean
aggregation."
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.927007299270073,Under review as a conference paper at ICLR 2022
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9306569343065694,Cohesive Hopper ablations
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9343065693430657,"boundary edge
bidirectionality"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9379562043795621,"sampling
max-agg
ground truth Time"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9416058394160584,"Figure C.3: Ablation experiments for cohesive particles within hopper geometries. Different ablations
from our default architecture (ﬁrst three columns, see text) are compared to the ground truth (last
column). Particles are indicated by green spheres, triangular wall areas are yellow, the edges of these
triangles are indicated by grey lines."
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9452554744525548,Under review as a conference paper at ICLR 2022
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.948905109489051,Non-Cohesive Hopper Ablations
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9525547445255474,"boundary edge
bidirectionality"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9562043795620438,"sampling
max-agg
ground truth Time"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9598540145985401,"Figure C.4: Ablation experiments for non-cohesive particles within hopper geometries. Different
ablations from our default architecture (ﬁrst three columns, see text) are compared to the ground truth
(last column). Particles are indicated by green spheres, triangular wall areas are yellow, the edges of
these triangles are indicated by grey lines."
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9635036496350365,Under review as a conference paper at ICLR 2022
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9671532846715328,Cohesive Rotating Drum ablations
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9708029197080292,"boundary edge
bidirectionality"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9744525547445255,"sampling
max-agg
ground truth Time"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9781021897810219,"Figure C.5: Ablation experiments for cohesive particles within rotating drum geometries. Different
ablations from our default architecture (ﬁrst three columns, see text) are compared to the ground truth
(last column). Particles are indicated by green spheres, triangular wall areas are yellow, the edges of
these triangles are indicated by grey lines. The circular arrow indicates the rotation direction of the
drum."
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9817518248175182,Under review as a conference paper at ICLR 2022
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9854014598540146,Non-Cohesive Rotating Drum ablations
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9890510948905109,"boundary edge
bidirectionality"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9927007299270073,"sampling
max-agg
ground truth Time"
IS THE MEAN NODE AGGREGATION THE RIGHT CHOICE FOR THE MESSAGE PASSING NODE UPDATES AS,0.9963503649635036,"Figure C.6: Ablation experiments for non-cohesive particles withing rotating drum geometries.
Different ablations from our default architecture (ﬁrst three columns, see text) are compared to the
ground truth (last column). Particles are indicated by green spheres, triangular wall areas are yellow,
the edges of these triangles are indicated by grey lines. The circular arrow indicates the rotation
direction of the drum."
