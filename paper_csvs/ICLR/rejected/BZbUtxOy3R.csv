Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.004273504273504274,"The prevalent approach in self-supervised image generation is to operate on pixel
level representations. While this approach can produce high quality images, it
cannot beneﬁt from the simplicity and innate quality of vectorization. Here we
present a drawing agent that operates on stroke-level representation of images.
At each time step, the agent ﬁrst assesses the current canvas and decides whether
to stop or keep drawing. When a ‘draw’ decision is made, the agent outputs a
program indicating the stroke to be drawn. As a result, it produces a ﬁnal raster
image by drawing the strokes on a canvas, using a minimal number of strokes and
dynamically deciding when to stop. We train our agent through reinforcement
learning on MNIST and Omniglot datasets for unconditional generation and pars-
ing (reconstruction) tasks. We utilize our parsing agent for exemplar generation
and type conditioned concept generation in Omniglot challenge without any fur-
ther training. We present successful results on all three generation tasks and the
parsing task. Crucially, we do not need any stroke-level or vector supervision; we
only use raster images for training. Code will be made available upon acceptance."
INTRODUCTION,0.008547008547008548,"1
INTRODUCTION"
INTRODUCTION,0.01282051282051282,"While, innately, humans sketch or write through strokes, this type of visual depiction is a more
difﬁcult task for machines. Image generation problems are typically addressed by raster-based al-
gorithms. The introduction of generative adversarial networks (GAN) (Goodfellow et al., 2014),
variational autoencoders (VAE) (Kingma & Welling, 2013) and autoregressive models (Van Oord
et al., 2016) has led to a variety of applications. Style transfer (Gatys et al., 2015; Isola et al., 2017),
photo realistic image generation (Brock et al., 2018; Karras et al., 2019), and super resolution (Ledig
et al., 2017; Bin et al., 2017) are some of the signiﬁcant instances of the advancing ﬁeld. Addition-
ally, Hierarchical Bayesian models formulated by deep neural networks are able to use the same
generative model for multiple tasks such as classiﬁcation, conditional and unconditional generation
(Hewitt et al., 2018; Edwards & Storkey, 2016). These raster-based algorithms can produce high
quality images, yet they cannot beneﬁt from the leverage that higher level abstractions bring about."
INTRODUCTION,0.017094017094017096,"Vector-level image representation intrinsically prevents models from generating blurry samples and
allows for compositional image generation which eventually may contribute to our understanding
of how humans create or replicate images (Lake et al., 2017). This idea, with the introduction of
sketch-based datasets such as Omniglot (Lake et al., 2012), Sketchy (Sangkloy et al., 2016), and
QuickDraw (Ha & Eck, 2017) has triggered a signiﬁcant body of work in recent years. Stroke
based image generation and parsing has been addressed with both vector supervised models and
self-supervised generation. Of these, one prominent algorithm is Bayesian Program Learning (Lake
et al., 2015), where a single model can be utilized for 5 tasks in the Omniglot challenge: (i) parsing,
(ii) unconditional generation or, (iii) generating exemplars of a given concept, (iv) generating novel
concepts of a type, and (v) one-shot classiﬁcation. This approach is also shown to be scalable
when supported by the representative capabilities of neural networks (Feinman & Lake, 2020b;a),
however, it requires stroke-level or vector supervision, which is costly to obtain or simply non-
existent. VAE/RNN (Ha & Eck, 2017; Cao et al., 2019; Chen et al., 2017; Aksan et al., 2020) and
Transformer based models (Ribeiro et al., 2020; Lin et al., 2020) are other common methods applied
to vector based image generation. Although impressive results have been presented, stroke-level
supervision is required to train these models."
INTRODUCTION,0.021367521367521368,Under review as a conference paper at ICLR 2022
INTRODUCTION,0.02564102564102564,"Figure 1: Our drawing agent can accomplish four different tasks.
From left to right: it can generate novel characters, parse a given char-
acter into its strokes, generate new exemplars for a given character,
and generate novel concepts (i.e. characters) given a type (i.e. al-
phabet). Ours is the ﬁrst stroke-based method to tackle all of the
generation and parsing tasks in the Omniglot Challenge, without
requiring any stroke-level supervision."
INTRODUCTION,0.029914529914529916,"Recently,
self-supervised
(i.e. the absence of stroke-
level supervision) stroke-
based
image
generation
has been addressed with
Reinforcement
Learning
(RL) (Ganin et al., 2018;
Mellor et al., 2019; Huang
et al., 2019; Schaldenbrand
& Oh, 2020). We call this
approach
self-supervised
vectorization,
since
the
vectorization of images is
learned using only raster-
images
as
supervision.
These methods mostly focus on image reconstruction and their exploration in generation is limited.
For example, none of them address the conditional generation problem, or, they need the number of
actions (i.e. strokes) as input."
INTRODUCTION,0.03418803418803419,"In this paper, we propose a self-supervised reinforcement learning approach where we train a draw-
ing agent for character generation and parsing. Our drawing agent operates on the stroke-level
(i.e. vector) representation of images. At each time step, our agent takes the current canvas as in-
put and dynamically decides whether to continue drawing or stop. When a ‘continue’ decision is
made, the agent outputs a program specifying the stroke to be drawn. A non-differentiable renderer
takes this program and draws it on the current canvas. Consequently, a raster image is produced
stroke-by-stroke. We ﬁrst train this agent for two tasks by formulating appropriate loss functions:
(i) unconditional character generation and (ii) parsing."
INTRODUCTION,0.038461538461538464,"Unconditional character generation is the task of generating a novel concept1 (i.e. character) given
a dataset of concepts. For this task, our loss function includes the following components: an adver-
sarial loss produced by a discriminator to make generated characters as “real” as possible, and two
data ﬁdelity losses assessing the conformity of the current canvas with the statistical properties of
the overall dataset. We also use an additional entropy loss to prevent mode collapse."
INTRODUCTION,0.042735042735042736,"In the parsing task, the goal for our agent is to reconstruct a given character (in raster-image) by
drawing it through strokes using as few of them as possible. We utilize the same action space and
environment as in the unconditional generation model, only difference being the input fed to the
policy is a complete canvas to be reconstructed. Our reward function in this task has two compo-
nents: a ﬁdelity reward that indicates how much of a stroke is consistent with the target image and
a penalty that increases with every ‘continue’ action being taken. This model explicitly learns the
vectorization of the input raster-image in a self-supervised manner."
INTRODUCTION,0.04700854700854701,"Next, we show that our parsing model can be exploited for exemplar generation (i.e. a novel drawing
of a given character) and novel concept generation from type (i.e. novel character generation given
an alphabet of 10 characters) without any further training. Given a character, the policy network of
our parsing model outputs a distribution over the action space where likelihood of actions at each
time step eventually allows us to generate variations of the input image. For novel concept generation
conditioned on a type (i.e. alphabet), we compose a stroke library by parsing the provided inputs.
As we sample strokes from this library, we observe novel samples forming, in coherence with the
overall structure of the alphabet. To the best of our knowledge, we are the ﬁrst to tackle these tasks
with a self-supervised approach that operates on stroke space."
INTRODUCTION,0.05128205128205128,"Through experiments we show that our agent can successfully generate novel characters in all three
ways (unconditionally, conditioned on a given alphabet, conditioned on a given character), and parse
and reconstruct input characters. For both exemplar generation and type conditioned novel concept
generation, we provide LPIPS (Zhang et al., 2018), L2 and SSIM measures between input samples
and generated images."
INTRODUCTION,0.05555555555555555,"Our contributions in this paper are two-fold: (i) we present a drawing agent that can successfully
handle all of the generation and parsing tasks in the Omniglot challenge in a self-supervised, stroke-"
INTRODUCTION,0.05982905982905983,1Omniglot challenge terminology.
INTRODUCTION,0.0641025641025641,Under review as a conference paper at ICLR 2022
INTRODUCTION,0.06837606837606838,"based manner – such a model did not exist (ii) we provide for the ﬁrst time perceptual similarity
based quantitative benchmarks for the ‘exemplar generation’ and ‘type conditioned novel concept
generation’ tasks."
RELATED WORK,0.07264957264957266,"2
RELATED WORK"
RELATED WORK,0.07692307692307693,"The main purpose of this work is to present a self-supervised approach in order to solve the gener-
ation and parsing tasks in the Omniglot Challenge (Lake et al., 2015), by capturing the stroke-level
representation of images. Here we initially examine the supervised and self-supervised approaches
to Omniglot challenge. Then, we review the work on image vectorization. And lastly, we touch
upon the research on program synthesis in the context of this study."
RELATED WORK,0.0811965811965812,"Omniglot Challenge
Omniglot dataset of world alphabets was released with a set of challenges:
parsing a given letter, one shot classiﬁcation, generating a new letter given an alphabet, generating
a novel sample of a character, and unconditional generation. Omniglot letters have samples that are
conditionally independent based on the alphabet-character hierarchy, hence, a distinctive approach
to achieve all these tasks is Hierarchical Bayesian modeling (Lake et al., 2015), (Lake et al., 2013).
As the Omniglot letters included human strokes as labels, the compositional and causal nature of
letters are leveraged to model the generation process. Later, neurosymbolic models are also shown
to be successful for unconditional generation (Feinman & Lake, 2020a) and conceptual compression
for multiple tasks presented within the Omniglot Challenge (Feinman & Lake, 2020b)."
RELATED WORK,0.08547008547008547,"However, without the stroke set that generated a concept, these tasks become more difﬁcult. The
idea of sequential image generation is examined by recurrent VAE models (Rezende et al., 2016),
(Gregor et al., 2015), (Gregor et al., 2016). DRAW (Gregor et al., 2015) and Convolutional DRAW
(Gregor et al., 2016) were able to generate quality unconditional samples from MNIST and Om-
niglot datasets respectively. DRAW is proposed as an algorithm to generate images recurrently. The
network is able to iteratively generate a given image by attending to certain parts of the input at
each time step. Convolutional DRAW improved the idea with an RNN/VAE based algorithm that
can capture the global structure and low-level details of an image separately in order to increase the
quality of generations. Later, it is shown that Hierarchical Bayesian Modeling can be improved by
the representational power of deep learning and attentional mechanisms in order to achieve three
of the ﬁve Omniglot challenges (Rezende et al., 2016). Another novel idea to leverage Bayesian
modeling to tackle Omniglot Challenge was performing modiﬁcations on the VAE architecture to
represent hierarchical datasets (Edwards & Storkey, 2016) (Hewitt et al., 2018). The signiﬁcance
of these studies is that they were able obtain latent variables to describe class-level features effec-
tively. Despite the ability to utilize the same model for different problems (one-shot classiﬁcation,
unconditional and conditional generation), raster-based one-step generative models have two disad-
vantages we want to address. First, they cannot leverage the higher level abstraction and quality
comes with working on a vector space. Secondly, one-step generation does not provide an inter-
pretable compositional and causal process describing how a character is generated. In this work, we
combine the advantages of two groups of aforementioned models with an agent operating on stroke
representation of images that uses only raster images during training. Thus, we aim to solve all three
generative and the parsing (reconstruction) tasks of the Omniglot challenge. We show that the model
trained for reconstruction can also be adopted as a tool that captures the compositional structure of
a given character. Without any further training, our agent can solve exemplar generation and type
conditioned novel concept generation problems."
RELATED WORK,0.08974358974358974,"Image Generation by Vectorization — With Stroke Supervision
Sketch-RNN (Ha & Eck,
2017) is the ﬁrst LSTM/VAE based sketch generation algorithm. It is later improved to gener-
ate multiclass samples (Cao et al., 2019) and increase the quality of generations by representing
strokes as Bezier curves (Song, 2020). The idea of obtaining a generalizable latent space by image-
stroke mapping is studied by many (Aksan et al., 2020; Das et al., 2021; Bhunia et al., 2021; Wang
et al., 2020). In CoSE (Aksan et al., 2020), the problem is articulated as ‘completion of partially
drawn sketch’. They achieved state of the art reconstruction performance by utilizing variable-length
strokes and a novel relational model that is able to capture the global structure of the sketch. The
progress in stroke representation is continued with incorporation of variable-degree Bezier curves
(Das et al., 2021), and capturing Gestalt structure of partially occluded sketches (Lin et al., 2020)."
RELATED WORK,0.09401709401709402,Under review as a conference paper at ICLR 2022
RELATED WORK,0.09829059829059829,"Self Supervised Vectorization
Self-supervised vector-based image generation problem has been
approached by RL based frameworks (Zhou et al., 2018), (Ganin et al., 2018), (Mellor et al., 2019),
(Huang et al., 2019), (Schaldenbrand & Oh, 2020), and (Zou et al., 2020). In SPIRAL (Ganin et al.,
2018), unconditional generation and reconstruction tasks are tackled with adversarially trained RL
agents. Succeeding research enhanced the reconstruction process by a differentiable renderer, mak-
ing it possible for agents to operate on a continuous space (Huang et al., 2019; Schaldenbrand &
Oh, 2020). In order to avert the computational expense of RL based algorithms, end-to-end differen-
tiable models are developed through altering the rendering process (Nakano, 2019) or formulating
the generation process as a parameter search (Zou et al., 2020). More recently, a differentiable ren-
derer and compositor is utilized for generating closed Bezier paths and the ﬁnal image respectively
(Reddy et al., 2021). This method led to successful interpolation, reconstruction, and sampling pro-
cesses. Most related to our work is SPIRAL where both reconstruction and unconditional generation
is studied through self-supervised deep reinforcement learning. However, our approach has some
signiﬁcant differences. First, in SPIRAL each stroke is also represented as a Bezier curve, yet, the
starting point of each curve is set as the ﬁnal point of the previous curve. In our model, all control
points of the Bezier curve are predicted by the agent at each time step. Hence, the agent has to learn
the continuity and the compositionality of the given character in order to produce quality samples.
Secondly, SPIRAL provides a generative model that works through a graphics renderer without ad-
dressing the conditional generation problem. They show impressive results on both natural images
and handwritten characters. While we provide a solution for multiple generative tasks, we have
not explored our model in the context of natural images. Another approach that presents a similar
scheme to the reconstruction problem is “Learning to Paint” (Huang et al., 2019). In Learning to
Paint, the proposed model is utilized speciﬁcally for reconstruction. When reconstruction is consid-
ered, the main difference of our model is that since we try to model a human-like generation process,
our agent outputs a single stroke at each time step with the environment being altered throughout
this process while in Learning to Paint, 5 strokes are predicted by the agent at each time step. As a
major difference from previous studies, our agent decides whether to stop or keep drawing before
generating a stroke. This enables the agent to synthesize an image with as few actions as possible
when motivated with our reward formulations."
RELATED WORK,0.10256410256410256,"Self Supervised Program Synthesis
Our method essentially outputs a visual program that de-
pends only on the rastered data. In that sense, studies on Constructive Solid Geometry (CSG)are
also related. Different RL frameworks for reconstruction of a given CSG image, that is essentially
a composition of geometric shapes, are proposed (Ellis et al., 2019; Zhou et al., 2020). The for-
mer considered parsing as a search problem that is solved by using a read-eval-print-loop within a
Markov Decision Process. The latter adopted a Tree-LSTM model to eliminate invalid programs and
the reward is considered to be the Chamfer distance between the target image and current canvas."
METHOD,0.10683760683760683,"3
METHOD  "
METHOD,0.1111111111111111,"Figure 2: Generator model. At each time step, the policy network
receives a canvas and outputs two distributions for Bezier curve pa-
rameters and stop/continue decision. When the ‘continue’ decision is
sampled, the resulting stroke is rendered and added to the ﬁnal output."
METHOD,0.11538461538461539,"Our model consists of a
policy network and a (non-
differentiable) renderer. At
time step t, the policy net-
work takes the current can-
vas, Ct – a raster-image, as
input and outputs two dis-
tributions, πB and πS. The
ﬁrst distribution, πB, is for
stroke (i.e. Bezier curve)-
parameters and the second
one, πS, is for the continue/stop decision. From the ﬁrst distribution, we randomly sample a stroke
deﬁned by its 7 parameters (x-y coordinates of start, end, control points of the quadratic Bezier
curve, and a brush-width). From the second distribution, we randomly sample a decision. If the
decision happens to be ‘continue’, we add the newly sampled stroke to the current canvas, Ct, in-
crement time (i.e. t ←t + 1) and restart. If the decision was to ‘stop’, then Ct is returned as the
ﬁnal output. Our model is able to handle parsing and different generation tasks, and the processing"
METHOD,0.11965811965811966,Under review as a conference paper at ICLR 2022
METHOD,0.12393162393162394,"pipeline we just described is common in all these tasks. What changes among tasks is the reward
functions and/or training procedures, which we explain below."
METHOD,0.1282051282051282,"Unconditional Generation
The task of ‘generating new concepts’ as dubbed in Omniglot chal-
lenge, is essentially unconditional sampling from a distribution obtained from the whole Omniglot
training set. Here, the model is asked to generate completely novel samples (i.e. characters) without
any constraints. For this task, at each time step t, we calculate an instantaneous reward, rt, that has
three components:"
METHOD,0.13247863247863248,"rt = D(Ct) + λ1align(Ct, I) + λ2N(|Ct|; µ, σ).
(1)"
METHOD,0.13675213675213677,"The ﬁrst term is a reward based on a discriminator to make generated characters as ‘real’ as possible.
D(·) is a discriminator that outputs the “realness” score of its input canvas. We train it in an adver-
sarial manner by using the generated examples as negatives and the elements of the input dataset
as positives. The second term is a clustering-based data ﬁdelity reward. The function align(Ct, I)
measures the alignment between the current canvas Ct and another canvas I, which is a randomly
selected cluster center at the beginning of each episode. The cluster centers are obtained by apply-
ing k-means on all characters in the input dataset. align basically counts the number of intersecting
on-pixels (between the two canvases) minus the number of non-intersecting on-pixels in Ct, and
divides this quantity by the number of on-pixels in I. The ﬁnal term assesses the conformity of
the current canvas with the dataset in terms of the number of on-pixels. N(|Ct|; µ, σ) evaluates a
normal distribution with (µ, σ) at |Ct| which is the number of on-pixels in the current canvas. We
obtain (µ, σ) by ﬁtting a normal distribution to the on-pixel counts of characters in the training set.
We observed that the second and third terms accelerate learning as they guide the exploration within
the vicinity of real characters. During training, instead of using the instantaneous reward, rt, we use
the difference of successive rewards, i.e. rt −rt−1."
METHOD,0.14102564102564102,"In order to encourage exploration and avoid mode collapse, we use an entropy penalty term as"
METHOD,0.1452991452991453,"α max(0, KL([πB, πS], U) −τ).
(2)"
METHOD,0.14957264957264957,"Here, KL indicates KL-divergence and U is the uniform distribution. This term ﬁrst measures the
divergence between the uniform distribution and πB, πS, the distributions output by the policy net-
work. Then, through the hinge function, if the divergence exceeds a threshold (τ), this term activates
and increases the penalty. The policy network and the discriminator D are updated alternatingly af-
ter 256 images are generated at each iteration. We employ the REINFORCE algorithm (Williams,
1992) to update the weights of the policy network. Discriminator is trained using hinge loss. In
order to stabilize the discriminator and keep the Lipschitz constant for the whole network equal to
1, Spectral Normalization is applied at each layer (Miyato et al., 2018). Throughout the training, we
kept the balance ratio between generated and real samples at 3."
METHOD,0.15384615384615385,"Image Reconstruction by Parsing
In the “parsing” task, the goal is to reconstruct the given input
image by re-drawing it through strokes as accurately as possible. To this end, we formulate a new
reward function with two terms: a ﬁdelity reward that indicates how much of a stroke is consistent
with the input image (using the “align” function introduced above) and a penalty that is added with
every time increment represented by t as ‘continue’ decisions being made:"
METHOD,0.1581196581196581,"rt = align(St, Ct) −λ1t,
(3)"
METHOD,0.1623931623931624,"where St is the newly sampled stroke and Ct is the current canvas (input). Second term simply acts
as a penalty for every ‘continue’ action. The ﬁrst term ensures the sampled stroke to be well-aligned
with the input and the second term forces the model to use as few strokes as possible. There is no
need for a discriminator. This model explicitly learns the vectorization of the input raster-image in
a self-supervised manner."
METHOD,0.16666666666666666,"Apart from the different reward function, another crucial difference between the training of the
unconditional generation model and the parsing model is how the input and output are handled.
In unconditional generation, the newly-sampled stroke is added to the current canvas, whereas in"
METHOD,0.17094017094017094,Under review as a conference paper at ICLR 2022
METHOD,0.1752136752136752,"parsing, we do the opposite: the sampled stroke is removed (masked out) from the current canvas,
and the returned ﬁnal canvas is the combination of all sampled strokes until the ‘stop’ decision. λ, α
and τ in Equations 1, 2, and 3 are hyperparameters adjusted experimentally. (see ‘Training Details’
in Appendix B )."
METHOD,0.1794871794871795,"Generating New Exemplars
In this task, a model is required to generate a new exemplar (i.e.
a variation) of an unseen concept (i.e. character). To the best of our knowledge, we are the ﬁrst
to tackle this task in a self-supervised stroke-based setting. Most importantly, we do not require
any training to achieve this task. We utilize our parsing network described in the previous section
to capture the overall structure of a given letter. In order to produce new exemplars, we randomly
sample different parsings (a set of strokes) from the distribution generated by the agent. In order to
eliminate ‘unlikely’ samples, we compute the likelihood of the parsing given the resulting policy,
and apply a threshold."
METHOD,0.18376068376068377,"Generating Novel Concepts from Type
In this task, the goal is to to generate a novel concept
(i.e. character) given a previously unseen type (i.e. alphabet) consisting of 10 concepts. The novel
concepts should conform to the overall structure, that is, the stroke formulation and composition of
the given type (alphabet). We, again, tackle this challenge using our parsing network without any
further training. To do so, we ﬁrst parse all input images into its strokes. For each input image, we
sample ﬁve stroke sets from the stroke-parameters distribution output by the policy network. During
the sampling process, we again use the likelihood-based quality function described in the previous
section. We add all the strokes sampled during this process to form a stroke library. Here the strokes
are stored with the time steps they are generated. Noting that the number of strokes sampled for
a given character is not constant, we approximate a distribution for stopping actions. This process
provides a stroke set representing the structure of letters and the way they are composed, that is, we
can exploit the compositionality and causality of an alphabet. Throughout the character generation
process, a stroke is sampled at each time step belonging to that particular group of the library. The
sampled strokes are summed together to obtain the ﬁnal canvas."
EXPERIMENTS,0.18803418803418803,"4
EXPERIMENTS"
EXPERIMENTS,0.19230769230769232,"Datasets and Implementation Details
We report generation and reconstruction (parsing) results
on the Omniglot dataset (Lake et al., 2015), which includes 1623 characters from 50 different alpha-
bets, with 20 samples for each character. 30 alphabets are used for training and the remaining 20
are used for evaluation. For unconditional generation and reconstruction, we also report results on
the MNIST dataset (LeCun, 1998). For both datasets, we rescale input images to 32x32 in order for
them to conform with our model."
EXPERIMENTS,0.19658119658119658,"Our policy network is composed of a ResNet feature extraction backbone and three MLP branches
for computing the distributions over the action space. Architectural details can be found in Appendix
A. For the Omniglot dataset, we take brush width as a constant and omit the corresponding MLP
branch."
EXPERIMENTS,0.20085470085470086,"FID
LSGAN (Mao et al., 2017)
9.8 ± 0.9
NSGAN (Goodfellow et al., 2014)
6.8 ± 0.5
WGAN (Arjovsky et al., 2017)
6.7 ± 0.4
WGAN GP (Gulrajani et al., 2017)
20.3 ± 5.0
DRAGAN (Kodali et al., 2017)
7.6 ± 0.4
VAE
23.8 ± 0.6
Ours
17.3 ± 3.0"
EXPERIMENTS,0.20512820512820512,"Table 1: Comparison of the FID scores for dif-
ferent models on the MNIST dataset. We report
the mean and the variance of FID scores from 5
simulations with different weight initializations."
EXPERIMENTS,0.2094017094017094,"We tune the learning rate and weight decay of the
generator, λ hyperparameters in Equation 1 and
Equation 3, α and τ hyperparameters in Equa-
tion 2, using the Tree-structured Parzen Estimator
algorithm (Bergstra et al., 2011) in the RayTune
library (Liaw et al., 2018)."
EXPERIMENTS,0.21367521367521367,"For unconditional generation, we use the dis-
criminator architecture proposed by Miyato et al.
(2018). In order to stabilize the discriminator and
keep the Lipschitz constant for the whole network
equal to 1, Spectral Normalization is applied at
each layer.
Discriminator is trained using the
hinge loss. Throughout the training, we set the
balance ratio between fake and real samples as 3. We performed hard-negative mining to speed up
convergence during this process."
EXPERIMENTS,0.21794871794871795,Under review as a conference paper at ICLR 2022
EXPERIMENTS,0.2222222222222222,"Figure 3: Quality of generated MNIST characters as training progresses (i.e. policy is updated) from
left to right."
EXPERIMENTS,0.2264957264957265,"Figure 4: Omniglot unconditional samples. For randomly sampled generations, four closest samples
(in terms of pixelwise L2 distance) from the training dataset are presented."
UNCONDITIONAL GENERATION,0.23076923076923078,"4.1
UNCONDITIONAL GENERATION"
UNCONDITIONAL GENERATION,0.23504273504273504,"We initially tested our approach on the MNIST dataset. Figure 3 presents the improvement in the
quality of samples generated throughout the policy network updates. At the beginning, generated
characters are mostly random scribbles. Towards the end, they start to look like real digits. Table
1 shows that our method achieves an acceptable FID score (Heusel et al., 2017) given the scores of
other prominent GAN and VAE methods. Presented FID values are taken from Lucic et al. (2017)."
UNCONDITIONAL GENERATION,0.23931623931623933,"Figure 5: Randomly sampled uncon-
ditional generations for the Omniglot
dataset."
UNCONDITIONAL GENERATION,0.24358974358974358,"Figure 4 shows sample generations for the Omniglot
dataset. To demonstrate that our generations are not du-
plicates of the characters in the training set, we present the
four most similar characters from the training set to our
generations. Similarity is computed using pixelwise L2
distance. Finally, Figure 5 presents more generated char-
acters, which demonstrate the variability and the quality
of generated concepts. The agent was able to capture the
type of strokes, number of strokes a character has and let-
ter structures without any stroke supervision."
IMAGE RECONSTRUCTION BY PARSING,0.24786324786324787,"4.2
IMAGE RECONSTRUCTION BY PARSING"
IMAGE RECONSTRUCTION BY PARSING,0.25213675213675213,"Figure 6 presents sample parsing and reconstruction re-
sults on MNIST. Our agent can reconstruct a character
from the test set in a minimal number of actions within
the abilities of quadratic Bezier curves. Selected brush
widths also conform with the stroke heterogeneity of the
dataset."
IMAGE RECONSTRUCTION BY PARSING,0.2564102564102564,"Then, we train our model with the characters in the Om-
niglot training set. For evaluation, we utilize the evaluation set with completely novel characters
from unseen alphabets. Thereby, we can see that our agent has learned how to parse a given char-
acter. Due to the penalty term that increases with the number of strokes, there is a tradeoff for the
agent to replicate a character exactly and replicate it in a small number of actions. This indirectly
demotivates the agent from retouching the image with small strokes to minimize the difference to the"
IMAGE RECONSTRUCTION BY PARSING,0.2606837606837607,Under review as a conference paper at ICLR 2022
IMAGE RECONSTRUCTION BY PARSING,0.26495726495726496,"Figure 6: MNIST reconstructions. For each sample on the left hand side of the columns, parsing
processes are demonstrated. Colors represent the order of the strokes. (pink: ﬁrst stroke, green:
second stroke, blue: third stroke)"
IMAGE RECONSTRUCTION BY PARSING,0.2692307692307692,"Figure 7: Omniglot reconstruction. For each sample on the left hand side of the columns, resulting
reconstructions are demonstrated."
IMAGE RECONSTRUCTION BY PARSING,0.27350427350427353,"target. Results in Figure 7 show that overall structure of the target images are preserved, however,
small details are lacking in some of the examples. This reﬂects on the distance measures (Table 2)."
GENERATING NEW EXEMPLARS,0.2777777777777778,"4.3
GENERATING NEW EXEMPLARS"
GENERATING NEW EXEMPLARS,0.28205128205128205,"For this task, we use the evaluation set of the Omniglot dataset. For each character in the test set,
we sample 500 different parses from the policy. In Figure 8, it can be observed that given an unseen
letter from a novel alphabet, our agent can sample from the resulting distribution, and output quality
variations. The major indications of variation are structures of the strokes, number of actions to
generate a sample and the ﬁne details of certain characters. We compare each produced character
with its corresponding input image using LPIPS, SSIM and L2 distance values. The mean and
standard deviation of these values for the whole evaluation set are 0.078 ± 0.002, 0.616 ± 0.018 and
0.08 ± 0.016, respectively. Results per alphabet can be found in Appendix C.3."
GENERATING NOVEL CONCEPTS FROM TYPE,0.2863247863247863,"4.4
GENERATING NOVEL CONCEPTS FROM TYPE"
GENERATING NOVEL CONCEPTS FROM TYPE,0.2905982905982906,"In order to generate a concept that is likely to belong in a given alphabet, we again leverage our
reconstruction model. Given 10 different characters of an unseen alphabet, we are able to generate
novel images with similar structural features. Results presented in Figure 9 show that our algorithm
can model the compositional pattern of an alphabet in stroke space. In order to obtain quantitative
results, (e.g. LPIPS, L2 and SSIM), we produce 10000 images conditioned on each input set and
randomly sample characters by utilizing the discriminator trained for the unconditional generation
model, assuming it has learned what features of a given input imply a real character. We generate"
GENERATING NOVEL CONCEPTS FROM TYPE,0.2948717948717949,"Method
MNIST
Omniglot
ImageVAE
0.0033
N/A
Im2Vec (Reddy et al., 2021)
0.0036
N/A
Learning to Paint (Huang et al., 2019)
0.006
N/A
SPIRAL (Training distance) (Ganin et al., 2018)
0.01
0.02
StrokeNet (Training distance) (Zheng et al., 2018)
0.015
0.02
Ours
0.04
0.06"
GENERATING NOVEL CONCEPTS FROM TYPE,0.29914529914529914,"Table 2: Reconstruction quality. L2 distance between target and the reconstructed image. (Im-
ageVAE is taken from Reddy et al. (2021), it indicates a purely raster-based autoencoder. )"
GENERATING NOVEL CONCEPTS FROM TYPE,0.3034188034188034,Under review as a conference paper at ICLR 2022
GENERATING NOVEL CONCEPTS FROM TYPE,0.3076923076923077,"Figure 8: New exemplar generation. Given an unseen character from a new alphabet (highlighted in
red boxes), the model generated 9 exemplars."
GENERATING NOVEL CONCEPTS FROM TYPE,0.31196581196581197,"Figure 9: Novel sample generation conditioned on a type. Given 10 characters from an alphabet,
our model produced 20 new samples."
GENERATING NOVEL CONCEPTS FROM TYPE,0.3162393162393162,"a sampling distribution according to the discriminator scores of generated samples and repeat the
sampling process multiple times for each input to obtain a set of outputs to be considered. For a
sample generated, we calculate performance metrics with respect to all characters in the input. In
order to report ﬁnal metrics presented in supplemental ﬁgures 12b and 12a, we consider the most
similar input-output pairs. The mean and standard deviation of LPIPS, SSIM and L2 values for the
whole evaluation set are 0.0801 ± 0.003, 0.502 ± 0.068 and 0.1263 ± 0.00086 respectively."
CONCLUSION,0.32051282051282054,"5
CONCLUSION"
CONCLUSION,0.3247863247863248,"We proposed a self-supervised reinforcement learning approach for stroke based image generation.
We trained our model for unconditional generation and parsing on handwritten character datasets by
deﬁning a single action space and environment. Through experiments, we showed that, given the
whole training set, our agent is able to capture the overall distribution and generate quality novel
samples for the challenging Omniglot dataset. Then, we trained our agent for the parsing task; given
a raster image, the goal is to reconstruct it through as few strokes as possible. We demonstrated that
the parsing agent can be utilized for generating exemplars of a concept and creating novel samples
conditioned on a type, without any further training, only difference being how it is called among
tasks. To the best of our knowledge, we are the ﬁrst to tackle these tasks with a self-supervised
approach that operates on a stroke level. In this work, we used quadratic Bezier curves as the
smallest unit of sketching. However, for human-level generations, the stroke representations should
be enhanced to capture more complex structures. We anticipate that this will improve the overall
performance."
CONCLUSION,0.32905982905982906,Under review as a conference paper at ICLR 2022
REFERENCES,0.3333333333333333,REFERENCES
REFERENCES,0.33760683760683763,"Emre Aksan, Thomas Deselaers, Andrea Tagliasacchi, and Otmar Hilliges. Cose: Compositional
stroke embeddings. arXiv preprint arXiv:2006.09930, 2020."
REFERENCES,0.3418803418803419,"Martin Arjovsky, Soumith Chintala, and L´eon Bottou. Wasserstein generative adversarial networks.
In International conference on machine learning, pp. 214–223. PMLR, 2017."
REFERENCES,0.34615384615384615,"James Bergstra, R´emi Bardenet, Yoshua Bengio, and Bal´azs K´egl. Algorithms for hyper-parameter
optimization. Advances in neural information processing systems, 24, 2011."
REFERENCES,0.3504273504273504,"Ayan Kumar Bhunia, Pinaki Nath Chowdhury, Yongxin Yang, Timothy M Hospedales, Tao Xiang,
and Yi-Zhe Song. Vectorization and rasterization: Self-supervised learning for sketch and hand-
writing. arXiv preprint arXiv:2103.13716, 2021."
REFERENCES,0.3547008547008547,"Huang Bin, Chen Weihai, Wu Xingming, and Lin Chun-Liang. High-quality face image sr using
conditional generative adversarial networks. arXiv preprint arXiv:1707.00737, 2017."
REFERENCES,0.358974358974359,"Andrew Brock, Jeff Donahue, and Karen Simonyan. Large scale gan training for high ﬁdelity natural
image synthesis. arXiv preprint arXiv:1809.11096, 2018."
REFERENCES,0.36324786324786323,"Nan Cao, Xin Yan, Yang Shi, and Chaoran Chen. Ai-sketcher: A deep generative model for pro-
ducing high-quality sketches. In Proceedings of the AAAI Conference on Artiﬁcial Intelligence,
volume 33, pp. 2564–2571, 2019."
REFERENCES,0.36752136752136755,"Yajing Chen, Shikui Tu, Yuqi Yi, and Lei Xu. Sketch-pix2seq: a model to generate sketches of
multiple categories. arXiv preprint arXiv:1709.04121, 2017."
REFERENCES,0.3717948717948718,"Ayan Das, Yongxin Yang, Timothy Hospedales, Tao Xiang, and Yi-Zhe Song. Cloud2curve: Gen-
eration and vectorization of parametric sketches. arXiv preprint arXiv:2103.15536, 2021."
REFERENCES,0.37606837606837606,"Harrison Edwards and Amos Storkey.
Towards a neural statistician.
arXiv preprint
arXiv:1606.02185, 2016."
REFERENCES,0.3803418803418803,"Kevin Ellis, Maxwell Nye, Yewen Pu, Felix Sosa, Josh Tenenbaum, and Armando Solar-Lezama.
Write, execute, assess: Program synthesis with a repl. arXiv preprint arXiv:1906.04604, 2019."
REFERENCES,0.38461538461538464,"Reuben Feinman and Brenden M Lake. Generating new concepts with hybrid neuro-symbolic mod-
els. arXiv preprint arXiv:2003.08978, 2020a."
REFERENCES,0.3888888888888889,"Reuben Feinman and Brenden M Lake. Learning task-general representations with generative neuro-
symbolic modeling. arXiv preprint arXiv:2006.14448, 2020b."
REFERENCES,0.39316239316239315,"Yaroslav Ganin, Tejas Kulkarni, Igor Babuschkin, SM Ali Eslami, and Oriol Vinyals. Synthesiz-
ing programs for images using reinforced adversarial learning. In International Conference on
Machine Learning, pp. 1666–1675. PMLR, 2018."
REFERENCES,0.3974358974358974,"Leon A Gatys, Alexander S Ecker, and Matthias Bethge. A neural algorithm of artistic style. arXiv
preprint arXiv:1508.06576, 2015."
REFERENCES,0.4017094017094017,"Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair,
Aaron Courville, and Yoshua Bengio. Generative adversarial nets. Advances in neural information
processing systems, 27, 2014."
REFERENCES,0.405982905982906,"Karol Gregor, Ivo Danihelka, Alex Graves, Danilo Rezende, and Daan Wierstra. Draw: A recurrent
neural network for image generation. In International Conference on Machine Learning, pp.
1462–1471. PMLR, 2015."
REFERENCES,0.41025641025641024,"Karol Gregor, Frederic Besse, Danilo Jimenez Rezende, Ivo Danihelka, and Daan Wierstra. Towards
conceptual compression. arXiv preprint arXiv:1604.08772, 2016."
REFERENCES,0.41452991452991456,"Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville. Im-
proved training of wasserstein gans. arXiv preprint arXiv:1704.00028, 2017."
REFERENCES,0.4188034188034188,Under review as a conference paper at ICLR 2022
REFERENCES,0.4230769230769231,"David Ha and Douglas Eck.
A neural representation of sketch drawings.
arXiv preprint
arXiv:1704.03477, 2017."
REFERENCES,0.42735042735042733,"Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog-
nition. In Proceedings of the IEEE conference on computer vision and pattern recognition, pp.
770–778, 2016."
REFERENCES,0.43162393162393164,"Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, and Sepp Hochreiter.
Gans trained by a two time-scale update rule converge to a local nash equilibrium. Advances in
neural information processing systems, 30, 2017."
REFERENCES,0.4358974358974359,"Luke B Hewitt, Maxwell I Nye, Andreea Gane, Tommi Jaakkola, and Joshua B Tenenbaum. The
variational homoencoder: Learning to learn high capacity generative models from few examples.
arXiv preprint arXiv:1807.08919, 2018."
REFERENCES,0.44017094017094016,"Zhewei Huang, Wen Heng, and Shuchang Zhou. Learning to paint with model-based deep reinforce-
ment learning. In Proceedings of the IEEE/CVF International Conference on Computer Vision,
pp. 8709–8718, 2019."
REFERENCES,0.4444444444444444,"Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, and Alexei A Efros. Image-to-image translation with
conditional adversarial networks. In Proceedings of the IEEE conference on computer vision and
pattern recognition, pp. 1125–1134, 2017."
REFERENCES,0.44871794871794873,"Tero Karras, Samuli Laine, and Timo Aila. A style-based generator architecture for generative
adversarial networks.
In Proceedings of the IEEE/CVF Conference on Computer Vision and
Pattern Recognition, pp. 4401–4410, 2019."
REFERENCES,0.452991452991453,"Diederik P Kingma and Max Welling.
Auto-encoding variational bayes.
arXiv preprint
arXiv:1312.6114, 2013."
REFERENCES,0.45726495726495725,"Naveen Kodali, Jacob Abernethy, James Hays, and Zsolt Kira. On convergence and stability of gans.
arXiv preprint arXiv:1705.07215, 2017."
REFERENCES,0.46153846153846156,"Brenden Lake, Ruslan Salakhutdinov, and Joshua Tenenbaum. Concept learning as motor program
induction: A large-scale empirical study. In Proceedings of the Annual Meeting of the Cognitive
Science Society, volume 34, 2012."
REFERENCES,0.4658119658119658,"Brenden M Lake, Ruslan Salakhutdinov, and Joshua B Tenenbaum. One-shot learning by inverting
a compositional causal process. 2013."
REFERENCES,0.4700854700854701,"Brenden M Lake, Ruslan Salakhutdinov, and Joshua B Tenenbaum. Human-level concept learning
through probabilistic program induction. Science, 350(6266):1332–1338, 2015."
REFERENCES,0.47435897435897434,"Brenden M Lake, Tomer D Ullman, Joshua B Tenenbaum, and Samuel J Gershman.
Building
machines that learn and think like people. Behavioral and brain sciences, 40, 2017."
REFERENCES,0.47863247863247865,"Yann LeCun. The mnist database of handwritten digits. http://yann. lecun. com/exdb/mnist/, 1998."
REFERENCES,0.4829059829059829,"Christian Ledig, Lucas Theis, Ferenc Husz´ar, Jose Caballero, Andrew Cunningham, Alejandro
Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, Zehan Wang, et al. Photo-realistic sin-
gle image super-resolution using a generative adversarial network. In Proceedings of the IEEE
conference on computer vision and pattern recognition, pp. 4681–4690, 2017."
REFERENCES,0.48717948717948717,"Richard Liaw, Eric Liang, Robert Nishihara, Philipp Moritz, Joseph E Gonzalez, and Ion Sto-
ica.
Tune: A research platform for distributed model selection and training.
arXiv preprint
arXiv:1807.05118, 2018."
REFERENCES,0.49145299145299143,"Hangyu Lin, Yanwei Fu, Xiangyang Xue, and Yu-Gang Jiang. Sketch-bert: Learning sketch bidi-
rectional encoder representation from transformers by self-supervised learning of sketch gestalt.
In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pp.
6758–6767, 2020."
REFERENCES,0.49572649572649574,"Mario Lucic, Karol Kurach, Marcin Michalski, Sylvain Gelly, and Olivier Bousquet. Are gans
created equal? a large-scale study. arXiv preprint arXiv:1711.10337, 2017."
REFERENCES,0.5,Under review as a conference paper at ICLR 2022
REFERENCES,0.5042735042735043,"Xudong Mao, Qing Li, Haoran Xie, Raymond YK Lau, Zhen Wang, and Stephen Paul Smolley.
Least squares generative adversarial networks. In Proceedings of the IEEE international confer-
ence on computer vision, pp. 2794–2802, 2017."
REFERENCES,0.5085470085470085,"John FJ Mellor, Eunbyung Park, Yaroslav Ganin, Igor Babuschkin, Tejas Kulkarni, Dan Rosenbaum,
Andy Ballard, Theophane Weber, Oriol Vinyals, and SM Eslami. Unsupervised doodling and
painting with improved spiral. arXiv preprint arXiv:1910.01007, 2019."
REFERENCES,0.5128205128205128,"Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normalization
for generative adversarial networks. arXiv preprint arXiv:1802.05957, 2018."
REFERENCES,0.5170940170940171,"Reiichiro Nakano. Neural painters: A learned differentiable constraint for generating brushstroke
paintings. arXiv preprint arXiv:1904.08410, 2019."
REFERENCES,0.5213675213675214,"Pradyumna Reddy, Michael Gharbi, Michal Lukac, and Niloy J Mitra. Im2vec: Synthesizing vector
graphics without vector supervision. arXiv preprint arXiv:2102.02798, 2021."
REFERENCES,0.5256410256410257,"Danilo Rezende, Ivo Danihelka, Karol Gregor, Daan Wierstra, et al. One-shot generalization in deep
generative models. In International Conference on Machine Learning, pp. 1521–1529. PMLR,
2016."
REFERENCES,0.5299145299145299,"Leo Sampaio Ferraz Ribeiro, Tu Bui, John Collomosse, and Moacir Ponti.
Sketchformer:
Transformer-based representation for sketched structure. In Proceedings of the IEEE/CVF Con-
ference on Computer Vision and Pattern Recognition, pp. 14153–14162, 2020."
REFERENCES,0.5341880341880342,"Patsorn Sangkloy, Nathan Burnell, Cusuh Ham, and James Hays. The sketchy database: learning to
retrieve badly drawn bunnies. ACM Transactions on Graphics (TOG), 35(4):1–12, 2016."
REFERENCES,0.5384615384615384,"Peter Schaldenbrand and Jean Oh. Content masked loss: Human-like brush stroke planning in a
reinforcement learning painting agent. arXiv preprint arXiv:2012.10043, 2020."
REFERENCES,0.5427350427350427,"Yi-Zhe Song. B´eziersketch: A generative model for scalable vector sketches. Computer Vision–
ECCV 2020, 2020."
REFERENCES,0.5470085470085471,"Aaron Van Oord, Nal Kalchbrenner, and Koray Kavukcuoglu. Pixel recurrent neural networks. In
International Conference on Machine Learning, pp. 1747–1756. PMLR, 2016."
REFERENCES,0.5512820512820513,"Alexander Wang, Mengye Ren, and Richard Zemel. Sketchembednet: Learning novel concepts by
imitating drawings. arXiv preprint arXiv:2009.04806, 2020."
REFERENCES,0.5555555555555556,"Ronald J Williams. Simple statistical gradient-following algorithms for connectionist reinforcement
learning. Machine learning, 8(3):229–256, 1992."
REFERENCES,0.5598290598290598,"Richard Zhang, Phillip Isola, Alexei A Efros, Eli Shechtman, and Oliver Wang. The unreasonable
effectiveness of deep features as a perceptual metric. In CVPR, 2018."
REFERENCES,0.5641025641025641,"Ningyuan Zheng, Yifan Jiang, and Dingjiang Huang. Strokenet: A neural painting environment. In
International Conference on Learning Representations, 2018."
REFERENCES,0.5683760683760684,"Chenghui Zhou, Chun-Liang Li, and Barnabas Poczos. Unsupervised program synthesis for images
using tree-structured lstm. arXiv preprint arXiv:2001.10119, 2020."
REFERENCES,0.5726495726495726,"Tao Zhou, Chen Fang, Zhaowen Wang, Jimei Yang, Byungmoon Kim, Zhili Chen, Jonathan Brandt,
and Demetri Terzopoulos. Learning to sketch with deep q networks and demonstrated strokes.
arXiv preprint arXiv:1810.05977, 2018."
REFERENCES,0.5769230769230769,"Zhengxia Zou, Tianyang Shi, Shuang Qiu, Yi Yuan, and Zhenwei Shi. Stylized neural painting.
arXiv preprint arXiv:2011.08114, 2020."
REFERENCES,0.5811965811965812,Under review as a conference paper at ICLR 2022
REFERENCES,0.5854700854700855,"A
NETWORK ARCHITECTURE"
REFERENCES,0.5897435897435898,"The backbone is a ResNet with 3 convolutional layers and 8 residual layers. The ﬁrst convolutional
layer has 32 ﬁlters of size 5x5. The second and third convolutional layers have 32 ﬁlters of size
4x4 and stride of 2, resulting in a tensor with dimensions 8x8x32. Then, we use standard residual
layers described in (He et al., 2016). Each convolutional layer is followed by a Batch Normalization
process and ReLU activation. The output of the ﬁnal residual layer is ﬂattened to a 2048x1 vector to
be processed by the MLPs. The ﬁrst MLP outputs a set of distributions for each control point of the
Bezier curve. It has 1 fully connected layer that outputs a 192x1 vector. This vector is reshaped to a
32x6 matrix where each 32x1 vector deﬁnes a distribution over the possible coordinates. The MLPs
used for selecting the brush width and sampling the stop/continue decision consist of 2 layers with
64 and 2 neurons."
REFERENCES,0.594017094017094,"B
TRAINING DETAILS"
REFERENCES,0.5982905982905983,"The hyperparamaters used for unconditional generation and reconstruction are presented in Table 3
and 4, respectively."
REFERENCES,0.6025641025641025,"λ1
1.016
λ2
1
α
0.336
τ
0.415
Policy network optimizer
AdamW
Policy network learning rate
3.096e −05
Policy network weight decay
0.0064
Discriminator learning rate
0.0001
Batch size
256"
REFERENCES,0.6068376068376068,"Table 3: Hyperparameters for unconditional generation. λ1 and λ2 refer to the respective hyper-
parameters in Equation 1. α and tau refer to the respective hyperparameters of entropy penalty in
Equation 2."
REFERENCES,0.6111111111111112,"λ1
0.089
α
0.59
τ
2.72
Policy network optimizer
AdamW
Policy network learning rate
1.5e −4
Policy network weight decay
1.6e −5
Batch size
256"
REFERENCES,0.6153846153846154,"Table 4: Hyperparameters for reconstruction (parsing). λ1 refers to the ‘number of action’ penalty
in Equation 3. α and tau refer to the respective hyperparameters of entropy penalty in Equation 2."
REFERENCES,0.6196581196581197,"C
EXPERIMENTS: SUPPLEMENTAL FIGURES"
REFERENCES,0.6239316239316239,"C.1
UNCONDITIONAL GENERATION"
REFERENCES,0.6282051282051282,"In Figure 10, we present the FID values for the generated images along the training on Omniglot
dataset."
REFERENCES,0.6324786324786325,"C.2
PARSING"
REFERENCES,0.6367521367521367,"In Table 5, we present the mean number of strokes our agent used to parse the characters for each
alphabet in the test set."
REFERENCES,0.6410256410256411,Under review as a conference paper at ICLR 2022
REFERENCES,0.6452991452991453,"0
20
40
60
80
100
120
140
Epoch 50 60 70 80 90 FID"
REFERENCES,0.6495726495726496,"Figure 10: FID values for unconditional generations of Omniglot dataset throughout the training
process. The experiment is repeated over 3 seeds."
REFERENCES,0.6538461538461539,"Alphabet
Number of Strokes
Sample Image
Our Model
Human
Labeled Data
Angelic
3.935
4.49
Atemayar Qelisayer
10.15
3.571
Atlantean
6.209
2.078
Aurek-Besh
7.6
2.565
Avesta
9.511
1.52
Ge ez
10.112
1.984
Glagolitic
5.24
2.88
Gurmukhi
6.080
3.09
Kannada
4.217
2.33
Keble
8.573
4.140
Malayalam
7.215
1.453
Manipuri
10.676
2.82
Mongolian
8.93
2.405
Old Church Slavonic
5.171
2.954
Oriya
5.59
2.82
Sylheti
11.38
2.84
Syriac
6.35
2.206
Tengwar
8.088
2.492
Tibetan
11.69
3.62
ULOG
6.417
3.253"
REFERENCES,0.6581196581196581,"Table 5: For each alphabet in the Omniglot evaluation set, we present the number of strokes our
agent used to reconstruct the given image vs. mean number of strokes obtained from human-labeled
data. The stroke count for human-labeled data is calculated using the labels within the Omniglot
dataset."
REFERENCES,0.6623931623931624,"C.3
EXEMPLAR GENERATION"
REFERENCES,0.6666666666666666,"In Figure 11a, we demonstrate LPIPS metrics calculated by using 3 different backbones (AlexNet,
VGG, and SqueezeNet). In Figure 11b, we present L2 and SSIM values. These metrics are calcu-
lated over all examples generated for the test set."
REFERENCES,0.6709401709401709,"C.4
GENERATING NOVEL CONCEPTS FROM TYPE"
REFERENCES,0.6752136752136753,"In Figure 12a, we demonstrate LPIPS metrics calculated by using 3 different backbones (AlexNet,
VGG, and SqueezeNet). In Figure 12b, we present L2 and SSIM values."
REFERENCES,0.6794871794871795,Under review as a conference paper at ICLR 2022
REFERENCES,0.6837606837606838,"0.00
0.05
0.10
0.15
0.20
0.25
0.30
0.35
Mean LPIPS"
REFERENCES,0.688034188034188,Angelic
REFERENCES,0.6923076923076923,Atemayar
REFERENCES,0.6965811965811965,Atlantean
REFERENCES,0.7008547008547008,Aurek-Besh
REFERENCES,0.7051282051282052,Avesta Ge_ez
REFERENCES,0.7094017094017094,Glagolitic
REFERENCES,0.7136752136752137,Gurmukhi
REFERENCES,0.717948717948718,Kannada Keble
REFERENCES,0.7222222222222222,Malayalam
REFERENCES,0.7264957264957265,Manipuri
REFERENCES,0.7307692307692307,Mongolian
REFERENCES,0.7350427350427351,Cyrillic Oriya
REFERENCES,0.7393162393162394,Sylheti
REFERENCES,0.7435897435897436,Syriac
REFERENCES,0.7478632478632479,Tengwar
REFERENCES,0.7521367521367521,Tibetan ULOG
REFERENCES,0.7564102564102564,"AlexNet
VGG
SqueezeNet (a)"
REFERENCES,0.7606837606837606,"0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
Mean L2 - SSIM values"
REFERENCES,0.7649572649572649,Angelic
REFERENCES,0.7692307692307693,Atemayar
REFERENCES,0.7735042735042735,Atlantean
REFERENCES,0.7777777777777778,Aurek-Besh
REFERENCES,0.782051282051282,Avesta Ge_ez
REFERENCES,0.7863247863247863,Glagolitic
REFERENCES,0.7905982905982906,Gurmukhi
REFERENCES,0.7948717948717948,Kannada Keble
REFERENCES,0.7991452991452992,Malayalam
REFERENCES,0.8034188034188035,Manipuri
REFERENCES,0.8076923076923077,Mongolian
REFERENCES,0.811965811965812,Cyrillic Oriya
REFERENCES,0.8162393162393162,Sylheti
REFERENCES,0.8205128205128205,Syriac
REFERENCES,0.8247863247863247,Tengwar
REFERENCES,0.8290598290598291,Tibetan ULOG
REFERENCES,0.8333333333333334,"L2
SSIM (b)"
REFERENCES,0.8376068376068376,"Figure 11: LPIPS values for each alphabet in the test set calculated from sampled exemplars (a),
SSIM and L2 values for each alphabet in the test set calculated from sampled exemplars (b)."
REFERENCES,0.8418803418803419,"0.00
0.05
0.10
0.15
0.20
0.25
0.30
0.35
Mean LPIPS"
REFERENCES,0.8461538461538461,Angelic
REFERENCES,0.8504273504273504,Atemayar
REFERENCES,0.8547008547008547,Atlantean
REFERENCES,0.8589743589743589,Aurek-Besh
REFERENCES,0.8632478632478633,Avesta Ge_ez
REFERENCES,0.8675213675213675,Glagolitic
REFERENCES,0.8717948717948718,Gurmukhi
REFERENCES,0.8760683760683761,Kannada Keble
REFERENCES,0.8803418803418803,Malayalam
REFERENCES,0.8846153846153846,Manipuri
REFERENCES,0.8888888888888888,Mongolian
REFERENCES,0.8931623931623932,Cyrillic Oriya
REFERENCES,0.8974358974358975,Sylheti
REFERENCES,0.9017094017094017,Syriac
REFERENCES,0.905982905982906,Tengwar
REFERENCES,0.9102564102564102,Tibetan ULOG
REFERENCES,0.9145299145299145,"AlexNet
VGG
SqueezeNet (a)"
REFERENCES,0.9188034188034188,"0.0
0.1
0.2
0.3
0.4
0.5
0.6
Mean L2 - SSIM values"
REFERENCES,0.9230769230769231,Angelic
REFERENCES,0.9273504273504274,Atemayar
REFERENCES,0.9316239316239316,Atlantean
REFERENCES,0.9358974358974359,Aurek-Besh
REFERENCES,0.9401709401709402,Avesta Ge_ez
REFERENCES,0.9444444444444444,Glagolitic
REFERENCES,0.9487179487179487,Gurmukhi
REFERENCES,0.9529914529914529,Kannada Keble
REFERENCES,0.9572649572649573,Malayalam
REFERENCES,0.9615384615384616,Manipuri
REFERENCES,0.9658119658119658,Mongolian
REFERENCES,0.9700854700854701,Cyrillic Oriya
REFERENCES,0.9743589743589743,Sylheti
REFERENCES,0.9786324786324786,Syriac
REFERENCES,0.9829059829059829,Tengwar
REFERENCES,0.9871794871794872,Tibetan ULOG
REFERENCES,0.9914529914529915,"L2 distance
SSIM (b)"
REFERENCES,0.9957264957264957,"Figure 12: LPIPS values for each alphabet in the test set calculated from novel samples produced
(a), L2-SSIM values for each alphabet in the test set calculated from novel samples produced (b)."
