Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.0017574692442882249,"Learning sparse coordination graphs adaptive to the coordination dynamics among
agents is a long-standing problem in cooperative multi-agent learning. This paper
studies this problem and proposes a novel method using the variance of payoff
functions to construct context-aware sparse coordination topologies. We theoret-
ically consolidate our method by proving that the smaller the variance of payoff
functions is, the less likely action selection will change after removing the corre-
sponding edge. Moreover, we propose to learn action representations to effectively
reduce the influence of payoff functions’ estimation errors on graph construction.
To empirically evaluate our method, we present the Multi-Agent COordination
(MACO) benchmark by collecting classic coordination problems in the literature,
increasing their difficulty, and classifying them into different types. We carry out
a case study and experiments on the MACO and StarCraft II micromanagement
benchmark to demonstrate the dynamics of sparse graph learning, the influence of
graph sparseness, and the learning performance of our method1."
INTRODUCTION,0.0035149384885764497,"1
INTRODUCTION"
INTRODUCTION,0.005272407732864675,"Many real-world problems involve the cooperation of multiple agents, such as unmanned aerial
vehicles (Pham et al., 2018; Xu et al., 2018) and sensor networks (Stranders et al., 2009). Like in
single-agent settings, learning control policies for multi-agent teams largely relies on the estimation
of action-value functions, no matter in value-based (Sunehag et al., 2018; Rashid et al., 2018; 2020)
or policy-based approaches (Lowe et al., 2017; Foerster et al., 2018; Wang et al., 2021c). However,
learning action-value functions for complex multi-agent tasks remains a major challenge. Learning
individual action-value functions (Tan, 1993) is scalable but suffers from learning non-stationarity
because it treats other learning agents as part of its environment. Joint action-value learning (Claus &
Boutilier, 1998) is free from learning non-stationarity but requires access to global information that is
often unavailable during execution due to partial observability and communication constraints."
INTRODUCTION,0.007029876977152899,"Factored Q-learning (Guestrin et al., 2002a) combines the advantages of these two methods. Learning
the global action-value function as a combination of local utilities, factored Q functions maintain learn-
ing scalability while avoiding non-stationarity. Enjoying these advantages, fully decomposed Q func-
tions significantly contribute to the recent progress of multi-agent reinforcement learning (Samvelyan
et al., 2019; Wang et al., 2021b). However, when fully decomposed, local utility functions only
depend on local observations and actions, which may lead to miscoordination problems in partially
observable environments with stochastic transition functions (Wang et al., 2020; 2021a) and a game-
theoretical pathology called relative overgeneralization (Panait et al., 2006; Böhmer et al., 2020).
Relative overgeneralization renders optimal decentralized policies unlearnable when the employed
value function does not have enough representational capacity to distinguish other agents’ effects on
local utility functions."
INTRODUCTION,0.008787346221441126,"Coordination graphs (Guestrin et al., 2002b) provide a promising approach to solving these problems.
Using vertices to represent agents and (hyper-) edges to represent payoff functions defined over the"
INTRODUCTION,0.01054481546572935,"∗Equal Contribution.
1The MACO benchmark and codes are publicly available at https://github.com/TonghanWang/
CASEC-MACO-benchmark."
INTRODUCTION,0.012302284710017574,Published as a conference paper at ICLR 2022
INTRODUCTION,0.014059753954305799,"joint action-observation space of the connected agents, a coordination graph expresses a higher-order
value decomposition among agents. Finding actions with the maximum value in a coordination graph
can be achieved by distributed constraint optimization (DCOP) algorithms (Cheng, 2012), which
consists of multiple rounds of message passing along the edges. Recently, DCG (Böhmer et al.,
2020) scales coordination graphs to large state-action spaces, shows its ability to solve the problem of
relative overgeneralization, and obtains competitive results on StarCraft II micromanagement tasks.
However, DCG focuses on predefined static and dense topologies, which largely lack flexibility for
dynamic environments and induce intensive and inefficient message passing."
INTRODUCTION,0.015817223198594025,"The question is how to learn dynamic and sparse coordination graphs sufficient for coordinated
action selection. This is a long-standing problem in multi-agent learning. Sparse cooperative
Q-learning (Kok & Vlassis, 2006) learns value functions for sparse coordination graphs, but the
graph topology is static and predefined by prior knowledge. Zhang & Lesser (2013) propose to
learn minimized dynamic coordination sets for each agent, but the computational complexity grows
exponentially with the neighborhood size of an agent. Recently, Castellini et al. (2019) study the
representational capability of several sparse graphs but focus on random topologies and stateless
games. In this paper, we push these previous works further by proposing a novel deep method that
learns context-aware sparse coordination graphs adaptive to the dynamic coordination requirements."
INTRODUCTION,0.01757469244288225,"For learning sparse coordination graphs, we propose to use the variance of pairwise payoff functions
as an indicator to select edges. Sparse graphs are used when selecting greedy joint actions for
execution and the update of Q-function. We provide a theoretical insight into our method by proving
that the probability of greedy action selection changing after an edge is removed decreases with
the variance of the corresponding payoff function. Despite the advantages of sparse topologies,
they raise the concern of learning instability. To solve this problem, we further equip our method
with network structures based on action representations for utility and payoff learning to reduce the
influence of estimation errors on sparse topologies learning. We call the overall learning framework
Context-Aware SparsE Coordination graphs (CASEC)."
INTRODUCTION,0.019332161687170474,"For evaluation, we present the Multi-Agent COordination (MACO) benchmark. This benchmark
collects classic coordination problems raised in the literature of multi-agent learning, increases their
difficulty, and classifies them into 6 classes. Each task in the benchmark represents a type of problem.
We carry out a case study on the MACO benchmark to show that CASEC can discover the coordination
dependence among agents under different situations and to analyze how the graph sparsity influences
action coordination. We further show that CASEC can largely reduce the communication cost
(typically by 50%) and perform significantly better than dense, static graphs and several alternative
methods for building sparse graphs. We then test CASEC on the StarCraft II micromanagement
benchmark (Samvelyan et al., 2019) to demonstrate its scalability and effectiveness."
BACKGROUND,0.0210896309314587,"2
BACKGROUND"
BACKGROUND,0.022847100175746926,"In this paper, we focus on fully cooperative multi-agent tasks that can be modelled as a Dec-
POMDP (Oliehoek et al., 2016) consisting of a tuple G=⟨I, S, A, P, R, Ω, O, n, γ⟩, where I is the
finite set of n agents, γ ∈[0, 1) is the discount factor, and s ∈S is the true state of the environment.
At each timestep, each agent i receives an observation oi ∈Ωdrawn according to the observation
function O(s, i) and selects an action ai ∈A. Individual actions form a joint action a ∈An, which
leads to a next state s′ according to the transition function P(s′|s, a), a reward r = R(s, a) shared by
all agents. Each agent has local action-observation history τi ∈T ≡(Ω× A)∗× Ω. Agents learn to
collectively maximize the global return Qtot(s, a) = Es0:∞,a0:∞[P∞
t=0 γtR(st, at)|s0 = s, a0 = a]."
BACKGROUND,0.02460456942003515,"In a coordination graph (Guestrin et al., 2002b) G = ⟨V, E⟩, each vertex vi ∈V represents an agent
i, and (hyper-) edges in E represent coordination dependencies among agents. In this paper, we
consider pairwise edges, and such a coordination graph induces a factorization of the global Q:"
BACKGROUND,0.026362038664323375,"Qtot(τ, a) = 1 |V| X"
BACKGROUND,0.028119507908611598,"i
qi(τi, ai) + 1 |E| X"
BACKGROUND,0.029876977152899824,"{i,j}∈E
qij(τij, aij),
(1)"
BACKGROUND,0.03163444639718805,"where qi and qij is utility functions for individual agents and pairwise payoff functions, respectively.
τij = ⟨τi, τj⟩and aij = ⟨ai, aj⟩is the joint action-observation history and action of agent i and j."
BACKGROUND,0.033391915641476276,Published as a conference paper at ICLR 2022
BACKGROUND,0.0351493848857645,"Within a coordination graph, the greedy action selection required by Q-learning can not be completed
by simply computing the maximum of individual utility and payoff functions. Instead, distributed
constraint optimization (DCOP) (Cheng, 2012) techniques can be used. Max-Sum (Stranders et al.,
2009) is a popular implementation of DCOP, which finds optimal actions on a coordination graph
G = ⟨V, E⟩via multi-round message passing on a bipartite graph Gm = ⟨Va, Vq, Em⟩. Each node
i ∈Va represents an agent, and each node g ∈Vq represents a utility (qi) or payoff (qij) function.
Edges in Em connect g with the corresponding agent node(s). Message passing on this bipartite graph
starts with sending messages from node i ∈Va to node g ∈Vq:"
BACKGROUND,0.03690685413005272,"mi→g (ai) =
X"
BACKGROUND,0.03866432337434095,"h∈Fi\g
mh→i (ai) + cig,
(2)"
BACKGROUND,0.040421792618629174,"where Fi is the set of nodes connected to node i in Vq, and cig is a normalizing factor preventing the
value of messages from growing arbitrarily large. The message from node g to node i is:"
BACKGROUND,0.0421792618629174,"mg→i (ai) = max
ag\ai "
BACKGROUND,0.043936731107205626,"q (ag) +
X"
BACKGROUND,0.04569420035149385,"h∈Vg\i
mh→g (ah) "
BACKGROUND,0.04745166959578207,",
(3)"
BACKGROUND,0.0492091388400703,"where Vg is the set of nodes connected to node g in Va, ag= {ah|h ∈Vg}, ag\ai= {ah|h ∈Vg\{i}},
and q represents utility or payoff functions conditioned on ag. After several iterations of message
passing, each agent i can find its optimal action by calculating a∗
i = argmaxai
P"
BACKGROUND,0.050966608084358524,h∈Fi mh→i (ai).
BACKGROUND,0.05272407732864675,"A drawback of Max-Sum or other message passing methods (e.g., max-plus (Pearl, 2014)) is that
running them for each action selection through the whole system results in intensive computation and
communication among agents, which is impractical for most applications with limited computational
resources and communication bandwidth. In the following sections, we discuss how to solve this
problem by learning sparse coordination graphs."
BACKGROUND,0.054481546572934976,"Previous works (Naderializadeh et al., 2020; Li et al., 2021) study soft versions of fully-connected
coordination graphs based on attention mechanisms. Specifically, Li et al. (2021) uses graphs whose
edge weights are learned by self-attention so that agents attend to observations of other agents
differently. The information is used in local actors or a centralized critic. Naderializadeh et al. (2020)
learns soft full graphs in a similar way, but the graph is used to mix local utilities conditioned on
local action-observation history. Different from our work, these methods do not learn pairwise payoff
functions, and the learned graphs are still fully-connected."
LEARNING CONTEXT-AWARE SPARSE GRAPHS,0.056239015817223195,"3
LEARNING CONTEXT-AWARE SPARSE GRAPHS"
LEARNING CONTEXT-AWARE SPARSE GRAPHS,0.05799648506151142,"In this section, we introduce our methods for learning context-aware sparse graphs. We first introduce
how we construct a sparse graph for effective action selection in Sec. 3.1. After that, we introduce our
learning framework in Sec. 3.2. Although sparse graphs can reduce communication overhead, they
raise the concern of learning instability. We discuss this problem and how to alleviate it in Sec. 3.3."
CONSTRUCT SPARSE GRAPHS,0.05975395430579965,"3.1
CONSTRUCT SPARSE GRAPHS"
CONSTRUCT SPARSE GRAPHS,0.061511423550087874,"Action values, especially the pairwise payoff functions, contain much information about mutual
influence between agents. Let’s consider two agents i and j. Intuitively, agent i needs to coordinate
its action selection with agent j if agent j’s action exerts significant influence on the expected utility
of agent i. For a fixed action ai, Varaj [qij(τij, aij)] can measure the influence of agent j on the
expected payoff. This intuition motivates us to use the variance of payoff functions"
CONSTRUCT SPARSE GRAPHS,0.0632688927943761,"ζqvar
ij
= max
ai Varaj [qij(τij, aij)] ,
(4)"
CONSTRUCT SPARSE GRAPHS,0.06502636203866433,"as an indicator to construct sparse graphs. The maximization operator guarantees that the most affected
action is considered. When ζqvar
ij
is large, the expected utility of agent i fluctuates dramatically with
the action of agent j, and they need to coordinate their actions. Therefore, with this measurement,
to construct sparse coordination graphs, we can set a sparseness controlling constant λ ∈(0, 1) and
select λ|V|(|V| −1) edges with the largest ζqvar
ij
values."
CONSTRUCT SPARSE GRAPHS,0.06678383128295255,"To justify this approach, we theoretically prove that, the smaller the value of ζqvar
ij
is, the more likely
that the Max-Sum algorithm will select the same actions after removing the edge (i, j)."
CONSTRUCT SPARSE GRAPHS,0.06854130052724078,Published as a conference paper at ICLR 2022
CONSTRUCT SPARSE GRAPHS,0.070298769771529,"Proposition 1. For any two agents i, j and the edge eij connecting them in the coordination graph,
after removing edge eij, greedy actions of agent i and j selected by the Max-Sum algorithm keep
unchanged with a probability larger than 2
|A| "
CONSTRUCT SPARSE GRAPHS,0.07205623901581722,"
( ¯m −minaj m(aj))(maxaj m(aj) −¯m)"
CONSTRUCT SPARSE GRAPHS,0.07381370826010544,"h
ζqvar
ij
+ 2M 2 + 2
q"
CONSTRUCT SPARSE GRAPHS,0.07557117750439367,"M 2  
M 2 + ζqvar
ij
i2 −1 "
CONSTRUCT SPARSE GRAPHS,0.0773286467486819,",
(5)"
CONSTRUCT SPARSE GRAPHS,0.07908611599297012,"where m(aj) = meij→j(aj), ¯m is the average of m(aj), M = maxaj [maxai r (ai, aj) −r (ai, aj)],
and r(ai, aj) = q(ai, aj) + mi→eij(aj)."
CONSTRUCT SPARSE GRAPHS,0.08084358523725835,"Detailed proof can be found in Appendix A. The lower bound in Proposition 1 increases with a
decreasing ζqvar
ij . Therefore, edges with a smaller ζqvar
ij
are less likely to influence the results of
Max-Sum, justifying the way we construct sparse graphs."
LEARNING FRAMEWORK,0.08260105448154657,"3.2
LEARNING FRAMEWORK"
LEARNING FRAMEWORK,0.0843585237258348,"Like conventional Q-learning, CASEC consists of two main components – learning value functions
and selecting greedy actions. The difference is that these two steps are now carried out on dynamic
and sparse coordination graphs."
LEARNING FRAMEWORK,0.08611599297012303,"In CASEC, agents learn a shared utility function qξu(·|τi), parameterized by ξu, and a shared pairwise
payoff function qξp(·|τij), parameterized by ξp. The global Q value function is estimated as:"
LEARNING FRAMEWORK,0.08787346221441125,"Qtot(τ, a) = 1 |V| X"
LEARNING FRAMEWORK,0.08963093145869948,"i
qξu(ai|τi) +
1
|V|(|V| −1) X"
LEARNING FRAMEWORK,0.0913884007029877,"i̸=j
qξp(aij|τij),
(6)"
LEARNING FRAMEWORK,0.09314586994727592,which is updated by the TD loss:
LEARNING FRAMEWORK,0.09490333919156414,"LT D(ξu, ξp) = ED"
LEARNING FRAMEWORK,0.09666080843585237,"
r + γ ˆQtot(τ ′, Max-Sum(qˆξu, qˆξp)) −Qtot(τ, a)
2
.
(7)"
LEARNING FRAMEWORK,0.0984182776801406,"Max-Sum(·, ·) is the greedy joint action selected by Max-Sum, ˆQtot is a target network with param-
eters ˆξu, ˆξp periodically copied from Qtot, and the expectation is estimated with uniform samples
from a replay buffer D. Meanwhile, we also minimize a sparseness loss"
LEARNING FRAMEWORK,0.10017574692442882,"Lqvar
sparse(ξp) =
1
|V|(|V| −1)|A| X i̸=j X"
LEARNING FRAMEWORK,0.10193321616871705,"ai
Varaj [qij(τij, aij)] ,
(8)"
LEARNING FRAMEWORK,0.10369068541300527,"which is a regularization on ζqvar
ij . Introducing a scaling factor λsparse ∈(0, 1] and minimizing
LT D(ξu, ξp) +λsparseLqvar
sparse(ξp) builds in inductive biases which favor minimized coordination graphs
that would not sacrifice global returns."
LEARNING FRAMEWORK,0.1054481546572935,"Actions with the maximized value are selected for Q-learning and execution. In our framework,
such action selections are finished by running Max-Sum on sparse graphs induced by ζqvar
ij
(while we
update Q functions on the full graph). Running Max-Sum requires the message passing through each
node and edge. To speed up action selections, similar to previous work (Böhmer et al., 2020), we use
multi-layer graph neural networks without parameters to process messages in a parallel manner."
STABILIZE LEARNING,0.10720562390158173,"3.3
STABILIZE LEARNING"
STABILIZE LEARNING,0.10896309314586995,"One question with estimating qij is that there are |A| × |A| action-pairs, each of which requires an
output head in conventional deep Q networks. As only executed action-pairs are updated during
Q-learning, parameters of many output heads remain unchanged for long stretches of time, resulting
in estimation errors. Previous work (Böhmer et al., 2020) uses a low-rank approximation to reduce
the number of output heads. However, it is largely unclear how to choose the best rank K for different
tasks, and still only
1
|A| of the output heads are selected in one Q-learning update."
STABILIZE LEARNING,0.11072056239015818,"This problem of estimation errors becomes especially problematic in CASEC, where building
coordination graphs relies on the estimation of qij. A negative feedback loop is created because the
built coordination graphs also affect the learning of qij. This loop renders learning unstable (Fig. 5)."
STABILIZE LEARNING,0.11247803163444639,Published as a conference paper at ICLR 2022
STABILIZE LEARNING,0.11423550087873462,"We propose to solve this question and stabilize training by 1) periodically fixing the way we construct
graphs via using the target payoff function to build graphs; and 2) accelerating the training of
payoff function between target network updates to reduce the estimation errors via learning action
representations."
STABILIZE LEARNING,0.11599297012302284,"Specifically, for 2), we propose to condition the utility and payoff functions on action representations
to improve sample efficiency. We train an action encoder fξa(a), whose input is the one-hot encoding
of an action a and output is its representation za. We adopt the technique introduced by Wang et al.
(2021b) to train an effect-based action encoder. Specifically, action representation za, together with
the current local observations, is used to predict the reward and observations at the next timestep. The
prediction loss is minimized to update the action encoder fξa(a). For more details, we refer readers
to Appendix D. The action encoder is trained with few samples when learning begins and remains
unchanged for the rest of the training process."
STABILIZE LEARNING,0.11775043936731107,"Using action representations, the utility and payoff functions can now be estimated as:"
STABILIZE LEARNING,0.1195079086115993,"qξu(τi, ai) = hξu(τi)Tzai;"
STABILIZE LEARNING,0.12126537785588752,"qξp(τij, aij) = hξp(τij)T[zai, zaj],
(9)"
STABILIZE LEARNING,0.12302284710017575,"where h includes a GRU (Cho et al., 2014) to process sequential input and output a vector with the
same dimension as the corresponding action representation. [·, ·] means vector concatenation. Using
Eq. 9, no matter which action is selected for execution, all parameters in the framework (ξu and ξp)
would be updated. The detailed network structure can be found in Appendix E."
MULTI-AGENT COORDINATION BENCHMARK,0.12478031634446397,"4
MULTI-AGENT COORDINATION BENCHMARK"
MULTI-AGENT COORDINATION BENCHMARK,0.1265377855887522,"To evaluate our sparse graph learning algorithm, we collect classic coordination problems from the
cooperative multi-agent learning literature, improve their difficulty, and classify them into different
types. Then, 6 representative problems are selected and presented as a new benchmark called
Multi-Agent COordination (MACO) challenge (Table 1)."
MULTI-AGENT COORDINATION BENCHMARK,0.1282952548330404,Table 1: Multi-agent coordination benchmark.
MULTI-AGENT COORDINATION BENCHMARK,0.13005272407732865,"Task
Factored
Pairwise
Dynamic
# Agents"
MULTI-AGENT COORDINATION BENCHMARK,0.13181019332161686,"Aloha
√
√
10"
MULTI-AGENT COORDINATION BENCHMARK,0.1335676625659051,"Pursuit
√
√
√
10"
MULTI-AGENT COORDINATION BENCHMARK,0.13532513181019332,"Hallway
√
12"
MULTI-AGENT COORDINATION BENCHMARK,0.13708260105448156,"Sensor
√
√
15
Gather
–
5"
MULTI-AGENT COORDINATION BENCHMARK,0.13884007029876977,"Disperse
–
√
12"
MULTI-AGENT COORDINATION BENCHMARK,0.140597539543058,"At the first level, tasks are classified
as factored and non-factored games,
where factored games present an ex-
plicit decomposition of global re-
wards.
Factored games are further
categorized according to two proper-
ties – whether the task requires pair-
wise or higher-order coordination, and
whether the underlying coordination
relationships change temporally. For
non-factored games, we divide them
into two classes by whether the task
characterizes static coordination rela-
tionships among agents. To better test
the performance of different methods, we increase the difficulty of the included problems by ex-
tending stateless games to temporally extended settings (Gather and Disperse), complicating the
reward function (Pursuit), or increasing the number of agents (Aloha and Hallway). We now
briefly describe the setting of each game. For detailed description, we refer readers to Appendix B."
MULTI-AGENT COORDINATION BENCHMARK,0.14235500878734622,"Aloha (Hansen et al., 2004; Oliehoek, 2010) consists of 10 islands in a 2 × 5 array. Each island has a
backlog of messages to send. They send one message or not at each timestep. When two neighboring
agents send simultaneously, messages collide and have to be resent. Islands start with 1 package in
the backlog. At each timestep, with a probability 0.6 a new packet arrives if the maximum backlog
(5) has not been reached. Each agent observes its position and the number of packages in its backlog.
Agents receive a global reward of 0.1 for each successful transmission, and −10 for a collision."
MULTI-AGENT COORDINATION BENCHMARK,0.14411247803163443,"Pursuit, also called Predator and Prey, is a classic coordination problem (Benda, 1986; Stone &
Veloso, 2000; Son et al., 2019). Ten agents (predators) roam a 10 × 10 map populated with 5 random
walking preys for 50 environment steps. One prey is captured if two agents catch it simultaneously,
after which the catching agents and the prey are removed from the map, resulting in a team reward"
MULTI-AGENT COORDINATION BENCHMARK,0.14586994727592267,Published as a conference paper at ICLR 2022
AGENTS & IDS,0.14762741652021089,1 Agents & ids
TARGETS & IDS,0.14938488576449913,"1 Targets & ids
Actions by ind. utility
Actions changed / added by Max-Sum
Edges in CG 0 1 2 3 4"
TARGETS & IDS,0.15114235500878734,"0
1
2
3
4
5
6
7
8"
TARGETS & IDS,0.15289982425307558,"1
2
3
4
5"
TARGETS & IDS,0.1546572934973638,"6
7
8
9
10"
TARGETS & IDS,0.15641476274165203,"11
12
13
14
15 1 2
3"
TARGETS & IDS,0.15817223198594024,"Figure 1: Left: Learning curves (return and the number of successfully scanned targets) of
CASEC and DCG on Sensor. Middle: The influence of graph sparseness on performance (re-
turn and the number of scanned targets). Here we show the case of the best seed. The plot of other
seeds can be found in Fig. 21. Right: An example coordination graph learned by our method."
TARGETS & IDS,0.15992970123022848,"of 1. If only one agent tries to catch the prey, the prey would not be captured and the agents will be
punished. We consider a challenging version of Pursuit by setting the punishment to 1, which is
the same as the reward obtained by a successful catch."
TARGETS & IDS,0.1616871704745167,"Hallway (Wang et al., 2020) is a multi-chain Dec-POMDP. We increase the difficulty of Hallway
by introducing more agents and grouping them (Fig. 6). One agent randomly spawns at a state in
each chain. Agents can observe their own position and choose to move left, move right, or keep still
at each timestep. Agents win with a global reward of 1 if they arrive at state g simultaneously with
other agents in the same group. If ng > 1 groups attempt to move to g at the same timestep, they
keep motionless and agents receive a global punishment of −0.5 ∗ng."
TARGETS & IDS,0.1634446397188049,"Sensor has been extensively studied (Lesser et al., 2012; Zhang & Lesser, 2011). We consider 15
sensors in a 3 × 5 matrix. Sensors can scan the eight nearby points. Each scan induces a cost of -1,
and agents can do noop to save the cost. Three targets wander randomly in the gird. If k ≥2 sensors
scan a target simultaneously, the system gets a constant reward of 3, which is independent of the
number of sensors. Agents can observe the id and position of targets nearby."
TARGETS & IDS,0.16520210896309315,"Gather is an extension of the Climb Game (Wei & Luke, 2016). In Climb Game, each agent has
three actions: A = {a0, a1, a2}. Action a0 yields no reward (0) if only some agents choose it, but a
high reward (10) if all choose it. Otherwise, if no agent chooses action a0, a reward 5 is obtained. We
increase the difficulty of this game by making it temporally extended and introducing stochasticity.
Actions are no longer atomic, and agents need to learn policies to realize these actions by navigating
to goals g1, g2 and g3 (Fig. 7). Moreover, for each episode, one of g1, g2 and g3 is randomly selected
as the optimal goal (corresponding to a0 in the original game)."
TARGETS & IDS,0.16695957820738136,"Disperse consists of 12 agents. At each timestep, agents can choose to work at one of 4 hospitals
by selecting an action in A = {a0, a1, a2, a3}. At timestep t, hospital j needs xj
t agents for the next
timestep. One hospital is randomly selected and its xj
t is a positive number, while the need of other
hospitals is 0. If yj
t+1 < xj
t agents go to the selected hospital, the whole team would be punished
yj
t+1 −xj
t. Agents observe the local hospital’s id and its need for the next timestep."
TARGETS & IDS,0.1687170474516696,"5
CASE STUDY: LEARNING SPARSE GRAPHS ON Sensor"
TARGETS & IDS,0.1704745166959578,"We are particularly interested in the dynamics and results of sparse graph learning. Therefore, we
carry out a case study on Sensor. When training CASEC on this task, we select 10% edges with
largest ζqvar
ij
values to construct sparse graphs."
TARGETS & IDS,0.17223198594024605,"Interpretable sparse coordination graphs. In Fig. 1 right, we show a screenshot of the game with
the learned coordination graph at a certain timestep. We can observe that all edges in the learned
graph involve agents around the targets. Let’s see the case of agent 8. The action proposed by
the individual utility function of agent 8 is to scan target 1. After coordinating its action with
other agents, agent 8 changes its action selection and scans target target 2, resulting in an optimal
solution for the given configuration. This result is in line with our theoretical analysis in Sec. 3.1.
The most important edges can be characterized by a large ζ value."
TARGETS & IDS,0.17398945518453426,"Influence of graph sparseness on performance. It is worth noting that with fewer edges in the
coordination graph, CASEC has better performance than DCG on Sensor (Fig. 1 left, where the"
TARGETS & IDS,0.1757469244288225,Published as a conference paper at ICLR 2022
"AGENTS AND
THEIR IDS",0.17750439367311072,"1
Agents and
their ids"
"TARGETS AND
THEIR IDS",0.17926186291739896,"1
Targets and
their ids"
"TARGETS AND
THEIR IDS",0.18101933216168717,Scan actions
"TARGETS AND
THEIR IDS",0.1827768014059754,"CASEC (sparse graph with 10% edges)
CASEC w/o sparse loss
(sparse graph with 10% edges)"
"TARGETS AND
THEIR IDS",0.18453427065026362,"CASEC (full graph)
CASEC w/o sparse loss"
"TARGETS AND
THEIR IDS",0.18629173989455183,(full graph)
"TARGETS AND
THEIR IDS",0.18804920913884007,DCG (full graph)
"TARGETS AND
THEIR IDS",0.18980667838312829,DCG (sparse graph with 10% edges) 0 1 2 3 4
"TARGETS AND
THEIR IDS",0.19156414762741653,"0
1
2
3
4
5
6
7
8"
"TARGETS AND
THEIR IDS",0.19332161687170474,"1
2
3
4
5"
"TARGETS AND
THEIR IDS",0.19507908611599298,"6
7
8
9
10"
"TARGETS AND
THEIR IDS",0.1968365553602812,"11
12
13
14
15 1 2 3 0 1 2 3 4"
"TARGETS AND
THEIR IDS",0.19859402460456943,"0
1
2
3
4
5
6
7
8"
"TARGETS AND
THEIR IDS",0.20035149384885764,"1
2
3
4
5"
"TARGETS AND
THEIR IDS",0.20210896309314588,"6
7
8
9
10"
"TARGETS AND
THEIR IDS",0.2038664323374341,"11
12
13
14
15 1 2 3 0 1 2 3 4"
"TARGETS AND
THEIR IDS",0.2056239015817223,"0
1
2
3
4
5
6
7
8"
"TARGETS AND
THEIR IDS",0.20738137082601055,"1
2
3
4
5"
"TARGETS AND
THEIR IDS",0.20913884007029876,"6
7
8
9
10"
"TARGETS AND
THEIR IDS",0.210896309314587,"11
12
13
14
15 1 2 3 0 1 2 3 4"
"TARGETS AND
THEIR IDS",0.2126537785588752,"0
1
2
3
4
5
6
7
8"
"TARGETS AND
THEIR IDS",0.21441124780316345,"1
2
3
4
5"
"TARGETS AND
THEIR IDS",0.21616871704745166,"6
7
8
9
10"
"TARGETS AND
THEIR IDS",0.2179261862917399,"11
12
13
14
15 1 2 3 0 1 2 3 4"
"TARGETS AND
THEIR IDS",0.21968365553602812,"0
1
2
3
4
5
6
7
8"
"TARGETS AND
THEIR IDS",0.22144112478031636,"1
2
3
4
5"
"TARGETS AND
THEIR IDS",0.22319859402460457,"6
7
8
9
10"
"TARGETS AND
THEIR IDS",0.22495606326889278,"11
12
13
14
15 1 2 3 0 1 2 3 4"
"TARGETS AND
THEIR IDS",0.22671353251318102,"0
1
2
3
4
5
6
7
8"
"TARGETS AND
THEIR IDS",0.22847100175746923,"1
2
3
4
5"
"TARGETS AND
THEIR IDS",0.23022847100175747,"6
7
8
9
10"
"TARGETS AND
THEIR IDS",0.23198594024604569,"11
12
13
14
15 1 2 3"
"TARGETS AND
THEIR IDS",0.23374340949033393,Figure 2: Coordination graphs learned by different methods on Sensor.
"TARGETS AND
THEIR IDS",0.23550087873462214,"0.0
0.5
1.0
1.5
2.0
T (mil) 0 20 40 60"
"TARGETS AND
THEIR IDS",0.23725834797891038,Test Transmitted Aloha
"TARGETS AND
THEIR IDS",0.2390158172231986,"0.0
0.5
1.0
1.5
2.0
T (mil) 0 2 4"
"TARGETS AND
THEIR IDS",0.24077328646748683,Test Prey Caught
"TARGETS AND
THEIR IDS",0.24253075571177504,Pursuit
"TARGETS AND
THEIR IDS",0.24428822495606328,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 0 25 50 75 100"
"TARGETS AND
THEIR IDS",0.2460456942003515,Test Win %
"TARGETS AND
THEIR IDS",0.2478031634446397,Hallway
"TARGETS AND
THEIR IDS",0.24956063268892795,"0.0
0.1
0.2
0.3
0.4
0.5
T (mil) 0 10 20 30"
"TARGETS AND
THEIR IDS",0.2513181019332162,Test Scanned
"TARGETS AND
THEIR IDS",0.2530755711775044,Sensor
"TARGETS AND
THEIR IDS",0.2548330404217926,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 0 25 50 75 100"
"TARGETS AND
THEIR IDS",0.2565905096660808,Test Win %
"TARGETS AND
THEIR IDS",0.2583479789103691,Gather
"TARGETS AND
THEIR IDS",0.2601054481546573,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 4 3 2 1 0"
"TARGETS AND
THEIR IDS",0.2618629173989455,Test Return
"TARGETS AND
THEIR IDS",0.26362038664323373,Disperse
"TARGETS AND
THEIR IDS",0.26537785588752194,"CASEC (Ours)
DCG"
"TARGETS AND
THEIR IDS",0.2671353251318102,"VDN
QMIX"
"TARGETS AND
THEIR IDS",0.2688927943760984,"Weighted QMIX (CW-QMIX)
Weighted QMIX (OW-QMIX)"
"TARGETS AND
THEIR IDS",0.27065026362038663,"DICG
GraphMix"
"TARGETS AND
THEIR IDS",0.27240773286467485,Figure 3: Performance comparison with baselines on the MACO benchmark.
"TARGETS AND
THEIR IDS",0.2741652021089631,"median performance and 25%-75% percentiles are shown). This observation may be counter-intuitive
at the first glance. To study this problem, we load the model after convergence learned by CASEC and
DCG, gradually remove edges from the full graph in the ascending order of ζqvar
ij , and check the
change of scanned targets and the obtained reward. Results are shown in Fig. 1 middle and Fig. 21."
"TARGETS AND
THEIR IDS",0.2759226713532513,"It can be observed that the performance of DCG (the number of scanned targets) does not change with
the number of edges. In another word, only the individual utility function contributes to scanning
targets. Screenshots shown in Fig. 2 (right column) align with this observation. With more edges,
DCG makes a less optimal decision: agent 4, 5, and 9 no longer scan target 1."
"TARGETS AND
THEIR IDS",0.27768014059753954,"In contrast, the performance of CASEC grows with more edges in the coordination graph. By
referring to Fig. 2 (left column), we can conclude that CASEC first selects edges that help agents scan
more targets, and then selects edges that can eliminate useless scan actions. These results demonstrate
that our method can distinguish the most important edges on Sensor."
"TARGETS AND
THEIR IDS",0.27943760984182775,"We also study the influence of the sparseness loss (Eq. 8). As shown in Fig. 1 middle, CASEC without
the sparseness loss consistently gets fewer rewards than CASEC. For example, target 1 and 3 are not
captured in the case shown in Fig. 2 (middle column) as only one agent scans them. These results
highlight the function of the sparseness loss."
EXPERIMENTS,0.281195079086116,"6
EXPERIMENTS"
EXPERIMENTS,0.28295254833040423,"In this section, we design experiments to answer the following questions: (1) How much communi-
cation can be saved by our method? How does communication threshold influence performance on
factored and non-factored games? (Sec. 6.1) (2) How does our method compare to state-of-the-art
multi-agent learning methods? (Sec. 6.2, 6.3) (3) Is our method efficient in settings with larger"
EXPERIMENTS,0.28471001757469244,Published as a conference paper at ICLR 2022
EXPERIMENTS,0.28646748681898065,"action-observation spaces? (Sec. 6.3) For results in this section, we show the median performance
with 8 random seeds as well as the 25-75% percentiles."
GRAPH SPARSENESS,0.28822495606326887,"6.1
GRAPH SPARSENESS"
GRAPH SPARSENESS,0.28998242530755713,"Table 2: Percentage of commu-
nication saved for each task."
GRAPH SPARSENESS,0.29173989455184535,"Aloha
Pursuit
Hallway"
GRAPH SPARSENESS,0.29349736379613356,"80.0%
70.0%
50.0%
Sensor
Gather
Disperse"
GRAPH SPARSENESS,0.29525483304042177,"90.0%
30.0%
60.0%"
GRAPH SPARSENESS,0.29701230228471004,"An important advantage of learning sparse coordination graphs is
reduced communication costs. The complexity of running Max-
Sum for each action selection is O
 
k
 
|V||A| + |E||A|2
, where
k is the number of iterations of message passing. Sparse graphs
cut down communication costs by reducing the number of edges."
GRAPH SPARSENESS,0.29876977152899825,"We carry out a grid search to find the communication threshold
under which sparse graphs have the best performance. We find
that most implementations of dynamically sparse graphs require
similar numbers of edges to prevent performance from dropping significantly. In Table 2, we show the
communication cut rates we use when benchmarking our method. Generally speaking, non-factored
games typically require more messages than factored games, while, for most tasks, at least 50%
messages can be saved without sacrificing the learning performance."
GRAPH SPARSENESS,0.30052724077328646,"0.00
0.25
0.50
0.75
1.00
Threshold 0 5 10 15 20 25"
GRAPH SPARSENESS,0.3022847100175747,Performance
GRAPH SPARSENESS,0.30404217926186294,Sensor (A Factored Game)
GRAPH SPARSENESS,0.30579964850615116,"0.00
0.25
0.50
0.75
1.00
Threshold 0.0 0.2 0.4 0.6 0.8 1.0"
GRAPH SPARSENESS,0.30755711775043937,Performance
GRAPH SPARSENESS,0.3093145869947276,Gather (A Non-Factored Game)
GRAPH SPARSENESS,0.3110720562390158,"Figure 4: The influence of graph sparseness (1.0
represents complete graphs) on the performance
on factored games (Sensor, left) and non-factored
games (Gather, right)."
GRAPH SPARSENESS,0.31282952548330406,"Communication threshold vs. performance In
Fig. 4, we show the performance of our method
under different communication thresholds which
control the sparseness of edges. We can observe
that, on the factored game Sensor, performance
first grows then drops when more edges are in-
cluded in the coordination graphs. These ob-
servations are in line with the fact that sparse
graphs can outperform complete graphs and
fully-decomposed value functions on this task.
In contrast, for the non-factored game Gather,
performance stabilizes beyond a certain thresh-
old. Non-factored games usually involve com-
plex coordination relationships, and denser topologies are suitable for this type of questions."
GRAPH SPARSENESS,0.3145869947275923,"6.2
MACO: MULTI-AGENT COORDINATION BENCHMARK"
GRAPH SPARSENESS,0.3163444639718805,"We compare our method with state-of-the-art fully-decomposed value-based methods (VDN (Sunehag
et al., 2018), QMIX (Rashid et al., 2018), and Weighted QMIX (Rashid et al., 2020)), coordina-
tion graph learning method (DCG (Böhmer et al., 2020)), and attentional graph learning methods
(DICG (Li et al., 2021) and GraphMIX (Naderializadeh et al., 2020)) on MACO (Fig. 3). Since the
number of actions is not very large in MACO, we do not use action representations when estimating
the utility and payoff function for CASEC."
GRAPH SPARSENESS,0.3181019332161687,"We can see that our method significantly outperforms fully-decomposed value-based methods. The
reason is that fully-decomposed methods suffer from the relative overgeneralization issue and
miscoordination problems in partially observable environments with stochasticity. For example, on
task Pursuit (Benda, 1986), if more than one agent catches one prey simultaneously, these agents
will be rewarded 1. However, if only one agent catches prey, it fails and gets a punishment of -1. For
an agent with a limited sight range, the reward it obtains when taking the same action (catching a prey)
under the same local observation depends on the actions of other agents and changes dramatically.
This is the relative overgeneralization problem. Another example is Hallway (Wang et al., 2020),
where several agents need to reach a goal state simultaneously without knowing each other’s location.
Fully-decomposed methods cannot solve this problem if the initial positions of agents are stochastic."
GRAPH SPARSENESS,0.31985940246045697,"For DCG, we use its default settings of complete graphs and no low-rank approximation. We observe
that DCG is less effective on tasks characterized by sparse coordination interdependence like Sensor.
We hypothesize this is because coordinating actions with all other agents requires the shared estimator
to express payoff functions of most agent pairs accurately enough, which needs more samples to
learn, hurting the performance of DCG on loosely coupled tasks."
GRAPH SPARSENESS,0.3216168717047452,Published as a conference paper at ICLR 2022
GRAPH SPARSENESS,0.3233743409490334,"0
1
2
3
4
5
T (mil) 0 20 40 60 80 100"
GRAPH SPARSENESS,0.3251318101933216,Test Win %
GRAPH SPARSENESS,0.3268892794376098,a) Win rate on 5m_vs_6m
GRAPH SPARSENESS,0.3286467486818981,"0
1
2
3
4
5
T (mil) 0 20 40 60 80 100"
GRAPH SPARSENESS,0.3304042179261863,Test Win %
GRAPH SPARSENESS,0.3321616871704745,b) Win rate on MMM2
GRAPH SPARSENESS,0.3339191564147627,"0
1
2
3
4
5
T (mil) 0.05 0.10 0.15 0.20 0.25"
GRAPH SPARSENESS,0.335676625659051,Average TD Error
GRAPH SPARSENESS,0.3374340949033392,c) TD error on MMM2
GRAPH SPARSENESS,0.3391915641476274,"VDN
QMIX"
GRAPH SPARSENESS,0.3409490333919156,"DCG (rank 1)
CASEC (Ours)"
GRAPH SPARSENESS,0.3427065026362039,"CASEC (w/o action repr.)
CASEC (rank 1)"
GRAPH SPARSENESS,0.3444639718804921,"Full (action repr.)
DICG"
GRAPH SPARSENESS,0.3462214411247803,GraphMIX
GRAPH SPARSENESS,0.34797891036906853,Figure 5: Performance and TD errors compared to baselines and ablations on the SMAC benchmark.
STARCRAFT II MICROMANAGEMENT BENCHMARK,0.34973637961335674,"6.3
STARCRAFT II MICROMANAGEMENT BENCHMARK"
STARCRAFT II MICROMANAGEMENT BENCHMARK,0.351493848857645,"We compare our method against the state-of-the-art coordination graph learning method (DCG (Böh-
mer et al., 2020)) and fully decomposed value-based MARL algorithms (VDN (Sunehag et al., 2018),
QMIX (Rashid et al., 2018)). For CASEC, we use action representations to estimate the payoff
function. We train the action encoder for 50k samples and keep action representations unchanged
afterward. In Fig. 5, we show results on 5m_vs_6m and MMM2. Detailed hyperparameter settings of
our method can be found in Appendix E."
STARCRAFT II MICROMANAGEMENT BENCHMARK,0.3532513181019332,"For DCG, we use its default settings, including a low-rank approximation for learning the payoff
function. We can see that CASEC outperforms DCG by a large margin. The result proves that sparse
coordination graphs provide better scalability to large action-observation spaces than dense and static
graphs. In DCG’s defense, low-rank approximation still induces large estimation errors. We replace
low-rank approximation with action representations and find that DCG (Full (action repr.)) achieves
similar performance to CASEC after 5M steps, but CASEC is still more sample-efficient. Moreover,
taking advantage of higher-order value decomposition, CASEC is able to represent more complex
coordination dynamics than fully decomposed value functions and thus performs better."
STARCRAFT II MICROMANAGEMENT BENCHMARK,0.35500878734622143,"Ablation study Our method is characterized by two contributions: context-aware sparse topologies
and action representations for learning the utility and payoff function. In this section, we design
ablations to show their contributions."
STARCRAFT II MICROMANAGEMENT BENCHMARK,0.35676625659050965,"The effect of sparse topologies can be observed by comparing CASEC to Full (action repr.), which is
the same as CASEC other than using complete coordination graphs. We observe that sparse graphs
enjoy better sample efficiency than full graphs, and the advantage becomes less obvious as more
samples are collected. This observation indicates that sparse graphs introduce inductive biases that
can accelerate training, and their representational capacity is similar to that of full graphs."
STARCRAFT II MICROMANAGEMENT BENCHMARK,0.3585237258347979,"From the comparison between CASEC to CASEC using conventional Q networks (w/o action repr.),
we can see that using action representations can significantly stabilize learning. For example, learning
diverges on 5m_vs_6m without action representations. As analyzed before, this is because a negative
feedback loop is created between the inaccurate payoff function and coordination graphs."
STARCRAFT II MICROMANAGEMENT BENCHMARK,0.3602811950790861,"To further consolidate that action representations can reduce the estimation errors and thus alleviate
learning oscillation as discussed in Sec. 3.3, we visualize the TD errors of CASEC and ablations
during training in Fig. 5 right. We can see that action representations can dramatically reduce the TD
errors. For comparison, the low-rank approximation can also reduce the TD errors, but much less
significantly. Smaller TD errors prove that action representations provide better estimations of the
value function, and learning with sparse graphs can thus be stabilized (Fig. 5 left)."
CONCLUSION,0.36203866432337434,"7
CONCLUSION"
CONCLUSION,0.36379613356766255,"We study how to learn dynamic sparse coordination graphs, which is a long-standing problem in
cooperative MARL. We propose a specific implementation and theoretically justify it. Empirically,
we evaluate the proposed method on a new multi-agent coordination benchmark. Moreover, we
equip our method with action representations to improve the sample efficiency of payoff learning and
stabilize training. We show that sparse and adaptive topologies can largely reduce communication
overhead as well as improve the performance of coordination graphs. We expect our work to extend
MARL to more realistic tasks with complex coordination dynamics."
CONCLUSION,0.3655536028119508,Published as a conference paper at ICLR 2022
CONCLUSION,0.36731107205623903,"One limitation of our method is that the learned sparse graphs are not always cycle-free. Since the
Max-Sum algorithm guarantees optimality only on acyclic graphs, our method may select sub-optimal
actions. In Appendix F, we study this problem in depth."
CONCLUSION,0.36906854130052724,"Another limitation is that we fix the communication threshold when training. It is an important
question how to automatically and accurately find the minimum threshold that can guarantee the
learning performance. In Appendix I, we study two ways to adaptively select the threshold."
CONCLUSION,0.37082601054481545,"Reproducibility
The source code for all the experiments along with a README file with in-
structions on how to run these experiments is attached in the supplementary material. In addition,
the settings and parameters for all models and algorithms mentioned in the experiment section are
detailed in Appendix E."
REFERENCES,0.37258347978910367,REFERENCES
REFERENCES,0.37434094903339193,"Miroslav Benda. On optimal cooperation of knowledge sources: an empirical investigation. Technical
Report, Boeing Advanced Technology Center, 1986."
REFERENCES,0.37609841827768015,"Wendelin Böhmer, Vitaly Kurin, and Shimon Whiteson. Deep coordination graphs. In Proceedings
of the 37th International Conference on Machine Learning, 2020."
REFERENCES,0.37785588752196836,"Jacopo Castellini, Frans A Oliehoek, Rahul Savani, and Shimon Whiteson. The representational
capacity of action-value networks for multi-agent reinforcement learning. In Proceedings of the
18th International Conference on Autonomous Agents and MultiAgent Systems, pp. 1862–1864.
International Foundation for Autonomous Agents and Multiagent Systems, 2019."
REFERENCES,0.37961335676625657,"Shanjun Cheng. Coordinating decentralized learning and conflict resolution across agent boundaries.
PhD thesis, The University of North Carolina at Charlotte, 2012."
REFERENCES,0.38137082601054484,"Kyunghyun Cho, Bart van Merriënboer, Caglar Gulcehre, Dzmitry Bahdanau, Fethi Bougares, Holger
Schwenk, and Yoshua Bengio. Learning phrase representations using rnn encoder–decoder for
statistical machine translation. In Proceedings of the 2014 Conference on Empirical Methods in
Natural Language Processing (EMNLP), pp. 1724–1734, 2014."
REFERENCES,0.38312829525483305,"Caroline Claus and Craig Boutilier. The dynamics of reinforcement learning in cooperative multiagent
systems. AAAI/IAAI, 1998(746-752):2, 1998."
REFERENCES,0.38488576449912126,"Jakob N Foerster, Gregory Farquhar, Triantafyllos Afouras, Nantas Nardelli, and Shimon Whiteson.
Counterfactual multi-agent policy gradients. In Thirty-Second AAAI Conference on Artificial
Intelligence, 2018."
REFERENCES,0.3866432337434095,"Carlos Guestrin, Daphne Koller, and Ronald Parr. Multiagent planning with factored mdps. In
Advances in neural information processing systems, pp. 1523–1530, 2002a."
REFERENCES,0.3884007029876977,"Carlos Guestrin, Michail Lagoudakis, and Ronald Parr. Coordinated reinforcement learning. In
ICML, volume 2, pp. 227–234. Citeseer, 2002b."
REFERENCES,0.39015817223198596,"Eric A Hansen, Daniel S Bernstein, and Shlomo Zilberstein. Dynamic programming for partially
observable stochastic games. In AAAI, volume 4, pp. 709–715, 2004."
REFERENCES,0.39191564147627417,"Jelle R Kok and Nikos Vlassis. Collaborative multiagent reinforcement learning by payoff propagation.
Journal of Machine Learning Research, 7(Sep):1789–1828, 2006."
REFERENCES,0.3936731107205624,"Victor Lesser, Charles L Ortiz Jr, and Milind Tambe. Distributed sensor networks: A multiagent
perspective, volume 9. Springer Science & Business Media, 2012."
REFERENCES,0.3954305799648506,"Sheng Li, Jayesh K Gupta, Peter Morales, Ross Allen, and Mykel J Kochenderfer. Deep implicit co-
ordination graphs for multi-agent reinforcement learning. In Proceedings of the 20th International
Conference on Autonomous Agents and MultiAgent Systems, pp. 764–772, 2021."
REFERENCES,0.39718804920913886,"Ryan Lowe, Yi Wu, Aviv Tamar, Jean Harb, OpenAI Pieter Abbeel, and Igor Mordatch. Multi-agent
actor-critic for mixed cooperative-competitive environments. In Advances in Neural Information
Processing Systems, pp. 6379–6390, 2017."
REFERENCES,0.3989455184534271,Published as a conference paper at ICLR 2022
REFERENCES,0.4007029876977153,"Michael Mitzenmacher and Eli Upfal. Probability and computing: Randomization and probabilistic
techniques in algorithms and data analysis. Cambridge university press, 2017."
REFERENCES,0.4024604569420035,"Navid Naderializadeh, Fan H Hung, Sean Soleyman, and Deepak Khosla. Graph convolutional value
decomposition in multi-agent reinforcement learning. arXiv preprint arXiv:2010.04740, 2020."
REFERENCES,0.40421792618629176,"Julius Nagy. Über algebraische gleichungen mit lauter reellen wurzeln. Jahresbericht der Deutschen
Mathematiker-Vereinigung, 27:37–43, 1918."
REFERENCES,0.40597539543058,"Frans Oliehoek. Value-based planning for teams of agents in stochastic partially observable environ-
ments. Amsterdam University Press, 2010."
REFERENCES,0.4077328646748682,"Frans A Oliehoek, Christopher Amato, et al. A concise introduction to decentralized POMDPs,
volume 1. Springer, 2016."
REFERENCES,0.4094903339191564,"Liviu Panait, Sean Luke, and R Paul Wiegand. Biasing coevolutionary search for optimal multiagent
behaviors. IEEE Transactions on Evolutionary Computation, 10(6):629–645, 2006."
REFERENCES,0.4112478031634446,"Judea Pearl. Probabilistic reasoning in intelligent systems: networks of plausible inference. Elsevier,
2014."
REFERENCES,0.4130052724077329,"Huy Xuan Pham, Hung Manh La, David Feil-Seifer, and Aria Nefian. Cooperative and distributed
reinforcement learning of drones for field coverage, 2018."
REFERENCES,0.4147627416520211,"Tabish Rashid, Mikayel Samvelyan, Christian Schroeder Witt, Gregory Farquhar, Jakob Foerster,
and Shimon Whiteson. Qmix: Monotonic value function factorisation for deep multi-agent
reinforcement learning. In International Conference on Machine Learning, pp. 4292–4301, 2018."
REFERENCES,0.4165202108963093,"Tabish Rashid, Gregory Farquhar, Bei Peng, and Shimon Whiteson. Weighted qmix: Expanding
monotonic value function factorisation for deep multi-agent reinforcement learning. Advances in
Neural Information Processing Systems, 33, 2020."
REFERENCES,0.4182776801405975,"Mikayel Samvelyan, Tabish Rashid, Christian Schroeder de Witt, Gregory Farquhar, Nantas Nardelli,
Tim GJ Rudner, Chia-Man Hung, Philip HS Torr, Jakob Foerster, and Shimon Whiteson. The
starcraft multi-agent challenge. arXiv preprint arXiv:1902.04043, 2019."
REFERENCES,0.4200351493848858,"Kyunghwan Son, Daewoo Kim, Wan Ju Kang, David Earl Hostallero, and Yung Yi. Qtran: Learning to
factorize with transformation for cooperative multi-agent reinforcement learning. In International
Conference on Machine Learning, pp. 5887–5896, 2019."
REFERENCES,0.421792618629174,"Peter Stone and Manuela Veloso. Multiagent systems: A survey from a machine learning perspective.
Autonomous Robots, 8(3):345–383, 2000."
REFERENCES,0.4235500878734622,"Ruben Stranders, Alessandro Farinelli, Alex Rogers, and Nick Jennings. Decentralised coordination
of mobile sensors using the max-sum algorithm. In Twenty-First International Joint Conference on
Artificial Intelligence, 2009."
REFERENCES,0.4253075571177504,"Peter Sunehag, Guy Lever, Audrunas Gruslys, Wojciech Marian Czarnecki, Vinicius Zambaldi, Max
Jaderberg, Marc Lanctot, Nicolas Sonnerat, Joel Z Leibo, Karl Tuyls, et al. Value-decomposition
networks for cooperative multi-agent learning based on team reward. In Proceedings of the
17th International Conference on Autonomous Agents and MultiAgent Systems, pp. 2085–2087.
International Foundation for Autonomous Agents and Multiagent Systems, 2018."
REFERENCES,0.4270650263620387,"Ming Tan. Multi-agent reinforcement learning: Independent vs. cooperative agents. In Proceedings
of the tenth international conference on machine learning, pp. 330–337, 1993."
REFERENCES,0.4288224956063269,"Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. Attention is all you need. In Advances in neural information
processing systems, pp. 5998–6008, 2017."
REFERENCES,0.4305799648506151,"Jianhao Wang, Zhizhou Ren, Terry Liu, Yang Yu, and Chongjie Zhang. Qplex: Duplex dueling
multi-agent q-learning. International Conference on Learning Representations (ICLR), 2021a."
REFERENCES,0.43233743409490333,Published as a conference paper at ICLR 2022
REFERENCES,0.43409490333919154,"Tonghan Wang, Jianhao Wang, Chongyi Zheng, and Chongjie Zhang. Learning nearly decomposable
value functions with communication minimization. In Proceedings of the International Conference
on Learning Representations (ICLR), 2020."
REFERENCES,0.4358523725834798,"Tonghan Wang, Tarun Gupta, Anuj Mahajan, Bei Peng, Shimon Whiteson, and Chongjie Zhang. Rode:
Learning roles to decompose multi-agent tasks. In Proceedings of the International Conference on
Learning Representations (ICLR), 2021b."
REFERENCES,0.437609841827768,"Yihan Wang, Beining Han, Tonghan Wang, Heng Dong, and Chongjie Zhang. Dop: Off-policy
multi-agent decomposed policy gradients. In Proceedings of the International Conference on
Learning Representations (ICLR), 2021c."
REFERENCES,0.43936731107205623,"Ermo Wei and Sean Luke. Lenient learning in independent-learner stochastic cooperative games. The
Journal of Machine Learning Research, 17(1):2914–2955, 2016."
REFERENCES,0.44112478031634444,"Zhao Xu, Yang Lyu, Quan Pan, Jinwen Hu, Chunhui Zhao, and Shuai Liu. Multi-vehicle flocking
control with deep deterministic policy gradient method. 2018 IEEE 14th International Conference
on Control and Automation (ICCA), Jun 2018. doi: 10.1109/icca.2018.8444355. URL http:
//dx.doi.org/10.1109/ICCA.2018.8444355."
REFERENCES,0.4428822495606327,"Chongjie Zhang and Victor Lesser. Coordinated multi-agent reinforcement learning in networked
distributed pomdps. In Twenty-Fifth AAAI Conference on Artificial Intelligence, 2011."
REFERENCES,0.4446397188049209,"Chongjie Zhang and Victor Lesser. Coordinating multi-agent reinforcement learning with limited
communication. In Proceedings of the 2013 international conference on Autonomous agents
and multi-agent systems, pp. 1101–1108. International Foundation for Autonomous Agents and
Multiagent Systems, 2013."
REFERENCES,0.44639718804920914,Published as a conference paper at ICLR 2022
REFERENCES,0.44815465729349735,"A
MATHEMATICAL PROOF"
REFERENCES,0.44991212653778556,"In this section, we provide proof to Proposition 1."
REFERENCES,0.45166959578207383,"Without loss of generality, we consider two agents 1 and 2 and the edge between them (1, 2). We
prove our idea by comparing the action selection of agent 2 before and after removing edge (1, 2). In
the following proof, we use i (i = 1, 2) to denote agent i and e to denote edge (1, 2)."
REFERENCES,0.45342706502636204,Action of agent 2 is determined by
REFERENCES,0.45518453427065025,"a∗
2 = arg max
a2 X"
REFERENCES,0.45694200351493847,"h∈F2
mh→2(a2)
(10)"
REFERENCES,0.45869947275922673,"= arg max
a2 "
REFERENCES,0.46045694200351495,"me→2(a2) +
X"
REFERENCES,0.46221441124780316,"h∈F2/{e}
mh→2(a2) "
REFERENCES,0.46397188049209137,",
(11)"
REFERENCES,0.46572934973637964,"and we first see the influence of me→2(a2) on a∗
2. For clarity, we use m(a2) to denote me→2(a2)
and l(a2) to denote P"
REFERENCES,0.46748681898066785,"h∈F2/{e} mh→2(a2).
We are interested in whether arg maxa2 l(a2) =
arg maxa2 [m(a2) + l(a2)]. The probability of this event holds if the following inequality holds:"
REFERENCES,0.46924428822495606,"Range [m(a2)] ≤min
a2̸=aj
2
(l(aj
2) −l(a2)),
(12)"
REFERENCES,0.4710017574692443,"where Range(x) denotes the largest elements in vector x minus the smallest one and aj
2 =
arg maxa2 l(a2). We rewrite Eq. 12 and obtain Pr "
REFERENCES,0.4727592267135325,"Range [m(a2)] ≤min
a2̸=aj
2
(l(aj
2) −l(a2)) ! (13) =Pr "
REFERENCES,0.47451669595782076,"min
a2 m(a2) < m(a2) < min
a2 m(a2) + min
a2̸=aj
2
(l(aj
2) −l(a2)) !"
REFERENCES,0.47627416520210897,".
(14)"
REFERENCES,0.4780316344463972,"According to the Asymmetric two-sided Chebyshev’s inequality (Mitzenmacher & Upfal, 2017), we
get a lower bound of this probability:"
REFERENCES,0.4797891036906854,4( ¯m −mina2 m(a2))(maxa2 m(a2) −¯m) −σ2
REFERENCES,0.48154657293497366,"h
mina2̸=aj
2(l(aj
2) −l(a2))
i2
,
(15)"
REFERENCES,0.4833040421792619,"where σ is the variance of m(a2), and ¯m is the average of m(a2)."
REFERENCES,0.4850615114235501,"Suppose that we take |A| actions independently. According to the von Szokefalvi Nagy inequal-
ity (Nagy, 1918), we can further get the lower bound as follows:"
REFERENCES,0.4868189806678383,4( ¯m −mina2 m(a2))(maxa2 m(a2) −¯m) −σ2
REFERENCES,0.48857644991212656,"h
mina2̸=aj
2(l(aj
2) −l(a2))
i2
≥4( ¯m −mina2 m(a2))(maxa2 m(a2) −¯m) −σ2"
REFERENCES,0.4903339191564148,2|A|σ2
REFERENCES,0.492091388400703,"=
2
|A|"
REFERENCES,0.4938488576449912,( ¯m −mina2 m(a2))(maxa2 m(a2) −¯m)
REFERENCES,0.4956063268892794,"σ2
−1

. (16)"
REFERENCES,0.4973637961335677,Note that
REFERENCES,0.4991212653778559,"m(a2) = max
a1 [q(a1, a2) + m1→e(a1)] ,
(17)"
REFERENCES,0.5008787346221442,"and we are interested in q(a1, a2).
We now study the relationship between m(a2) and
maxa1 [q(a1, a2)]. For clarity, we use r(a1, a2) to denote q(a1, a2) + m1→e(a1), and r(ai2
1 , ak)
to denote maxa1 r(a1, a2). Then we have Vara2 maxa1 r(a1, a2) = Vara2r(ai2
1 , a2)."
REFERENCES,0.5026362038664324,"For a given a2, we have"
REFERENCES,0.5043936731107206,"Vara2r(a1, a2) = Vara2

r(ai2
1 , a2) −s2

.
(18)"
REFERENCES,0.5061511423550088,Published as a conference paper at ICLR 2022
REFERENCES,0.507908611599297,"Here s2 ≥0, ∀a1, because i2 = arg maxi r(a1, a2). Since"
REFERENCES,0.5096660808435852,"Vara2

r(ai2
1 , a2) −s2

(19)"
REFERENCES,0.5114235500878734,"=Vara2

r(ai2
1 , a2)

+ Var [s2] −2Cov(r(ai2
1 , a2), s2)
(20) and"
REFERENCES,0.5131810193321616,"Cov(r(ai2
1 , a2), s2) ≤
q"
REFERENCES,0.5149384885764499,"Vara2

r(ai2
1 , a2)

Var [s2],
(21)"
REFERENCES,0.5166959578207382,it follows that
REFERENCES,0.5184534270650264,"Vara2

r(ai2
1 , a2) −s2

(22)"
REFERENCES,0.5202108963093146,"≥Vara2

r(ai2
1 , a2)

−2
q"
REFERENCES,0.5219683655536028,"Vara2

r(ai2
1 , a2)

Var [s2].
(23) Thus,"
REFERENCES,0.523725834797891,"ζ12 [r(a1, a2)] = max
a1 Vara2 [r(a1, a2)] ≥Vara2 max
a1 [r(a1, a2)] −2
q"
REFERENCES,0.5254833040421792,"Vara2

r(ai2
1 , a2)

Var [s2]. (24)"
REFERENCES,0.5272407732864675,"Observing that ζ12 [r(a1, a2)]
=
maxa1 Vara2 [r(a1, a2)]
=
maxa1 Vara2 [q(a1, a2)]
=
ζ12 [q(a1, a2)], we have"
REFERENCES,0.5289982425307557,"σ ≤ζ12 [q(a1, a2)] + 2
q"
REFERENCES,0.5307557117750439,"Vara2

r(ai2
1 , a2)

Var [s2]"
REFERENCES,0.5325131810193322,"= ζ12 [q(a1, a2)] + 2
√"
REFERENCES,0.5342706502636204,"σS,
(25)"
REFERENCES,0.5360281195079086,"where σ = Vara2 maxa1 [r(a1, a2)] and Var [s2] = S. According to the fixed-point theorem, the term
σ satisfies ζ12 [q(a1, a2)]+2
√"
REFERENCES,0.5377855887521968,"σS = σ. We can solve this quadratic form and get σ = ζ12 [q(a1, a2)]+
2S ± 2
p"
REFERENCES,0.539543057996485,"S (S + ζ12 [q(a1, a2)]). Because the σ term is larger than ζ12 [q(a1, a2)] + 2S, we get
σ = ζ12 [q(a1, a2)] + 2S + 2
p"
REFERENCES,0.5413005272407733,"S (S + ζ12 [q(a1, a2)]). By inserting this inequality to the lower
bound (Eq. 16), we get a lower bound related to q(a1, a2): 2
|A| "
REFERENCES,0.5430579964850615,"
( ¯m −mina2 m(a2))(maxa2 m(a2) −¯m)
h
ζ12 [q(a1, a2)] + 2S + 2
p"
REFERENCES,0.5448154657293497,"S (S + ζ12 [q(a1, a2)])
i2 −1 "
REFERENCES,0.546572934973638,".
(26)"
REFERENCES,0.5483304042179262,"When a vector x is larger than 0 and the the cardinality of x is n, we have: Var(x) = 1"
REFERENCES,0.5500878734622144,"n
Pn
i=1(xi −
1
n
Pn
i=1 xi)2 ≤1"
REFERENCES,0.5518453427065027,"n
Pn
i=1 x2
i ≤maxi x2
i . Thus we can further get the following bound:"
REFERENCES,0.5536028119507909,S = Vara2
REFERENCES,0.5553602811950791,"
max
a1 r (a1, a2) −r (a1, a2)
"
REFERENCES,0.5571177504393673,"≤max2
a2"
REFERENCES,0.5588752196836555,"
max
a1 r (a1, a2) −r (a1, a2)

.
(27)"
REFERENCES,0.5606326889279437,"Let M = maxa2 [maxa1 r (a1, a2) −r (a1, a2)], thus we have S ≤M 2. We have ζ12 [q(a1, a2)] =
ζqvar
12 by the definition (Eq. 4) and can get the final lower bound: 2
|A| "
REFERENCES,0.562390158172232,( ¯m −mina2 m(a2))(maxa2 m(a2) −¯m)
REFERENCES,0.5641476274165202,"h
ζqvar
12 + 2M 2 + 2
p"
REFERENCES,0.5659050966608085,"M 2 (M 2 + ζqvar
12 )
i2
−1 "
REFERENCES,0.5676625659050967,".
(28)"
REFERENCES,0.5694200351493849,"B
MACO: MULTI-AGENT COORDINATION BENCHMARK"
REFERENCES,0.5711775043936731,"In this paper, we study how to learn context-aware sparse coordination graphs. For this purpose,
we propose a new Multi-Agent COordination (MACO) benchmark (Table 1) to evaluate different
implementations and benchmark our method. This benchmark collects classic coordination problems
in the literature of cooperative multi-agent learning, increases their difficulty, and classifies them into
different types. We now describe the detailed settings of tasks in the MACO benchmark."
REFERENCES,0.5729349736379613,Published as a conference paper at ICLR 2022
REFERENCES,0.5746924428822495,"B.1
TASK SETTINGS"
REFERENCES,0.5764499121265377,"Factored Games are characterized by a clear factorization of global rewards. We further classify
factored games into 4 categories according to whether coordination dependency is pairwise and
whether the underlying coordination graph is dynamic (Table 1)."
REFERENCES,0.5782073813708261,"Aloha (Oliehoek (2010), also similar to the Broadcast Channel benchmark problem proposed by
Hansen et al. (2004)) consists of 10 islands, each equipped with a radio tower to transmit messages
to its residents. Each island has a backlog of messages that it needs to send, and agents can choose
to send one message or not at each timestep. Due to the proximity of islands, communications
from adjacent islands interfere. This means that when two neighboring agents attempt to send
simultaneously, a collision occurs and the messages have to be resent. Each island starts with 1
package in its backlog. At each timestep, with probability 0.6 a new packet arrives if the maximum
backlog (set to 5) has not been reached. Each agent observes its position and the number of packages
in its backlog. A global reward of 0.1 is received by the system for each successful transmission,
while punishment of −10 is induced if the transmission leads to a collision."
REFERENCES,0.5799648506151143,"Pursuit, also called Predator and Prey, is a classic coordination problem (Benda, 1986; Stone &
Veloso, 2000; Son et al., 2019). In this game, ten agents (predators) roam a 10 × 10 map populated
with 5 random walking preys for 50 environment steps. Based on the partial observation of any
adjacent prey and other predators, agents choose to move in four directions, keep motionless, or
catch prey (specified by its id). One prey is captured if two agents catch it simultaneously, after
which the catching agents and the prey are removed from the map, resulting in a team reward of 1.
However, if only one agent tries to catch the prey, the prey would not be captured and the agents will
be punished. The difficulty of Pursuit is largely decided by the relative scale of the punishment
compared to the catching reward (Böhmer et al., 2020), because a large punishment exacerbates the
relative overgeneralization pathology. In the MACO benchmark, we consider a challenging version
of Pursuit by setting the punishment to 1, which is the same as the reward obtained by a successful
catch."
REFERENCES,0.5817223198594025,"Hallway (Wang et al., 2020) is a multi-chain Dec-POMDP whose stochasticity and partial observ-
ability lead to fully-decomposed value functions learning sub-optimal strategies. In the MACO bench-
mark, we increase the difficulty of Hallway by introducing more agents and grouping them (Fig. 6).
One agent randomly spawns at a state in each chain. Agents can observe its own position and choose
to move left, move right, or keep still at each timestep. Agents win if they arrive at state g simultane-
ously with other agents in the same group. In Fig. 6, different groups are drawn in different colors. 𝑔 𝑎# 𝑏# 𝑎% 𝑏% 𝑎& 𝑏& 𝑎' 𝑏' 𝑐# 𝑑# 𝑐% 𝑑% 𝑐& 𝑑& 𝑐' 𝑑'"
REFERENCES,0.5834797891036907,"𝑒#
𝑒%
𝑒&
𝑒'"
REFERENCES,0.5852372583479789,"Figure 6: Task Hallway (Wang et al.,
2020). To increase the difficulty of the
game, we consider a multi-group ver-
sion. Different colors represent different
groups."
REFERENCES,0.5869947275922671,"Each winning group induces a global reward of 1. Other-
wise, if any agent arrives at g earlier than others, the sys-
tem receives no reward and all agents in that group would
be removed from the game. If ng > 1 groups attempt
to move to g at the same timestep, they keep motionless
and agents receive a global punishment of −0.5 ∗ng. The
horizon is set to maxi li + 10 to avoid an infinite loop,
where li is the length of chain i."
REFERENCES,0.5887521968365553,"Sensor (Fig. 3 in the main text) has been extensively
studied in cooperative multi-agent learning (Lesser et al.,
2012; Zhang & Lesser, 2011). We consider 15 sensors
arranged in a 3 by 5 matrix. Each sensor is controlled by
an agent and can scan the eight nearby points. Each scan induces a cost of -1, and agents can choose
noop to save the cost. Three targets wander randomly in the gird. If k ≥2 sensors scan a target
simultaneously, the system gets a constant reward of 3, which is independent of the number of sensor.
Agents can observe the id and position of targets nearby."
REFERENCES,0.5905096660808435,"Non-factored games do not present an explicit decomposition of global rewards. We classify non-
factored games according to whether the game can be solved by a static (sparse) coordination graph
in a single episode."
REFERENCES,0.5922671353251318,"Gather is an extension of the Climb Game (Wei & Luke, 2016). In Climb Game, each agent has
three actions: A = {a0, a1, a2}. Action a0 yields no reward if only some agents choose it, but a high
reward if all choose it. The other two actions are sub-optimal actions but can induce a positive reward"
REFERENCES,0.5940246045694201,Published as a conference paper at ICLR 2022
REFERENCES,0.5957820738137083,"0.0
0.5
1.0
1.5
2.0
T (mil) 0 20 40 60"
REFERENCES,0.5975395430579965,Test Transmitted
REFERENCES,0.5992970123022847,"| |
sparse"
REFERENCES,0.6010544815465729,"0.0
0.5
1.0
1.5
2.0
T (mil) 0 20 40 60"
REFERENCES,0.6028119507908611,Test Transmitted
REFERENCES,0.6045694200351494,"qvar
sparse"
REFERENCES,0.6063268892794376,"0.0
0.5
1.0
1.5
2.0
T (mil) 0 20 40 60"
REFERENCES,0.6080843585237259,Test Transmitted
REFERENCES,0.6098418277680141,"var
sparse"
REFERENCES,0.6115992970123023,"Full
Rand.
max
qvar
var"
REFERENCES,0.6133567662565905,"Figure 8: Performance of different implementations on Aloha. Different colors indicate different
topologies. Performance of different losses is shown in different sub-figures."
REFERENCES,0.6151142355008787,without requiring precise coordination:
REFERENCES,0.616871704745167,"r(a) = 
 "
REFERENCES,0.6186291739894552,"10
#a0 = n,
0
0 < #a0 < n,
5
otherwise.
(29)"
REFERENCES,0.6203866432337434,"We increase the difficulty of this game by making it temporally extended and introducing stochasticity.
We consider three actions. Actions are no longer atomic, and agents need to learn policies to realize
these actions by navigating to goals g1, g2 and g3 (Fig. 7). 𝑔"" 𝑎$
𝑎% 𝑔$ 𝑎& 𝑔% 𝑎"" 𝑏$"
REFERENCES,0.6221441124780316,"𝑐$
𝑐%
𝑐&
𝑐"" 𝑎) 𝑏% 𝑐)"
REFERENCES,0.6239015817223199,"Figure 7: Task Gather. To increase
the difficulty of this game, we con-
sider a temporally extended version
and introduce stochasticity."
REFERENCES,0.6256590509666081,"Moreover, for each episode, one of g1, g2 and g3 is randomly
selected as the optimal goal (corresponding to a0 in Eq. 29).
Agents spawn randomly, and only agents initialized near the
optimal goal know which goal is optimal. Agents need to
simultaneously arrive at a goal state to get any reward. If all
agents are at the optimal goal state, they get a high reward
of 10. If all of them are at other goal states, they would be
rewarded 5. The minimum reward would be received if only
some agents gather at the optimal goal. We further increase the
difficulty by setting this reward to −5. It is worth noting that,
for any single episode, Gather can be solved using a static and
sparse coordination graph – for example, agents can collectively
coordinate with an agent who knows the optimal goal."
REFERENCES,0.6274165202108963,"0.0
0.5
1.0
1.5
2.0
T (mil) 3.5 4.0 4.5 5.0"
REFERENCES,0.6291739894551845,Test Prey Caught
REFERENCES,0.6309314586994728,"| |
sparse"
REFERENCES,0.632688927943761,"0.0
0.5
1.0
1.5
2.0
T (mil) 3.5 4.0 4.5 5.0"
REFERENCES,0.6344463971880492,Test Prey Caught
REFERENCES,0.6362038664323374,"qvar
sparse"
REFERENCES,0.6379613356766256,"0.0
0.5
1.0
1.5
2.0
T (mil) 3.5 4.0 4.5 5.0"
REFERENCES,0.6397188049209139,Test Prey Caught
REFERENCES,0.6414762741652021,"var
sparse"
REFERENCES,0.6432337434094904,"Full
Rand.
max
qvar
var"
REFERENCES,0.6449912126537786,"Figure 9: Performance of different implementations on Pursuit. Different colors indicate different
topologies. Performance of different losses is shown in different sub-figures."
REFERENCES,0.6467486818980668,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 0 25 50 75 100"
REFERENCES,0.648506151142355,Test Win %
REFERENCES,0.6502636203866432,"| |
sparse"
REFERENCES,0.6520210896309314,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 0 25 50 75 100"
REFERENCES,0.6537785588752196,Test Win %
REFERENCES,0.655536028119508,"qvar
sparse"
REFERENCES,0.6572934973637962,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 0 25 50 75 100"
REFERENCES,0.6590509666080844,Test Win %
REFERENCES,0.6608084358523726,"var
sparse"
REFERENCES,0.6625659050966608,"Full
Rand.
max
qvar
var"
REFERENCES,0.664323374340949,"Figure 10: Performance of different implementations on Hallway. Different colors indicate different
topologies. Performance of different losses is shown in different sub-figures."
REFERENCES,0.6660808435852372,Published as a conference paper at ICLR 2022
REFERENCES,0.6678383128295254,"0.0
0.1
0.2
0.3
0.4
0.5
T (mil) 0 10 20 30"
REFERENCES,0.6695957820738138,Test Captured
REFERENCES,0.671353251318102,"| |
sparse"
REFERENCES,0.6731107205623902,"0.0
0.1
0.2
0.3
0.4
0.5
T (mil) 0 10 20 30"
REFERENCES,0.6748681898066784,Test Captured
REFERENCES,0.6766256590509666,"qvar
sparse"
REFERENCES,0.6783831282952548,"0.0
0.1
0.2
0.3
0.4
0.5
T (mil) 0 10 20 30"
REFERENCES,0.680140597539543,Test Captured
REFERENCES,0.6818980667838312,"var
sparse"
REFERENCES,0.6836555360281195,"Full
Rand.
max
qvar
var"
REFERENCES,0.6854130052724078,"Figure 11: Performance of different implementations on Sensor. Different colors indicate different
topologies. Performance of different losses is shown in different sub-figures."
REFERENCES,0.687170474516696,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 0 25 50 75 100"
REFERENCES,0.6889279437609842,Test Win %
REFERENCES,0.6906854130052724,"| |
sparse"
REFERENCES,0.6924428822495606,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 0 25 50 75 100"
REFERENCES,0.6942003514938488,Test Win %
REFERENCES,0.6959578207381371,"qvar
sparse"
REFERENCES,0.6977152899824253,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 0 25 50 75 100"
REFERENCES,0.6994727592267135,Test Win %
REFERENCES,0.7012302284710018,"var
sparse"
REFERENCES,0.70298769771529,"Full
Rand.
max
qvar
var"
REFERENCES,0.7047451669595782,"Figure 12: Performance of different implementations on Gather. Different colors indicate different
topologies. Performance of different losses is shown in different sub-figures."
REFERENCES,0.7065026362038664,"Disperse consists of 12 agents. At each timestep, agents can choose to work at one of 4 hospitals
by selecting an action in A = {a0, a1, a2, a3}. At timestep t, hospital j needs xj
t agents for the next
timestep. One hospital is randomly selected and its xj
t is a positive number, while the need of other
hospitals is 0. If yj
t+1 < xj
t agents go to the selected hospital, the whole team would be punished
yj
t+1 −xj
t. Agents observe the local hospital’s id and its need for the next timestep."
REFERENCES,0.7082601054481547,"B.2
OTHER POSSIBLE IMPLEMENTS AND PERFORMANCE COMPARISON"
REFERENCES,0.7100175746924429,"With this benchmark in hand, we are now able to evaluate our method for constructing sparse graphs.
We compare our method with the following approaches."
REFERENCES,0.7117750439367311,"Maximum utility difference qi (or qj) is the expected utility agent i (or j) can get without the
awareness of actions of other agents. After specifying the action of agent j or i, the joint expected
utility changes to qij. Thus the measurement"
REFERENCES,0.7135325131810193,"ζδmax
ij
= max
aij |δij(τij, aij)|
(30)"
REFERENCES,0.7152899824253075,can describe the mutual influence between agent i and j. Here
REFERENCES,0.7170474516695958,"δij(τij, aij) = qij(τij, aij) −qi(τi, ai) −qj(τj, aj)
(31)"
REFERENCES,0.718804920913884,is the utility difference function.
REFERENCES,0.7205623901581723,"We use a maximization operator here because two agents need to coordinate with each other if such
coordination significantly affects the probability of selecting at least one action pair."
REFERENCES,0.7223198594024605,"Variance of utility difference As discussed before, the value of utility difference δij and variance of
payoff functions can measure the mutual influence between agent i and j. In this way, the variance of
δij serves as a second-order measurement, and we can use"
REFERENCES,0.7240773286467487,"ζδvar
ij
= max
ai Varaj [δij(τij, aij)]
(32)"
REFERENCES,0.7258347978910369,"to rank the necessity of coordination relationships between agents. Again we use the maximization
operation to base the measurement on the most influenced action."
REFERENCES,0.7275922671353251,"For these three measurements (Eq. 8, 30, and 32), the larger value of ζij is, the more important the
edge (i, j) is. For example, when ζqvar
ij
= maxai Varaj [qij(τij, aij)] is large, the expected utility of"
REFERENCES,0.7293497363796133,Published as a conference paper at ICLR 2022
REFERENCES,0.7311072056239016,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 4 2 0"
REFERENCES,0.7328646748681898,Test Return
REFERENCES,0.7346221441124781,"| |
sparse"
REFERENCES,0.7363796133567663,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 4 2 0"
REFERENCES,0.7381370826010545,Test Return
REFERENCES,0.7398945518453427,"qvar
sparse"
REFERENCES,0.7416520210896309,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 4 2 0"
REFERENCES,0.7434094903339191,Test Return
REFERENCES,0.7451669595782073,"var
sparse"
REFERENCES,0.7469244288224957,"Full
Rand.
max
qvar
var"
REFERENCES,0.7486818980667839,"Figure 13: Performance of different implementations on Disperse. Different colors indicate different
topologies. Performance of different losses is shown in different sub-figures."
REFERENCES,0.7504393673110721,"agent i fluctuates dramatically with the action of agent j, and they need to coordinate their actions.
Therefore, with these measurements, to learn sparse coordination graphs, we can set a sparseness
controlling constant λ ∈(0, 1) and select λ|V|(|V| −1) edges with the largest ζij values. To make
the measurements more accurate in edge selection, we minimize the following losses for the two
measurements, respectively:"
REFERENCES,0.7521968365553603,"L|δ|
sparse =
1
|V|(|V| −1)|A|2
X i̸=j X"
REFERENCES,0.7539543057996485,"ai,aj
|δij(τij, aij)|;
(33)"
REFERENCES,0.7557117750439367,"Lδvar
sparse =
1
|V|(|V| −1)|A| X i̸=j X"
REFERENCES,0.7574692442882249,"ai
Varaj [δij(τij, aij)] .
(34)"
REFERENCES,0.7592267135325131,"We scale these losses with a factor λsparse and optimize them together with the TD loss. It is worth
noting that these measurements and losses are not independent. For example, minimizing Lδvar
sparse
would also reduce the variance of qij. Thus, in the next section, we consider all possible combinations
between these measurements and losses."
REFERENCES,0.7609841827768014,"Observation-Based Approaches In partial observable environments, agents sometimes need to
coordinate with each other to share their observations and reduce their uncertainty about the true
state (Wang et al., 2020). We can build our coordination graphs according to this intuition."
REFERENCES,0.7627416520210897,"Agents use an attention model (Vaswani et al., 2017) to select the information they need. Specifically,
we train fully connected networks fk and fq and estimate the importance of agent j’s observations to
agent i by:
αij = fk(τi)Tfq(τj).
(35)
Then we calculate the global Q function as:"
REFERENCES,0.7644991212653779,"Qtot(s, a) = 1 |V| X"
REFERENCES,0.7662565905096661,"i
qi(τi, ai) +
X"
REFERENCES,0.7680140597539543,"i̸=j
¯αijqij(τij, aij),
(36)"
REFERENCES,0.7697715289982425,where ¯αij = eαij/ P
REFERENCES,0.7715289982425307,"i̸=j eαij. Then both fk and fq can be trained end-to-end with the standard
TD loss. When building coordination graphs, given a sparseness controlling factor λ, we select
λ|V|(|V| −1) edges with the largest ¯αij values."
REFERENCES,0.773286467486819,"B.3
WHICH METHOD IS BETTER FOR LEARNING DYNAMICALLY SPARSE COORDINATION
GRAPHS?"
REFERENCES,0.7750439367311072,"We show the learning curves of value-based implementations in Fig. 8-13 and compare our method
(ζqvar
ij
& Lqvar
sparse) against the (attentional) observation-based method in Fig. 14. We can see that our
proposed method generally performs better than the observation-based method, except for the task
Disperse. Compared to other games, observations provided by Disperse can reveal all the game
information. In this case, the observation-based method can make better use of local observations
and can easily learn an accurate coordination graph."
REFERENCES,0.7768014059753954,"C
THE SMAC BENCHMARK"
REFERENCES,0.7785588752196837,"On the SMAC benchmark, we compare our method against fully decomposed value function learning
methods (VDN (Sunehag et al., 2018) & QMIX (Rashid et al., 2018)) and a deep coordination graph"
REFERENCES,0.7803163444639719,Published as a conference paper at ICLR 2022
REFERENCES,0.7820738137082601,"0.0
0.5
1.0
1.5
2.0
T (mil) 0 20 40 60"
REFERENCES,0.7838312829525483,Test Transmitted Aloha
REFERENCES,0.7855887521968365,"0.0
0.5
1.0
1.5
2.0
T (mil) 0 2 4"
REFERENCES,0.7873462214411248,Test Prey Caught
REFERENCES,0.789103690685413,Pursuit
REFERENCES,0.7908611599297012,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 0 25 50 75 100"
REFERENCES,0.7926186291739895,Test Win %
REFERENCES,0.7943760984182777,Hallway
REFERENCES,0.7961335676625659,"0.0
0.1
0.2
0.3
0.4
0.5
T (mil) 0 10 20 30"
REFERENCES,0.7978910369068541,Test Captured
REFERENCES,0.7996485061511424,Sensor
REFERENCES,0.8014059753954306,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 0 25 50 75 100"
REFERENCES,0.8031634446397188,Test Win %
REFERENCES,0.804920913884007,Gather
REFERENCES,0.8066783831282952,"0.0
0.2
0.4
0.6
0.8
1.0
T (mil) 4 2 0"
REFERENCES,0.8084358523725835,Test Return
REFERENCES,0.8101933216168717,Disperse
REFERENCES,0.81195079086116,"qvar & 
qvar
sparse
Attn."
REFERENCES,0.8137082601054482,"Figure 14: Performance comparison between our method (ζqvar
ij
& Lqvar
sparse) and the (attentional)
observation-based approach on the MACO benchmark."
REFERENCES,0.8154657293497364,"learning method (DCG (Böhmer et al., 2020)). Experiments are carried out on a hard map 5m_vs_6m
and a super hard map MMM2. For the baselines, we use the code provided by the authors and their
default hyper-parameters settings that have been fine-tuned on the SMAC benchmark. We also notice
that both our method and all the considered baselines are implemented based on the open-sourced
codebase PyMARL2, which further guarantees the fairness of the comparisons."
REFERENCES,0.8172231985940246,"D
ACTION REPRESENTATION LEARNING"
REFERENCES,0.8189806678383128,"𝑎""
(𝑜"", 𝒂'"")"
REFERENCES,0.820738137082601,"𝑟̃*
𝑜+"" ,"
REFERENCES,0.8224956063268892,"Action
Representation 𝒛./"
REFERENCES,0.8242530755711776,One-Hot Action
REFERENCES,0.8260105448154658,Fully-Connected
REFERENCES,0.827768014059754,Network
REFERENCES,0.8295254833040422,"Vector
Legend"
REFERENCES,0.8312829525483304,"Action
Encoder"
REFERENCES,0.8330404217926186,Predictions
REFERENCES,0.8347978910369068,"Figure 15: Framework for learning
action representations, reproduced
from Wang et al. (2021b)."
REFERENCES,0.836555360281195,"As discussed in Sec. 3.3 of the main text, we use action repre-
sentations to reduce the influence of utility difference function’s
estimation errors on graph structure learning. In this section,
we describe the details of action representation learning (the
related network structure is shown in Fig. 15). We use the
technique proposed by Wang et al. (2021b) and learn an action
encoder fe(·; θe): R|A| →Rd, parameterized by θe, to map
one-hot actions to a d-dimensional representation space. With
the encoder, each action a has a latent representation za, i.e.,
za = fe(a; θe). The representation za is then used to predict
the next observation o′
i and the global reward r, given the cur-
rent observation oi of an agent i, and the one-hot actions of
other agents, a-i. This model is a forward model, which is
trained by minimizing the following loss:"
REFERENCES,0.8383128295254832,"Le(θe, ξe) = E(o,a,r,o′)∼D
 X"
REFERENCES,0.8400702987697716,"i
∥po(zai, oi, a-i) −o′
i∥2
2"
REFERENCES,0.8418277680140598,"+ λe
X"
REFERENCES,0.843585237258348,"i
(pr(zai, oi, a-i) −r)2 
,"
REFERENCES,0.8453427065026362,"(37)
where po and pr is the predictor for observations and rewards, respectively. We use ξe to denote the
parameters of po and pr. λe is a scaling factor, D is a replay buffer, and the sum is carried out over
all agents."
REFERENCES,0.8471001757469244,"In the beginning, we collect samples and train the predictive model shown in Fig. 15 for 50K
timesteps. Then policy learning begins and action representations are kept fixed during training.
Since tasks in the MACO benchmark typically do not involve many actions, we do not use action
representations when benchmarking our method. In contrast, StarCraft II micromanagement tasks
usually have a large action space. For example, the map MMM2 involves 16 actions, and a conventional
deep Q-network requires 256 output heads for learning utility difference. Therefore, we equip our"
REFERENCES,0.8488576449912126,2https://github.com/oxwhirl/pymarl
REFERENCES,0.8506151142355008,Published as a conference paper at ICLR 2022
REFERENCES,0.8523725834797891,"method with action representations to estimate the utility difference function when testing it on the
SMAC benchmark."
REFERENCES,0.8541300527240774,"E
ARCHITECTURE, HYPERPARAMETERS, INFRASTRUCTURE, AND TIME
COMPLEXITY"
REFERENCES,0.8558875219683656,"In CASEC, each agent has a neural network to estimate its local utility. The local utility network
consists of three layers—a fully-connected layer, a 64 bit GRU, and another fully-connected layer—
and outputs an estimated utility for each action. The utility difference function is also a 3-layer
network, with the first two layers shared with the local utility function to process local action-
observation history. The input to the third layer (a fully-connected layer) is the concatenation of the
output of two agents’ GRU layer. The local utilities and pairwise utility differences are summed to
estimate the global action value (Eq. 11 in the paper)."
REFERENCES,0.8576449912126538,"For all experiments, the optimization is conducted using RMSprop with a learning rate of 5 × 10−4,
α of 0.99, RMSProp epsilon of 0.00001, and with no momentum or weight decay. For exploration,
we use ϵ-greedy with ϵ annealed linearly from 1.0 to 0.05 over 50K time steps and kept constant
for the rest of the training. Batches of 32 episodes are sampled from the replay buffer. The default
iteration number of the Max-Sum algorithm is set to 5. The communication threshold depends on the
number of agents and the task, and we set it to 0.3 on the map 5m_vs_6m and 0.35 on the map MMM2.
We test the performance with different values (1e-3, 1e-4, and 1e-5) of the scaling weight of the
sparseness loss Lqvar
sparse on Pursuit, and set it to 1e-4 for both the MACO and SMAC benchmark.
The whole framework is trained end-to-end on fully unrolled episodes. All experiments on StarCraft
II use the default reward and observation settings of the SMAC benchmark."
REFERENCES,0.859402460456942,"All the experiments are carried out on NVIDIA Tesla P100 GPU. We show the estimated running
time of our method on different tasks in Table 3 and 4. Typically, CASEC can finish 1M training
steps within 8 hours on MACO tasks and in about 10 hours on SMAC tasks. In Table 5, we compare
the computational complexity of action selection for CASEC and DCG, which is the bottleneck of
both algorithms. CASEC is slightly faster than DCG by virtue of graph sparsity."
REFERENCES,0.8611599297012302,Table 3: Approximate running time of CASEC on tasks from the MACO benchmark.
REFERENCES,0.8629173989455184,"Aloha
Pursuit
Hallway
Sensor
Gather
Disperse"
REFERENCES,0.8646748681898067,"13h (2M)
17h (2M)
7h (1M)
4.5h (0.5M)
6.5h (1M)
8h (1M)"
REFERENCES,0.8664323374340949,Table 4: Approximate running time of CASEC on tasks from the SMAC benchmark.
REFERENCES,0.8681898066783831,"5m_vs_6m
MMM2"
REFERENCES,0.8699472759226714,"18h (2M)
21h (2M)"
REFERENCES,0.8717047451669596,"Table 5: Average time (millisecond) for 1000 action selection phases of CASEC/DCG. CASEC
uses a graph with sparseness 0.2 while DCG uses the full graph. To ensure a fair comparison, both
Max-Sum/Max-Plus algorithms pass messages for 8 iterations. The batch size is set to 10."
ACTIONS,0.8734622144112478,"5 actions
10 actions
15 actions
5 agents
2.90/3.11
3.15/3.39
3.42/3.67
10 agents
3.17/3.45
3.82/4.20
5.05/5.27
15 agents
3.41/3.67
5.14/5.4
7.75/8.02"
ACTIONS,0.875219683655536,"F
INFLUENCE OF CYCLES ON MAX-SUM"
ACTIONS,0.8769771528998243,"One limitation of our method is that we cannot guarantee cycle-free coordination graphs. Running
Max-Sum on loopy graphs (graph that contains loops) may lead to sub-optimal actions being selected.
In this section, we investigate the influence of cycles on the optimality of Max-Sum algorithm."
ACTIONS,0.8787346221441125,Published as a conference paper at ICLR 2022
ACTIONS,0.8804920913884007,"Specifically, we first compare the results of Max-Sum against optimal joint actions on Aloha from
the MACO benchmark. To this end, we sample 1000 Aloha configurations. We then run Max-Sum
under different sparseness degrees (with no guarantee of cycle-free graphs) and compare with optimal
joint actions. Since finding the optimal action is NP-hard, we use a brute-force method and enumerate
all possible joint actions and choose the one with the largest Qtot value."
ACTIONS,0.8822495606326889,"250
0
250
500
750
1000
1250
1500
Qtot: optimal 250 0 250 500 750 1000 1250 1500"
ACTIONS,0.8840070298769771,Qtot: Max-Sum
ACTIONS,0.8857644991212654,Aloha: Agents=10; Actions=2; Threshold=0.2;
ACTIONS,0.8875219683655536,Points=1000; Distance=3.6994
ACTIONS,0.8892794376098418,"500
750
1000
1250
1500
1750
2000
2250
Qtot: optimal 500 0 500 1000 1500 2000"
ACTIONS,0.8910369068541301,Qtot: Max-Sum
ACTIONS,0.8927943760984183,Aloha: Agents=10; Actions=2; Threshold=1.0;
ACTIONS,0.8945518453427065,Points=1000; Distance=188.27
ACTIONS,0.8963093145869947,"0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Communication threshold 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0"
ACTIONS,0.8980667838312829,Actions optimality Aloha
ACTIONS,0.8998242530755711,"Figure 16: Compare actions selected by Max-Sum and the optimal joint action on 1000 different
configurations of Aloha. Left: On sparse graphs with 20% edges. Qtot values of the actions are
shown. Middle: On full graphs. Qtot values of the actions are shown. Right: How many actions
selected by Max-Sum are optimal under different sparseness degrees."
ACTIONS,0.9015817223198594,"0
200
400
600
800
Qtot: optimal 0 200 400 600 800"
ACTIONS,0.9033391915641477,Qtot: Max-Sum
ACTIONS,0.9050966608084359,"Normal=(0, 10): Agents=15; Actions=2;
Threshold=0.1; Points=1000; Distance=1.42"
ACTIONS,0.9068541300527241,"1000
0
1000
2000
3000
4000
5000
Qtot: optimal 1000 0 1000 2000 3000 4000 5000"
ACTIONS,0.9086115992970123,Qtot: Max-Sum
ACTIONS,0.9103690685413005,"Normal=(0, 10): Agents=15; Actions=2;
Threshold=1.0; Points=1000; Distance=2.91"
ACTIONS,0.9121265377855887,"0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1.0
Communication threshold 0.960 0.965 0.970 0.975 0.980"
ACTIONS,0.9138840070298769,Actions optimality
ACTIONS,0.9156414762741653,Random
ACTIONS,0.9173989455184535,"Figure 17: Compare actions selected by Max-Sum and the optimal joint action on 1000 random
configurations. Left: On sparse graphs with 10% edges. Qtot values of the actions are shown.
Middle: On full graphs. Qtot values of the actions are shown. Right: How many actions selected by
Max-Sum are optimal under different sparseness degrees."
ACTIONS,0.9191564147627417,"Results are shown in Fig. 16. We can see that Max-Sum on sparse graphs selects optimal actions
in around 95% of the cases. Qtot values are also satisfactory, with most points falling near the line
y = x. In comparison, the quality of Max-Sum solutions decreases significantly on full graphs, as
shown in Fig. 16 middle and right."
ACTIONS,0.9209138840070299,"We further investigate the case of random graphs. 1000 graphs are generated randomly with utility
and payoff values conforming to a Gaussian distribution with a mean of 0 and a variance of 10, and
we carry out experiments similar to those on Aloha. As shown in Fig. 17, we find that Max-Sum on
both sparse and full graphs can select more than 95% optimal actions. The optimization objective,
Qtot, is also very close to the optimal value."
ACTIONS,0.9226713532513181,"We can conclude that, although it can not guarantee optimality consistently, Max-Sum on sparse
graphs can select the optimal action with a large probability on the tested cases. In comparison,
optimal actions are less likely to be selected on full graphs. This may shed light on why CASEC
can outperform DCG on some tasks. For future work, we plan to investigate how to learn cycle-free
sparse coordination graphs so that action optimality can be guaranteed."
ACTIONS,0.9244288224956063,"G
EMPIRICAL EVALUATION OF THE BOUND IN EQ. 5"
ACTIONS,0.9261862917398945,"To figure how loose the bound in Eq. 5 is, we randomly generate 10000 graphs, select the edge
between agent 0 and 1, and put them into 100 bins according to the value of ζqvar
01
. In each bin,
we calculate the number of graphs where the actions of agent 0 and 1 selected by Max-Sum keep
unchanged after removing the edge between them. Also for each bin, we average the bound in
Equation 5 of each graph instance. Then, in Fig. 18, we compare our bound against the frequency of
unchanged actions. We observe that, on average, the bound is 36.9% lower than the real frequency."
ACTIONS,0.9279437609841827,Published as a conference paper at ICLR 2022
ACTIONS,0.929701230228471,"0.39
1.11
1.51
1.92
2.54
5.50"
ACTIONS,0.9314586994727593,Figure 18: Comparison between the bound in Proposition 1 and the probability in real cases.
ACTIONS,0.9332161687170475,"0.00
0.25
0.50
0.75
1.00
1.25
1.50
1.75
2.00
T (mil) 0 20 40 60 80 100 120"
ACTIONS,0.9349736379613357,Test Transmitted
ACTIONS,0.9367311072056239,"CASEC
DCG"
ACTIONS,0.9384885764499121,"0.0
0.1
0.2
0.3
0.4
0.5
T (mil) 0 10 20 30 40 50"
ACTIONS,0.9402460456942003,Test Scanned
ACTIONS,0.9420035149384886,"CASEC
DCG"
ACTIONS,0.9437609841827768,"Figure 19: Comparison between CASEC and DCG on Aloha (Left) and Sensor (Right) with two
times number of agents."
ACTIONS,0.945518453427065,"H
TASKS WITH A LARGER NUMBER OF AGENTS"
ACTIONS,0.9472759226713533,"Intuitively, sparse graphs are expected to perform better in tasks with more agents. In this section, we
compare CASEC with DCG on a large version of Aloha and Sensor."
ACTIONS,0.9490333919156415,"The new version of Aloha has 20 agents in a 2 × 10 array. We compare CASEC against DCG in
Fig. 19 left. We can see that DCG can no longer send any messages, but CASEC can send about 110
of them. For Sensor, there are 30 sensors and 6 targets. Results are shown in Fig. 19 right. We can
see that DCG does not learn to scan any targets, while CASEC can capture about 40 of them. The
gap between sparse and full coordination graphs is more significant on these tasks."
ACTIONS,0.9507908611599297,"I
DECIDE SPARSENESS ADAPTIVELY"
ACTIONS,0.9525483304042179,"A limitation of our method is that we fix the communication threshold when training. In this section,
we study how to select the threshold adaptively and investigate the following two methods."
ACTIONS,0.9543057996485061,"The first method is based on the observation that the performance of sparse graphs would degrade
dramatically when the sparseness degree is below a certain value. To find this value, during testing,
we check the performance of graphs with different sparseness degrees and select the degree below
which the performance would drop. We change the threshold every 50K, 150K, and 200K training
timesteps and show the performance in Fig. 20 (the first row). We can see that training with such
an adaptive threshold performs similarly with the original CASEC algorithm after convergence and
learns slightly better during the initial learning stage. The found threshold is smaller than the one that
we get through a grid search."
ACTIONS,0.9560632688927944,"The second method is based on Proposition 1. The intuition is that we can cut off the edges which
exert limited influence on Max-Sum. Specifically, during testing, we count the number of edges that
lead to different Max-Sum results with a probability smaller than 0.36 after being removed. The
percentage of these edges is set as the communication threshold. Again, we change the threshold
every 50K, 150K, and 200K training timesteps. The results are shown in Fig. 20 (the second row).
This second method leads to higher final performance but learns slower initially. The adaptive
threshold is less stable compared to the first method, and the selected thresholds are larger than the
hand-crafted one."
ACTIONS,0.9578207381370826,Published as a conference paper at ICLR 2022
ACTIONS,0.9595782073813708,"0.0
0.1
0.2
0.3
0.4
0.5
T (mil) 0 5 10 15 20 25 30"
ACTIONS,0.961335676625659,Test Scanned
ACTIONS,0.9630931458699473,"Original Sensor
Sparseness Adapt Interval 50K"
ACTIONS,0.9648506151142355,"Sparseness Adapt Interval 100K
Sparseness Adapt Interval 150K"
ACTIONS,0.9666080843585237,"50
100
150
200
250
300
350
400
450
500
550
T (k) 0.00 0.05 0.10 0.15 0.20"
ACTIONS,0.968365553602812,Threshold
ACTIONS,0.9701230228471002,"Original Sensor
Sparseness Adapt Interval 50K"
ACTIONS,0.9718804920913884,"Sparseness Adapt Interval 100K
Sparseness Adapt Interval 150K"
ACTIONS,0.9736379613356766,"0.0
0.1
0.2
0.3
0.4
0.5
T (mil) 0 5 10 15 20 25 30"
ACTIONS,0.9753954305799648,Test Scanned
ACTIONS,0.9771528998242531,"Original Sensor
Sparseness Adapt Interval 50K"
ACTIONS,0.9789103690685413,"Sparseness Adapt Interval 100K
Sparseness Adapt Interval 150K"
ACTIONS,0.9806678383128296,"50
100
150
200
250
300
350
400
450
500
550
T (k) 0.0 0.2 0.4 0.6"
ACTIONS,0.9824253075571178,Threshold
ACTIONS,0.984182776801406,"Original Sensor
Sparseness Adapt Interval 50K"
ACTIONS,0.9859402460456942,"Sparseness Adapt Interval 100K
Sparseness Adapt Interval 150K"
ACTIONS,0.9876977152899824,"Figure 20: Learning curves (Left) and the changing process (Right) of the communication threshold
of the two methods proposed in Appendix I."
ACTIONS,0.9894551845342706,"For future work, it is an important question how to develop more principled methods that can find the
minimum communication threshold which can guarantee learning performance."
ACTIONS,0.9912126537785588,"0
20
40
60
80
100
% edges left 50 40 30 20 10 0 10 20 30"
ACTIONS,0.9929701230228472,Test Scanned
ACTIONS,0.9947275922671354,"DCG (scanned)
DCG (return) 50 40 30 20 10 0 10 20 30"
ACTIONS,0.9964850615114236,Test Return
ACTIONS,0.9982425307557118,"Figure 21: Performance of DCG on Sensor with different numbers of edges in the coordination
graph."
