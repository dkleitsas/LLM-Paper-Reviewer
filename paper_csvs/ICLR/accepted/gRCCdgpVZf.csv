Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.0024154589371980675,"This paper studies zero-shot domain adaptation where each domain is indexed
on a multi-dimensional array, and we only have data from a small subset of do-
mains. Our goal is to produce predictors that perform well on unseen domains.
We propose a model which consists of a domain-invariant latent representation
layer and a domain-specific linear prediction layer with a low-rank tensor struc-
ture. Theoretically, we present explicit sample complexity bounds to characterize
the prediction error on unseen domains in terms of the number of domains with
training data and the number of data per domain. In addition, we provide experi-
ments on a two-way MNIST, a four-way fiber sensing dataset, and also the GTOS
dataset to demonstrate the effectiveness of our proposed model."
INTRODUCTION,0.004830917874396135,"1
INTRODUCTION"
INTRODUCTION,0.007246376811594203,"In many applications, collected datasets are cross-classified by a number of categorical factors such
as a set of experimental or environmental conditions that are either controllable or known. These
applications can be formalized as a zero-shot domain adaptation (ZSDA) problem with each domain
being indexed on a multi-dimensional array. Domain-shifts often exist among data collected under
different conditions, and to minimize the bias, one would like to collect diverse data to cover all
conditions. However, due to high cost of data collection or insufficient resource in the field, it is often
impractical to cover all possible combinations of factors. In most cases, training data collection can
only cover a few limited, accessible scenarios, and the data from target domain may not be available
during the training phase at all."
INTRODUCTION,0.00966183574879227,"One motivating example is the distributed fiber optical sensing (Rogers, 1988) technique started to
be used in smart city applications (Huang et al., 2019). Collecting fiber sensing data for machine
learning is expensive and the characteristics of sensing data vary considerably across various het-
erogeneous factors, such as weather-ground conditions, signal source types, and sensing distances.
Although conducting experiments to cover a small subset of combinations of different factors is
possible, it is difficult to conduct experiments to cover all possible combinations. Specifically, in
order to account for the effects of multiple factors (e.g., soil type × distance to sensor × weather),
one has to visit multiple sites and set up the sensing equipment, and wait for the right time until the
target type of data can be collected, and some combination of factors are not accessible due to the
constraint of the physical world (e.g. a testbed at 10km sensing distance with asphalt pavement sur-
face). Besides, in the digital pathology application, domain shift can be caused by different clinical
centers, scanners, and tumor types (Fagerblom et al., 2021). It is impossible to cover every combi-
nation in training (e.g., one center maybe specialized in certain tumor class or own one particular
type of scanners). Ideally, for these applications, one would want to train a model under a subset of
scenarios, and adapt it to new unseen scenarios without collecting new data."
INTRODUCTION,0.012077294685990338,∗Work done as an intern at NEC Labs America.
INTRODUCTION,0.014492753623188406,Published as a conference paper at ICLR 2022
INTRODUCTION,0.016908212560386472,"Another motivating application to design data augmentation with composition of operations. For
instance, in image recognition applications, there are often multiple operations can be combined
into augmented datasets, including blurring, translating, viewpoint, flipping, scaling, etc, and each
with several levels or values to choose from. It may require huge amount of augmented data to
cover all combinations of operations. Ideally, one only wants to try a small subset of all possible
combinations. Previous works have shown that composing operations in careful ways outperforms
randomly using data augmentation schemes (Ratner et al., 2017; Cubuk et al., 2019)."
INTRODUCTION,0.01932367149758454,"In the general ZSDA formulation, each domain is associated with a task descriptor, which is used
to generate a predictor for the domain. This function that maps a task descriptor to a predictor, i.e.,
a predictor generator, is trained on training domains where data is available (Yang & Hospedales,
2014). In our setting, we can view the categorical indices for each domain as a task descriptor
and thus apply existing approaches. However, this ignores the inherent multiway structure that
connects different domains. Furthermore, existing approaches lack theoretical guarantees, and thus
it is unclear under what conditions, the learned predictor generator can provably output an accurate
predictor on unseen domains. A natural question is"
INTRODUCTION,0.021739130434782608,"Can we design a provably sample-efficient algorithm for zero-shot domain adaptation that
exploits the multiway structure?"
OUR CONTRIBUTIONS,0.024154589371980676,"1.1
OUR CONTRIBUTIONS"
OUR CONTRIBUTIONS,0.026570048309178744,"In this paper, we answer this question affirmatively. Our contributions are summarized below."
OUR CONTRIBUTIONS,0.028985507246376812,"• we consider a multilinear structure which naturally characterize the relatedness among differ-
ent domains.
Formally, we assume that there are totally D = dM domains that form a
d×M-dimensional task tensor, where the predictor on domain t ∈[D] is parameterized by
w∗
t ◦ϕ∗∈W ◦Φ where ϕ∗: X →Rp is a common representation for tasks and wt ∈Rp
is a domain specific linear predictor. We only consider the case when p is small. Note the linear
predictors, w∗
1, . . . , w∗
D ∈Rp, together form a form a d × d × · · · × d
|
{z
}
M times
×p-dimensional tensor,"
OUR CONTRIBUTIONS,0.03140096618357488,"which we denote as T . To enable domain adaptation, we further impose a low-rank multi-linear
on the linear predictor T . The structure we impose on the model is that the slice along the last
axis is always rank-K with K ≪dM. That is, for all j ∈[p], T·,j ∈Rd×d×···×d has rank K."
OUR CONTRIBUTIONS,0.033816425120772944,"• We provide a finite-sample statistics analysis for this model. We show that if during training T ∈
[D] source domains are observed, and in each observed domain n samples are collected, then the"
OUR CONTRIBUTIONS,0.036231884057971016,"expected excess risk across all D domains is of order ˜O

T C(W)+C(Φ)"
OUR CONTRIBUTIONS,0.03864734299516908,"nT
1/4
+ p

KdM 2"
OUR CONTRIBUTIONS,0.04106280193236715,"T
1/2
,"
OUR CONTRIBUTIONS,0.043478260869565216,"where C(F) represents the complexity of function class F. The first term corresponds to the cost
of learning the common representation and domain-specific linear classifiers, and the second term
corresponds to the cost of generalizing to unseen domains. In the case where n is large, we can
simply ignore the first term, and conclude that T should scale with Kd(pM)2. This theoretically
justifies our method can adapt to unseen domains with limited training domains."
OUR CONTRIBUTIONS,0.04589371980676329,"• We test our proposed method on a two-way MNIST dataset and four-way fiber sensing datasets.
The empirical results show our method matches the performance of general ZSDA algorithm by
Yang & Hospedales (2014) which has a lot more parameters than our method."
RELATED WORK,0.04830917874396135,"2
RELATED WORK"
RELATED WORK,0.050724637681159424,"For theoretical results of multi-task learning, Baxter (2000) first derived a covering number bound
for sample complexities. Later Maurer et al. (2016) gave a uniform convergence bound for multi-
task representation learning. Their bound is of order O(
p"
RELATED WORK,0.05314009661835749,"1/m +
p"
RELATED WORK,0.05555555555555555,"1/T), where m is the number
of training samples in the target domain, so it is not reflecting how their learning process benefits
from seeing multiple domains. Recently, Du et al. (2020); Tripuraneni et al. (2020) successfully
derived results of type O(
p"
RELATED WORK,0.057971014492753624,"1/m +
p"
RELATED WORK,0.06038647342995169,"1/(nT)), which satisfactorily explained how learning algo-
rithm benefits from seeing abundant training data in many source domains, even if training data in
target domain is scarce. This setting is often referred to as transfer learning or few-shot learning. A"
RELATED WORK,0.06280193236714976,Published as a conference paper at ICLR 2022
RELATED WORK,0.06521739130434782,"key difference between this setting and ours is that we do not see any training data from the target
domain. Blitzer et al. (2009) also studied ZSDA, but they studied a different approach which relies
on multi-view learning and is restricted to linear models."
RELATED WORK,0.06763285024154589,"Many attempts to solving multi-task learning via low-rank matrices/tensors have been proposed
Romera-Paredes et al. (2013); Signoretto et al. (2013); Wimalawarne et al. (2014), focusing on reg-
ularizing shallow models. Wimalawarne et al. (2014) specifically discussed task imputation and
gave a sample complexity bound. However, their analysis assumed each training data is uniformly
sampled from all source domains, so it is incomparable to our result. Yang & Hospedales (2017); Li
et al. (2017) used low-rank tensor decomposition to share parameters between neural architectures
for multiple tasks and empirically verified that both multi-task learning and domain generalization
can benefit from the low-rank structure. Some different but closely related settings include unsuper-
vised domain adaptation and zero-shot learning, where the test labels are either unseen during the
training phase or different from what the model has been trained with. This is beyond the scope of
this paper, as we only consider the case where all domains share same set of labels."
RELATED WORK,0.07004830917874397,"The low-rank matrix completion problem has been thoroughly studied in the past decade Srebro &
Shraibman (2005); Srebro et al. (2004); Cand`es & Recht (2009); Recht (2011). Despite the com-
binatorial nature of rank, it has a nice convex relaxation, the trace norm, that can be optimized
efficiently, in both noiseless and noisy settings Wainwright (2019). Although these quantities (trace
norms, ranks, etc) are easy to calculate for matrices, most quantities associated with tensors are
NP-hard to compute, including the trace norm Hillar & Lim (2013). There are many efforts in the
theoretical computer science community to tackle tensor completion problems from the computa-
tional complexity perspective Barak & Moitra (2016); Liu & Moitra (2020). In this paper, we use
the statistical properties of tensor completion despite their computational inefficiency. Hence our
sample complexity bound does not contradict the seemingly worse bounds in the theory literature."
PRELIMINARY AND OVERVIEW,0.07246376811594203,"3
PRELIMINARY AND OVERVIEW"
PRELIMINARY AND OVERVIEW,0.0748792270531401,"Notation.
For D ∈Z, we let [D] = {1, 2, . . . , D}. We write ∥· ∥to represent the ℓ2 norm or
Frobenius norm. Let ⟨·, ·⟩be the inner product on an inner product space. Throughout the paper,
we assume for simplicity in total there are D = d × d × · · · × d
|
{z
}
M
data domains. One can easily"
PRELIMINARY AND OVERVIEW,0.07729468599033816,"generalize the results to the general case where D = QM
i=1 di. We use ⊗to denote the tensor product
and ⊙the Hadamard product. We use T ∈[D] to denote the number of seen source domains, n to
be the amount of sample in a single source domain. Since each t ∈[D] also uniquely corresponds
to a multi-index in I ∈[d]×M, if T ∈Rd×···×d×p is a d×M dimension tensor composing of p-
dimensional linear functionals, we also write Tt,· ∈Rp to represent the classifier at multi-index I,
and we use t and I as indices interchangeably."
PROBLEM SETUP,0.07971014492753623,"3.1
PROBLEM SETUP"
PROBLEM SETUP,0.0821256038647343,"During training, we have T source domains out of the D domains uniformly at random. For each
domain t ∈[T], we have n i.i.d data {(xt,i, yt,i)n
i=1} samples from the following probability (Tripu-
raneni et al., 2020): Pt(x, y) = Pw∗
t ◦ϕ∗(x, y) = Px(x)Py|x(y|w∗
t ◦ϕ∗(x)), where all domains share
the common feature mapping ϕ∗: (Rr →Rp) ∩Φ and a common marginal distribution Px. Each
domain has its specific classifier w∗
t ∈(Rp →R) ∩W. Φ can be a general function class and W
composes of Lipschitz linear functionals. We denote this distribution as Dt."
PROBLEM SETUP,0.08454106280193237,"The key assumption is that D domain-specific classifiers form a D × p rank-K tensor T in the
following sense:"
PROBLEM SETUP,0.08695652173913043,"∀I ∈[d]×M : T ∗
I,· = w∗
t = K
X k=1"
PROBLEM SETUP,0.0893719806763285,"M⊙
m=1 α∗
k,tm,
(1)"
PROBLEM SETUP,0.09178743961352658,"for α∗
k,tm ∈Rp. We remark that this does not mean T has rank K. Instead, this means for each
j ∈[p], T·,j has rank K."
PROBLEM SETUP,0.09420289855072464,"Let ℓ: R×R →R≥0 be the loss function, L((w◦ϕ)(x), y) = Ex,y[ℓ((w◦ϕ)(x), y)] be the expected
loss, bLn((w ◦ϕ)(x), y) = 1"
PROBLEM SETUP,0.0966183574879227,"n
Pn
i=1 ℓ((w ◦ϕ)(xi), yi) be the empirical loss. When x and y are clear"
PROBLEM SETUP,0.09903381642512077,Published as a conference paper at ICLR 2022
PROBLEM SETUP,0.10144927536231885,"from the context, we write L(w◦ϕ) to denote L((w◦ϕ)(x), y), and similarly for ℓand bLn. When the
number of samples n is clear from the context, we write bL := bLn. We write Lt := EDt[ℓ(·, ·))] to
emphasize the data is from Dt. Our goal is to minimize the average excess risk across all domains:"
"D
P",0.10386473429951691,"1
D
P"
"D
P",0.10628019323671498,"t∈[D] EDt
h
ℓ

ˆwt ◦ˆϕ

−ℓ(w∗
t ◦ϕ∗)
i
."
"D
P",0.10869565217391304,Our learning algorithm first outputs the empirical risk minimizer (ERM) on the seen source domains:
"D
P",0.1111111111111111,"ˆwt, ˆϕ =
arg min
ϕ∈Φ,
w1,...,wt∈W"
NT,0.11352657004830918,"1
nT T
X t=1 n
X"
NT,0.11594202898550725,"i=1
ℓ((wt ◦ϕ)(xt,i), yt,i) .
(2)"
NT,0.11835748792270531,"Naturally we put ˆwt into a d×M × p tensor ˜T , such that ˜Tt,· = ˆwt. Then we do a tensor completion
for each j ∈[p] separately:"
NT,0.12077294685990338,"bT·,i = arg min
rank-K T"
T,0.12318840579710146,"1
T X"
T,0.12560386473429952,t∈[T ]
T,0.1280193236714976,"Tt,i −˜Tt,i
 .
(3)"
T,0.13043478260869565,"Finally, at test time, for target domain indexed by t ∈[D] and test data x ∼Dt, we make the
prediction ˆy = ( ˆwt ◦ˆϕ)(x), where ˆwt = bTt,·"
T,0.13285024154589373,"Notion of Complexity
We use Gaussian complexity and Rademacher complexity to measure the
function class complexity.
Definition 3.1 (Gaussian and Rademacher complexity). Let F ⊂{f : Rp →Rq} be a vector-
valued function class, the empirical Gaussian and Rademacher complexity on n points X =
{x1, . . . , xn} are defined as:"
T,0.13526570048309178,bGn(F|X) = Eg 
T,0.13768115942028986,"sup
f∈F"
N,0.14009661835748793,"1
N X i∈[N] X"
N,0.14251207729468598,"k∈[q]
gkifk(xi) "
N,0.14492753623188406,",
bRn(F|X) = Eϵ "
N,0.1473429951690821,"sup
f∈F"
N,0.1497584541062802,"1
N X i∈[N] X"
N,0.15217391304347827,"k∈[q]
ϵkifk(xi)  ,"
N,0.15458937198067632,"where gki’s are all standard Gaussian random variables, ϵki’s are Rademacher random variables,
and fk is the kth entry of f."
N,0.1570048309178744,"Let Gn(F)
=
EX[bGn(F|X)] denote the expected Gaussian complexity (similarly for
Rademacher complexity).
To deal with the divergence among domains, we adopt the fol-
lowing notions from Tripuraneni et al. (2020): Gn(W) = maxZ∈Z ˆGn(W|Z), where Z =
{(ϕ (x1) , · · · , ϕ (xn)) | ϕ ∈Φ, xi ∈X for all i ∈[n]}."
N,0.15942028985507245,"To measure the complexity of tensors, we use the notion of pseudo-dimension.
Definition 3.2 (Pseudo-dimension). Let F ⊆RX be a real-valued function class. Let xm
1
=
(x1, . . . , xm) ∈X m. We say xm
1 is pseudo-shattered by F is there exists r = (r1, . . . , rm) ∈Rm
such that for all b = (b1, . . . , bm) ∈{±1}m, there exists f ∈F such that sign(fb(xi) −ri) = bi
for all i ∈[m]. The pseudo-dimension of F is defined as:"
N,0.16183574879227053,"Pdim(F) = max

m ∈N : ∃xm
1 s.t xm
1 is pseudo-shattered by F

."
THEORETICAL RESULTS,0.1642512077294686,"4
THEORETICAL RESULTS"
THEORETICAL RESULTS,0.16666666666666666,"In this section, we derive the sample complexity bound for our DG setting. As a high level overview,
we first prove that on the T seen source domains, with enough training data and sufficient regularity
conditions, we can have ˆwt being sufficient close to w∗
t on the source domains. Then we show that
with a large enough T, even on an unseen domain t ∈[D]\[T] we can also approximate w∗
t well by
completing the low-rank tensor formed by learned ˆwt. Finally, by certain regularity conditions on
the loss function, we can show the excess risk is also small."
THEORETICAL RESULTS,0.16908212560386474,We require the following regularity assumptions for our theoretical development.
THEORETICAL RESULTS,0.17149758454106281,Published as a conference paper at ICLR 2022
THEORETICAL RESULTS,0.17391304347826086,"Assumption 4.1.
1. The learning problem is realizable, that is, w∗
t ∈W for all t ∈[D] and
ϕ∗∈Φ. WLOG assume that w∗
t ◦ϕ∗is the unique minimizer of Lt for all t."
THEORETICAL RESULTS,0.17632850241545894,"2. ℓ(·, ·) is B-bounded, and ℓ(·, y) is L-Lipschitz."
THEORETICAL RESULTS,0.178743961352657,"3. For all w ∈W, ∥w∥≤W."
THEORETICAL RESULTS,0.18115942028985507,"4. supx ∥ϕ(x)∥≤DX , for any ϕ ∈Φ."
THEORETICAL RESULTS,0.18357487922705315,"5. For all t ∈[D], Lt is λ-strongly convex in wt for ϕ∗."
THEORETICAL RESULTS,0.1859903381642512,"The first assumption is indeed general. Since we care about the excess risk, in realizable problems
we can compare to the unique minimizer of L in W ◦Φ instead of w∗
t ◦ϕ∗. The existence of a unique
minimizer is necessary, otherwise tensor completion can lead to arbitrary errors. Assumptions 2-4
are common. Lastly, without strong convexity in the last assumption, one cannot derive the closeness
of ˆwt to w∗
t from the closeness of the excess risk on source domains."
LEARNING COMMON REPRESENTATION,0.18840579710144928,"4.1
LEARNING COMMON REPRESENTATION"
LEARNING COMMON REPRESENTATION,0.19082125603864733,"In this subsection, we discuss how to learn the shared representation. The proof follows Tripuraneni
et al. (2020) with modifications to adopt to our setting. First we introduce some definitions that
defines the divergence among the source domains and target domains.
Definition 4.1. For a function class W, T functions w1, . . . , wT , and data (xt, yt) ∼Dt for any
t ∈[T], the task-average representation difference (TARD) between representation ϕ and ϕ′ is
defined as:
¯dW,w(ϕ′; ϕ) = 1 T X"
LEARNING COMMON REPRESENTATION,0.1932367149758454,"t∈[T ]
inf
w′∈W E
Dt
(ℓ(w′ ◦ϕ′) −ℓ(wt ◦ϕ)) ."
LEARNING COMMON REPRESENTATION,0.1956521739130435,"Let w∗, ϕ∗be the true underlying functions. Define the uniform absolute representation difference
(UARD) to be"
LEARNING COMMON REPRESENTATION,0.19806763285024154,"dW(ϕ′; ϕ) = sup
t∈[D]
sup
wt∈W"
LEARNING COMMON REPRESENTATION,0.20048309178743962,"E
Dt
(ℓ(wt ◦ϕ′) −ℓ(wt ◦ϕ))
 ."
LEARNING COMMON REPRESENTATION,0.2028985507246377,"For W, we say w = {w1, . . . , wT } is (ν, ϵ)-diverse for a representation ϕ, if the following holds
for all ϕ′ ∈Φ:
dW(ϕ′; ϕ) ≤¯dW,w(ϕ′; ϕ)/ν + ϵ."
LEARNING COMMON REPRESENTATION,0.20531400966183574,"The notion of task-average representation difference was introduced by Tripuraneni et al. (2020). In
their setting, they bound the worse-case representation difference (WCRD) between two represen-
tations ϕ, ϕ′ ∈Φ which is defined as"
LEARNING COMMON REPRESENTATION,0.20772946859903382,"sup
w∈W
inf
w′∈W
E
(x,y)∼Pw◦ϕ
[ℓ(w′ ◦ϕ′) −ℓ(w ◦ϕ)],"
LEARNING COMMON REPRESENTATION,0.21014492753623187,"using the task-average representation difference. One should note that WCRD is changing the data
distribution, while UARD takes expectation over the true distribution Dt. We are saying that under
the true distribution, the worst case difference between using ϕ vs. ϕ′, over both the choice of linear
classifiers w and the domains, is not much larger than TARD. Intuitively, this says that our source
domains and task domains are benign enough, such that the ERM ˆϕ performs similarly to the true
ϕ∗."
LEARNING COMMON REPRESENTATION,0.21256038647342995,"Although it seems that ¯dW,w(ϕ′; ϕ) can be negative and dW(ϕ′; ϕ) is always positive, later we only
consider ¯dW,w∗(ϕ′; ϕ∗) and w∗
t ◦ϕ∗is assumed to be the minimizer. Hence, ¯dW,w∗(ϕ′; ϕ∗) is always
positive, and our notion of task diversity makes sense."
LEARNING COMMON REPRESENTATION,0.21497584541062803,We cite the following theorem from Tripuraneni et al. (2020).
LEARNING COMMON REPRESENTATION,0.21739130434782608,"Theorem 4.1. Let ˆϕ be the ERM in eq. (2). Under assumption 4.1, with probability at least 1 −δ,
we have"
LEARNING COMMON REPRESENTATION,0.21980676328502416,"¯dW,w∗(ˆϕ, ϕ∗) ≤4096L
WDX"
LEARNING COMMON REPRESENTATION,0.2222222222222222,"(nT)2 + log(nT) ·

W · GnT (Φ) + Gn(W)

+ 8B r"
LEARNING COMMON REPRESENTATION,0.2246376811594203,"log(2/δ) nT
."
LEARNING COMMON REPRESENTATION,0.22705314009661837,Published as a conference paper at ICLR 2022
LEARNING DOMAIN SPECIFIC LINEAR LAYER AND TENSOR COMPLETION,0.22946859903381642,"4.2
LEARNING DOMAIN SPECIFIC LINEAR LAYER AND TENSOR COMPLETION"
LEARNING DOMAIN SPECIFIC LINEAR LAYER AND TENSOR COMPLETION,0.2318840579710145,"Now we give results for learning the domain specific linear classification.
Theorem 4.2. Let ˆw, ˆϕ be the ERM in eq. (2). Let assumption 4.1 holds. With probability at least
1 −δ, we have"
"T
P",0.23429951690821257,"1
T
P"
"T
P",0.23671497584541062,"t∈[T ] ∥ˆwt −w∗
t ∥2 = O q 2
λ "
"T
P",0.2391304347826087,"L
h
W DX
(nT )2 + log(nT) ·

W · GnT (Φ) + Gn(W)
 i
+ 8B
q"
"T
P",0.24154589371980675,log(2/δ) nT !1/2! .
"T
P",0.24396135265700483,"The proof of Theorem 4.2 starts with showing that L( ˆwt ◦ϕ∗) is close to L(w∗
t ◦ϕ∗), while a
normal ERM analysis only asserts L( ˆwt ◦ˆϕ) is close to L(w∗
t ◦ϕ∗). Such assertion holds by the
(ν, ϵ)-diverse assumption. Intuitively, such diversity assumption makes sure our learning landscape
is somehow smooth: ˆwt should be stable such that if we perturb ˆϕ to ϕ∗, the loss function does not
alter too much. Together with strong convexity, these conditions guarantee ˆwt is close to the true w∗
t
on average."
"T
P",0.2463768115942029,"After we learn ˆwt for all t ∈[T], we find another ERM bT by constructing p tensors bT·,i for all
i ∈[p] separately as in eq. (3). We only observe the empirical tensor completion loss 1"
"T
P",0.24879227053140096,"T
PT
t=1 |bTt,i−
˜Tt,i| during training. With large enough T, by a uniform convergence argument, we can show that
1
T
PT
t=1 |bTt,i −˜Tt,i| can approximate 1"
"T
P",0.25120772946859904,"D
PD
t=1 |bTt,i −T ∗
t,i| fairly accurately."
"T
P",0.2536231884057971,"Lemma 4.1. Let XK be the class of rank-K tensor of shape d×M, its pseudo-dimension can be
bounded by Pdim(XK) ≤KdM 2 log(8ed)."
"T
P",0.2560386473429952,"Pdim(XK) is computed by treating tensors as polynomials and counting the connected components
of these polynomials. Even though any X ∈XK has dM entries, its complexity only scales as
poly(K, d, M). This assures that we only need to see polynomially many source tasks to perform
well in unseen domains. Using the pseudo-dimension, we have the following uniform convergence
result.
Theorem 4.3. With probability at least 1 −δ,"
D,0.2584541062801932,"1
D X t∈[D]"
D,0.2608695652173913,"bTt,· −T ∗
t,·
 ≤1 T X"
D,0.2632850241545894,t∈[T ] X j∈[p]
D,0.26570048309178745,"bTt,j −˜Tt,j
 + p r"
D,0.26811594202898553,KdM 2 log (8ed) + log(p/δ)
D,0.27053140096618356,"T
+ ˜O(n−1/4). (4)"
D,0.27294685990338163,"The last O(n−1/4) term in eq. (4) comes from Theorem 4.2. This is the cost we pay for not knowing
the true T ∗
t,·. If in each source domains we have infinity number of training samples, then statistically
Theorem 4.2 recovers the true T ∗
t,·. In this case, we only need to observe T = poly(p, K, d, M)
source domains."
MAIN THEOREM,0.2753623188405797,"4.3
MAIN THEOREM"
MAIN THEOREM,0.2777777777777778,"We are now ready to show our main result.
Theorem 4.4. Let assumption 4.1 holds and w∗= {w∗
1 . . . , w∗
T } being (ν, ϵ)-diverse for represen-
tation ϕ∗. With probability at least 1 −3δ, the following holds:"
D,0.28019323671497587,"1
D D
X"
D,0.2826086956521739,"t=1
E
(x,y)∼Dt
[ℓ( ˆwt ◦ˆϕ(x), y) −ℓ(w∗
t ◦ϕ∗(x), y)] ≤LDX W T X"
D,0.28502415458937197,t∈[T ] X j∈[p]
D,0.28743961352657005,"ˆwt,j −˜Tt,j"
D,0.2898550724637681,+ LDX Wp r
D,0.2922705314009662,KdM 2 log (8ed) + log(p/δ)
D,0.2946859903381642,"T
+ ˜O C(W)"
D,0.2971014492753623,"n
+ C(Φ) nT !1/4 ."
D,0.2995169082125604,"The first two terms correspond to the cost of tensor completion and the last term corresponds to
predicting with inaccurate ˆϕ. The term P"
D,0.30193236714975846,"t∈[T ]
P"
D,0.30434782608695654,"j∈[p]
 ˆwt,j −˜Tt,j
 can be exactly computed on the"
D,0.30676328502415456,"training dataset. Recall ˆwt is the learned by eq. (2) and bTt,· is the estimated linear classifier after
tensor completion. As n increases, this difference becomes smaller as ˆwt becoming close to w∗
t ."
D,0.30917874396135264,Published as a conference paper at ICLR 2022
EXPERIMENTS,0.3115942028985507,"5
EXPERIMENTS"
EXPERIMENTS,0.3140096618357488,"We empirically verify that our proposed model leads to better generalization performance than base-
line model with vanilla representation learning on three datasets: a variant of MNIST dataset, the
ground terrain in outdoor scene (GTOS) dataset (Xue et al., 2017), and a fiber sensing dataset. On
all datasets, we use LeNet trained on all available training data as the baseline. According to Li
et al. (2017; 2019), this is a simple yet strong baseline that outperforms most domain generalization
methods. Our model is trained in an end-to-end fashion. Instead of finding ERMs in eq. (2) and
perform tensor completion, we directly represent ˆwt = PK
k=1 ⊙M
m=1 ˆαk,tm, and output"
EXPERIMENTS,0.3164251207729469,"ˆαk,tm, ˆϕ = arg min
ϕ∈Φ,
αk,tm"
NT,0.3188405797101449,"1
nT T
X t=1 n
X i=1
ℓ  ( K
X k=1"
NT,0.321256038647343,"M⊙
m=1 αk,tm ◦ϕ)(xt,i), yt,i ! .
(5)"
NT,0.32367149758454106,"In this way, we can fully exploit the computational convenience of auto-differentiation rather than
dealing with the algorithmic difficulty of tensor completion. All models are trained using the cross
entropy loss. Since our theorem is a uniform convergence bound by nature, the sample complexity
will also apply to the end-to-end trained model1. To prevent overfitting, we stop training of all
models on the two-way MNIST dataset as soon as the last 50 iterations have average loss less than
0.05, and the training of all models on GTOS and the four-way fiber sensing dataset is stopped once
the last 100 iterations have average loss less than 0.05. Throughout the experiments, the Adam
optimizer with default learning rate 10−3 is used except when explicitly stated otherwise. The
sensitivity of the regularization parameter is investigated on MNIST data and we set it to 0.05 for all
rest of the experiments. For MNIST dataset, the source and target domain data are augmented from
MNIST training and test data respectively. For the fiber sensing dataset, the source and target domain
data are collected in separate experimental rounds. The GTOS experiment results are postponed to
the appendix. Across all results tables, mean accuracy is outside the parenthesis, standard deviation
is inside the parenthesis."
TWO-WAY MNIST,0.32608695652173914,"5.1
TWO-WAY MNIST"
TWO-WAY MNIST,0.3285024154589372,"A variant of MNIST is created by rotation and translation operations. We rotate all MNIST digits
by [−30, −15, 0, 15, 30] degrees, and translate all MNIST by [(−3, 0), (0, −3), (0, 0), (0, 3), (3, 0)]
pixels, leading to 5 × 5 domains."
TWO-WAY MNIST,0.3309178743961353,"For our proposed method, we use a simplified low-rank structure on the last two layers of LeNet.
Specifically, LeNet has the structure of conv1-pool1-conv2-pool2-fc1-relu-fc2-relu-fc3-sigmoid.
We impose the low-rank structure on both fc2 and fc3."
TWO-WAY MNIST,0.3333333333333333,"We create 11 linear classifiers for each layer, denote as s1, . . . , s5, v1, . . . , v5, u. For task (i, j) ∈5×
5, we use si+vj +u for prediction. This formulation is just a special case of the general formulation
in eq. (1). Indeed, let α1 = [s1, s2, s3, s4, s5, 1, 1, 1, 1, 1], α2 = [1, 1, 1, 1, 1, v1, v2, v3, v4, v5], and
α3 = [u, u, u, u, u, 1, 1, 1, 1, 1], where each wi, vi, u, 1 ∈Rp and αk ∈R10 × Rp."
TWO-WAY MNIST,0.3357487922705314,"Then for any task at t = (i, j) ∈5 × 5, its classifier wt this can be formally written as wt =
P3
k=1 αk,i ⊙αk,5+j, which is the same form as eq. (1). This is done for both fc2 and fc3, and each
layer has its own distinct set of weights."
TWO-WAY MNIST,0.33816425120772947,"Similar idea has been previously proposed for domain generalization Yang & Hospedales (2017);
Li et al. (2017). These previous works do not assume a tensor structure on the tasks. Instead, they
put a low-rank tensor structure on the classifiers themselves. This fundamentally distinguishes our
settings from previous ones. As a result, during test phase they have to use the common classifier u
for different target domains, but we can incorporate more prior knowledge by using si + vj + u."
TWO-WAY MNIST,0.34057971014492755,"During training time, we collect training data from (i, i) entries for all i ∈[5], and leave data
in any other domains for test only. This is one of the designs requires the minimal number of
source domains, and we can still successfully train all unknown classifiers s, v and u. Due to"
TWO-WAY MNIST,0.34299516908212563,"1Some theorems require ˆwt, ˆϕ being the ERM of eq. (2). In those cases, we can simply modify ˆwt to be the
corresponding entries of the tensor bT formed by ˆαk,tm and substitute eq. (5) for eq. (2). This is justified since
we assume the learning problem is realizable."
TWO-WAY MNIST,0.34541062801932365,Published as a conference paper at ICLR 2022
TWO-WAY MNIST,0.34782608695652173,"Table 1: Test accuracy with 5 observed domains on the diagonal. In each cell, from the 1st to 5th
row: baseline, our domain-agnostic and domain-specific models (both with the special low-rank
formulation) the general ZSDA model (Yang & Hospedales, 2014), and the Fish algorithm (Shi
et al., 2021) for domain generalization."
TWO-WAY MNIST,0.3502415458937198,"(-3, 0)
(0, -3)
(0,0)
(0,3)
(3,0) -30"
TWO-WAY MNIST,0.3526570048309179,"0.958(0.007)
0.950(0.007)
0.965(0.004)
0.967(0.002)
0.968(0.003)"
TWO-WAY MNIST,0.35507246376811596,"0.927(0.007)
0.932(0.010)
0.943(0.009)
0.936(0.006)
0.932(0.004)"
TWO-WAY MNIST,0.357487922705314,"0.735(0.017)
0.769(0.024)
0.775(0.024)
0.769(0.022)
0.744(0.018)"
TWO-WAY MNIST,0.35990338164251207,"0.585(0.016)
0.659(0.037)
0.646(0.038)
0.671(0.021)
0.637(0.012) -15"
TWO-WAY MNIST,0.36231884057971014,"0.975(0.003)
0.978(0.003)
0.977(0.004)
0.976(0.005)
0.978(0.002)"
TWO-WAY MNIST,0.3647342995169082,"0.974(0.002)
0.973(0.004)
0.975(0.003)
0.974(0.004)
0.977(0.001)"
TWO-WAY MNIST,0.3671497584541063,"0.908(0.005)
0.907(0.010)
0.911(0.010)
0.913(0.012)
0.912(0.007)"
TWO-WAY MNIST,0.3695652173913043,"0.797(0.009)
0.846(0.018)
0.839(0.015)
0.852(0.012)
0.845(0.007) 0"
TWO-WAY MNIST,0.3719806763285024,"0.925(0.012)
0.951(0.008)
0.950(0.009)
0.945(0.011)
0.928(0.006)"
TWO-WAY MNIST,0.3743961352657005,"0.969(0.004)
0.966(0.005)
0.971(0.005)
0.971(0.004)
0.971(0.002)"
TWO-WAY MNIST,0.37681159420289856,"0.973(0.002)
0.971(0.004)
0.976(0.002)
0.977(0.001)
0.977(0.002)"
TWO-WAY MNIST,0.37922705314009664,"0.935(0.007)
0.947(0.007)
0.952(0.005)
0.952(0.004)
0.950(0.003) 15"
TWO-WAY MNIST,0.38164251207729466,"0.739(0.038)
0.810(0.029)
0.801(0.027)
0.804(0.019)
0.756(0.021)"
TWO-WAY MNIST,0.38405797101449274,"0.861(0.023)
0.863(0.013)
0.866(0.013)
0.882(0.017)
0.871(0.009)"
TWO-WAY MNIST,0.3864734299516908,"0.974(0.003)
0.971(0.007)
0.978(0.003)
0.978(0.001)
0.976(0.003)"
TWO-WAY MNIST,0.3888888888888889,"0.975(0.003)
0.975(0.002)
0.977(0.002)
0.978(0.002)
0.980(0.002) 30"
TWO-WAY MNIST,0.391304347826087,"0.494(0.039)
0.576(0.048)
0.573(0.045)
0.568(0.022)
0.518(0.024)"
TWO-WAY MNIST,0.39371980676328505,"0.649(0.027)
0.664(0.018)
0.681(0.024)
0.715(0.018)
0.672(0.015)"
TWO-WAY MNIST,0.3961352657004831,"0.919(0.010)
0.917(0.021)
0.942(0.008)
0.938(0.008)
0.928(0.007)"
TWO-WAY MNIST,0.39855072463768115,"0.955(0.004)
0.930(0.012)
0.956(0.006)
0.947(0.016)
0.958(0.004)"
TWO-WAY MNIST,0.40096618357487923,"the excess amount of learnable parameters, it is easy to overfit on our method. To reduce model
complexity, we regularize all learnable classifiers to be close to their mean. That is, on each low-
rank layer, let µ =
1
11(P"
TWO-WAY MNIST,0.4033816425120773,i vi + P
TWO-WAY MNIST,0.4057971014492754,"j sj + u), we add the following regularizer to the loss function"
TWO-WAY MNIST,0.4082125603864734,"Ωλ(s, v, u) = λ"
TWO-WAY MNIST,0.4106280193236715,"11
P
i ∥vi −µ∥2 + P
j ∥sj −µ∥2 + ∥u −µ∥2
."
TWO-WAY MNIST,0.41304347826086957,"We run the experiments 10 times and report the mean performances and standard deviations in Ta-
ble 1. Since this method uses the domain description information (i, j) during testing, we refer to it
as the domain-specific model. In addition, we also report the performance of using just the common
classifier u in fc2 and fc3. This model uses no domain information during testing, and we call it
the domain-agnostic model. The baseline model is LeNet trained with data pooled from all source
domains together. Notice that each si + vj + ν corresponds to a unique task descriptor qi,j that
serves as the coefficients for the combination of the linear layers, so for the ZSDA model, we further
trained another descriptor network that outputs ReLU(Wq) as the new coefficients. This is done
for both the last two layers. Our method almost uniformly dominates the baseline in every domain,
sometimes by a large margin, and almost matches the performance of the ZSDA model, with less pa-
rameters. The domain-agnostic model achieves comparable performances to our proposed method.
This shows that with the low-rank tensor structure, domain-agnostic models can also accommodate
the domain shifts on this dataset. On most test domains, especially the ones that are “further away”
from the training domains, our proposed algorithm consistently outperforms Fish (Shi et al., 2021),
one of the state of the art domain generalization algorithms. Such results are expected as the Fish
algorithm does not consider multi-way structure into consideration."
TWO-WAY MNIST,0.41545893719806765,"Another interesting observation is that the performances of all models are better near the diagonal,
and getting worse away from the diagonal. This may provide insight into how we should design
experiments under a fixed budget of data collection. A conjecture is that the performances on unseen
target domains relate to the Manhattan distance of these domains to the seen source domains. Further
discussion is deferred to the appendix."
FOUR-WAY FIBER SENSING DATASET,0.4178743961352657,"5.2
FOUR-WAY FIBER SENSING DATASET"
FOUR-WAY FIBER SENSING DATASET,0.42028985507246375,"The distributed optic fiber sensing technique turns underground cable of tens of kilometers into a
linear array of sensors, which could be used for traffic monitoring in smart city applications. In this
paper, we aim to build a classifier for automatic vehicle counting and run-off-road event detection."
FOUR-WAY FIBER SENSING DATASET,0.4227053140096618,"The objective is to classify whether the sensed vibration signal is purely ambient noise, or it contains
vibration caused by a vehicle either driving normally or crossing the rumbling stripes alongside the"
FOUR-WAY FIBER SENSING DATASET,0.4251207729468599,Published as a conference paper at ICLR 2022
FOUR-WAY FIBER SENSING DATASET,0.427536231884058,"road. The sensing data takes the form of a 2D spatio-temporal array that can be viewed as an
image - each pixel represents the vibration intensity at a particular time and location along the cable.
Vehicles driving on the road, running-off-road, and ambient noise all create different patterns, which
makes convolutional neural networks a natural choice for a 3-class classification model."
FOUR-WAY FIBER SENSING DATASET,0.42995169082125606,"In experimental design, we consider several influencing factors representing the practical challenges
faced after field deployment. These factors include weather-ground conditions (sunny-dry, rainy-
wet), shoulder type (grass, concrete), sensing distance (0km, 10km, 15km), and vehicle type (van,
sedan, truck), which produce combined effects on the data domain. In order to evaluate our ap-
proach, we spent efforts on collecting data with all possible combinations of the levels in the afore-
mentioned factors in a lab testbed, resulting to a multiway data indexed by a 2 × 3 × 3 × 2 tensor.
Under each condition, we conduct 20 ∼25 rounds for the run-off-road events and normal driving.
The ambient noise data is collected when no vehicles are near the cable. The classes are balanced in
both training and test data."
FOUR-WAY FIBER SENSING DATASET,0.4323671497584541,"0.60
0.65
0.70
0.75
0.80
0.85
0.90
0.95
1.00
Accuracy 5 10 15 20"
FOUR-WAY FIBER SENSING DATASET,0.43478260869565216,Number of source domains 82.2% 84.1% 85.0% 84.3% 81.9% 85.0% 83.6% 86.3% 84.6% 86.7% 86.8% 87.1% 84.3% 87.0% 85.8% 87.5% 81.8% 85.9% 84.5% 86.1%
FOUR-WAY FIBER SENSING DATASET,0.43719806763285024,"Baseline
Domain specific
General rank 2
General rank 3
ZSDA"
FOUR-WAY FIBER SENSING DATASET,0.4396135265700483,sunny-truck-0km-grass
FOUR-WAY FIBER SENSING DATASET,0.4420289855072464,sunny-truck-10km-concrete
FOUR-WAY FIBER SENSING DATASET,0.4444444444444444,sunny-minivan-0km-concrete
FOUR-WAY FIBER SENSING DATASET,0.4468599033816425,sunny-minivan-10km-concrete
FOUR-WAY FIBER SENSING DATASET,0.4492753623188406,sunny-minivan-15km-grass
FOUR-WAY FIBER SENSING DATASET,0.45169082125603865,sunny-minivan-15km-concrete
FOUR-WAY FIBER SENSING DATASET,0.45410628019323673,sunny-sedan-0km-grass
FOUR-WAY FIBER SENSING DATASET,0.45652173913043476,rainy-truck-0km-grass
FOUR-WAY FIBER SENSING DATASET,0.45893719806763283,rainy-truck-0km-concrete
FOUR-WAY FIBER SENSING DATASET,0.4613526570048309,rainy-truck-10km-concrete
FOUR-WAY FIBER SENSING DATASET,0.463768115942029,rainy-truck-15km-concrete
FOUR-WAY FIBER SENSING DATASET,0.46618357487922707,rainy-minivan-0km-concrete
FOUR-WAY FIBER SENSING DATASET,0.46859903381642515,rainy-minivan-15km-grass
FOUR-WAY FIBER SENSING DATASET,0.47101449275362317,rainy-minivan-15km-concrete
FOUR-WAY FIBER SENSING DATASET,0.47342995169082125,rainy-sedan-10km-grass
FOUR-WAY FIBER SENSING DATASET,0.4758454106280193,rainy-sedan-15km-grass 0.5 0.6 0.7 0.8 0.9 1.0
FOUR-WAY FIBER SENSING DATASET,0.4782608695652174,"Baseline
Domain-specific
Rank 2
Rank 3
ZSDA"
FOUR-WAY FIBER SENSING DATASET,0.4806763285024155,"(a)
(b)"
FOUR-WAY FIBER SENSING DATASET,0.4830917874396135,"Figure 1: Left: Average test accuracy vs. number of source domains. Right: Test accuracy, trained
on 20 random observed domains."
FOUR-WAY FIBER SENSING DATASET,0.4855072463768116,"We evaluate model performance against number of source domains (5, 10, 15, or 20, each with 10
simulation runs) and results are shown in Figure 1(a). The performance increases with number of
source domains as expected. In particular, Figure 1(b) summarizes the test performance for models
trained with 10 source domains and tested on the rest. In each run, the observed source domains are
randomly sampled. Among the 10 runs, ”rainy-sedan-15km-grass” happens to be always selected as
the source domain, thus the test result is not available for this domain."
FOUR-WAY FIBER SENSING DATASET,0.48792270531400966,"We add two additional low-rank models in the form of eq. (5) with K = 2 and 3 just in the last layer
for comparison. Among the combination of factor levels, some scenarios are more challenging than
others. For example, sedan is the lightest vehicle among the three, which generates much weaker
vibration than a truck. Also the signal-to-noise ratio decays with increasing sensing distance. Results
show that in most of the cases, our ZSDA models achieve improved performance over the baseline,
and the margins over baseline are particularly large in several challenging scenarios."
CONCLUSION,0.49033816425120774,"6
CONCLUSION"
CONCLUSION,0.4927536231884058,"In this work, we propose a particular domain adaptation framework where T out of D = dM
total domains are observed during training. All D domains are parameterized by a common la-
tent representation and their domain-specific linear functionals, which form a d×M-dimensional
low-rank tensor. This multilinear structure allows us to achieve an average excess risk of order"
CONCLUSION,0.49516908212560384,"˜O

T C(W)+C(Φ)"
CONCLUSION,0.4975845410628019,"nT
1/4
+ p

KdM 2"
CONCLUSION,0.5,"T
1/2
. In addition to domain adaptation, our setting also sheds"
CONCLUSION,0.5024154589371981,"light on more efficient experiment designs and data augmentations. Algorithms developed under our
framework are empirically verified on both benchmark and real-world datasets."
CONCLUSION,0.5048309178743962,Published as a conference paper at ICLR 2022
CONCLUSION,0.5072463768115942,ACKNOWLEDGEMENT
CONCLUSION,0.5096618357487923,"SSD acknowledges support from NEC. SH would like to thank Yuheng Chen, Ming-Fang Huang,
and Yangmin Ding from NEC Labs America for their help with the fiber sensing data collection."
REFERENCES,0.5120772946859904,REFERENCES
REFERENCES,0.5144927536231884,"Boaz Barak and Ankur Moitra.
Noisy tensor completion via the sum-of-squares hierarchy.
In
Conference on Learning Theory, pp. 417–445. PMLR, 2016."
REFERENCES,0.5169082125603864,"Jonathan Baxter. A model of inductive bias learning. Journal of Artificial Intelligence Research, 12:
149–198, 2000."
REFERENCES,0.5193236714975845,"Irad Ben-Gal and Lev B Levitin. An application of information theory and error-correcting codes to
fractional factorial experiments. Journal of Statistical Planning and Inference, 92(1-2):267–282,
2001."
REFERENCES,0.5217391304347826,"John Blitzer, Dean P Foster, and Sham M Kakade. Zero-shot domain adaptation: A multi-view
approach. Tech. Rep. TTI-TR-2009-1, 2009."
REFERENCES,0.5241545893719807,"Emmanuel J Cand`es and Benjamin Recht. Exact matrix completion via convex optimization. Foun-
dations of Computational mathematics, 9(6):717–772, 2009."
REFERENCES,0.5265700483091788,"Ekin D Cubuk, Barret Zoph, Dandelion Mane, Vijay Vasudevan, and Quoc V Le. AutoAugment:
Learning augmentation strategies from data. In Proceedings of the IEEE/CVF Conference on
Computer Vision and Pattern Recognition, pp. 113–123, 2019."
REFERENCES,0.5289855072463768,"Simon S Du, Wei Hu, Sham M Kakade, Jason D Lee, and Qi Lei. Few-shot learning via learning
the representation, provably. arXiv preprint arXiv:2002.09434, 2020."
REFERENCES,0.5314009661835749,"Freja Fagerblom, Karin Stacke, and Jesper Molin.
Combatting out-of-distribution errors using
model-agnostic meta-learning for digital pathology. In Medical Imaging 2021: Digital Pathology,
volume 11603, pp. 116030S. International Society for Optics and Photonics, 2021."
REFERENCES,0.533816425120773,"Christopher J Hillar and Lek-Heng Lim. Most tensor problems are np-hard. Journal of the ACM
(JACM), 60(6):1–39, 2013."
REFERENCES,0.5362318840579711,"Ming-Fang Huang, Milad Salemi, Yuheng Chen, Jingnan Zhao, Tiejun J Xia, Glenn A Wellbrock,
Yue-Kai Huang, Giovanni Milione, Ezra Ip, Philip Ji, et al. First field trial of distributed fiber
optical sensing and high-speed communication over an operational telecom network. Journal of
Lightwave Technology, 38(1):75–81, 2019."
REFERENCES,0.538647342995169,"Da Li, Yongxin Yang, Yi-Zhe Song, and Timothy M Hospedales. Deeper, broader and artier domain
generalization. In Proceedings of the IEEE International Conference on Computer Vision, pp.
5542–5550, 2017."
REFERENCES,0.5410628019323671,"Yiying Li, Yongxin Yang, Wei Zhou, and Timothy Hospedales. Feature-critic networks for heteroge-
neous domain generalization. In International Conference on Machine Learning, pp. 3915–3924.
PMLR, 2019."
REFERENCES,0.5434782608695652,"Allen Liu and Ankur Moitra. Tensor completion made practical. arXiv preprint arXiv:2006.03134,
2020."
REFERENCES,0.5458937198067633,"Andreas Maurer, Massimiliano Pontil, and Bernardino Romera-Paredes. The benefit of multitask
representation learning. Journal of Machine Learning Research, 17(81):1–32, 2016."
REFERENCES,0.5483091787439613,"Michael D McKay, Richard J Beckman, and William J Conover. A comparison of three methods for
selecting values of input variables in the analysis of output from a computer code. Technometrics,
42(1):55–61, 2000."
REFERENCES,0.5507246376811594,"Alexander J Ratner, Henry R Ehrenberg, Zeshan Hussain, Jared Dunnmon, and Christopher R´e.
Learning to compose domain-specific transformations for data augmentation. In Proceedings of
the 31st International Conference on Neural Information Processing Systems, pp. 3239–3249,
2017."
REFERENCES,0.5531400966183575,Published as a conference paper at ICLR 2022
REFERENCES,0.5555555555555556,"Benjamin Recht. A simpler approach to matrix completion. Journal of Machine Learning Research,
12(12), 2011."
REFERENCES,0.5579710144927537,"Augustus James Rogers. Distributed optical-fibre sensors for the measurement of pressure, strain
and temperature. Journal of the Institution of Electronic and Radio Engineers, 58(5S):S113–
S122, 1988."
REFERENCES,0.5603864734299517,"Bernardino Romera-Paredes, Hane Aung, Nadia Bianchi-Berthouze, and Massimiliano Pontil. Mul-
tilinear multitask learning. In International Conference on Machine Learning, pp. 1444–1452.
PMLR, 2013."
REFERENCES,0.5628019323671497,"Yuge Shi, Jeffrey Seely, Philip HS Torr, N Siddharth, Awni Hannun, Nicolas Usunier, and Gabriel
Synnaeve. Gradient matching for domain generalization. arXiv preprint arXiv:2104.09937, 2021."
REFERENCES,0.5652173913043478,"Marco Signoretto, Lieven De Lathauwer, and Johan AK Suykens. Learning tensors in reproducing
kernel Hilbert spaces with multilinear spectral penalties. arXiv preprint arXiv:1310.4977, 2013."
REFERENCES,0.5676328502415459,"Nathan Srebro and Adi Shraibman. Rank, trace-norm and max-norm. In International Conference
on Computational Learning Theory, pp. 545–560. Springer, 2005."
REFERENCES,0.5700483091787439,"Nathan Srebro, Noga Alon, and Tommi S Jaakkola. Generalization error bounds for collaborative
prediction with low-rank matrices. In Advances in Neural Information Processing Systems, 2004."
REFERENCES,0.572463768115942,"Nilesh Tripuraneni, Michael I Jordan, and Chi Jin. On the theory of transfer learning: The impor-
tance of task diversity. arXiv preprint arXiv:2006.11650, 2020."
REFERENCES,0.5748792270531401,"Martin J Wainwright. High-Dimensional Statistics: A Non-asymptotic Viewpoint, volume 48. Cam-
bridge University Press, 2019."
REFERENCES,0.5772946859903382,"Kishan Wimalawarne, Masashi Sugiyama, and Ryota Tomioka. Multitask learning meets tensor fac-
torization: task imputation via convex optimization. Advances in neural information processing
systems, 27:2825–2833, 2014."
REFERENCES,0.5797101449275363,"Jia Xue, Hang Zhang, Kristin Dana, and Ko Nishino. Differential angular imaging for material
recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,
pp. 764–773, 2017."
REFERENCES,0.5821256038647343,"Yongxin Yang and Timothy Hospedales. Deep multi-task representation learning: A tensor factori-
sation approach. In International Conference on Learning Representations, 2017."
REFERENCES,0.5845410628019324,"Yongxin Yang and Timothy M Hospedales. A unified perspective on multi-domain and multi-task
learning. arXiv preprint arXiv:1412.7489, 2014."
REFERENCES,0.5869565217391305,Published as a conference paper at ICLR 2022
REFERENCES,0.5893719806763285,"A
PROOFS IN SECTION 4"
REFERENCES,0.5917874396135265,"Theorem 4.2. Let ˆw, ˆϕ be the ERM in eq. (2). Let assumption 4.1 holds. With probability at least
1 −δ, we have"
"T
P",0.5942028985507246,"1
T
P"
"T
P",0.5966183574879227,"t∈[T ] ∥ˆwt −w∗
t ∥2 = O q 2
λ "
"T
P",0.5990338164251208,"L
h
W DX
(nT )2 + log(nT) ·

W · GnT (Φ) + Gn(W)
 i
+ 8B
q"
"T
P",0.6014492753623188,log(2/δ) nT !1/2! .
"T
P",0.6038647342995169,"Proof. By a standard decomposition, we have with probability at least 1 −2δ"
T,0.606280193236715,"1
T X"
T,0.6086956521739131,t∈[T ]
T,0.6111111111111112,"
L( ˆwt ◦ˆϕ) −L(w∗
t ◦ϕ∗)
 = 1 T X"
T,0.6135265700483091,t∈[T ]
T,0.6159420289855072,"
EDt[ℓ( ˆwt ◦ˆϕ)] −EDt[(w∗
t ◦ϕ∗)]
 ≤1 T X"
T,0.6183574879227053,"t∈[T ]
EDt[ℓ( ˆwt ◦ˆϕ)] −1 nT X"
T,0.6207729468599034,t∈[T ] X
T,0.6231884057971014,"i∈[n]
ℓ(( ˆwt ◦ˆϕ)(xt,i), yi) + 1 nT X"
T,0.6256038647342995,t∈[T ] X
T,0.6280193236714976,"i∈[n]
ℓ(( ˆwt ◦ˆϕ)(xt,i), yi) −1 nT X"
T,0.6304347826086957,t∈[T ] X
T,0.6328502415458938,"i∈[n]
ℓ((w∗
t ◦ϕ∗)(xt,i), yi) + 1 nT X"
T,0.6352657004830918,t∈[T ] X
T,0.6376811594202898,"i∈[n]
ℓ((w∗
t ◦ϕ∗)(xt,i), yi) −EDt[ℓ(w∗
t ◦ϕ∗)]"
T,0.6400966183574879,"≤2
sup
w1,...,wT ∈W,
ϕ∈Φ "
T,0.642512077294686,"1
T X"
T,0.644927536231884,"t∈[T ]
EDt[ℓ(wt ◦ϕ)] −1 nT X"
T,0.6473429951690821,t∈[T ] X
T,0.6497584541062802,"i∈[n]
ℓ((wt ◦ϕ)(xt,i), yi) "
T,0.6521739130434783,≤4RnT (ℓ(W⊗T ◦Φ)) + 4B r
T,0.6545893719806763,log(1/δ) nT
T,0.6570048309178744,≤8LRnT (W⊗T ◦Φ) + 8B r
T,0.6594202898550725,log(1/δ) nT
T,0.6618357487922706,"Use the fact that bRn(H) ≤
p"
T,0.6642512077294686,"π/2bGn(H) for any function class H and the decomposition of
RnT (W⊗T ◦Φ) introduced in Tripuraneni et al. (2020), we conclude that"
T,0.6666666666666666,"1
T T
X t=1"
T,0.6690821256038647,"
L( ˆwt ◦ˆϕ) −L(w∗
t ◦ϕ∗)
"
T,0.6714975845410628,"≤4096L
WDX"
T,0.6739130434782609,"(nT)2 + log(nT) ·

W · GnT (Φ) + Gn(W)

+ 8B r"
T,0.6763285024154589,log(2/δ)
T,0.678743961352657,"nT
|
{z
}
1
⃝"
T,0.6811594202898551,"Meanwhile, by our assumption of uniform absolute representation difference and (ν, ϵ)-task diver-
sity:"
T,0.6835748792270532,"1
T T
X t=1"
T,0.6859903381642513,"
L( ˆwt ◦ϕ∗) −L( ˆwt ◦ˆϕ)

≤1 T T
X t=1"
T,0.6884057971014492,"L( ˆwt ◦ϕ∗) −L( ˆwt ◦ˆϕ)
 ≤dW(ˆϕ; ϕ∗) ≤¯dW,w∗(ˆϕ, ϕ∗)/ν + ϵ,"
T,0.6908212560386473,which gives
T,0.6932367149758454,"1
T T
X"
T,0.6956521739130435,"t=1
(L( ˆwt ◦ϕ∗) −L(w∗
t ◦ϕ∗)) = 1 T T
X t=1"
T,0.6980676328502415,"
L( ˆwt ◦ϕ∗) −L( ˆwt ◦ˆϕ)

+ 1 T T
X t=1"
T,0.7004830917874396,"
L( ˆwt ◦ˆϕ) −L(w∗
t ◦ϕ∗)
"
T,0.7028985507246377,"≤1⃝+ 1⃝/ν + ϵ,"
T,0.7053140096618358,Published as a conference paper at ICLR 2022
T,0.7077294685990339,"where we use dW,w∗(ˆϕ, ϕ∗) ≤1⃝from Theorem 4.1."
T,0.7101449275362319,"By strong convexity, we conclude for any T ∈[D], ν ≤1:"
T,0.7125603864734299,"1
T X"
T,0.714975845410628,"t∈[T ]
∥ˆwt −w∗
t ∥2 ≤ r 2
λ  1 T X"
T,0.717391304347826,"t∈[T ]
(L( ˆwt ◦ϕ∗) −L(w∗
t ◦ϕ∗))   1/2 ≤ r 4
λν "
"L
HWDX",0.7198067632850241,"4096L
hWDX"
"L
HWDX",0.7222222222222222,"(nT)2 + log(nT) ·

W · GnT (Φ) + Gn(W)
 i
+ 8B r"
"L
HWDX",0.7246376811594203,log(2/δ)
"L
HWDX",0.7270531400966184,"nT
+ ϵ !1/2 ."
"L
HWDX",0.7294685990338164,"Now we proceed to show the results related to tensor completion. The main idea is to treat a tensor
as a polynomial, and count its connect components. This number restricts the complexity of the
tensor."
"L
HWDX",0.7318840579710145,"Corollary A.1. The number of {±1, 0} sign configurations of r polynomials of degree at most d,
over q variables, is at most (8edr/q)q for r > q > 2."
"L
HWDX",0.7342995169082126,"Lemma 4.1. Let XK be the class of rank-K tensor of shape d×M, its pseudo-dimension can be
bounded by Pdim(XK) ≤KdM 2 log(8ed)."
"L
HWDX",0.7367149758454107,"Proof. Let fT (d, M, K) =
{sign(X −T) ∈{±1, 0}d×M : X ∈XK}
. It suffices to show that"
"L
HWDX",0.7391304347826086,"fT (d, M, K) ≤(8ed)KdM 2. A rank K d×M tensor can be decomposed as: Xt = K
X k=1 M
Y"
"L
HWDX",0.7415458937198067,"m=1
Uk,tm"
"L
HWDX",0.7439613526570048,"for t ∈[d]×M. Then one can treat X −T as dM polynomials of degree at most M over the following
entries:"
"L
HWDX",0.7463768115942029,"(X −T)t = K
X k=1 M
Y"
"L
HWDX",0.748792270531401,"m=1
Uk,tm −Tt."
"L
HWDX",0.751207729468599,"T is a fixed arbitrary tensor, so there are in total KdM variables. Applying Corollary A.1 yields the
desired result."
"L
HWDX",0.7536231884057971,"Theorem 4.3. With probability at least 1 −δ,"
D,0.7560386473429952,"1
D X t∈[D]"
D,0.7584541062801933,"bTt,· −T ∗
t,·
 ≤1 T X"
D,0.7608695652173914,t∈[T ] X j∈[p]
D,0.7632850241545893,"bTt,j −˜Tt,j
 + p r"
D,0.7657004830917874,KdM 2 log (8ed) + log(p/δ)
D,0.7681159420289855,"T
+ ˜O(n−1/4). (4)"
D,0.7705314009661836,"Proof. The following equation holds with probability at least 1 −δ, and follows directly from the
uniform convergence bound using covering number and bounding covering number using pseudo-
dimension. See Srebro & Shraibman (2005) for detail."
D,0.7729468599033816,"1
D X t∈[D]"
D,0.7753623188405797,"bTt,j −T ∗
t,j
 ≤1 T X"
D,0.7777777777777778,t∈[T ]
D,0.7801932367149759,"bTt,j −T ∗
t,j
 + r"
D,0.782608695652174,KdM 2 log (8ed) −log δ
D,0.785024154589372,"T
.
(6)"
D,0.7874396135265701,Then by triangle inequality and equivalence of norms in finite-dimensional spaces
D,0.7898550724637681,Published as a conference paper at ICLR 2022
D,0.7922705314009661,"1
D X t∈[D]"
D,0.7946859903381642,"bTt,· −T ∗
t,·
 ≤1 D X t∈[D] X j∈[p]"
D,0.7971014492753623,"bTt,j −T ∗
t,j ≤1 T X"
D,0.7995169082125604,t∈[T ] X t∈[p]
D,0.8019323671497585,"bTt,j −T ∗
t,j
 + p r"
D,0.8043478260869565,KdM 2 log (8ed) + log(p/δ) T ≤1 T X
D,0.8067632850241546,t∈[T ] X t∈[p]
D,0.8091787439613527,"bTt,j −˜Tt,j
 + p r"
D,0.8115942028985508,"KdM 2 log (8ed) + log(p/δ) T
+ 1 T X"
D,0.8140096618357487,t∈[T ] X t∈[p]
D,0.8164251207729468,"˜Tt,j −T ∗
t,j ≤1 T X"
D,0.8188405797101449,t∈[T ] X j∈[p]
D,0.821256038647343,"bTt,j −˜Tt,j
 + p r"
D,0.8236714975845411,KdM 2 log (8ed) + log(p/δ)
D,0.8260869565217391,"T
+ O(p1/2n−1/4),"
D,0.8285024154589372,"where the first step is from the fact that ∥· ∥2 ≤∥· ∥1 and union bounding eq. (6) over p events. The
O(p1/2n−1/4) term follows from Theorem 4.2 and equivalence between norms. Note that p ≪n
hence asymptotically our conclusion holds."
D,0.8309178743961353,"Theorem 4.4. Let assumption 4.1 holds and w∗= {w∗
1 . . . , w∗
T } being (ν, ϵ)-diverse for represen-
tation ϕ∗. With probability at least 1 −3δ, the following holds:"
D,0.8333333333333334,"1
D D
X"
D,0.8357487922705314,"t=1
E
(x,y)∼Dt
[ℓ( ˆwt ◦ˆϕ(x), y) −ℓ(w∗
t ◦ϕ∗(x), y)] ≤LDX W T X"
D,0.8381642512077294,t∈[T ] X j∈[p]
D,0.8405797101449275,"ˆwt,j −˜Tt,j"
D,0.8429951690821256,+ LDX Wp r
D,0.8454106280193237,KdM 2 log (8ed) + log(p/δ)
D,0.8478260869565217,"T
+ ˜O C(W)"
D,0.8502415458937198,"n
+ C(Φ) nT !1/4 ."
D,0.8526570048309179,Proof.
D,0.855072463768116,"1
D D
X"
D,0.857487922705314,"t=1
E
(x,y)∼Dt
[ℓ( ˆwt ◦ˆϕ(x), y) −ℓ(w∗
t ◦ϕ∗(x), y)] = 1 D D
X"
D,0.8599033816425121,"t=1
E
(x,y)∼Dt
[ℓ( ˆwt ◦ˆϕ(x), y) −ℓ( ˆwt ◦ϕ∗(x), y)]"
D,0.8623188405797102,"|
{z
}
A + 1 D D
X"
D,0.8647342995169082,"t=1
EDt[ℓ( ˆwt ◦ϕ∗(x), y) −ℓ(w∗
t ◦ϕ∗(x), y)]"
D,0.8671497584541062,"|
{z
}
B"
D,0.8695652173913043,"Let ¯dW,w∗(ˆϕ, ϕ∗) be as defined in definition 4.1. By our assumption of uniform absolute represen-
tation difference and (ν, ϵ)-diverse, we can upper bound A by ¯dW,w∗(ˆϕ, ϕ∗)/ν +ϵ. The second term
can be bounded by lipschitzness, B ≤1 D X"
D,0.8719806763285024,"t∈[D]
EDt [L | ˆwt ◦ϕ∗(x) −w∗
t ◦ϕ∗(x)|] ≤1 D X"
D,0.8743961352657005,"t∈[D]
EDt [L∥ˆwt −w∗
t ∥∥ϕ∗(x)∥] ≤LDX D X"
D,0.8768115942028986,"t∈[D]
∥ˆwt −w∗
t ∥."
D,0.8792270531400966,"Plug in our approximation to dW,w∗(ˆϕ, ϕ∗) in Theorem 4.1, 1 D
P"
D,0.8816425120772947,"t∈[D] ∥ˆwt −w∗
t ∥in Theorem 4.4,
and union bound, we conclude the theorem."
D,0.8840579710144928,Published as a conference paper at ICLR 2022
D,0.8864734299516909,"Table 2: Mean test accuracy for our method (both domain-specific and domain-agnostic) and base-
line. Same settings as in Table 1 but difference domains are observed."
D,0.8888888888888888,"ROTATION
TRANSLATION
(-3, 0)
(0, -3)
(0,0)
(0,3)
(3,0) -30"
D,0.8913043478260869,"0.740(0.021)
0.767(0.024)
0.796(0.022)"
D,0.893719806763285,"0.932(0.009)
0.940(0.008)
0.947(0.008)"
D,0.8961352657004831,"0.960(0.005)
0.958(0.007)
0.965(0.003)"
D,0.8985507246376812,"0.604(0.025)
0.654(0.044)
0.644(0.043) -15"
D,0.9009661835748792,"0.971(0.003)
0.977(0.003)
0.977(0.003)"
D,0.9033816425120773,"0.906(0.012)
0.915(0.007)
0.914(0.007)"
D,0.9057971014492754,"0.976(0.002)
0.978(0.002)
0.980(0.002)"
D,0.9082125603864735,"0.829(0.016)
0.860(0.021)
0.866(0.019) 0"
D,0.9106280193236715,"0.919(0.011)
0.953(0.006)
0.950(0.007)"
D,0.9130434782608695,"0.973(0.004)
0.972(0.003)
0.975(0.003)"
D,0.9154589371980676,"0.969(0.003)
0.961(0.007)
0.969(0.005)"
D,0.9178743961352657,"0.948(0.006)
0.952(0.006)
0.955(0.006) 15"
D,0.9202898550724637,"0.756(0.024)
0.844(0.020)
0.813(0.019)"
D,0.9227053140096618,"0.966(0.005)
0.969(0.005)
0.967(0.008)"
D,0.9251207729468599,"0.861(0.016)
0.844(0.024)
0.853(0.025)"
D,0.927536231884058,"0.978(0.002)
0.976(0.002)
0.977(0.003) 30"
D,0.9299516908212561,"0.554(0.021)
0.657(0.029)
0.656(0.028)"
D,0.9323671497584541,"0.958(0.006)
0.956(0.005)
0.966(0.005)"
D,0.9347826086956522,"0.903(0.021)
0.914(0.018)
0.940(0.011)"
D,0.9371980676328503,"0.656(0.025)
0.632(0.027)
0.691(0.030)"
D,0.9396135265700483,"B
MORE DISCUSSION TO SECTION 5"
D,0.9420289855072463,"We mention in Section 5.1 that the test accuracy on unseen domain might relate to the Manhattan
distance between the seen and unseen domains. Here is another experiment in the same setting as in
section 5.1, but the chosen observed entries are [(0,0), (1,3), (2,2), (3,1), (4,4)]."
D,0.9444444444444444,"In both Table 2 and Table 1, every factor level has been observed exactly once. If the factors are
categorical nominal, then permuting rows 2 and row 4 in Table 2 leads to the same balanced design
with Table 1, and the performance shall be similar. However, the factors (rotation, translation)
considered here are not nominal, for example, there is a ordinal relation between rotation −30 and
rotation −15. Hence, the above-mentioned permutation seems prohibitive. Consequently, it makes
sense to talk about Manhattan distances between observed and unobserved entries."
D,0.9468599033816425,"In Table 1, cell (4,0) is 4 units away from its closest observed cell in Manhattan distance (in the
following we omit to mention the metric is Manhattan distance), but in Table 2, (4,0) is 2 units away
from the closest observed entry. One can see the accuracy in that domain gets much better. However,
the closest distance to the observed entry is not the only factor here. For example, (0,1) in Table 1
outperforms (0,1) in Table 2 a lot. Therefore, the average distance to the observed entries may also
be a contributing factor."
D,0.9492753623188406,"It is an open question how to select the best subset of tensor entries to be observed, such that the
overall performance in the unseen target domains can be optimized. This question may relate to the
area of factorial experiment design, where many factors are involved and some have confounded
interactions. One subject is to design minimal sets of experiments such that the effects of all factors
can be studied. Our theory deals particularly with the case when the factor combinations are chosen
uniformly at random, without assuming any particular tensor structure. With more prior knowledge,
more efficient sampling algorithms can be designed. For instance, McKay et al. (2000) discussed
how to use Latin hypercube sampling to achieve a smaller sample complexity. There are also some
works that connect the dots between error coding theory and factorial experiment design Ben-Gal
& Levitin (2001). There could be information theoretic understanding to the relation between our
setting of experiment design and Manhattan distance as well. This can be an interesting research
direction and beyond the scope of our paper."
D,0.9516908212560387,"Fish Algorithm
The Fish algorithm was proposed in Shi et al. (2021) as a domain generalization
method, which achieves state-of-the-art results on the WILDS benchmarks. Its intuition is that the
model should be regularized (implicitly) during training such that the gradient steps on different
domains are invariant, thus leading to an invariant feature representation across different domain.
Comparing to the Fish algorithm, our proposed algorithm consistently outperforms Fish on most
test domains, especially the ones that are “further away” from the training domains. Such results"
D,0.9541062801932367,Published as a conference paper at ICLR 2022
D,0.9565217391304348,"are expected as the Fish algorithm does not consider multi-way structure into consideration. See the
results in table 1."
D,0.9589371980676329,"Fish is used for the LeNet architecture. Its inner step is trained using an Adam optimizer with step
size 10−2 and the meta step uses a learning rate of 0.5. The number of meta steps is set to be 5. We
use the same hyperparameters in the GTOS experiment as well. During training, we found out that
the Fish algorithm does not converge well if the batch size is too large. Hence we pick batch size
20. This is of the same magnitude as the batch size in Shi et al. (2021), but our proposed model and
the ERM models exhibit better generalization when trained with larger batch size 200."
D,0.961352657004831,"Hyperparameter Sensitivity
Model selection in domain adaptation is tricky in general, since no
data from the target domains is seen. One benefit of using the special low-rank formulation is that it
has fewer number of tuning parameters than general low-rank formulations. In addition to tuning λ
in the regularizer Ωλ, the form in eq. (5) also requires to choose rank K. We evaluate the sensitivity
of λ on both the source and target domains. Observing data from (i, i) domains on the diagonal,
we train on 5000 training data using λ ∈[0.005, 0.01, 0.03, 0.05, 0.1, 0.5, 1], and test on 1000 data
from both (i, i) source domains for i ∈[5] and (i, j) task domains for i ̸= j ∈[5]. Results show that
the test performances on both source domains and target domains are insensitive to λ. The mean
performances and standard deviations are reported in Table 3."
D,0.9637681159420289,Table 3: Hyperparameter sensitivity.
D,0.966183574879227,"λ
Source Domain
Target Domain"
D,0.9685990338164251,"0.005
0.963 (0.003)
0.822 (0.005)
0.01
0.964 (0.003)
0.821 (0.010)
0.03
0.962 (0.003)
0.824 (0.006)
0.05
0.963 (0.003)
0.818 (0.007)
0.1
0.959 (0.003)
0.823 (0.008)
0.5
0.961 (0.005)
0.810 (0.010)
1
0.962 (0.004)
0.811 (0.001)"
D,0.9710144927536232,"C
THREE-WAY GROUND TERRAIN IN OUTDOOR SCENES DATASET"
D,0.9734299516908212,"To train a model invariant to domain shifts, one would either need to collect massive training data
from many different domains such that the model is able to generalize (implicitly) to unseen cases,
or build a mechanism allowing (explicitly) adaptation to new scenarios utilizing limited domain
information. Our work belongs to the latter."
D,0.9758454106280193,"The proposed multi-way domain setup represents a combination of the environmental or experi-
mental factors, which naturally arises in many real life applications and the levels of factors are
pre-known. This setup is general enough for many tasks, especially those involving data collec-
tion experiments that are costly and limited by physical constraints. To make the applicability of
our method more compelling, we present results on the GTOS (Ground Terrain in Outdoor Scenes)
dataset (Xue et al., 2017), which a large-scale real-world dataset that naturally fits into our frame-
work."
D,0.9782608695652174,"The task of outdoor ground material recognition is strongly influenced by the weather and lighting
conditions, as well as the surface viewpoints. The GTOS dataset consists of over 30, 000 images
covering 40 classes (cement, asphalt, brick, etc.). The multi-way domain structure include: 4 differ-
ent weather conditions (cloudy dry, cloudy wet, sunny morning and sunny afternoon), 3 illumination
conditions with different exposure times, and 19 viewpoints from differential angular imaging. As a
result, each domain is indexed on a multidimensional array of size 4 × 3 × 19. Experimental results
in table 4 show that our method outperforms both the ERM and the Fish algorithm."
D,0.9806763285024155,"For our model, we use the same architecture as described in the beginning of section 5.1: a simplified
low-rank structure on the last two layers of LeNet. Specifically, LeNet has the structure of conv1-
pool1-conv2-pool2-fc1-relu-fc2-relu-fc3-sigmoid. We impose the low-rank structure on both fc2
and fc3. We create 27 linear classifiers for each layer, denote as si, uj, vk, h, for i ∈[3], j ∈[4], k ∈"
D,0.9830917874396136,Published as a conference paper at ICLR 2022
D,0.9855072463768116,"[19]. For task (i, j, k) ∈[3] × [4] × [19], we use si + uj + vk + h for prediction. The ERM model
and Fish model both use LeNet."
D,0.9879227053140096,"Both our model and the ERM model are trained using Adam optimizers with learning rate 10−3
with batch size 200. The Fish model was trained with batch size 20, its inner step is trained with an
Adam optimizer with learning rate 10−2 and the meta step has learning rate 0.5. We choose 5 for
the meta steps N (this is the parameter that determines how many training domains the model sees
at every iteration. The original paper tested N = 5, 10, 20 and found the performance insensitive to
N)."
D,0.9903381642512077,"During training, we found that Fish tends to not converging with large batch size, hence we reduce
the batch size from 200 to 20. For Fish to converge, we also need to increase the learning rate. One
conjecture of this phenomenon is because the number of observed training domains is quite large,
hence it is hard to match their gradients. As Shi et al. (2021) pointed out, Fish usually does not
outperform ERM when the number of domains is enormous. This is consistent with our observation."
D,0.9927536231884058,Table 4: Experiments on GTOS
D,0.9951690821256038,"% of observed entries
ERM
Ours
Fish"
D,0.9975845410628019,"0.1
0.602(0.059)
0.663(0.091)
0.565(0.022)
0.2
0.729(0.031)
0.794(0.058)
0.653(0.083)
0.3
0.792(0.013)
0.905(0.021)
0.731(0.032)
0.4
0.800(0.021)
0.913(0.013)
0.759(0.040)
0.5
0.884(0.037)
0.946(0.008)
0.851(0.025)"
