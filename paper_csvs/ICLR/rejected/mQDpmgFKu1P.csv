Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.0051813471502590676,"Recent studies have demonstrated that the performance of transformers on the
task of language modeling obeys a power-law relationship with model size over
six orders of magnitude. While transformers exhibit impressive scaling, their per-
formance hinges on processing large amounts of data, and their computational
and memory requirements grow quadratically with sequence length. Motivated
by these considerations, we introduce a novel attention module called implicit
self-attention and construct a Legendre Memory Unit based model hat exhibits
an O(n) and O(n ln n) (or better) dependency for memory and computation re-
spectively. Over three orders of magnitude, we show that for the same amount of
training our model improves the loss over transformers about as much as trans-
formers improve over LSTMs. Additionally, we demonstrate that adding global
self-attention complements our architecture and the augmented model improves
performance even further."
INTRODUCTION,0.010362694300518135,"1
INTRODUCTION"
INTRODUCTION,0.015544041450777202,"Self-attention architectures such as the transformer (Vaswani et al., 2017) have been extremely suc-
cessful in dealing with sequential data and have come to replace LSTMs and other RNN-based
methods, especially in the domain of Natural Language Processing (Radford et al., 2018; 2019; De-
vlin et al., 2018). Transformers facilitate parallelization within training examples, and this allows
them to fully leverage hardware accelerators such as GPUs, making training on datasets as large
as 750GB feasible (Raffel et al., 2019; Gao et al., 2020). In addition to parallelizing training, self-
attention architectures are much better at handling long-range dependencies relative to traditional
RNNs, and this allows them to take advantage of context much longer than the ∼100-1000 tokens
typical of RNNs, like the LSTM (Voelker & Eliasmith, 2018; Kaplan et al., 2020)."
INTRODUCTION,0.02072538860103627,"Transformers are general-purpose architectures that can be applied to a wide variety of problems and
modalities. One of the drawbacks of such generality is the lack of a priori structure, which makes
them heavily reliant on large quantities of data to achieve good results. Another limiting factor is
that self-attention involves the computation of the attention matrix, QKT , which is of shape n × n,
with n being the sequence length. Thus, transformer’s compute and memory requirements grow
quadratically with respect to the sequence length."
INTRODUCTION,0.025906735751295335,"In this work, we explore a way of addressing these limitations. We base our approach on the non-
parametric Linear Time-Invariant (LTI) component of the Legendre Memory Unit (Voelker et al.,
2019). This LTI system, which we refer to it here as the LMU,1 projects a sliding window of the
input sequence onto Legendre polynomials to provide a temporal representation and compression of
the input signal. Although the LTI system is an RNN, it has been shown to support both sequential
and parallel processing of sequences (Chilkuri & Eliasmith, 2021). Another crucial component of
our model is a modiﬁed attention mechanism that operates only on the output of the LMU at each
time step, and not across time steps. The LMU state at each step captures information about the past
tokens, and hence we call this attention mechanism implicit self-attention."
INTRODUCTION,0.031088082901554404,"1We refer to the LTI system as the LMU as it is the distinguishing layer of our architectures. The original
LMU was deﬁned to include the LTI system as well as a subsequent nonlinear layer. We have essentially
expanded this nonlinear layer to include a variety of familiar layers."
INTRODUCTION,0.03626943005181347,Under review as a conference paper at ICLR 2022
INTRODUCTION,0.04145077720207254,"LMU
LMU
LMU
LMU
LMU
LMU
LMU
LTI
LMU
LMU
LMU
LMU
LMU
LMU
LMU
LTI
LMU
LMU
LMU
LMU
LMU
LMU
LMU
LTI
LMU
LMU
LMU
LMU
LMU
LMU
LMU
LTI"
INTRODUCTION,0.046632124352331605,Multiply Sum
INTRODUCTION,0.05181347150259067,"Figure 1: (left) Illustration of the standard sequential implementation for computing the hidden state
m4. The input x1 is fed into the linear recurrent unit to compute the hidden state m1, which, along
with x2, is then used to compute the next hidden state, and so on. (right) Illustration of the time-
domain parallel implementation for computing the hidden state m4. The inputs x1-x4 are used to
compute the intermediate multiplies, which are then added together to compute the hidden state m4,
all without the need for any sequential operations."
INTRODUCTION,0.05699481865284974,"Recent work (Kaplan et al., 2020; Gao et al., 2020) has explored the scaling properties of trans-
formers in the context of autoregressive language modelling. They show that the performance of
transformers scales as a power-law with model size (excluding embedding parameters), dataset size
and the amount of compute used for training, when not bottlenecked by the other two. Inspired by
these results, we validate our method by studying the scaling properties of our models. To that end,
we start by reviewing some necessary background in Section 2, and then present the architectural
details of our model in Section 4. In Section 5, we present our experiments with models containing
up to 10 million parameters (or 1 million non-embedding parameters), which demonstrate a smooth
power-law relationship with respect to the model size, and a loss that scales better than transformers.
When the loss is matched to that of transformers, 10x fewer tokens are required."
INTRODUCTION,0.06217616580310881,"2
BACKGROUND: THE LEGENDRE MEMORY UNIT"
INTRODUCTION,0.06735751295336788,"The non-parametric LTI component of the LMU (Voelker & Eliasmith, 2018) is the focus of our
study. This LTI system is mathematically derived to project a sliding window of length θ of the
input sequence onto q Legendre polynomials. Thus, the two main hyper-parameters to choose when
using it are θ and q. Naturally, if we desire to capture the ﬁne-grained details of the input sequence, a
large θ, which sets the length of the sliding window, should be accompanied by a large q, the number
of Legendre polynomials used in approximating the input. We present the state-update equations of
the LTI component of the LMU below,2"
INTRODUCTION,0.07253886010362694,"mt = ¯
Amt−1 + ¯
Bxt,
(1)"
INTRODUCTION,0.07772020725388601,"where the ¯
A = eA ∈Rq×q and ¯
B = A−1(eA −I)B ∈Rq×1 matrices are frozen during training,
with A and B deﬁned as follows:"
INTRODUCTION,0.08290155440414508,"Ai,j = (2i + 1) θ"
INTRODUCTION,0.08808290155440414," −1
i < j
(−1)i−j+1
i ≥j
,
(2)"
INTRODUCTION,0.09326424870466321,Bi = (2i + 1)(−1)i
INTRODUCTION,0.09844559585492228,"θ
.
(3)"
INTRODUCTION,0.10362694300518134,"Crucially, when needed, the LTI equation (1) above can be evaluated as a convolution, in parallel, as
shown below (Chilkuri & Eliasmith, 2021): mt = t
X"
INTRODUCTION,0.10880829015544041,"j=1
¯
At−j ¯
Bxj,
(4)"
INTRODUCTION,0.11398963730569948,"or equivalently, deﬁning"
INTRODUCTION,0.11917098445595854,"H =
 ¯
A0 ¯
B
¯
A ¯
B
. . .

∈Rq×n,
(5)"
INTRODUCTION,0.12435233160621761,"x = [xn
xn−1
xn−2
. . .
x1]T ∈Rn×1,
(6)"
INTRODUCTION,0.12953367875647667,2Focusing on one-dimensional inputs for now.
INTRODUCTION,0.13471502590673576,Under review as a conference paper at ICLR 2022
INTRODUCTION,0.13989637305699482,Hidden State LMU
INTRODUCTION,0.14507772020725387,"Output V
K
Q"
INTRODUCTION,0.15025906735751296,"Input, t M"
INTRODUCTION,0.15544041450777202,Hidden State LMU
INTRODUCTION,0.16062176165803108,"Output V
K
Q"
INTRODUCTION,0.16580310880829016,"Input, t M"
INTRODUCTION,0.17098445595854922,Hidden State LMU
INTRODUCTION,0.17616580310880828,"Output V
K
Q"
INTRODUCTION,0.18134715025906736,"Input, t M"
INTRODUCTION,0.18652849740932642,Hidden State LMU
INTRODUCTION,0.19170984455958548,Output
INTRODUCTION,0.19689119170984457,Reshape and Project
INTRODUCTION,0.20207253886010362,"Implicit Self-Attention V
K
Q"
INTRODUCTION,0.20725388601036268,Project and FFN
INTRODUCTION,0.21243523316062177,FFN / Global Attention Input M
INTRODUCTION,0.21761658031088082,"(n, dq)"
INTRODUCTION,0.22279792746113988,"(n, q’, d)"
INTRODUCTION,0.22797927461139897,"(n, 3, q’, d)"
INTRODUCTION,0.23316062176165803,"(n, d)"
INTRODUCTION,0.23834196891191708,"(n, d)"
INTRODUCTION,0.24352331606217617,"Figure 2: The LMU and implicit self-attention architecture along with output dimensions. In the
illustration, n refers to the sequence length, q is the order and q′ is the reduced order, and d is the
embedding dimension. Normalization layers and skip connections are not shown. One variant uses
the FFN component right after the input, and the other variant uses global attention."
INTRODUCTION,0.24870466321243523,"the above convolution equation can be written as an element-wise multiplication in the Fourier space
as follows:"
INTRODUCTION,0.2538860103626943,"m1:n = F−1{F{H} · F{x}}.
(7)"
RELATED WORK,0.25906735751295334,"3
RELATED WORK"
RELATED WORK,0.26424870466321243,"Our work falls under the broad category of combining convolution with self-attention. Recent work
has demonstrated that combining these two modules can be beneﬁcial for language modeling, speech
and other NLP applications (Yang et al., 2019; Wu et al., 2020; Gulati et al., 2020). For instance, Wu
et al. (2020) introduce the Long-short Range Attention module that features a two-branch design,
with the self-attention branch learning global interactions and the convolutional branch learning
local interactions. Gulati et al. (2020) on the other hand propose a model that uses a single branch
architecture, with the convolutional block connected directly to the attention block, and demonstrate
improved performance on the task of speech recognition."
RELATED WORK,0.2694300518134715,"While our work is mathematically related to the models mentioned above, it differs from the previ-
ous approaches in three crucial ways: ﬁrst, we do not learn the convolutional weights, but instead
work with the analytically deﬁned weights of the LMU; second, we introduce the novel implicit
self-attention module that works on the hidden states of the LMU at each time-step; ﬁnally, we
systematically study the scaling properties of our model in the context of language modeling."
RELATED WORK,0.27461139896373055,"Our model is also related to the many studies on reducing the quadratic computational and memory
complexity of self-attention (Tay et al., 2020). Out of the several ways of improving efﬁciency,
our work shares some similarity with the sliding window attention approach (Beltagy et al., 2020;
Zaheer et al., 2020). While these methods use a form of masking of the full self-attention matrix
to constraint attention to the k-nearest tokens, our technique relies on the LMU to compute optimal
compressed representations of sliding windows of input vectors, each of which is then used as input
to the implicit attention module."
RELATED WORK,0.27979274611398963,Under review as a conference paper at ICLR 2022
ARCHITECTURE,0.2849740932642487,"4
ARCHITECTURE"
ARCHITECTURE,0.29015544041450775,"In this paper, we modify the architecture presented in Chilkuri & Eliasmith (2021) to better deal
with the task of language modelling, especially when the sequences are long and high-dimensional.
Starting with the base LMU model, we describe the major components of our model below. An
illustration of our architecture is presented in Figure 2."
ARCHITECTURE,0.29533678756476683,"Memory Matrix
Consider an input sequence {x1, x2, . . . , xn} of length n where the individual
elements are of dimension xi ∈Rd. The most natural way of using an LMU-based model on such
sequences is to set θ = n and use an appropriately large q. The downside of using the LMU in
such a manner, however, is that the hidden state of the LMU scales with input dimension and order:
m ∈Rdq. For example, in Section 5, we deal with n = 1024 and d that is as large as 204. Even
when using a small q of 100, we may end up with hidden states that are as large as R20k, which is
highly undesirable."
ARCHITECTURE,0.3005181347150259,"One way around this issue is to take inspiration from standard convolutional network architectures
(CNNs) and work with a smaller sliding window, θ ≈10, which in turn allows us to use a small
LMU order, q ≈5, thus taming the hidden state dimension (see Chilkuri & Eliasmith (2021) for
more details). However, enforcing a small sliding window prompts the use of many stacked LMU
layers in order to increase the ‘receptive ﬁeld’ (or the effective θ) of the model, very similar to how
CNNs often use small kernels with many convolutional layers. Unsurprisingly, such an approach
results in very deep models, which can be problematic to train."
ARCHITECTURE,0.30569948186528495,"Here, we choose to follow the middle path, i.e, 0 ≪q ≪n, but instead of working directly with the
potentially high-dimensional hidden state m, we disentangle the input dimensions from the order. In
other words, we perform our operations on the matrix M ∈Rd×q and not on the vector m ∈Rdq.
This is beneﬁcial because while a fully-connected layer needs d2 · q2 parameters to process the m
vector, processing the matrix M with the help of two fully connected layers, one for the rows and
one for the columns, requires only d2 + q2 parameters."
ARCHITECTURE,0.31088082901554404,"Implicit Self-Attention
The main feature distinguishing our architecture from past work is the
LMU. As mentioned above, the output of the LMU layer compresses past history at each time-
step, which is captured by the M ∈Rq×d matrix. Our modiﬁed self-attention acts on this matrix to
combine temporal information. As a result, self-attention does not act directly on the input sequence,
but rather on a compressed version of the input, which is available at each moment in time and covers
a window, determined by θ. Ignoring the bias vectors, normalization layers, and skip-connections,
we ﬁrst execute the following sets of operations simultaneously:
Q = σ(L1M)
K = σ(L2M)
V = σ(L3M),
(8)"
ARCHITECTURE,0.3160621761658031,"where Li ∈Rq′×q, σ is a non-linearity such as gelu, and the matrices Q, K, V are all in Rq′×q.
The primary motivation behind this transformation was to reduce the size of the matrix dimension,
and we have found the setting q′ = q/10 to work well in our experiments, thus the attention matrices
contain far fewer elements than n2. For example, in our largest model we set q = 250, resulting in
q′ = 25."
ARCHITECTURE,0.32124352331606215,"Following the computation of Q, K, and V two additional computations result in a d-dimensional
vector m:
M ′ = softmax(QKT )V ,
(9)"
ARCHITECTURE,0.32642487046632124,"m = pM ′,
(10)"
ARCHITECTURE,0.3316062176165803,where p ∈R1×q′.
ARCHITECTURE,0.33678756476683935,"In practice, equation (8) can be made far more efﬁcient computationally, especially during inference,
by following the recipe outlined in Section A.1."
ARCHITECTURE,0.34196891191709844,"Feedforward Network
We have also found it beneﬁcial to include a feedforward network (FFN)
(Vaswani et al., 2017) before the LMU and after the implicit self-attention block. The FFN compo-
nent is deﬁned below:
y(x) = σ(xW1 + b1)W2 + b2,
(11)"
ARCHITECTURE,0.3471502590673575,"where W1 ∈Rd×d′, W2 ∈Rd′×d, b1 ∈Rd′ and b2 ∈Rd."
ARCHITECTURE,0.35233160621761656,Under review as a conference paper at ICLR 2022
ARCHITECTURE,0.35751295336787564,Table 1: Memory and computation scaling with sequence length during training and inference.
ARCHITECTURE,0.3626943005181347,"Layer
Memory
Compute
Full Attention
O(n2)
O(n2)
LMU (Parallel)
O(n)
O(n ln n)
LMU (Recurrent)
O(1)
O(n)"
ARCHITECTURE,0.36787564766839376,"Table 2: Parameter counts and compute (forward pass) for one layer of the network, per token.
The ﬁrst row indicates the number of FLOPs when following the implementation in Section A.1.
Additional background information regarding various implementations of the LMU is provided in
Appendix A.2."
ARCHITECTURE,0.37305699481865284,"Operation
Parameters
FLOPs per Token
LMU + Q + K + V
3qq′
3d [5(q′ + 1)(log2 n + 1) + 6q′] + 6qq′"
ARCHITECTURE,0.37823834196891193,"QKT
–
2dq′2"
ARCHITECTURE,0.38341968911917096,"M ′
–
2dq′2 + dq′"
ARCHITECTURE,0.38860103626943004,"m
q′
2dq′"
ARCHITECTURE,0.39378238341968913,"FFN
2dd′
4dd′"
ARCHITECTURE,0.39896373056994816,"Global Self-Attention
We also explore the use of a global self-attention block in place of the FFN
component before the LMU. We ﬁnd that introducing this layer, while computationally expensive,
further improves the cross-entropy score. We believe that the improvement comes from the fact the
LMU and self-attention are complementary: the LMU’s implicit self-attention is good at prediction
with limited context, and the traditional self-attention captures long-range dependencies. We wish
to explore the use of efﬁcient self-attention blocks – which scale better than O(n2) – in the future."
ARCHITECTURE,0.40414507772020725,"Complexity
As shown in Table 1, our architecture employing the parallel LMU along with implicit
self-attention has memory requirements that are linear with respect to the sequence length, and it
has computational requirements that also grow as n ln n. When we use the recurrent version of
the LMU, the memory and compute requirements scale as O(1) and O(n) respectively. Recurrent
implementations, while not as efﬁcient on GPU architectures for large batch sizes, are ideally suited
to edge applications, especially with efﬁcient hardware support. Notably, if we add global attention
to our model, then both compute and memory become quadratic, just like the original transformer."
ARCHITECTURE,0.40932642487046633,"We also list the number of ﬂoating point operations per-token for the (parallel) LMU model in
Table 2."
EXPERIMENTS,0.41450777202072536,"5
EXPERIMENTS"
EXPERIMENTS,0.41968911917098445,"Dataset
We train our models on the publicly available internet text dataset called OpenWebText2
(OWT2).3 Similar to the WebText2 dataset (Radford et al., 2019), OWT2 was created using URLs
extracted from Reddit submissions with a minimum score of 3 as a proxy for quality, and it consists
of Reddit submissions from 2005 up until April 2020. After additional ﬁltering, applying the pre-
trained GPT2 tokenizer containing 50257 tokens (Radford et al., 2019) results in approximately 8
billion tokens in total. We use a train/validation/test split of 96/3/1%."
EXPERIMENTS,0.42487046632124353,"Training Details
We train our models in an autoregressive manner using the Adam optimizer with
all the default settings. We use sequences containing 1024 tokens, and in cases where the documents
have fewer than 1024 tokens, we pack multiple documents into the same sequence, separated by the
<|endofsequence|> token. We use a learning rate schedule with a linear warmup and cosine
decay to zero, while also reducing the learning rate on plateau. We chose to train our models to"
EXPERIMENTS,0.43005181347150256,3https://www.eleuther.ai/projects/open-web-text2/
EXPERIMENTS,0.43523316062176165,Under review as a conference paper at ICLR 2022
EXPERIMENTS,0.44041450777202074,"105
106"
EXPERIMENTS,0.44559585492227977,Parameters (non-embedding)
EXPERIMENTS,0.45077720207253885,4 × 100
EXPERIMENTS,0.45595854922279794,5 × 100 Loss
EXPERIMENTS,0.46113989637305697,Performance vs Parameters
EXPERIMENTS,0.46632124352331605,"LSTM
Transformer L(N,S)
LMU
LMU + Attention"
EXPERIMENTS,0.47150259067357514,"Figure 3: Cross-entropy scores in nats, averaged across all the tokens in the sequence. Transformers
and LSTMs ﬁts are from Kaplan et al. (2020). Our models perform better than Transformers and
LSTM models up to 1 million non-embedding parameters."
EXPERIMENTS,0.47668393782383417,"process a maximum of 13 billion tokens; at a batch size of 512, this amounts to training for 25000
steps. Additionally, one of the important considerations when doing NLP experiments is the size of
the embedding vectors, d. In this work, in order to facilitate a fair comparison to the transformer
models (Kaplan et al., 2020), we use the following rule to determine d: d = r N
24,"
EXPERIMENTS,0.48186528497409326,"where N represents the number of non-embedding (and trainable) parameters. We also note that we
attempted to match compute across all experiments to the corresponding transformer models."
EXPERIMENTS,0.48704663212435234,"Results
Here we present the results of our experiments that use the LMU architecture described
above with the non-embedding (and trainable) parameters ranging from 55k to 1M (i.e., from 2.5M
to 10M, if we include all parameters). The cross-entropy results are presented in Figure 3. For the
transformer models, we list the scores obtained by using the following power-law ﬁt,"
EXPERIMENTS,0.49222797927461137,"Transformer(N, S) =

N
6.5 · 1013"
EXPERIMENTS,0.49740932642487046,"−0.077
+

S
Smin(S)"
EXPERIMENTS,0.5025906735751295,"−0.76
,
(12)"
EXPERIMENTS,0.5077720207253886,"where N refers to the number of non-embedding parameters and S is the total number of training
steps (set to 25000 at batch size of 512, or equivalent). The power-law is obtained from Kaplan et al.
(2020); the ﬁts were generated by training several transformer models, ranging in size from 768 to
1.5 billion non-embedding parameters, on OpenAI’s WebText2 dataset.4 In addition, we compare
against the power-law for LSTM models, also from Kaplan et al. (2020), that use 10x more training
steps than the transformer and LMU models:"
EXPERIMENTS,0.5129533678756477,"LSTM(N) =

N
7.45 · 1014"
EXPERIMENTS,0.5181347150259067,"−0.071
."
EXPERIMENTS,0.5233160621761658,"Similar to the transformer and LSTM models, we notice that the performance of our models depends
strongly on scale, with the loss of the LMU model exhibiting the following power-law relationship
with respect to N:"
EXPERIMENTS,0.5284974093264249,"LMU(N) =

N
1.95 · 1014"
EXPERIMENTS,0.533678756476684,"−0.072
."
EXPERIMENTS,0.538860103626943,"4We note that the LMU models do not make use of positional embedding parameters, and for the trans-
former models, the parameter count excludes the positional embedding parameters (given by embed dimension
* sequence length). For our largest model, the total number of non-parametric weights inside all the LMU
layers (given by order * order + order) amounts to about 70% of the positional embedding parameters."
EXPERIMENTS,0.5440414507772021,Under review as a conference paper at ICLR 2022
EXPERIMENTS,0.5492227979274611,"100
101
102
103"
EXPERIMENTS,0.5544041450777202,Sequence Index 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0
EXPERIMENTS,0.5595854922279793,Per-token Loss
K,0.5647668393782384,55k
M,0.5699481865284974,1M
M,0.5751295336787565,Per-token Loss
M,0.5803108808290155,"Transformer
LMU + Attention"
M,0.5854922279792746,"100
101
102
103"
M,0.5906735751295337,Sequence Index 4.0 4.5 5.0 5.5 6.0 6.5
M,0.5958549222797928,Per-token Loss
M,0.6010362694300518,1M
M,0.6062176165803109,Per-token Loss
M,0.6113989637305699,"Transformer
LMU"
M,0.616580310880829,"Figure 4: (left) Comparison of per-token loss of an LMU model (with global attention) and a trans-
former model. (right) Per-token loss of an LMU model (without global attention) alongside the
transformer’s loss."
M,0.6217616580310881,The LMU model with global self-attention scales as follows:
M,0.6269430051813472,"LMUG(N) =

N
3.80 · 1014"
M,0.6321243523316062,"−0.069
."
M,0.6373056994818653,It remains to be seen whether our models retain this performance advantage when N ≫106.
M,0.6424870466321243,"The utility of adding global attention becomes clear when we observe the per-token loss plots of
the three models. In Figure 4 (right), we notice that although the LMU’s per-token loss is better
overall than the transformer’s, it ﬂattens relatively early, around 100 tokens, suggesting that implicit
attention alone does not capture long context. The LMU and Attention model, on the other hand,
continues improving with increasing context, similar to the transformer."
M,0.6476683937823834,"It is also interesting to note that we can compare LMUs and transformers by determining approxi-
mately how much training is required for a transformer to match LMU loss. Figure 5 demonstrates
that our models, trained on 13 billion tokens, have similar scaling to transformers trained on 130 bil-
lion tokens. Consequently, the LMU architecture is 10x more data efﬁcient. In addition, our LMU
models with global attention continue to outperform transformer models trained on 10x more tokens
(or with 10x more training steps) by a signiﬁcant margin."
DISCUSSION,0.6528497409326425,"6
DISCUSSION"
DISCUSSION,0.6580310880829016,"Semi-supervised learning has proven to be a very effective technique in Natural Language Process-
ing. General purpose language models pre-trained on a large corpus of text in an unsupervised
manner and ﬁne-tuned on tasks such as sentiment analysis and question answering often outperform
highly task-speciﬁc architectures that receive no pre-training. The performance of models on the
task of language modelling is thus a crucial metric that is indicative of the downstream performance
of such models on a slew of tasks involving natural language."
DISCUSSION,0.6632124352331606,"While the performance of our models on the task of language modelling suggests an interesting
trend, due to the scale of our experiments however, we do not consider this to be deﬁnitive evidence
for the superiority of our LMU architecture. As a result, a core objective for future research is to
show that the observed trends hold over 6 orders of magnitude, as demonstrated by Kaplan et al.
(2020) for transformers."
DISCUSSION,0.6683937823834197,"Additionally, we would like to point out three things in relation to the use of OpenWebText2: 1)
We made sure to construct or ﬁlter the OpenWebText 2 dataset to resemble Open AI’s WebText 2
dataset as closely as possible. 2) We trained transformer models on our version of the dataset and
conﬁrmed that the ﬁnal performance is lower bounded – lower the better – by the power-law and
scores reported in Kaplan et al. (2020). 3) Our experiments are reinforced by the results listed in Gao
et al. (2020) and Kim (2021), where the authors use OpenWebText2 to study the scaling properties
of GPT-2-like transformers."
DISCUSSION,0.6735751295336787,Under review as a conference paper at ICLR 2022
DISCUSSION,0.6787564766839378,"105
106"
DISCUSSION,0.6839378238341969,Parameters (non-embedding)
DISCUSSION,0.689119170984456,4 × 100
DISCUSSION,0.694300518134715,5 × 100 Loss
DISCUSSION,0.6994818652849741,Performance vs Parameters
DISCUSSION,0.7046632124352331,"LSTM
Transformer L(N,S)
LMU
LMU + Attention"
DISCUSSION,0.7098445595854922,"Figure 5: Approximately matching the loss between transformers and LMUs requires 10x more
training for the transformer. The LMU and Attention model continues to signiﬁcantly outperform
transformers with 10x less training."
DISCUSSION,0.7150259067357513,"Regarding the use of the original variant of the transformers as the point of comparison, we note that
while efﬁcient transformers (Zaheer et al., 2020; Beltagy et al., 2020; Wang et al., 2020), thanks to
their lower memory requirements, can be trained on batches of extremely long sequences and this
proves advantageous for tasks that beneﬁt from long context, such as summarization and question
answering. While the efﬁcient transformers tend to outperform the original transformer in such set-
tings, the original variant maintains better performance when working with typical sequence lengths.
Since we are dealing with sequences of length 1024, we reasoned that it would be most appropriate
to compare against models employing full self-attention and not an approximate version. In short,
we are demonstrating advantages where efﬁcient transformers do not."
CONCLUSION,0.7202072538860104,"7
CONCLUSION"
CONCLUSION,0.7253886010362695,"In this work, we employ the Legendre Memory to construct a model that is well-suited to han-
dling long sequences with high-dimensional elements. We apply our architectures to model natural
language in the inﬁnite data limit, demonstrating that: (1) like the established architectures such
as transformers and LSTMS, our models also exhibit a power-law relationship between the cross-
entropy loss and model size; and (2) at the small-medium scale, our models have better scaling
properties than other approaches."
CONCLUSION,0.7305699481865285,Under review as a conference paper at ICLR 2022
REFERENCES,0.7357512953367875,REFERENCES
REFERENCES,0.7409326424870466,"Iz Beltagy, Matthew E Peters, and Arman Cohan. Longformer: The long-document transformer.
arXiv preprint arXiv:2004.05150, 2020."
REFERENCES,0.7461139896373057,"Narsimha Reddy Chilkuri and Chris Eliasmith.
Parallelizing legendre memory unit train-
ing.
In Marina Meila and Tong Zhang (eds.), Proceedings of the 38th International Confer-
ence on Machine Learning, volume 139 of Proceedings of Machine Learning Research, pp.
1898–1907. PMLR, 18–24 Jul 2021. URL http://proceedings.mlr.press/v139/
chilkuri21a.html."
REFERENCES,0.7512953367875648,"Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep
bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805, 2018."
REFERENCES,0.7564766839378239,"Leo Gao, Stella Biderman, Sid Black, Laurence Golding, Travis Hoppe, Charles Foster, Jason
Phang, Horace He, Anish Thite, Noa Nabeshima, et al. The pile: An 800gb dataset of diverse text
for language modeling. arXiv preprint arXiv:2101.00027, 2020."
REFERENCES,0.7616580310880829,"Anmol Gulati, James Qin, Chung-Cheng Chiu, Niki Parmar, Yu Zhang, Jiahui Yu, Wei Han, Shibo
Wang, Zhengdong Zhang, Yonghui Wu, et al. Conformer: Convolution-augmented transformer
for speech recognition. arXiv preprint arXiv:2005.08100, 2020."
REFERENCES,0.7668393782383419,"Steven G. Johnson and Matteo Frigo.
Implementing FFTs in Practice.
In C. Sidney Burrus
(ed.), Fast Fourier Transforms. 2012. URL https://cnx.org/contents/ulXtQbN7@
15/Implementing-FFTs-in-Practice."
REFERENCES,0.772020725388601,"Jared Kaplan, Sam McCandlish, Tom Henighan, Tom B Brown, Benjamin Chess, Rewon Child,
Scott Gray, Alec Radford, Jeffrey Wu, and Dario Amodei. Scaling laws for neural language
models. arXiv preprint arXiv:2001.08361, 2020."
REFERENCES,0.7772020725388601,"Christina
Kim.
Scaling
laws
for
language
transfer
learning.
christina.kim,
4
2021.
URL
https://christina.kim/2021/04/11/
scaling-laws-for-language-transfer-learning/."
REFERENCES,0.7823834196891192,"Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving language under-
standing by generative pre-training. 2018."
REFERENCES,0.7875647668393783,"Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, Ilya Sutskever, et al. Language
models are unsupervised multitask learners. OpenAI blog, 1(8):9, 2019."
REFERENCES,0.7927461139896373,"Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi
Zhou, Wei Li, and Peter J Liu. Exploring the limits of transfer learning with a uniﬁed text-to-text
transformer. arXiv preprint arXiv:1910.10683, 2019."
REFERENCES,0.7979274611398963,"Yi Tay, Mostafa Dehghani, Dara Bahri, and Donald Metzler. Efﬁcient transformers: A survey. arXiv
preprint arXiv:2009.06732, 2020."
REFERENCES,0.8031088082901554,"Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,
Łukasz Kaiser, and Illia Polosukhin. Attention is all you need. In Advances in neural information
processing systems, pp. 5998–6008, 2017."
REFERENCES,0.8082901554404145,"Aaron Voelker, Ivana Kaji´c, and Chris Eliasmith. Legendre memory units: Continuous-time repre-
sentation in recurrent neural networks. In Advances in Neural Information Processing Systems,
pp. 15544–15553, 2019."
REFERENCES,0.8134715025906736,"Aaron R Voelker and Chris Eliasmith. Improving spiking dynamical networks: Accurate delays,
higher-order synapses, and time cells. Neural computation, 30(3):569–609, 2018."
REFERENCES,0.8186528497409327,"Sinong Wang, Belinda Z Li, Madian Khabsa, Han Fang, and Hao Ma. Linformer: Self-attention
with linear complexity. arXiv preprint arXiv:2006.04768, 2020."
REFERENCES,0.8238341968911918,"Zhanghao Wu, Zhijian Liu, Ji Lin, Yujun Lin, and Song Han. Lite transformer with long-short
range attention. In International Conference on Learning Representations, 2020. URL https:
//openreview.net/forum?id=ByeMPlHKPH."
REFERENCES,0.8290155440414507,Under review as a conference paper at ICLR 2022
REFERENCES,0.8341968911917098,"Baosong Yang, Longyue Wang, Derek Wong, Lidia S Chao, and Zhaopeng Tu. Convolutional self-
attention networks. arXiv preprint arXiv:1904.03107, 2019."
REFERENCES,0.8393782383419689,"Manzil Zaheer, Guru Guruganesh, Kumar Avinava Dubey, Joshua Ainslie, Chris Alberti, Santiago
Ontanon, Philip Pham, Anirudh Ravula, Qifan Wang, Li Yang, et al. Big bird: Transformers for
longer sequences. In NeurIPS, 2020."
REFERENCES,0.844559585492228,"A
APPENDIX"
REFERENCES,0.8497409326424871,"A.1
REDUCED-ORDER LMU"
REFERENCES,0.8549222797927462,"When implementing the LMU in these models, we use a parallelizable approach that computes the
impulse responses of the LMU (which are essentially the Legendre polynomials), and convolve those
with the input sequences (either using raw convolution or FFT-based convolution). Speciﬁcally,
given the q-dimensional impulse response H, we compute the LMU memory state M ∈Rd×q at
the current time as"
REFERENCES,0.8601036269430051,"M = X ∗H
(13)"
REFERENCES,0.8652849740932642,"where X ∈Rn×d is the time-series of previous inputs to the LMU, H ∈Rq×n is the LMU impulse
response, and ∗is the convolution operator."
REFERENCES,0.8704663212435233,"We have found that our models are most expressive when using a value of q that is signiﬁcantly larger
than q′, as this allows the LMU to ”remember” the time history with high ﬁdelity, but only use the
parts of the history that are most relevant. Rather than explicitly computing the full LMU output M
and then reducing this with the Li transformations as per equation (8), we propose applying the Li
transformations directly to the impulse responses"
REFERENCES,0.8756476683937824,"˜
Hi = LiH
(14)"
REFERENCES,0.8808290155440415,"and then applying these individually to directly compute Q, K, and V :"
REFERENCES,0.8860103626943006,"Q = σ(X ∗˜
H1)
K = σ(X ∗˜
H2)
V = σ(X ∗˜
H3)
(15)"
REFERENCES,0.8911917098445595,"This is mathematically equivalent to the formulation expressed previously, but uses signiﬁcantly
fewer operations per token, particularly when q is large or the ratio of q′ to q is small:"
REFERENCES,0.8963730569948186,"LLMU+Q+K+V = 3[dLFFT(q′) + 2qq′]
(16)"
REFERENCES,0.9015544041450777,where LFFT(q′) is given by Equation 19 with q →q′.
REFERENCES,0.9067357512953368,"A.2
LMU IMPLEMENTATION TRADE-OFFS"
REFERENCES,0.9119170984455959,"The LMU itself is a LTI dynamical system, with a number of options for implementation. One
implementation is to perform the update each timestep in state-space, using state-space matrices
discretized using the zero-order hold (ZOH) method for high accuracy. The operations required
(per LMU layer and per token) are the multiplications by the ¯
A and ¯
B matrices (with number of
elements q2 and q, respectively):
LSS = 2d(q2 + q).
(17)"
REFERENCES,0.917098445595855,"Another option is to use an explicit Runge-Kutta method to update the LMU states. By taking
advantage of the unique structure of the A and B matrices (Equations 2 and 3), this implementation
is able to reduce the complexity from O(q2) to O(q), requiring the following approximate number
of operations:
LRK = 6rdq.
(18)
where r is the order of the Runge-Kutta method. The disadvantage to this option is that it does not
implement the exact same dynamics as the ideal system discretized with ZOH, and is less numeri-
cally stable particularly for higher values of q."
REFERENCES,0.9222797927461139,"A disadvantage to both these options is that they must update LMU states sequentially, which is
particularly ill-suited when using highly parallel hardware (e.g. GPU) with a long sequence of
inputs available. In this case, we can take the impulse response of the LMU system (discretized with"
REFERENCES,0.927461139896373,Under review as a conference paper at ICLR 2022
REFERENCES,0.9326424870466321,"ZOH), and convolve it with an input in the FFT domain. This implements the exact same dynamics
as the ZOH state-space system, but with a complexity that is O(q) rather than O(q2):"
REFERENCES,0.9378238341968912,LFFT = d
REFERENCES,0.9430051813471503,n [C(2n) + cmqn + qC(2n)]
REFERENCES,0.9481865284974094,"= d [5(log2 n + 1)(q + 1) + 6q] .
(19)"
REFERENCES,0.9533678756476683,"Here, C(n) is the number of FLOPs for a radix-2 Cooley-Tukey FFT implementation (Johnson &
Frigo, 2012):"
REFERENCES,0.9585492227979274,"C(n) = 2C
n 2 
+ n"
REFERENCES,0.9637305699481865,"2 (cm + 2ca)
(20)"
REFERENCES,0.9689119170984456,"= 5n log2 n
(21)"
REFERENCES,0.9740932642487047,"where cm = 6 is the number of FLOPs per complex multiply, and ca is the number of FLOPs per
complex addition. For our standard sequence length of n = 1024, this results in:"
REFERENCES,0.9792746113989638,"LFFT−1024 = d(61q + 55).
(22)"
REFERENCES,0.9844559585492227,"A.3
LMU MODEL DETAILS"
REFERENCES,0.9896373056994818,"Table 3: LMU model details. N refers to the number of non-embedding and trainable parameters;
d is the embedding dimension; q and θ deﬁne LMU’s order and the length of the sliding window;
q′ is the number of rows in the L matrix. We adjust the post-FFN inner ration to obtain the right
parameter count for comparison to transformers – it’s usually set to something in between 1.9 and
2.1."
REFERENCES,0.9948186528497409,"N
Total
Parameters
d
q
q′
Layers
θ
Pre-FFN
Inner Ratio
55k
2.4M
48
50
5
3
350
1.5
100k
3.3M
65
65
7
3
350
1.5
200k
4.8M
91
90
9
3
350
1.5
300k
5.9M
112
110
13
3
350
1.5
500k
7.3M
144
150
15
3
350
1.5
1M
11M
204
220
22
3
350
1.5"
