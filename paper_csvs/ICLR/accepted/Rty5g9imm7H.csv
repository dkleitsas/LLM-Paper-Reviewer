Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.0024691358024691358,"The neural Hawkes process (Mei & Eisner, 2017) is a generative model of ir-
regularly spaced sequences of discrete events. To handle complex domains with
many event types, Mei et al. (2020a) further consider a setting in which each
event in the sequence updates a deductive database of facts (via domain-specific
pattern-matching rules); future events are then conditioned on the database con-
tents. They show how to convert such a symbolic system into a neuro-symbolic
continuous-time generative model, in which each database fact and possible event
has a time-varying embedding that is derived from its symbolic provenance.
In this paper, we modify both models, replacing their recurrent LSTM-based
architectures with flatter attention-based architectures (Vaswani et al., 2017), which
are simpler and more parallelizable. This does not appear to hurt our accuracy,
which is comparable to or better than that of the original models as well as (where
applicable) previous attention-based methods (Zuo et al., 2020; Zhang et al., 2020a)."
INTRODUCTION,0.0049382716049382715,"1
INTRODUCTION"
INTRODUCTION,0.007407407407407408,"It has recently become common to model event sequences by embedding each event into RD. Event
sequences are ubiquitous in real-world applications, such as healthcare, finance, education, commerce,
gaming, audio, news, security, and social media. Event embeddings could be used in a variety of
downstream applied tasks, similar to word token embeddings in BERT (Devlin et al., 2018)."
INTRODUCTION,0.009876543209876543,"In this paper, we embed each event using attention over the previous events, using continuous-time
positional encodings so as to consider their timing. To build a left-to-right generative model, we also
embed possible events at future times in exactly the same way, and use their embeddings to predict
their instantaneous probabilities at those times."
INTRODUCTION,0.012345679012345678,"Attention-based models (Vaswani et al., 2017) have already become extremely popular for generative
modeling of discrete-time sequences, such as natural-language documents (Radford et al., 2019;
Brown et al., 2020) and proteins (Rao et al., 2021). As we confirm here, they are also effective for
modeling sequences that are irregularly spaced in continuous time, even in lower-data regimes."
INTRODUCTION,0.014814814814814815,"Our past work on modeling event sequences (Mei & Eisner, 2017; Mei et al., 2019; 2020a;b) used
neural architectures based on LSTMs (Hochreiter & Schmidhuber, 1997). That is, predictions at
time t were derived from a recurrent encoding of the sequence of timestamped events at times < t.
However, an attention-based (Transformer-style) architecture has three potential advantages:"
INTRODUCTION,0.01728395061728395,"①A Transformer does not summarize the past. Our predictions at time t can examine an unboundedly
large representation of the past (embeddings in Rd of every event before t), not merely a fixed-
dimensional summary that was computed greedily from left to right (an LSTM’s state at time t).
②A Transformer’s computation graph is broader and shallower. The breadth makes it easier to learn
long-distance influences. The shallowness does make it impossible to represent inherently deep
concepts such as parity (Hahn, 2020), but it enables greater parallelism: the layer-ℓembeddings can
be computed in parallel during training, as they depend only on layer ℓ−1 and not on one another.
③The Transformer architecture is simpler and arguably more natural, while remaining competitive
in our experiments. To model the temporal distribution of the next event, all of our models posit
embeddings of possible future events that depend on the future event’s time t. To accomplish this,
Mei & Eisner (2017) had to stipulate an arbitrary family of parametric decay functions on t, and"
INTRODUCTION,0.019753086419753086,Published as a conference paper at ICLR 2022
INTRODUCTION,0.022222222222222223,"(a) A-NHP
(b) A-NDTT
Figure 1: These figures show how embeddings in the model flow through layers (bottom to top) and through
time (left to right). There are two possible event types, eeeeeeeeeeeeeeeee and fffffffffffffffff, which represent email messages. At the upper
right corner of each figure, we obtain their modeled intensities at a certain time t, λeeeeeeeeeeeeeeeee(t) and λfffffffffffffffff(t), based on
the embeddings of the three previous, irregularly spaced observed events. This requires embedding eeeeeeeeeeeeeeeee and fffffffffffffffff at
time t as if they were observed. If either one actually occurs at time t, we will keep its embeddings, which will
then affect embeddings of events at times > t. Figure (a) shows the basic model of section 3, in which each
event’s embedding at layer ℓdepends (
) on all preceding events at layer ℓ−1. (The dashed arrows
reflect residual connections.) Section 4 explains that the eeeeeeeeeeeeeeeee
fffffffffffffffff influences can be prevented by dropping the
rule fffffffffffffffff <- eeeeeeeeeeeeeeeee. Figure (b) shows an A-NDTT model from section 5, in which the company forum’s embedding at
layer ℓdepends (
) on all preceding events at layer ℓ−1 (via <- rules). The events or possible events at layer
ℓdo not depend directly on preceding events; instead, their embeddings at time t are derived (
) from the
forum’s embedding at time t (via :- rules)."
INTRODUCTION,0.024691358024691357,"the neuro-symbolic framework of Mei et al. (2020a) required a complex method for pooling the
parameters of these decay functions. But in our present method, no decay functions are required
to allow embeddings and probabilities to drift over time. The embeddings are constructed “from
scratch” at each time t simply by attending to the set of previous events, using t-specific query vec-
tors that include a continuous positional embedding of t. As t increases, the attention weights over
the previous events vary continuously with t, so the embeddings and probabilities do so as well."
INTRODUCTION,0.027160493827160494,"We present a series of increasingly sophisticated methods. Section 2 explains how to embed events in
context (like continuous-time BERT). Section 3 turns this into a generative point process model that
can predict the time and type of the next event (like continuous-time GPT). In section 4, we allow a
domain expert to write simple rules that control attention, constraining which events can “see” which
previous events and with what parameters. Finally, section 5 allows the domain expert to write more
complex rules, using our previously published Datalog through time formalism (Mei et al., 2020a).
These rules allow events to interact with a symbolic deductive database that tracks facts over time so
that the neural architecture does not have to learn how to do so. As in Mei et al. (2020a), we define
time-varying embeddings for all facts in the database and all events that are possible given those facts,
using parameters associated with the rules that established the facts and possible events."
INTRODUCTION,0.02962962962962963,"In the end, we arrive at attention-based versions of the NHP (Mei & Eisner, 2017) and NDTT (Mei
et al., 2020a) frameworks, which we refer to as A-NHP (section 3) and A-NDTT (section 5). We
evaluate them in section 7, showing comparable or better accuracy. We release our code."
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.03209876543209877,"2
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.0345679012345679,"Suppose we observe I events over a fixed time interval [0, T). Each event is denoted mnemonically as
e@t (i.e., “type e at time t”), where e ∈E is the type of event (drawn from a finite set E). The observed
event sequence is e1@t1, e2@t2, . . . , eI@tI, where 0 < t1 < t2 < . . . < tI < T. For any event e@t,
we can compute an embedding JeK(t) ∈RD by attending to its history H(e@t)—a set of relevant
events. (For the moment, imagine that H(e@t) consists of all the observed events ei@ti.) More
precisely, JeK(t) is the concatenation of layer-wise embeddings JeK(0)(t), JeK(1)(t), . . . , JeK(L)(t).
For ℓ> 0, the layer-ℓembedding of e@t is computed as"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.037037037037037035,"JeK(ℓ)(t)
def= JeK(ℓ−1)(t)
|
{z
}
residual connection"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.03950617283950617,"+ tanh  
X"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.04197530864197531,f@s∈H(e@t)
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.044444444444444446,"v(ℓ)(f @s) α(ℓ)(f @s, e@t)
1 + P
f@s∈H(e@t) α(ℓ)(f @s, e@t)  
(1)"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.04691358024691358,where the unnormalized attention weight on each relevant event f @s ∈H(k@t) is
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.04938271604938271,"α(ℓ)(f @s, e@t)
def= exp
 1
√"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.05185185185185185,"D
k(ℓ)(f @s)
⊤q(ℓ)(e@t)

∈R
(2)"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.05432098765432099,Published as a conference paper at ICLR 2022
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.056790123456790124,"In layer ℓ, v(ℓ), k(ℓ), and q(ℓ) are known as the value, key, and query vectors and are extracted
from the layer-(ℓ−1) event embeddings using learned layer-specific matrices V(ℓ), K(ℓ), Q(ℓ):"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.05925925925925926,"v(ℓ)(e@t) def
= V(ℓ) h
1; JtK; JeK(ℓ−1)(t)
i (3a)"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.06172839506172839,"k(ℓ)(e@t) def
= K(ℓ) h
1; JtK; JeK(ℓ−1)(t)
i (3b)"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.06419753086419754,"q(ℓ)(e@t) def
= Q(ℓ) h
1; JtK; JeK(ℓ−1)(t)
i (3c)"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.06666666666666667,"As the base case, JeK(0)(t)
def= JeK(0) is a learned embedding of the event type e. JtK denotes an
embedding of the time t. We cannot learn absolute embeddings for all real numbers, so we fix
JtKd = sin(t/(m · ( 5M"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.0691358024691358,"m )
d
D )) if d is even
JtKd = cos(t/(m · ( 5M"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.07160493827160494,"m )
d−1"
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.07407407407407407,"D )) if d is odd
(4)
where 0 ≤d < D are the dimensions and our choices of m, M are explained in Appendix A."
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.07654320987654321,"Crucially, to compute the layer-ℓembedding of an event, equations (1)–(3) need only the layer-(ℓ−1)
embeddings of the relevant events in its history. This lets us compute the layer-ℓembeddings of all
events in parallel. Note that equations (1)–(3) are simplifications of the traditional Transformer, since
this ablation performed equally well in our pilot experiments (see Appendix A)."
CONTINUOUS-TIME TRANSFORMER FOR EMBEDDING EVENTS,0.07901234567901234,"The set of relevant events H(e@t) could be defined in a task-specific way. For example, to pretrain
BERT-like embeddings (Devlin et al., 2018), we might use a corrupted version of {e1@t1, . . . , eI@tI}
in which some ei@ti have been removed or replaced with mask
mask
mask
mask
mask
mask
mask
mask
mask
mask
mask
mask
mask
mask
mask
mask
mask@ti. Such embeddings could be
pretrained with a BERT-like objective and then fine-tuned to predict properties of the observed events."
GENERATIVE MODELING OF CONTINUOUS-TIME EVENT SEQUENCES,0.08148148148148149,"3
GENERATIVE MODELING OF CONTINUOUS-TIME EVENT SEQUENCES"
GENERATIVE MODELING OF CONTINUOUS-TIME EVENT SEQUENCES,0.08395061728395062,"In this paper, we focus on the task of predicting future events given past ones. At any time t, we
would like to know what will happen at that time, given the actual events that happened before t. Our
generative model is analogous to a Transformer language model (Radford et al., 2019; Brown et al.,
2020), which, at each time t ∈N, defines a probability distribution over the words in the vocabulary."
GENERATIVE MODELING OF CONTINUOUS-TIME EVENT SEQUENCES,0.08641975308641975,"In our setting, however, t ∈R. With probability 1, nothing happens at time t. Each possible event e in
our vocabulary has only an infinitesimal probability of occurring at time t. We write this probability
as λe(t)dt where λe(t) ∈R+ is called the (Poisson) intensity of type-e events at time t. More
formally, the probability of such an event occurring during [t, t + ϵ) approaches λe(t) ϵ as ϵ →+ 0."
GENERATIVE MODELING OF CONTINUOUS-TIME EVENT SEQUENCES,0.08888888888888889,"Thus, our modeling task is to model λe(t) (as in, e.g., Hawkes, 1971; Du et al., 2016; Mei & Eisner,
2017). We model λe(t) as a function of the top-layer embedding of the possible event e@t:
λe(t)
def= softplus(w⊤
e [1; JeKL(t)], τe) where softplus(x, τ) = τ log(1 + exp(x/τ)) > 0
(5)
with learnable parameters we and τe > 0. We do this separately for each possible e@t, computing
the embedding JeKL(t) using equations (1)–(3). The softplus transfer function is inherited from the
neural Hawkes process (Mei & Eisner, 2017). To ensure that our model is generative, we compute
JeK(t) from only previous events. That is, H(e@t) in equation (1) may contain any or all of the
previously generated events ei@ti for ti < t, but it may not contain any for which ti > t. We call this
model the attentive Neural Hawkes process, or A-NHP, and evaluate it in section 7."
GENERATIVE MODELING OF CONTINUOUS-TIME EVENT SEQUENCES,0.09135802469135802,"Our model’s log-likelihood has the same form as for any autoregressive multivariate point process:
XI"
GENERATIVE MODELING OF CONTINUOUS-TIME EVENT SEQUENCES,0.09382716049382717,"i=1 log λei(ti) −
Z T t=0 XE"
GENERATIVE MODELING OF CONTINUOUS-TIME EVENT SEQUENCES,0.0962962962962963,"e=1 λe(t)dt
(6)"
GENERATIVE MODELING OF CONTINUOUS-TIME EVENT SEQUENCES,0.09876543209876543,"Derivations of this formula can be found in previous work (e.g., Hawkes, 1971; Liniger, 2009; Mei
& Eisner, 2017). We can estimate the parameters by locally maximizing the log-likelihood (6) by
any stochastic gradient method. Intuitively, each log λei(ti) is increased to explain why the observed
event ei happened at time ti, while
R T
t=0
PE
e=1 λe(t)dt is decreased to explain why no event of any
possible type e ∈{1, . . . , E} ever happened at other times."
GENERATIVE MODELING OF CONTINUOUS-TIME EVENT SEQUENCES,0.10123456790123457,"Appendix D gives training details, including Monte Carlo approximations to the integral in equa-
tion (6), as well as noting alternative training objectives. Given the learned parameters, we may wish
to sample from the model given the past history, or make a minimum Bayes risk prediction about the
next event. Recipes can be found in Appendix E."
GENERATIVE MODELING OF CONTINUOUS-TIME EVENT SEQUENCES,0.1037037037037037,"Notice that equation (5) is rather expensive compared to previous work, since it computes a deep
embedding of the possible event e@t just for the purpose of finding its intensity—and the algorithms
of Appendices D–E require computing the intensities of many possible events. Appendix A offers a
speedup that shares embeddings among similar events, but it also explains why different events may
sometimes have to be embedded differently to support the selective attention in sections 4–5 below."
GENERATIVE MODELING OF CONTINUOUS-TIME EVENT SEQUENCES,0.10617283950617284,Published as a conference paper at ICLR 2022
MULTI-HEAD SELECTIVE ATTENTION,0.10864197530864197,"4
MULTI-HEAD SELECTIVE ATTENTION"
MULTI-HEAD SELECTIVE ATTENTION,0.1111111111111111,"We now present a simple initial version of selective attention. As in a graphical model, not all events
should be able to influence one another directly. Consider a scenario with two event types: eeeeeeeeeeeeeeeee means
that Eve emails Adam, while fffffffffffffffff means that Frank emails Eve. As Frank does not know when Eve
emailed Adam, past events of type eeeeeeeeeeeeeeeee cannot influence his behavior. Therefore, H(fffffffffffffffff@t) should include
past events of type fffffffffffffffff but not eeeeeeeeeeeeeeeee, so that the embedding of fffffffffffffffff@t and hence the intensity function λfffffffffffffffff(t)
pay zero attention to eeeeeeeeeeeeeeeee events. In contrast, H(eeeeeeeeeeeeeeeee@t) should still include past events of both types, since
both are visible to Eve and can influence her behavior."
MULTI-HEAD SELECTIVE ATTENTION,0.11358024691358025,"We describe this situation with the edges fffffffffffffffff <- fffffffffffffffff, eeeeeeeeeeeeeeeee <- eeeeeeeeeeeeeeeee, eeeeeeeeeeeeeeeee <- fffffffffffffffff. These are akin to the edges in
a directed graphical model. They specify the sparsity pattern of the influence matrix (or Granger
causality matrix) that describes which past events can influence which future events. There is a long
history of estimating this matrix from observed sequence data (e.g., Xu et al., 2016; Zhang et al.,
2021), even with neural influence models (Zhang et al., 2020b). In the present paper, however, we do
not attempt to estimate this sparsity pattern, but assume it is provided by a human domain expert.
Incorporating such domain knowledge into the model can reduce the amount of training data that is
needed. Edges like eeeeeeeeeeeeeeeee <- fffffffffffffffff can be regarded as simple cases of the NDTT rules in section 5 below."
MULTI-HEAD SELECTIVE ATTENTION,0.11604938271604938,"Such rules also affect how we apply attention. When Eve decides whether to email Adam (eeeeeeeeeeeeeeeee@t),
we may reasonably suppose that she separately considers the embeddings of the past eeeeeeeeeeeeeeeee events (e.g.,
“when were my last relevant emails to Adam?”) versus the past fffffffffffffffff events (e.g., “what have I heard
recently from Frank?”). Hence, we associate different attention heads with the two rules that affect
eeeeeeeeeeeeeeeee, namely eeeeeeeeeeeeeeeee <- eeeeeeeeeeeeeeeee and eeeeeeeeeeeeeeeee <- fffffffffffffffff. These heads may have different parameters, so that they seek out
and obtain different information from the past via different queries, keys, and values. In general, we
replace equation (1) with
JeK(ℓ)(t)
def= JeK(ℓ−1)(t) + tanh X"
MULTI-HEAD SELECTIVE ATTENTION,0.11851851851851852,"r
e (ℓ)
r (t) ! (7)"
MULTI-HEAD SELECTIVE ATTENTION,0.12098765432098765,"e (ℓ)
r (t)
def=
X"
MULTI-HEAD SELECTIVE ATTENTION,0.12345679012345678,f@s∈Hr(e@t)
MULTI-HEAD SELECTIVE ATTENTION,0.1259259259259259,"v(ℓ)
r (f @s) α(ℓ)
r (f @s, e@t) 1 + P"
MULTI-HEAD SELECTIVE ATTENTION,0.12839506172839507,"f@s∈Hr(e@t) α(ℓ)
r (f @s, e@t)
(8)"
MULTI-HEAD SELECTIVE ATTENTION,0.1308641975308642,"where r in the summation ranges over rules e <- · · · . The history Hr(e@t) contains only those past
events f @s that rule r makes visible to e. If there are no such events, or they have small attention
weights (are only weakly relevant to e@t) as discussed in Appendix A, then rule r will contribute
little or nothing to the sum in equation (7). The attention weights αr and vectors vr are defined using
versions of equations (2)–(3) with r-specific parameters.5"
MULTI-HEAD SELECTIVE ATTENTION,0.13333333333333333,"In short, each rule looks at the context separately, through its own attention weights determined by its
own parameters. The rule already specifies symbolically which past events can get nonzero attention
in the first place, so it makes sense for the rule to also provide the parameters that determine the
attention weights and value projections. Further discussion is given in Appendix A."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.13580246913580246,"5
ATTENTIVE NEURAL DATALOG THROUGH TIME"
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.1382716049382716,"Edges such as eeeeeeeeeeeeeeeee <- fffffffffffffffff can be regarded as simple examples of rules in an NDTT program (Mei et al.,
2020a, section 2). We briefly review this formalism and then extend our approach from section 4 to
handle all NDTT programs."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.14074074074074075,"A Datalog through time (DTT) program describes possible sequences of events, much as a regular
expression describes legal sequences of characters. A DTT program for a particular domain specifies
how each event automatically updates a database, adding or removing facts. In this way, the past
events e1, . . . , ei sequentially construct a database. This database then determines which event types
(if any) can happen next: the next event ei+1 can be fffffffffffffffff only if fffffffffffffffff is currently a fact in the database."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.14320987654320988,"Thus, an event may appear in the database as a fact, meaning that the event is possible. We use
variables e, f to range over events, but variables g, h to range over any facts (both events and non-
events). Literal examples of facts are shown in orange if they are events (e.g., fffffffffffffffff), and in blue otherwise."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.145679012345679,"A neural Datalog through time (NDTT) program is a DTT program augmented with some di-
mensionality declarations (Appendix C). A rule that adds a fact to the database now also computes
a vector embedding of that fact, or updates the existing embedding if the fact was already in the
database."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.14814814814814814,Published as a conference paper at ICLR 2022
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.1506172839506173,"Notice that the dimensionality of the embedded database changes as the database grows and shrinks
over time. Nonetheless, the model has a fixed number of parameters associated with the fixed set of
rules of the NDTT program. As we will see, rules can contain variables, allowing a small set of rules
to model a large set of event types (i.e., parameter sharing)."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.15308641975308643,"If fffffffffffffffff is a fact in the database at time t, meaning that event fffffffffffffffff is possible at time t, then its embedding
JfffffffffffffffffKL(t) determines its intensity λfffffffffffffffff(t) via equation (5), as before. Thus, where a DTT program only de-
scribes which event sequences are possible, an NDTT program also describes how probable they are."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.15555555555555556,"Although the set of database facts is modified only when an event occurs, the facts’ embeddings are
time-sensitive and evolve as the events that added them to the database recede into the past. This
allows event intensities such as λfffffffffffffffff(t) to wax and wane continously as time elapses."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.1580246913580247,"Datalog. We now give details. We begin with Datalog (Ceri et al., 1989), a traditional formalism for
deductive databases. A deductive database holds both extensional facts, which are placed there by
some external process, and intensional facts, which are transitively deduced from the extensional
facts. A Datalog program is simply a set of rules that govern these deductions:"
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.16049382716049382,"• h :- g1, ..., gn says to deduce h at any time t when g1, . . . , gn are all true (in the database)."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.16296296296296298,"A single rule can license many deductions. That is because the facts can have structured names, and
h, g1, . . . gn can be patterns that match against those names, using capitalized identifiers as variables.
A model of filesystem properties might have a rule like open
open
open
open
open
open
open
open
open
open
open
open
open
open
open
open
open(U,D) :- user(U), group(G),
document(D), member(U,G), readable(D,G). In English, this says that U can open D at any
time when user U is a member of some group G such that document D is readable by G."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.1654320987654321,"Datalog through time. Whenever extensional facts are added or removed, the intensional facts are
instantly recomputed according to the deductive rules. DTT is an extension in which extensional
facts are automatically added and removed when the database is notified of the occurrence of events.
This behavior is governed by two additional rule types:"
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.16790123456790124,"• h <- f, g1, ..., gn says to add h at any time s when event f occurs and the gi are all true.
• !h <- f, g1, ..., gn says to remove h at any time s satisfying the same conditions."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.17037037037037037,"Thus, the proposition h is true at time t (i.e., appears as a fact in the database at time t) iff either ❶h
is deduced at time t, or ❷h was added at some time s < t and never removed at any time in (s, t)."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.1728395061728395,"In our previous example, editing(U,D) <- open
open
open
open
open
open
open
open
open
open
open
open
open
open
open
open
open(U,D), member(U,G), writeable(U,G)
records in the database that user U is editing D, once they have opened it with appropriate permissions.
(As a result, edit events might become possible via a deductive rule edit
edit
edit
edit
edit
edit
edit
edit
edit
edit
edit
edit
edit
edit
edit
edit
edit(U,D) :- editing(U,D).)"
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.17530864197530865,"Neural Datalog through time. It would be difficult to train a neural architecture to encode thousands
or millions of structured boolean facts about the world in its state and to systematically keep those
facts up to date in response to possibly rare events. As a neuro-symbolic method, NDTT delegates that
task to a symbolic database governed by manually specified DTT rules. However, it also augments
the database: iff a proposition h appears as a fact in the NDTT database at time t, it will be associated
not only with the simple truth value true but also with an embedding JhK(t). This embedding is a
learned representation of that fact at that time, and can be trained to be useful in downstream tasks.
It captures details of when and how that fact was established (the fact’s provenance), since it is
computed using learned parameters associated with the rules that deduced and/or added it."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.17777777777777778,"For example, a user’s embedding might be constructed using attention over all the past events that
have affected the user, via rules of the form user(U) <- · · · . This summarizes the user’s state.
Similarily, a document’s embedding might be constructed using attention over all the edits to it,
considering the editing user’s state at the time of the edit: document(D) <- edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D)
edit(U,D), user(U)."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.18024691358024691,"Embeddings from NDTT rules. Our goal is to provide new formulas for the embeddings JhK(t),
based on Transformer-style attention rather than LSTM-style recurrence. We call this attentive
NDTT, or A-NDTT. This gives a new way to map an NDTT program to a neural architecture. The
potential advantages for accuracy, efficiency, and simplicity were explained in section 1."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.18271604938271604,"Intuitively, the <- rules will govern the “horizontal” flow of information through time (by defining
attentional connections as we saw in section 4), while the :- rules will govern the “vertical” flow of"
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.18518518518518517,Published as a conference paper at ICLR 2022
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.18765432098765433,"information at a given time (by defining feed-forward connections). These are, of course, the two
major mechanisms in Transformer architectures."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.19012345679012346,"Under A-NDTT, the layer-ℓembedding of h@t is
JhK(ℓ)(t)
def= JhK(ℓ−1)(t) + tanh "
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.1925925925925926,"[h](ℓ)(t) +
X"
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.19506172839506172,"r
h (ℓ)
r (t) ! (9)"
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.19753086419753085,"which is an augmented version of equation (7). Suppose h is true at time t because it was added by
rule r (i.e., condition ❷). Then the summand h (ℓ)
r (t) exists and is computed much as in equation (8),
now with attention over all “add times” s. In other words, Hr(h@t) in equation (8) includes just
those past events f @s such that f added h via r at some time s < t and h was never removed at any
time in (s, t)."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.2,"More precisely, when the rule h <- f, g1, ..., gn causes h@t to attend to the specific past
event f @s, we actually want attention to consider the embedding at time s not just of f, but of
the entire add condition f, g1, . . . , gn. Thus, we replace f @s with (f, g1, . . . , gn)@s throughout
equation (8). The attention key of this add condition is defined as k(ℓ)((f, g1, . . . , gn)@s)
def=
K(ℓ)
r

1; JsK; JfK(ℓ−1)(s); Jg1K(ℓ−1)(s); . . . JgnK(ℓ−1)(s)

(compare equation (3b)).
Its attention
value v(ℓ)((f, g1, . . . , gn)@s) is defined analogously, using a different matrix V(ℓ)
r ."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.20246913580246914,"The above handles the <- rules. As for the :- rules, the vector [h](ℓ)(t) in equation (9) sums over all
the ways that h can be deduced at time t (i.e., condition ❶). This does not involve attention, so we
exactly follow Mei et al. (2020a, equations (3)–(6)):"
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.20493827160493827,"[h](ℓ)(t) =
X r Lβr"
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.2074074074074074,"g1,...,gn
Wr[1; Jg1K(t); . . . ; JgnK(t)]
(10)"
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.20987654320987653,"where r ranges over rules, and (g1, . . . , gn) ranges over all tuples of facts at time t such that h :-
g1, . . . gn matches rule r (and thus deduces h at time t). The operator Lβr is a softmax-pooling
operator with a learned inverse temperature βr. If h is not deduced at time t by any instantiation of r,
then r has no effect on the sum (10), since pooling the empty set with Lβr returns 0."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.2123456790123457,"Example. Mei et al. (2020a) give many examples of NDTT programs. Here is a simple example
to illustrate the use of :- rules. eeeeeeeeeeeeeeeee means that Eve posts a message to the company forum, while fffffffffffffffff
means that Frank does so. Once the forum is created by a create
create
create
create
create
create
create
create
create
create
create
create
create
create
create
create
create event, its existence is a fact (called
forum) whose embedding (called JforumK) always reflects all messages posted so far to the forum.
Until the forum is destroyed, Eve and Frank can post to it, and the embeddings and intensities of their
messages depend on the current state of the forum:"
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.21481481481481482,"1 forum <- create
create
create
create
create
create
create
create
create
create
create
create
create
create
create
create
create."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.21728395061728395,"2 !forum <- destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.21975308641975308,3 forum <- eeeeeeeeeeeeeeeee.
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.2222222222222222,4 forum <- fffffffffffffffff.
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.22469135802469137,5 eeeeeeeeeeeeeeeee :- forum.
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.2271604938271605,"6 fffffffffffffffff :- forum.
The resulting neural architecture is drawn in Figure 1b. If the company grows from 2 to K employees,
then the program needs O(K) rules and hence O(K) parameters, which define how each employee’s
messages affect the forum and vice-versa. Without the :- rules, we would have to list out O(K2)
rules such as eeeeeeeeeeeeeeeee <- fffffffffffffffff and hence would need O(K2) parameters, which define how each employee’s
messages affect every other employee’s messages directly; this case is drawn in Figure 1a."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.22962962962962963,"Appendix B and Figure 4 spell out an enhanced version of this example that makes use of variables,
so that all K employees can be governed by a constant (O(1)) number of rules."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.23209876543209876,"Discussion. NDTT rules enrich the notion of “influence matrix” from section 4. Events traditionally
influence the intensities of subsequent events, but NDTT <- rules more generally let them influence
the embeddings of subsequent facts (and hence the intensities of any events among those facts).
Furthemore, NDTT :- rules let facts influence the embeddings of contemporaneous facts."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.2345679012345679,"Each <- rule r can be seen as defining the fixed sparsity pattern of a large influence matrix, along
with parameters for computing its nonzero entries from context at each attention layer. The size of
this matrix is determined by the number of ways to instantiate the variables in the rule. The entries of
the matrix are normalized versions of the attention weights αr. The influences of different <- rules r
are combined by equation (9) and are modulated by nonlinearities."
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.23703703703703705,"Overall, (A-)NDTT models learn representations, much like pretrained language models (Peters et al.,
2018; Radford et al., 2019). They learn continuous embeddings of the facts in a discrete database, us-
ing a neural architecture that is derived from the symbolic rules that deduce these facts and update them"
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.23950617283950618,Published as a conference paper at ICLR 2022
ATTENTIVE NEURAL DATALOG THROUGH TIME,0.2419753086419753,"in response to events. The facts change at discrete times but their embeddings change continuously.
We train the model so that the embeddings of possible events predict how likely they are to occur."
RELATED WORK,0.24444444444444444,"6
RELATED WORK"
RELATED WORK,0.24691358024691357,"Multivariate point processes have been widely used in real-world applications, including document
stream modeling (He et al., 2015; Du et al., 2015a), learning Granger causality (Xu et al., 2016; Zhang
et al., 2020b; 2021), network analysis (Choi et al., 2015; Etesami et al., 2016), recommendation
systems (Du et al., 2015b), and social network analysis (Guo et al., 2015; Lukasik et al., 2016)."
RELATED WORK,0.24938271604938272,"Over the recent years, various neural models have been proposed to expand the expressiveness of
point processes. They mostly use recurrent neural networks, or LSTMs (Hochreiter & Schmidhuber,
1997): in particular Du et al. (2016); Mei & Eisner (2017); Xiao et al. (2017a;b); Omi et al. (2019);
Shchur et al. (2020); Mei et al. (2020a); Boyd et al. (2020). Models of this kind enjoy continuous and
infinite state spaces, as well as flexible transition functions, thus achieving superior performance on
many real-world datasets, compared to classical models such as the Hawkes process (Hawkes, 1971)."
RELATED WORK,0.2518518518518518,"The Transformer Hawkes process (Zuo et al., 2020) and self-attentive Hawkes process (Zhang
et al., 2020a) were the first papers to adapt generative Transformers (Vaswani et al., 2017; Radford
et al., 2019; Brown et al., 2020) to point processes. The Transformer architecture allows their
models to enjoy unboundedly large representations of histories, as well as great parallelism during
training (see ①and ②in section 1). As section 3 discussed, both models—as well as subsequent
attention-based models (Enguehard et al., 2020; Sharma et al., 2021)—derive the intensity λe(t)
from JfK(s) where f @s is the latest actual event before t. (The THP takes λe(t) to be a softplus
function of w⊤
e [1; t/s; JfK(s)]. The SAHP defines λe(·) as a function that exponentially decays
toward an asymptote, computing the 3 parameters of this function from e and JfK(s).) In contrast
(see ③in section 1), our model derives λe(t) from JeKt—the embedding of the possible event e@t,
which is computed using e- and t-specific attention over all past events. Zhu et al. (2021, section 3.1)
independently proposed this approach but did not evaluate it experimentally."
EXPERIMENTS,0.254320987654321,"7
EXPERIMENTS"
EXPERIMENTS,0.25679012345679014,"On several synthetic and real-world datasets, we evaluate our model’s held-out log-likelihood, and
its success at predicting the time and type of the next event. We compare with multiple strong
competitors. Experimental details not given in this section can be found in Appendix F."
EXPERIMENTS,0.25925925925925924,"We implemented our A-NDTT framework using PyTorch (Paszke et al., 2017) and pyDatalog
(Carbonell et al., 2016), borrowing substantially from the public implementation of NDTT (Mei
et al., 2020a). We also built a faster, GPU-friendly PyTorch implementation of our more restricted
A-NHP model (see section 7.1 below). Our code and datasets are available at https://github.
com/yangalan123/anhp-andtt."
EXPERIMENTS,0.2617283950617284,"For the competing models, we made use of their published implementations.1 References and URLs
are provided in Appendix F.2."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.2641975308641975,"7.1
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.26666666666666666,"We first verify that our continuous-time Transformer is competitive with three state-of-the-art neural
event models. The four models we compare are"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.2691358024691358,"Transformer Hawkes Process (THP) (Zuo et al., 2020). See section 6."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.2716049382716049,"Self-Attentive Hawkes Process (SAHP) (Zhang et al., 2020a). See section 6."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.2740740740740741,"Neural Hawkes Process (NHP) (Mei & Eisner, 2017). This is not an attention-based model. At
any time t, NHP uses a continuous-time LSTM to summarize the events over [0, t) into a multi-
dimensional state vector, and conditions the intensities λe(t) of all event types on that state."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.2765432098765432,"Attentive Neural Hawkes Process (A-NHP) This is our unstructured generative model from section 3.
Since this model does not use selective attention, we speed up the intensity computations by defining
them in terms of a single coarse event type, as described in Appendix A. Thus, each event intensity"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.27901234567901234,"1On some datasets, our replicated results are different from their papers. We confirmed that our results are
correct via personal communication with the lead authors of Zhang et al. (2020a) and Zuo et al. (2020)."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.2814814814814815,Published as a conference paper at ICLR 2022
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.2839506172839506,"λe(t) is computed by attention over all previous events, where the attention weights are independent
of e. This parameter-sharing mechanism resembles the NHP, except that we now use a Transformer
in place of an LSTM."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.28641975308641976,"In a pilot experiment, we drew sequences from randomly initialized models of all 4 types (details
in Appendix F.1.1), and then fit all 4 models on each of these 4 synthetic datasets. We find that NHP,
SAHP, and A-NHP have very close performance on all 4 datasets (outperforming THP, especially at
predicting timing, except perhaps on the THP dataset itself); see Figure 5 in Appendix F.1.1 for results.
Thus, A-NHP is still a satisfactory choice even when it is misspecified. This result is reassuring
because A-NHP has less capacity in some ways (the circuit depth of a Transformer is fixed, whereas
the circuit depth of an LSTM grows with the length of the sequence) and excess capacity in other
ways (the Transformer has unbounded memory whereas the LSTM has finite-dimensional memory)."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.28888888888888886,"THP
SAHP
NHP
A-NHP
negative log likelihood 0 2 4 6 8 10"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.291358024691358,"THP
SAHP
NHP
A-NHP
RMSE"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.2938271604938272,"0.5
1.0
1.5
2.0
2.5
3.0
3.5
4.0"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.2962962962962963,"THP
SAHP
NHP
A-NHP
error rate %"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.29876543209876544,"0
10
20
30
40
50
60
70"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3012345679012346,(a) MIMIC-II
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3037037037037037,"THP
SAHP
NHP
A-NHP
negative log likelihood"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.30617283950617286,"1.9
2.0
2.1
2.2
2.3
2.4
2.5
2.6"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.30864197530864196,"THP
SAHP
NHP
A-NHP
RMSE 1.0 1.1 1.2 1.3 1.4 1.5"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3111111111111111,"THP
SAHP
NHP
A-NHP
error rate % 50 51 52 53 54"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3135802469135803,(b) StackOverflow
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3160493827160494,"Figure 2:
Evaluation re-
sults (smaller is better) with
95% bootstrap confidence
intervals6 on the two real-
world datasets, comparing
THP, SAHP, and NHP with
our A-NHP model. RMSE
evaluates the predicted time
of the next event (root mean
squared error), while error
rate evaluates its predicted
type given its time."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.31851851851851853,We then fit all 4 models to the following two benchmark real-world datasets.2
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.32098765432098764,"MIMIC-II (Lee et al., 2011). This dataset is a collection of de-identified clinical visit records of
Intensive Care Unit patients for 7 years.Each patient has a sequence of hospital visit events, and each
event records its time stamp and disease diagnosis."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3234567901234568,"StackOverflow (Leskovec & Krevl, 2014). This dataset represents two years of user awards on a
question-answering website: each user received a sequence of badges (of 22 different types)."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.32592592592592595,"On MIMIC-II data (Figure 2a), our A-NHP is always a co-winner on each of these tasks; but the other
co-winner (NHP or THP) varies across tasks. On StackOverflow data (Figure 2b), our A-NHP is
clearly a winner on 2 out of 3 tasks and is tied with NHP on the third. Compared to NHP, A-NHP also
enjoys a computational advantage, as discussed in sections 1 and 2. Empirically, training an A-NHP
only took a fraction of the time that was needed to train an NHP, when sequences are reasonably long.
Details can be found in Table 2 of Appendix F.3."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.32839506172839505,"7.2
A-NDTT VS. NDTT"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3308641975308642,"Now we turn to the structured modeling approach presented in section 5. We compare A-NDTT with
NDTT on the RoboCup dataset and IPTV dataset proposed by Mei et al. (2020a). In both cases, we
used the NDTT program written by Mei et al. (2020a). The rules are unchanged; the only difference
is that our A-NDTT has the new continuous-time Transformer in lieu of the LSTM architecture. We
also evaluated the unstructured NHP and A-NHP models on these datasets."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3333333333333333,"RoboCup (Chen & Mooney, 2008). This dataset logs the actions (e.g., kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick, pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass) of robot soccer
players in the RoboCup Finals 2001–2004. The ball is frequently transferred between players (by pass-
ing or stealing), and this dynamically changes the set of possible event types (e.g., only the ball pos-
sessor can kick or pass). There are K = 528 event types over all time, but only about 20 of them are
possible at any given time. For each prefix of each held-out event sequence, we used minimum Bayes
risk to predict the next event’s time, and to predict its participant(s) given its time and action type."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3358024691358025,"1If we are not taking enough Monte Carlo samples to get a stable estimate of log-likelihood, then this
will appropriately be reflected in wider error bars. This is because when computing a bootstrap replicate, we
recompute our Monte Carlo estimate of the log-likelihood of each sequence. Hence, our bootstrap confidence
intervals take care to include the variance due to the stochastic evaluation metric. For the Monte Carlo settings
we actually used (Appendix D), this amounts to about 1% of the width of the error bars.
2For these datasets, we used the preprocessed versions provided by Mei & Eisner (2017). More details about
them can be found in Appendix F.1.2."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.33827160493827163,Published as a conference paper at ICLR 2022
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.34074074074074073,"IPTV (Xu et al., 2018). This dataset contains records of 1000 users watching 49 TV programs over
the first 11 months of 2012. Each event has the form watch
watch
watch
watch
watch
watch
watch
watch
watch
watch
watch
watch
watch
watch
watch
watch
watch(U,P). Given each prefix of the test
event sequence, we attempted to predict the next test event’s time t, and to predict its program P
given its actual time t and user U."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3432098765432099,"NHP
A-NHP
NDTT
A-NDTT
negative log likelihood"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.345679012345679,"4
5
6
7
8
9
10"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.34814814814814815,"NHP
A-NHP
NDTT
A-NDTT
RMSE"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3506172839506173,"8
9
10
11
12
13
14
15"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3530864197530864,"NHP
A-NHP
NDTT
A-NDTT
error rate %"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.35555555555555557,"30
40
50
60
70
80
90
100
110"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.35802469135802467,(a) RoboCup
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.36049382716049383,"NHP
A-NHP
NDTT
A-NDTT
negative log likelihood 10 15 20 25 30 35"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.362962962962963,"NHP
A-NHP
NDTT
A-NDTT
RMSE 9 10 11 12 13"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3654320987654321,"NHP
A-NHP
NDTT
A-NDTT
error rate %"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.36790123456790125,"86
88
90
92
94
96
98
100
102"
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.37037037037037035,(b) IPTV
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3728395061728395,"Figure 3: Evaluation re-
sults with 95% bootstrap
confidence intervals6 on
the RoboCup and IPTV
datasets. Evaluation meth-
ods are the same as in
Figure 2.
Note that the
training objective was log-
likelihood."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.37530864197530867,"The Robocup results are shown in Figure 3a. As in section 7.1, we find that A-NHP performs better
than NHP on all the evaluation metrics; on log-likelihood and event type prediction, A-NHP is sig-
nificantly better (paired permutation test, p < 0.05). We now inject domain knowledge into both the
LSTM and Transformer approaches, by deriving architectures based on the RoboCup NDTT program
(which specifies, for example, that only the ball possessor can kick or pass). The resulting models—
NDTT and A-NDTT—are substantial and significant improvements, considerably reducing both the
log-likelihood and the very high error rate on event type prediction. NDTT and A-NDTT are not sig-
nificantly different from each other: since NDTT already knows which past events might be relevant,
perhaps it is not sorely in need of the Transformer’s ability to scan an unbounded history for relevant
events.3 Appendix F.5 includes more results of A-NDTT vs. NDTT broken down by action types."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.37777777777777777,"Additionally, while A-NDTT does not improve the overall accuracy for this particular NDTT program
and dataset, it does achieve overall comparable accuracy with a simpler and shallower architecture
(②–③in section 1). Like other Transformers, the A-NDTT architecture could be trained on a GPU
with parallelism, as outlined in Appendix F.4 (future work)."
COMPARISON OF DIFFERENT TRANSFORMER ARCHITECTURES,0.3802469135802469,"The IPTV results are shown in Figure 3b. In this case, the log-likelihood of NHP can be substantially
and significantly improved either by using rules (as for Robocup) or by using attention, or both.
The error rate on predicting the next event type is again very high for NHP, and is substantially and
significantly reduced by using rules—although not as much under the A-NDTT architecture as under
the original NDTT architecture."
CONCLUSION,0.38271604938271603,"8
CONCLUSION"
CONCLUSION,0.3851851851851852,"We showed how to generalize the Transformer architecture to sequences of discrete events in contin-
uous time. Our architecture builds up rich embeddings of actual and possible events at any time t,
from lower-level representations of those events and their contexts. We usually train the model so
that the embedding of a possible event predicts its intensity, yielding a flexible generative model that
supports parallel computation of log-likelihood. We showed in section 7.1 that it outperforms other
Transformer-based models on multiple real-world datasets and also beats or ties them on multiple
synthetic datasets."
CONCLUSION,0.38765432098765434,"We also showed how to integrate this architecture with NDTT, a neural-symbolic framework that
automatically derives neural models from logic programs. Our attention-based modification of NDTT
has shown competitive performance, despite having a simpler and shallower architecture. Our code
and datasets are available at https://github.com/yangalan123/anhp-andtt."
CONCLUSION,0.39012345679012345,"3While NDTT still uses a fixed-dimensional history—①in section 1—the dimensionality is often very high,
as the NDTT’s state consists of embeddings of many individual facts. Moreover, each fact’s NDTT embedding
is computed by rule-specific LSTMs that see only events that are relevant to that fact, so there is no danger that
intervening irrelevant events will displace the relevant ones in the fixed-dimensional LSTM states."
CONCLUSION,0.3925925925925926,Published as a conference paper at ICLR 2022
CONCLUSION,0.3950617283950617,ACKNOWLEDGMENTS
CONCLUSION,0.39753086419753086,"This work was supported in part by the National Science Foundation under Grant No. 1718846. We
thank Bloomberg for a Data Science Ph.D. Fellowship to the second author. We thank Minjie Xu for
the suggestion of developing a Transformer version of NDTT. We thank the anonymous ICLR 2022
reviewers for discussion and for pointing out additional related work."
REFERENCES,0.4,REFERENCES
REFERENCES,0.4024691358024691,"Ba, J. L., Kiros, J. R., and Hinton, G. E. Layer normalization. arXiv preprint arXiv:1607.06450,
2016."
REFERENCES,0.4049382716049383,"Boyd, A., Bamler, R., Mandt, S., and Smyth, P. User-dependent neural sequence models for
continuous-time event data. In Advances in Neural Information Processing Systems (NeurIPS),
2020."
REFERENCES,0.4074074074074074,"Brown, T. B., Mann, B., Ryder, N., Subbiah, M., Kaplan, J., Dhariwal, P., Neelakantan, A., Shyam,
P., Sastry, G., Askell, A., et al. Language models are few-shot learners. In Advances in Neural
Information Processing Systems (NeurIPS), 2020."
REFERENCES,0.40987654320987654,"Carbonell, P., jcdouet, Alves, H. C., and Tim, A. pyDatalog, 2016."
REFERENCES,0.4123456790123457,"Ceri, S., Gottlob, G., and Tanca, L. What you always wanted to know about Datalog (and never dared
to ask). IEEE Transactions on Knowledge and Data Engineering, 1989."
REFERENCES,0.4148148148148148,"Chen, D. L. and Mooney, R. J. Learning to sportscast: A test of grounded language acquisition. In
Proceedings of the International Conference on Machine Learning (ICML), 2008."
REFERENCES,0.41728395061728396,"Choi, E., Du, N., Chen, R., Song, L., and Sun, J. Constructing disease network and temporal
progression model via context-sensitive Hawkes process. In IEEE International Conference on
Data Mining (ICDM), 2015."
REFERENCES,0.41975308641975306,"Devlin, J., Chang, M.-W., Lee, K., and Toutanova, K. BERT: Pre-training of deep bidirectional
transformers for language understanding. arXiv preprint arXiv:1810.04805, 2018."
REFERENCES,0.4222222222222222,"Du, N., Farajtabar, M., Ahmed, A., Smola, A. J., and Song, L. Dirichlet-Hawkes processes with
applications to clustering continuous-time document streams. In Proceedings of the ACM SIGKDD
International Conference on Knowledge Discovery and Data Mining, 2015a."
REFERENCES,0.4246913580246914,"Du, N., Wang, Y., He, N., Sun, J., and Song, L. Time-sensitive recommendation from recurrent user
activities. In Advances in Neural Information Processing Systems (NeurIPS), 2015b."
REFERENCES,0.4271604938271605,"Du, N., Dai, H., Trivedi, R., Upadhyay, U., Gomez-Rodriguez, M., and Song, L. Recurrent marked
temporal point processes: Embedding event history to vector. In Proceedings of the ACM SIGKDD
International Conference on Knowledge Discovery and Data Mining, 2016."
REFERENCES,0.42962962962962964,"Enguehard, J., Busbridge, D., Bozson, A., Woodcock, C., and Hammerla, N. Neural temporal point
processes [for] modelling electronic health records. In Proceedings of Machine Learning Research,
volume 136, pp. 85–113, 2020. NeurIPS 2020 Workshop on Machine Learning for Health (ML4H)."
REFERENCES,0.43209876543209874,"Etesami, J., Kiyavash, N., Zhang, K., and Singhal, K. Learning network of multivariate Hawkes
processes: A time series approach. arXiv preprint arXiv:1603.04319, 2016."
REFERENCES,0.4345679012345679,"Guo, F., Blundell, C., Wallach, H., and Heller, K. The Bayesian echo chamber: Modeling social
influence via linguistic accommodation. In Proceedings of the Eighteenth International Conference
on Artificial Intelligence and Statistics, 2015."
REFERENCES,0.43703703703703706,"Hahn, M. Theoretical limitations of self-attention in neural sequence models. Transactions of the
Association for Computational Linguistics, 8, 2020."
REFERENCES,0.43950617283950616,"Hawkes, A. G. Spectra of some self-exciting and mutually exciting point processes. Biometrika,
1971."
REFERENCES,0.4419753086419753,Published as a conference paper at ICLR 2022
REFERENCES,0.4444444444444444,"He, P., Liu, X., Gao, J., and Chen, W. DeBERTa: Decoding-enhanced bert with disentangled attention.
arXiv preprint arXiv:2006.03654, 2020."
REFERENCES,0.4469135802469136,"He, X., Rekatsinas, T., Foulds, J., Getoor, L., and Liu, Y. HawkesTopic: A joint model for network
inference and topic modeling from text-based cascades. In Proceedings of the International
Conference on Machine Learning (ICML), 2015."
REFERENCES,0.44938271604938274,"Hochreiter, S. and Schmidhuber, J. Long short-term memory. Neural Computation, 1997."
REFERENCES,0.45185185185185184,"Kingma, D. and Ba, J. Adam: A method for stochastic optimization. In Proceedings of the
International Conference on Learning Representations (ICLR), 2015."
REFERENCES,0.454320987654321,"Kitaev, N. and Klein, D. Constituency parsing with a self-attentive encoder. In Proceedings of the
Association for Computational Linguistics, 2018."
REFERENCES,0.4567901234567901,"Lee, J., Scott, D. J., Villarroel, M., Clifford, G. D., Saeed, M., and Mark, R. G. Open-access
MIMIC-II database for intensive care research. In 2011 Annual International Conference of the
IEEE Engineering in Medicine and Biology Society, 2011."
REFERENCES,0.45925925925925926,"Leskovec, J. and Krevl, A. SNAP Datasets: Stanford large network dataset collection, 2014."
REFERENCES,0.4617283950617284,"Lewis, P. A. and Shedler, G. S. Simulation of nonhomogeneous Poisson processes by thinning. Naval
Research Logistics Quarterly, 1979."
REFERENCES,0.4641975308641975,"Liniger, T. J. Multivariate Hawkes processes. Diss., Eidgenössische Technische Hochschule ETH
Zürich, Nr. 18403, 2009."
REFERENCES,0.4666666666666667,"Lukasik, M., Srijith, P. K., Vu, D., Bontcheva, K., Zubiaga, A., and Cohn, T. Hawkes processes for
continuous time sequence classification: An application to rumour stance classification in Twitter.
In Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL),
2016."
REFERENCES,0.4691358024691358,"Mei, H. and Eisner, J. The neural Hawkes process: A neurally self-modulating multivariate point
process. In Advances in Neural Information Processing Systems (NeurIPS), 2017."
REFERENCES,0.47160493827160493,"Mei, H., Qin, G., and Eisner, J. Imputing missing events in continuous-time event streams. In
Proceedings of the International Conference on Machine Learning (ICML), 2019."
REFERENCES,0.4740740740740741,"Mei, H., Qin, G., Xu, M., and Eisner, J. Neural Datalog through time: Informed temporal modeling
via logical specification. In Proceedings of the International Conference on Machine Learning
(ICML), 2020a."
REFERENCES,0.4765432098765432,"Mei, H., Wan, T., and Eisner, J. Noise-contrastive estimation for multivariate point processes. In
Advances in Neural Information Processing Systems (NeurIPS), 2020b."
REFERENCES,0.47901234567901235,"Mikolov, T., Karafiát, M., Burget, L., Cernocký, J., and Khudanpur, S. Recurrent neural network-
based language model. In Proceedings of the Annual Conference of the International Speech
Communication Association (INTERSPEECH), 2010."
REFERENCES,0.48148148148148145,"Omi, T., Ueda, N., and Aihara, K. Fully neural network based model for general temporal point
processes. In Advances in Neural Information Processing Systems (NeurIPS), 2019."
REFERENCES,0.4839506172839506,"Paszke, A., Gross, S., Chintala, S., Chanan, G., Yang, E., DeVito, Z., Lin, Z., Desmaison, A., Antiga,
L., and Lerer, A. Automatic differentiation in PyTorch. 2017."
REFERENCES,0.48641975308641977,"Peters, M., Neumann, M., Iyyer, M., Gardner, M., Clark, C., Lee, K., and Zettlemoyer, L. Deep
contextualized word representations. In Proceedings of the 2018 Conference of the North American
Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume
1 (Long Papers), 2018."
REFERENCES,0.4888888888888889,"Radford, A., Wu, J., Child, R., Luan, D., Amodei, D., and Sutskever, I. Language models are
unsupervised multitask learners. 2019."
REFERENCES,0.49135802469135803,Published as a conference paper at ICLR 2022
REFERENCES,0.49382716049382713,"Rao, R., Meier, J., Sercu, T., Ovchinnikov, S., , and Rives, A. Transformer protein language models
are unsupervised structure learners. In Proceedings of the International Conference on Learning
Representations (ICLR), 2021."
REFERENCES,0.4962962962962963,"Sharma, K., Zhang, Y., Ferrara, E., and Liu, Y. Identifying coordinated accounts on social media
through hidden influence and group behaviours. In Proceedings of the ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining, 2021."
REFERENCES,0.49876543209876545,"Shchur, O., Biloš, M., and Günnemann, S. Intensity-free learning of temporal point processes. In
Proceedings of the International Conference on Learning Representations (ICLR), 2020."
REFERENCES,0.5012345679012346,"Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., Kaiser, L., and
Polosukhin, I. Attention is all you need. In Advances in Neural Information Processing Systems
(NeurIPS), 2017."
REFERENCES,0.5037037037037037,"Xiao, S., Yan, J., Farajtabar, M., Song, L., Yang, X., and Zha, H. Joint modeling of event sequence
and time series with attentional twin recurrent neural networks. arXiv preprint arXiv:1703.08524,
2017a."
REFERENCES,0.5061728395061729,"Xiao, S., Yan, J., Yang, X., Zha, H., and Chu, S. Modeling the intensity function of point process
via recurrent neural networks. In Proceedings of the AAAI Conference on Artificial Intelligence,
2017b."
REFERENCES,0.508641975308642,"Xu, H., Farajtabar, M., and Zha, H. Learning Granger causality for Hawkes processes. In Proceedings
of the International Conference on Machine Learning (ICML), 2016."
REFERENCES,0.5111111111111111,"Xu, H., Luo, D., and Carin, L. Online continuous-time tensor factorization based on pairwise
interactive point processes. In Proceedings of the International Joint Conference on Artificial
Intelligence (IJCAI), 2018."
REFERENCES,0.5135802469135803,"Zhang, Q., Lipani, A., Kirnap, O., and Yilmaz, E. Self-attentive Hawkes process. In Proceedings of
the International Conference on Machine Learning (ICML), 2020a."
REFERENCES,0.5160493827160494,"Zhang, Q., Lipani, A., and Yilmaz, E. Learning neural point processes with latent graphs. In
Proceedings of the International World Wide Web Conference (WWW), pp. 1495–1505, 2021."
REFERENCES,0.5185185185185185,"Zhang, W., Panum, T. K., Jha, S., Chalasani, P., and Page, D. CAUSE: Learning Granger causality
from event sequences using attribution methods. In Proceedings of the International Conference
on Machine Learning (ICML), 2020b."
REFERENCES,0.5209876543209877,"Zhu, S., Zhang, M., Ding, R., and Xie, Y. Deep Fourier kernel for self-attentive point processes. In
International Conference on Artificial Intelligence and Statistics, 2021."
REFERENCES,0.5234567901234568,"Zuo, S., Jiang, H., Li, Z., Zhao, T., and Zha, H. Transformer Hawkes process. In International
Conference on Machine Learning, pp. 11692–11702. PMLR, 2020."
REFERENCES,0.5259259259259259,Published as a conference paper at ICLR 2022
REFERENCES,0.528395061728395,Appendices
REFERENCES,0.5308641975308642,"A
DISCUSSION OF ARCHITECTURAL DETAILS"
REFERENCES,0.5333333333333333,"Simplification. Equation (1) is a simplification of the original Transformer architecture (Vaswani
et al., 2017). In the original architecture, JeK(ℓ)(t) would be obtained as LayerNorm(x + FFN(ℓ)(x)),
where x is the LayerNorm transformation (Ba et al., 2016) of the right-hand side of equation (1), and
the nonlinear transform FFN(ℓ) is computed by a learned two-layer feed-forward network."
REFERENCES,0.5358024691358024,"In our preliminary experiments, we found that the LayerNorm and FFN steps did not help, so for
simplicity and speed, we omitted them from equation (1) and from the remaining experiments.
However, it is possible that they might help on other domains or with larger training datasets, so our
code supports them via command-line arguments."
REFERENCES,0.5382716049382716,"Graceful degradation. Another change to equation (1) (and equation (8)) is that when normalizing
the attention weights, we included an additional summand of 1 in the denominator.4 We do this so
that when the history H(e@t) is “rather irrelevant” to e@t, the architecture behaves roughly as if
H(e@t) were the empty set. In equation (1), this means that JeK(ℓ)(t) will then be close to JeK(ℓ−1)(t).
Similarly, equation (7) will not be much influenced by rule r if rule r finds only events Hr(e@t) that
it considers to be “rather irrelevant” to e@t."
REFERENCES,0.5407407407407407,"A “rather irrelevant” history is one for which the unnormalized attention weights are small in toto, so
that the denominator is dominated by the 1 summand. This may occur, for example, if events in the
distant past tend to have small attention weights, and the history consist only of old events (and not
too many of them). When the history is rather irrelevant, the argument to tanh in equation (1) and
the summand e (ℓ)
r (t) in equation (7) are close to 0; when H(e@t) = ∅, they are exactly 0."
REFERENCES,0.5432098765432098,"Direct access to time embeddings. Another difference from Vaswani et al. (2017)—perhaps not
an important one—is that in equation (3), we chose to concatenate JtK to the rest of the embedding
rather than add it (cf. Kitaev & Klein, 2018; He et al., 2020). Furthermore we did so at every layer
and not just layer 0. The intuition here is that the extraction of good key and query vectors at each
layer may benefit from “direct access” to JtK. For example, this should make it easy to learn keys and
queries such that the attention weight is highest when s ≈t −∆(since for every ∆∈R, there exists
a sparse linear operator that transforms JtK 7→Jt −∆K)."
REFERENCES,0.5456790123456791,"Range of wavelengths for time embeddings. Our time embedding JtK in (4) uses dimensions that
are sinusoidal in t, with wavelengths forming a geometric progression from 2πm to 2π(5M). Setting
m = 1, M = 2000 would recover the standard scheme of Vaswani et al. (2017) (previously used in
continuous time by Zuo et al. (2020))."
REFERENCES,0.5481481481481482,"We instead set m and M from data so that we are robust to datasets of different time scales. Part
of the intuition behind using sinusoidal embeddings is that nearby times can be distinguished by
different values in their short-wavelength dimensions, whereas the long-wavelength dimensions make
it easy to inspect and compare faraway times, since those dimensions are nearly linear on t ∈[0, M].
We therefore take m to be the shortest gap between any two events in the same history,
m = min
e@t
min
f@s,f ′@s′∈H(e@t) |s −s′|,
(11)"
REFERENCES,0.5506172839506173,"as computed over training data, and take M greater than all T in training data (where each observed
sequence is observed over an interval [0, T])."
REFERENCES,0.5530864197530864,"If we were modeling sequences of words as in Brown et al. (2020), our procedure would indeed
recover the values m = 1 and M = 2000 that they used to model text documents. Multiplying or
dividing all t values in the dataset by 1000 (e.g., switching between second and millisecond units)
would have no effect on the time embeddings, as it would scale m and M in the same way."
REFERENCES,0.5555555555555556,"Coarse event embeddings for speed. As noted at the end of section 3, the intensity model equation (5)
involves a full embedding of each e@t. This may be expressive, but it is also expensive. The attention"
REFERENCES,0.5580246913580247,"4Including the summand of 1 is equivalent to saying that e@t attends not only to relevant events H(e@t) but
also to a dummy object whose key and value are fixed at 0. The dummy object gets an unnormalized attention
weight of 1, drawing attention away from H(e@t)."
REFERENCES,0.5604938271604938,Published as a conference paper at ICLR 2022
REFERENCES,0.562962962962963,"weight vectors α(1), . . . , α(L) used to compute this embedding must be computed from scratch for
each e and t. Why is this necessary?"
REFERENCES,0.5654320987654321,"Like other neural sequence models—both RNN-based and Transformer-based—we derive the proba-
bility that the next sequence element is e from an inner product of the form w⊤
e [1; JH(e@t)K], where
in our equation (5), the role of the history embedding JH(e@t)K is played by JeKL(t). However, for
many previous models, the history embedding does not depend on e, so it can be computed once at
each time t and reused across all e."
REFERENCES,0.5679012345679012,"• In neural language models, typically all previous events are taken to be relevant. JH(e@t)K
can then be defined as an RNN encoding of the sequence all past events (Mikolov et al.,
2010), or alternatively a Transformer embedding of the single most recent past event (which
depends on the entire sequence of past events). This does not depend on e."
REFERENCES,0.5703703703703704,"• When modeling irregularly spaced events, t is not necessarily an integer, and the past events
in H(e@t) do not necessarily take place at 1, 2, . . . , t −1. Thus, the encoding JH(e@t)K
must somehow be improved to also consider the elapsed time t −ti since the most recent
past event (Du et al., 2016; Mei & Eisner, 2017; Zuo et al., 2020; Zhang et al., 2020a). So
now JH(e@t)K must look at t, but it is still independent of e."
REFERENCES,0.5728395061728395,"• In contrast, in sections 4–5, we will allow the more general case where JH(e@t)K varies
with e as well, since NDTT rules determine which past events should be attended to by e.
The original NDTT paper essentially defined JH(e@t)K as the state at time t of an e-specific
continuous-time LSTM, which is updated by just the events that are relevant to e. In our
attention-based approach, we instead define it to be JeKL(t), yielding equation (5)."
REFERENCES,0.5753086419753086,"To reduce this computational cost, we can associate each event type e with a coarse event type ¯e
that is guaranteed to have the same set of relevant past events, and replace JeKL(t) with J¯eKL(t) in
equation (5). (However, equation (5) still uses the fine-grained we.) Now to compute λe(t), we only
have to embed ¯e@t, which is a speedup if many of the possible event types e are associated with the
same ¯e. In the case where we do not use selective attention, we can get away with using only a single
coarse event type for the whole model—saving a runtime factor of |E| as in the cheaper approach.
Note that the history H still uses fine-grained embeddings, so if e@t actually occurs, we must then
compute JeK0(t), . . . , JeKL(t)."
REFERENCES,0.5777777777777777,"Concatenation vs. summation. Equation (7) uses summation to combine the outputs (8) of different
attention heads r. Vaswani et al. (2017) instead combined such outputs by projecting their concatena-
tion, but that becomes trickier in our setting: different events e would need to concatenate different
numbers of attention heads r (for just the rules r that can take the form e <- · · · ), resulting in
projection matrices of different dimensionalities. Especially when NDTT rules can contain variables
(section 5 below), it is not immediately obvious how one should construct these matrices or share
parameters among them. These presentational problems vanish with our simpler summation approach."
REFERENCES,0.5802469135802469,"Our approach loses no expressive power: projecting a concatenation of e (ℓ)
r (t) values, as Vaswani"
REFERENCES,0.582716049382716,"et al. would suggest, is equivalent to summing up an r-specific projection of e (ℓ)
r (t) for each r, as"
REFERENCES,0.5851851851851851,"we do, where our projection of e (ℓ)
r (t) has implicitly been incorporated into the projection (3a) that
produces v(ℓ)
r . That is, if we can learn V(ℓ)
r
= V in equation (3a), then we can also learn V(ℓ)
r
= PV,
where P is the desired projection matrix for rule r. To make our method fully equivalent to Vaswani
et al.’s, we would have to explicitly parameterize V(ℓ)
r
as a matrix product of the form PV, forcing it
to be low-rank."
REFERENCES,0.5876543209876544,"B
NDTT EXAMPLE WITH VARIABLES"
REFERENCES,0.5901234567901235,"The company message forum program in section 5 had only 2 users and 1 forum. However, if the
company employs many persons P and has a forum for each team T, NDTT rules can use capitalized
variables to define the whole system concisely, using only O(1) rules and O(1) parameters. Here the
possible facts and events have structured names like message
message
message
message
message
message
message
message
message
message
message
message
message
message
message
message
message(eve,sales,joke), which denotes
an event in which employee eve posts a joke to the sales team’s forum."
REFERENCES,0.5925925925925926,"7 forum(T) <- create
create
create
create
create
create
create
create
create
create
create
create
create
create
create
create
create(T)."
REFERENCES,0.5950617283950618,"8 forum(T) <- message
message
message
message
message
message
message
message
message
message
message
message
message
message
message
message
message(P,T,C)."
"MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE",0.5975308641975309,"9 message
message
message
message
message
message
message
message
message
message
message
message
message
message
message
message
message(P,T,C) :- empl(P), forum(T), content(C)."
"MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE",0.6,"10 !forum(T) <- destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy
destroy(T)."
"MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE",0.6024691358024692,Published as a conference paper at ICLR 2022
"MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE",0.6049382716049383,"Figure 4: The solid green arrows correspond to instantiations of the attentional <- rules 8 and 13. They can
capture the real-world property that thanks to Eve’s joke at time t5, the sales forum still feels more humorous at
time t and Frank, another member of that forum, is still in a good mood. This raises the probability λe(t)dt
that Frank posts his own joke at time t, where e = message
message
message
message
message
message
message
message
message
message
message
message
message
message
message
message
message(frank,sales,joke). More formally, λe(t) is
determined by the layer-L embedding of Frank’s possible message e@t. In general, the layer-ℓembedding of
this message reflects the layer-(ℓ−1) embeddings of both Frank and the forum at time t, as well as the fact
that the possible message is a joke. If the message is actually sent (i.e., the possible event actually happens), its
layer-ℓembedding would in turn affect the layer-(ℓ+ 1) embeddings of the forum and its readers at times > t.
An arrow with multiple inputs means that the input embeddings are concatenated before being transformed into
a contribution to the output embedding. Other visual conventions are as in Figure 1. Not all facts, events, or
arrows are shown in this drawing."
"MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE
MESSAGE",0.6074074074074074,"This generalizes the previous program, allowing multiple forums and saying that any employee (not
just Eve and Frank) can post any type of message to any forum, affecting the embedding of that
forum. We could modify rule 9 by adding an additional condition member(P,T), so that employees
can only post to forums of which they are members. Membership could be established and tracked by"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6098765432098765,"11 join
join
join
join
join
join
join
join
join
join
join
join
join
join
join
join
join(P,T) :- empl(P), forum(T)."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6123456790123457,"12 member(P,T) <- join
join
join
join
join
join
join
join
join
join
join
join
join
join
join
join
join(P,T)."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6148148148148148,"13 empl(P) <- message
message
message
message
message
message
message
message
message
message
message
message
message
message
message
message
message(P2,T,C), member(P,T).
Rules 8 and 13 ensure that a message to a forum affects the subsequent embedding of that forum
and also the subsequent embeddings of all employees who were members of that forum when the
message was sent. This may affect which employees join which forums in future, and what they post
to the forums, as drawn in Figure 4 in the appendices. For further examples, see the full presentation
of NDTT in Mei et al. (2020a)."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6172839506172839,"How are variables treated in the computation of embeddings? In equations (7)–(8), r refers to a rule
with variables. However, e refers to a specific fact, without variables. An instantiation of r is a copy
of r in which each variable has been consistently replaced by an actual value. In our modified version
of equation (8), the summations range over all values of (f, g1, . . . , gn)@s such that e <- f, g1,
..., gn is an instantiation of r that added e at time s (i.e., an instantiation of r such that f occurred
at time s and g1, . . . , gn were all true at time s). Thus, the attentional competition may consider
(f, g1, . . . , gn)@s values that are derived from many different instantiations of r. Their attentional
weights α(ℓ)
r
are all obtained using the shared parameters associated with rule r.5 The summation in"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6197530864197531,"5Mei et al. (2020a, Appendix B) provide a notation to optionally reduce the amount of parameter sharing.
A rule may specify, for example, that each value of variable T should get its own parameters. In this case, we
regard the rule as an abbreviation for several rules, one for each value of T. Each of these rules corresponds to a
different r in equation (7), and so corresponds to a separate attention head (8) that sets up its own attentional"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6222222222222222,Published as a conference paper at ICLR 2022
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6246913580246913,"equation (7) ranges only over rules r with at least one instantiation that adds e@t, so it skips rules that
are irrelevant to e."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6271604938271605,"C
PARAMETER DIMENSIONALITY SPECIFICATION FOR A-NDTT"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6296296296296297,In this section we discuss the dimensionality of the fact embeddings JhK(t) in section 5.
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6320987654320988,"As in the original NDTT paper Mei et al. (2020a), the type of a fact in the database is given by its
functor (forum, member, create
create
create
create
create
create
create
create
create
create
create
create
create
create
create
create
create, etc.). All facts of the same type have embedding vectors of the
same dimensionality, and these dimensionalities are declared by the NDTT program."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6345679012345679,"This is enough to determine the dimensions of the parameter matrices associated with the deduction
rules (Mei et al., 2020a). How about the add rules, however? The form of equation (9) implies that
the value vectors v(ℓ)
r
for add rule r have the same dimensionality as the embedding of the head of r.
The key and query vectors for rule r (as used in equation (2)) can share this dimensionality by default,
although we are free to override this and specify a different dimensionality for them. The foregoing
choices determine the dimensions of the parameter matrices V(ℓ)
r , K(ℓ)
r , Q(ℓ)
r
associated with rule r."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6370370370370371,"D
LIKELIHOOD COMPUTATION DETAILS"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6395061728395062,In this section we discuss the log-likelihood formulas in section 3.
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6419753086419753,"Derivations of the log-likelihood formula (6) can be found in previous work (e.g., Hawkes, 1971;
Liniger, 2009; Mei & Eisner, 2017). Derivations of this formula appear in previous work (e.g.,
Hawkes, 1971; Liniger, 2009; Mei & Eisner, 2017). Intuitively, when training to increase the log-
likelihood (6), each log λei(ti) is increased to explain why the observed event ei happened at time ti,
while
R T
t=0
PE
e=1 λe(t)dt is decreased to explain why no event of any possible type e ∈{1, . . . , E}
ever happened at other times. Note that there is no log under the integral in equation (6). Why? The
probability that there was not an event of any type in the infinitesimally wide interval [t, t + dt) is
1 −λ(t)dt, whose log is −λ(t)dt."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6444444444444445,"The integral term in equation (6) is computed using the Monte Carlo approximation given by Mei
& Eisner (2017, Algorithm 1), which samples times t. This yields an unbiased stochastic gradient.
For the number of Monte Carlo samples, we follow the practice of Mei & Eisner (2017): namely, at
training time, we match the number of samples to the number of observed events at training time, a
reasonable and fast choice, but to estimate log-likelihood when tuning hyperparameters or reporting
final results, we take 10 times as many samples. The small remaining variance in this procedure is
shown in our error bars, as explained in footnote 6."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6469135802469136,"At each sampled time t, the Monte Carlo method still requires a summation over all events to obtain
λ(t). This summation can be expensive when there are many event types. This is not a serious
problem for our standalone A-NHP implementation since it can leverage GPU parallelism. But for
the general A-NDTT implementation, it is hard to parallelize the λk(t) computation over k and t. In
that case, we use the downsampling trick detailed in Appendix D of Mei et al. (2020a)."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6493827160493827,"An alternative would be to replace maximum-likelihood estimation with noise-contrastive estimation,
which is quite effective at training NHP and NDTT models (Mei et al., 2020b)."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6518518518518519,"E
HOW TO PREDICT EVENTS"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.654320987654321,"It is possible to sample event sequences exactly from an A-NHP or A-NDTT model, using the
thinning algorithm that is traditionally used for autoregressive point processes (Lewis & Shedler,
1979; Liniger, 2009). In general, to apply the thinning algorithm to sample the next event at time ≥t0,
it is necessary to have an upper bound on {λe(t) : t ∈[t0, ∞)} for each event type t. An explicit
construction for the NHP (or NDTT) model was given by Mei & Eisner (2017, Appendix B.3). For
A-NHP and A-NDTT, observe that λe(t) is a continuous real-valued function of JtK (the particular
function depends on e and the history of events at times < t0). Since JtK falls in the compact set
[−1, 1]d (thanks to the sinusoidal embedding (4)), it follows that λe(t) is indeed bounded. Actual"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6567901234567901,"competition using its own parameters. One use of this mechanism would be to allocate multiple attention heads
to a single rule."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6592592592592592,Published as a conference paper at ICLR 2022
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6617283950617284,"DATASET
K
# OF EVENT TOKENS
SEQUENCE LENGTH"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6641975308641975,"TRAIN
DEV
TEST
MIN
MEAN
MAX"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6666666666666666,"SYNTHETIC
10
59904
7425
7505
49
75
99
MIMIC-II
75
1930
252
237
2
4
33
STACKOVERFLOW
22
345116
38065
97233
41
72
736
ROBOCUP
528
2195
817
780
780
948
1336"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6691358024691358,Table 1: Statistics of each dataset.
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.671604938271605,"numerical bounds can be computed using interval arithmetic. That is, we can apply our continuous
function not to a particular value of JtK but to all of [−1, 1]d, where for any elementary continuous
function f : R →R, we have defined f([xlo, xhi]) to return some bounded interval that contains f(x)
for all x ∈[xlo, xhi]. The result will be a bounded interval that contains λe(t) for all t ∈[t0, ∞)."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.674074074074074,"Section 7 includes a task-based evaluation where we try to predict the time and type of just the next
event. More precisely, for each event in each held-out sequence, we attempt to predict its time given
only the preceding events, as well as its type given both its true time and the preceding events."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6765432098765433,"We evaluate the time prediction with average L2 loss (yielding a root-mean-squared error, or RMSE)
and evaluate the argument prediction with average 0-1 loss (yielding an error rate)."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6790123456790124,"Following Mei & Eisner (2017), we use the minimum Bayes risk (MBR) principle to predict the time
and type with lowest expected loss. For completeness, we repeat the general recipe in this section."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6814814814814815,"For the ith event, its time ti has density pi(t) = λ(t) exp(−
R t
ti−1 λ(t′)dt′). We choose
R ∞
ti−1 tpi(t)dt
as the time prediction because it has the lowest expected L2 loss. The integral can be estimated using
i.i.d. samples of ti drawn from pi(t) by the thinning algorithm."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6839506172839506,"Given the next event time ti, we choose the most probable type arg maxe λe(ti) as the type prediction
because it minimizes expected 0-1 loss. In some circumstances, one might also like to predict the
most probable type out of a restricted set E′ ⊊{1, . . . , E}. This allows one to answer questions like
“If we know that some event of the form message
message
message
message
message
message
message
message
message
message
message
message
message
message
message
message
message(eve,T) happened at time ti, then what was the
forum T, given all past events?” The answer will simply be arg maxe∈E′ λe(ti)."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6864197530864198,"F
EXPERIMENTAL DETAILS"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6888888888888889,"F.1
DATASET DETAILS"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.691358024691358,Table 1 shows statistics about each dataset that we use in this paper.
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6938271604938272,"F.1.1
PILOT EXPERIMENTS ON SIMULATED DATA"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6962962962962963,"In this experiment, we draw data from randomly initialized NHP, A-NHP, SAHP, and THP. For
all of them, we take the number of event types to be E = 10. For NHP, the dimensions of event
embeddings and hidden states are all 32; for A-NHP, the number of layers (L in our paper) is 2, and
the dimensions of time embeddings and event embeddings are 32; for SAHP, the number of layers is
4, and the dimension of hidden states is 32; for THP, the number of layer is 7, and the dimension of
hidden states is 32."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.6987654320987654,"For each model, we draw 800, 100, and 100 sequences for training, validation and testing, respectively.
For each sequence, the sequence length I is drawn from Uniform(49, 99). We take the maximum
observation time T to be tI + 1, one time step after the final event."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7012345679012346,"We fit all 4 models on each of these 4 synthetic datasets. The results are graphed in Figure 5 and show
that NHP, SAHP, and A-NHP have very close performance on all 4 datasets (outperforming THP,
especially at predicting timing, except perhaps on the THP dataset itself). Notably, THP fits the time
intervals poorly when it is misspecified, perhaps because its family of intensity functions (section 6)
is not a good match for real data: THP requires that the intensity of e between events changes more
slowly later in the event sequence, and that if it increases over time, it approaches linear growth rather
than an asymptote."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7037037037037037,Published as a conference paper at ICLR 2022
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7061728395061728,Log-likelihood per event (the training objective) of the whole test event sequence 1.32 1.30 1.28 1.26 1.24 1.22
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7086419753086419,Log-likelihood per event of the event times only 0.94 0.96 0.98 1.00 1.02
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7111111111111111,Log-likelihood per event of the event types only
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7135802469135802,-2.250
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7160493827160493,-2.245
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7185185185185186,-2.240
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7209876543209877,-2.235
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7234567901234568,-2.230
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.725925925925926,(a) THP Data 1.4 1.3 1.2 1.1 0.9 1.0 1.1 1.2
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7283950617283951,-2.240
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7308641975308642,-2.230
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7333333333333333,-2.220
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7358024691358025,-2.210
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7382716049382716,-2.200
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7407407407407407,(b) SAHP Data 1.7 1.6 1.5 1.4 0.6 0.7 0.8 0.9
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7432098765432099,-2.310
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.745679012345679,-2.308
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7481481481481481,-2.305
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7506172839506173,-2.303
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7530864197530864,-2.300
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7555555555555555,(c) NHP Data 1.6 1.5 1.4 1.3 0.7 0.8 0.9
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7580246913580246,-2.298
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7604938271604939,-2.296
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.762962962962963,-2.294
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7654320987654321,-2.292
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7679012345679013,-2.290
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7703703703703704,-2.288
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7728395061728395,(d) A-NHP Data
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7753086419753087,"Figure 5: Log-likelihood on held-out data (in nats, with 95% bootstrap confidence intervals6). Larger values are
better. Each column is a different experiment, on a single synthetic dataset generated from a different distribution
family (shown at the bottom of the column). Within each column, the red dashed horizontal line represents the
log-likelihood of the true distribution that generated the data. Within each column, we train and test 4 models:
THP, SAHP, NHP, and A-NHP (from left to right). The model from the correct family is shown in red; compare
this to our A-NHP model (the rightmost model). Other models are shown in lighter ink. Note that log-likelihood
for continuous variables can be positive (as in the second row), since it uses the log of a probability density that
may be > 1."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7777777777777778,"F.1.2
OTHER DATA DETAILS"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7802469135802469,"For MIMIC-II and StackOverflow, we used the version processed by Du et al. (2016); more details
(e.g., about processing) can be found in their paper."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.782716049382716,"For RoboCup, we used the version processed by Chen & Mooney (2008); please refer to their paper
for more details (e.g., data description, processing method, etc)"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7851851851851852,"F.2
IMPLEMENTATION DETAILS"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7876543209876543,"For NHP, our implementation is based on the public Github repositories at https://github.com/
HMEIatJHU/neurawkes (Mei & Eisner (2017), with MIT License) and https://github.com/
HMEIatJHU/neural-hawkes-particle-smoothing (Mei et al. (2019), with BSD 3-Clause
“New” or “Revised” License). We made a considerable amount of modifications to their code (e.g.,
model, thinning algorithm), in order to migrate it to PyTorch 1.7. We built the standalone GPU
implementation of A-NHP upon our NHP code."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7901234567901234,"For NDTT, we used the public Github repository at https://github.com/HMEIatJHU/
neural-datalog-through-time (Mei et al. (2020a), with MIT License). We built A-NDTT
upon NDTT."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7925925925925926,"For THP, we used the public Github repository at https://github.com/SimiaoZuo/
Transformer-Hawkes-Process (Zuo et al. (2020), no license specified)."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7950617283950617,"For SAHP, we used the public Github repository at https://github.com/QiangAIResearcher/
sahp_repo (Zhang et al. (2020a), no license specified)."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.7975308641975308,"F.3
TRAINING DETAILS"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8,"For each model in section 7, we had to specify various dimensionalities. For simplicity, we used a
single hyperparameter D and took all vectors to be in RD. This includes the state vectors of NHP,
the fact embeddings of NDTT and A-NDTT, and the query, key, and value vectors for the models"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8024691358024691,Published as a conference paper at ICLR 2022
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8049382716049382,"DATASET
TRAINING TIME (MILLISECONDS) / SEQUENCE"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8074074074074075,"NHP
A-NHP"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8098765432098766,"SYNTHETIC
208.7
56.3
MIMIC-II
2.9
32.6
STACKOVERFLOW
156.6
65.7"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8123456790123457,Table 2: Training time of NHP and A-NHP for experiments in section 7.1.
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8148148148148148,"with attention mechanisms (THP, SAHP, A-NHP, and A-NDTT). For the models with attention
mechanisms, we also had to choose the number of layers L."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.817283950617284,"We tuned these hyperparameters for each combination of model, dataset, and training size (e.g.,
each bar in Figures 2, 3a and 5), always choosing the combination of D and L that achieved
the best performance on the dev set. Our search spaces were D ∈{4, 8, 16, 32, 64, 128} and
L ∈{1, 2, 3, 4, 5, 6}. In practice, the optimal D for a model was usually 32 or 64; the optimal L was
usually 1, 2, or 3."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8197530864197531,"To train the parameters for a given model, we used the Adam algorithm (Kingma & Ba, 2015) with
its default settings. We performed early stopping based on log-likelihood on the held-out dev set."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8222222222222222,"For the experiments in section 7.1, we used the standalone PyTorch implementations for NHP and
A-NHP, which are GPU-friendly. We trained each model on an NVIDIA K80 GPU. Table 2 shows
their training time per sequence on each dataset."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8246913580246914,"For section 7.2, we run our NDTT and A-NDTT models only on CPUs. This follows Mei et al.
(2020a), who did not find an efficient method to leverage GPU parallelism for training NDTT models.
The machines we used for NDTT and A-NDTT are 6-core Haswell architectures. On RoboCup,
the training time of NDTT and A-NDTT was 62 and 149 seconds per sequence, respectively. See
Appendix F.4 for future work on improving the latter time by exploiting GPU parallelism."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8271604938271605,"For the NHP and A-NHP models in section 7.2, we ran the specialized code for these models on CPU
as well, rather than on GPU as in section 7.1, since the RoboCup sequences were too long to fit in
the memory of our K80 GPU. The training time was 66 and 95 seconds per sequence for NHP and
A-NHP, respectively."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8296296296296296,"F.4
TRAINING PARALLELISM"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8320987654320988,"We point out that in the future, GPU parallelism could be exploited through the following procedure,
given a GPU with enough memory to handle long training sequences. (The layers can be partitioned
across multiple GPUs if needed.)"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8345679012345679,"For each training minibatch, the first step is to play each event sequence e1@t1, e2@t2, . . . , eI@tI for-
ward to determine the contents of the database on each interval (0, t1], (t1, t2], . . . , (ti−1, tI], (tI, T].
This step runs on CPU, and computes only the boolean facts (“Datalog through time”) without their
embeddings (“neural Datalog through time”)."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.837037037037037,"Let F be the set of facts that ever appeared in the database during this minibatch and let R be the set
of rules that were ever used to deduce or add them (section 5). Furthermore, let T be the set of times
consisting of {t1, . . . , tI} together with the times t that are sampled for the Monte Carlo integral
(Appendix D)."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8395061728395061,"A computation graph of size O(|R|·I) can now be constructed, as illustrated in Figure 1b, to compute
the embeddings JhK(t) of all facts h ∈F at all times t ∈T . The layer-ℓembeddings at time t ∈T
depend on the layer-(ℓ−1) embeddings at times ti ≤t, according to the add rules in R. The layer-ℓ
embedding of a fact that is deduced at time t also depends on the layer-ℓembeddings at time t of the
facts that it is deduced from, according to the deduction rules in R; this further increases the depth of
the computation graph."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8419753086419753,"For a given fact h ∈F, JhK(ℓ)(t) can be computed in parallel for all event sequences and all times
t ∈T (even times t when h is not true, although those embeddings will not be used). Multiple facts
that are governed by the same NDTT rule r ∈R can also be handled in parallel, since they use"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8444444444444444,Published as a conference paper at ICLR 2022
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8469135802469135,"the same r-specific parameters. Thus, a GPU can be effective for this phase. The computation of
h (ℓ)
r (t) in equation (9) must take care to limit its attention to just those earlier times when an event
occurred that added h via rule r, and the computation of [h](ℓ)(t) in equation (9) must take care to
consider only rules r that in fact deduce h at time t because their conditions are true at time t. This
masks unwanted parts of the computation, rendering parts of the GPU idle. GPU parallelism will
still be worthwhile if a substantial fraction of the computation remains unmasked—which is true for
relatively homogenous settings where most facts in F hold true for a large portion of the observed
interval [0, T), even if their embeddings fluctuate."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8493827160493828,"F.5
MORE RESULTS"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8518518518518519,"The performance of A-NDTT and NDTT is not always comparable for specific action types, as shown
in Figure 6. In terms of data fitting (left figure), A-NDTT is significantly better at the kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff events
while NDTT is better at the others. For time prediction (middle figure), A-NDTT is significantly
better at the goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal, kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff, and pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass
pass events, but the differences for the other action types are not
significant. For action participant prediction (right figure), A-NDTT is significantly better at the
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff
kickoff events while there is no difference for the others; both do perfectly well at the goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal
goal and
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick
kick events such that their dots overlap at the origin."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.854320987654321,"3
4
5
6
7
8
NDTT
negative log likelihood 3 4 5 6 7 8"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8567901234567902,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8592592592592593,"goal
kick
kickoff
pass
steal"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8617283950617284,"0
2
4
6
8 10 12 14 16 18 20"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8641975308641975,"NDTT
RMSE"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8666666666666667,"0.0
2.5
5.0
7.5
10.0
12.5
15.0
17.5
20.0"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8691358024691358,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8716049382716049,"goal
kick
kickoff
pass
steal"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8740740740740741,"0.0
0.2
0.4
0.6
0.8
1.0
NDTT
error rate % 0.0 0.2 0.4 0.6 0.8 1.0"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8765432098765432,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8790123456790123,"goal
kick
kickoff
pass
steal"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8814814814814815,"Figure 6: Results of NDTT and A-NDTT in Figure 3a broken down by action types, with horizontal and vertical
error bars, respectively."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8839506172839506,"In Figure 7, we show that Figure 6 does not change qualitatively when re-run with different random
seeds."
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8864197530864197,Published as a conference paper at ICLR 2022
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8888888888888888,"3
4
5
6
7
8
NDTT
negative log likelihood 3 4 5 6 7 8"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.891358024691358,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8938271604938272,"goal
kick
kickoff
pass
steal"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8962962962962963,"0
2
4
6
8 10 12 14 16 18 20"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.8987654320987655,"NDTT
RMSE"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9012345679012346,"0.0
2.5
5.0
7.5
10.0
12.5
15.0
17.5
20.0"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9037037037037037,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9061728395061729,"goal
kick
kickoff
pass
steal"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.908641975308642,"0.0
0.2
0.4
0.6
0.8
1.0
NDTT
error rate % 0.0 0.2 0.4 0.6 0.8 1.0"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9111111111111111,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9135802469135802,"goal
kick
kickoff
pass
steal (a)"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9160493827160494,"3
4
5
6
7
8
NDTT
negative log likelihood 3 4 5 6 7 8"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9185185185185185,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9209876543209876,"goal
kick
kickoff
pass
steal"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9234567901234568,"0
2
4
6
8 10 12 14 16 18 20"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9259259259259259,"NDTT
RMSE"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.928395061728395,"0.0
2.5
5.0
7.5
10.0
12.5
15.0
17.5
20.0"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9308641975308642,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9333333333333333,"goal
kick
kickoff
pass
steal"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9358024691358025,"0.0
0.2
0.4
0.6
0.8
1.0
NDTT
error rate % 0.0 0.2 0.4 0.6 0.8 1.0"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9382716049382716,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9407407407407408,"goal
kick
kickoff
pass
steal (b)"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9432098765432099,"3
4
5
6
7
8
NDTT
negative log likelihood 3 4 5 6 7 8"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.945679012345679,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9481481481481482,"goal
kick
kickoff
pass
steal"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9506172839506173,"0
2
4
6
8 10 12 14 16 18 20"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9530864197530864,"NDTT
RMSE"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9555555555555556,"0.0
2.5
5.0
7.5
10.0
12.5
15.0
17.5
20.0"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9580246913580247,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9604938271604938,"goal
kick
kickoff
pass
steal"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9629629629629629,"0.0
0.2
0.4
0.6
0.8
1.0
NDTT
error rate % 0.0 0.2 0.4 0.6 0.8 1.0"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9654320987654321,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9679012345679012,"goal
kick
kickoff
pass
steal (c)"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9703703703703703,"3
4
5
6
7
8
NDTT
negative log likelihood 3 4 5 6 7 8"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9728395061728395,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9753086419753086,"goal
kick
kickoff
pass
steal"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9777777777777777,"0
2
4
6
8 10 12 14 16 18 20"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.980246913580247,"NDTT
RMSE"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9827160493827161,"0.0
2.5
5.0
7.5
10.0
12.5
15.0
17.5
20.0"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9851851851851852,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9876543209876543,"goal
kick
kickoff
pass
steal"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9901234567901235,"0.0
0.2
0.4
0.6
0.8
1.0
NDTT
error rate % 0.0 0.2 0.4 0.6 0.8 1.0"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9925925925925926,A-NDTT
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9950617283950617,"goal
kick
kickoff
pass
steal (d)"
"JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN
JOIN",0.9975308641975309,Figure 7: Replications of Figure 6 (one per row) with different random seeds used during training.
