Section,Section Appearance Order,Paragraph
SEOUL NATIONAL UNIVERSITY,0.0,"1Seoul National University
{artberryx,jaekyeom,gunhee}@snu.ac.kr
2University of Michigan
{jwook,honglak}@umich.edu
3LG AI Research"
ABSTRACT,0.0022675736961451248,ABSTRACT
ABSTRACT,0.0045351473922902496,"We study the problem of unsupervised skill discovery, whose goal is to learn a
set of diverse and useful skills with no external reward. There have been a num-
ber of skill discovery methods based on maximizing the mutual information (MI)
between skills and states. However, we point out that their MI objectives usu-
ally prefer static skills to dynamic ones, which may hinder the application for
downstream tasks. To address this issue, we propose Lipschitz-constrained Skill
Discovery (LSD), which encourages the agent to discover more diverse, dynamic,
and far-reaching skills. Another beneﬁt of LSD is that its learned representation
function can be utilized for solving goal-following downstream tasks even in a
zero-shot manner — i.e., without further training or complex planning. Through
experiments on various MuJoCo robotic locomotion and manipulation environ-
ments, we demonstrate that LSD outperforms previous approaches in terms of
skill diversity, state space coverage, and performance on seven downstream tasks
including the challenging task of following multiple goals on Humanoid. Our
code and videos are available at https://shpark.me/projects/lsd/."
INTRODUCTION,0.006802721088435374,"1
INTRODUCTION"
INTRODUCTION,0.009070294784580499,"Reinforcement learning (RL) aims at learning optimal actions that maximize accumulated reward
signals (Sutton & Barto, 2005). Recently, RL with deep neural networks has demonstrated re-
markable achievements in a variety of tasks, such as complex robotics control (Gu et al., 2017;
Andrychowicz et al., 2020) and games (Schrittwieser et al., 2020; Badia et al., 2020). However,
one limitation of the RL framework is that a practitioner has to manually deﬁne and tune a reward
function for desired behaviors, which is often time-consuming and hardly scalable especially when
there are multiple tasks to learn (Hadﬁeld-Menell et al., 2017; Dulac-Arnold et al., 2019)."
INTRODUCTION,0.011337868480725623,"Therefore, several methods have been proposed to discover skills without external task rewards (Gre-
gor et al., 2016; Eysenbach et al., 2019; Sharma et al., 2020), which is often referred to as the unsu-
pervised skill discovery problem. Unsupervised discovery of skills helps not only relieve the burden
of manually specifying a reward for each behavior, but also provide useful primitives to initialize
with or combine hierarchically for solving downstream tasks (Eysenbach et al., 2019; Lee et al.,
2020). Moreover, learned skills can effectively demonstrate the agent’s capability in the environ-
ment, allowing a better understanding of both the agent and the environment."
INTRODUCTION,0.013605442176870748,"One of the most common approaches to the unsupervised skill discovery problem is to maximize the
mutual information (MI) between skill latent variables and states (Gregor et al., 2016; Achiam et al.,
2018; Eysenbach et al., 2019; Hansen et al., 2020; Sharma et al., 2020; Choi et al., 2021; Zhang
et al., 2021). Intuitively, these methods encourage a skill latent z to be maximally informative of
states or trajectories obtained from a skill policy π(a|s, z). As a result, optimizing the MI objective
leads to the discovery of diverse and distinguishable behaviors."
INTRODUCTION,0.015873015873015872,"However, existing MI-based skill discovery methods share a limitation that they do not necessarily
prefer learning ‘dynamic’ skills (i.e., making large state variations) or task-relevant behaviors such
as diverse locomotion primitives. Since MI is invariant to scaling or any invertible transformation
of the input variables, there exist inﬁnitely many optima for the MI objective. As such, they will"
INTRODUCTION,0.018140589569160998,"∗Equal contribution, listed in alphabetical order."
INTRODUCTION,0.02040816326530612,Published as a conference paper at ICLR 2022
INTRODUCTION,0.022675736961451247,(a) Ant environment.
INTRODUCTION,0.024943310657596373,"LSD (ours)
DIAYN"
INTRODUCTION,0.027210884353741496,(b) Visualization of discovered 2-D skills on the x-y plane.
INTRODUCTION,0.02947845804988662,"30
0
30 30 0 30"
INTRODUCTION,0.031746031746031744,(c) Zero-shot goal following.
INTRODUCTION,0.034013605442176874,Figure 1: Skills discovered by LSD can be used to follow goals with no further training or planning.
INTRODUCTION,0.036281179138321996,"converge to the maximum that is most easily optimizable, which would usually be just learning
simple and static skills. For instance, Figure 1b and Figure 17 demonstrate that DIAYN (Eysenbach
et al., 2019) simply learns to take various postures in place rather than learning locomotion skills
in the Ant environment (Schulman et al., 2016). While these works often employ some feature
engineering or prior domain knowledge to discover more dynamic skills (e.g., discriminating skills
based on x-y coordinates only (Eysenbach et al., 2019; Sharma et al., 2020)), it brings about other
drawbacks: (i) practitioners need to manually specify the dimensions of interest and (ii) the diversity
of skills may be limited to a speciﬁc type (e.g., the x-y prior results in neglecting non-locomotion
behaviors)."
INTRODUCTION,0.03854875283446712,"In order to address this limitation of MI-based approaches, we propose an unsupervised skill discov-
ery method based on a Lipschitz continuity constraint, named Lipschitz-constrained Skill Discovery
(LSD). Speciﬁcally, we argue one reason behind the aforementioned problem is that the MI-based
skill discovery methods can easily maximize the MI objective with only slight differences in the
state space. To resolve this, we propose a novel objective based on a Lipschitz-constrained state rep-
resentation function so that the objective maximization in the latent space always entails an increase
in traveled distances (or variations) in the state space (Equation (6))."
INTRODUCTION,0.04081632653061224,"LSD has several advantages. First, unlike previous MI-based skill discovery objectives, LSD en-
courages learned skills to have larger traveled distances, which leads to more diverse, dynamic, and
far-reaching skills. Second, LSD produces a useful state representation function that can be used to
solve goal-following downstream tasks (i.e., reaching multiple goals in order) in a fully zero-shot
manner (Figure 1c); i.e., with no further training or complex planning. Finally, LSD is easy to
implement in contrast to many existing approaches and introduces no additional hyperparameters."
INTRODUCTION,0.04308390022675737,"Our contributions can be summarized as follows:
• We propose a novel skill discovery objective based on a Lipschitz constraint named LSD, which
maximizes traveled distances in the state space unlike existing MI-based approaches, and thus
learns more diverse and dynamic behaviors with no need for feature engineering."
INTRODUCTION,0.045351473922902494,"• Since LSD aligns the directions of skills and differences in latent state representations, it can
efﬁciently solve goal-following tasks with a wider range of goals in a zero-shot fashion compared
to previous methods, with no burden of additional training or complex planning. Table 1 highlights
other distinctive properties of LSD in comparison to existing approaches."
INTRODUCTION,0.047619047619047616,"• LSD exhibits the best performance in terms of the state space coverage on ﬁve MuJoCo environ-
ments and ﬁnal rewards on seven downstream tasks, including AntMultiGoals (Kim et al., 2021),
HumanoidMultiGoals and FetchPushGoal, compared to previous skill discovery methods such as
DIAYN (Eysenbach et al., 2019), DADS (Sharma et al., 2020) and IBOL (Kim et al., 2021)."
PRELIMINARIES AND RELATED WORK,0.049886621315192746,"2
PRELIMINARIES AND RELATED WORK"
PROBLEM SETTING,0.05215419501133787,"2.1
PROBLEM SETTING"
PROBLEM SETTING,0.05442176870748299,"We consider a Markov decision process (MDP) M = (S, A, p) without external rewards, where
S is a (continuous) state space, A is an action space, and p(st+1|st, at) is a stochastic transition
dynamics function. We represent a skill with a latent variable z ∈Z and a latent-conditioned policy
π(a|s, z). The skill latent space Z can be either discrete or continuous; we use N to denote the
number of skills in the discrete case, and d to denote the dimensionality of the skill latent space in
the continuous case. Given a skill z and a skill policy π(a|s, z), a trajectory τ = (s0, a0, . . . , sT )
is sampled with the following generative process: pπ(τ|z) = p(s0) QT −1
t=0 π(at|st, z)p(st+1|st, at)."
PROBLEM SETTING,0.05668934240362812,Published as a conference paper at ICLR 2022
PROBLEM SETTING,0.05895691609977324,Table 1: Comparison of unsupervised skill discovery methods. Refer to Section 2.2 for citations.
PROBLEM SETTING,0.061224489795918366,"Property
VIC
DIAYN
DADS
VISR
EDL
APS
IBOL
LSD (ours)
Prefer ‘dynamic’ skills








Provide dense reward








Discover continuous skills








Discover discrete skills








Zero-shot goal-following
 *
 *
 †
 *
 *
 *


Properties — “Prefer ‘dynamic’ skills”: whether the algorithm prefers skills beyond simple and static ones.
“Zero-shot goal-following”: whether learned skills can be used for following multiple goals (from an arbitrary
state) without additional training, where † denotes that it still needs planning and * denotes that its skill dis-
criminator may not cope well with unseen goals or initial states."
PROBLEM SETTING,0.06349206349206349,"We use uppercase letters to denote random variables, and h(·) and I(·; ·) to represent the differential
entropy and the mutual information, respectively."
PRIOR WORK ON UNSUPERVISED SKILL DISCOVERY,0.06575963718820861,"2.2
PRIOR WORK ON UNSUPERVISED SKILL DISCOVERY"
PRIOR WORK ON UNSUPERVISED SKILL DISCOVERY,0.06802721088435375,"A number of previous methods maximize I(Z; S) to learn diverse skills. One line of research em-
ploys the identity I(Z; S) = h(Z) −h(Z|S) ≥Ez∼p(z),s∼pπ(s|z)[log q(z|s)] −Ez∼p(z)[log p(z)]
or its variants, where the skill discriminator q(z|s) is a variational approximation of the posterior
p(z|s) (Barber & Agakov, 2003). VIC (Gregor et al., 2016) maximizes the MI between the last states
and skills given the initial state. DIAYN (Eysenbach et al., 2019) optimizes the MI between individ-
ual states and skills. VALOR (Achiam et al., 2018) also takes a similar approach, but considers the
whole trajectories instead of states. VISR (Hansen et al., 2020) models the variational posterior as
the von-Mises Fisher distribution, which results in an inner-product reward form and hence enables
combining with successor features (Barreto et al., 2017). HIDIO (Zhang et al., 2021) examines mul-
tiple variants of the MI identity, and jointly learns skills with a hierarchical controller that maximizes
the task reward. Choi et al. (2021) point out the equivalency between the MI-based objective and
goal-conditioned RL, and show that Spectral Normalization (Miyato et al., 2018) improves the qual-
ity of learned skills. DADS (Sharma et al., 2020) maximizes the opposite direction of the mutual
information identity I(Z; S) = h(S) −h(S|Z) with the skill dynamics model q(st+1|st, z), which
allows zero-shot planning on downstream tasks. However, these methods share a limitation: they
do not always prefer to reach distant states or to learn dynamic skills, as we can maximize I(Z; S)
even with the smallest state variations. One possible way to address this issue is to use heuristics
such as feature engineering; for example, the x-y prior (Sharma et al., 2020) enforces skills to be
discriminated only by their x-y coordinates so that the agent can discover locomotion skills."
PRIOR WORK ON UNSUPERVISED SKILL DISCOVERY,0.07029478458049887,"On the other hand, a couple of methods overcome this limitation by integrating with exploration
techniques. EDL (Campos Cam´u˜nez et al., 2020) ﬁrst maximizes the state entropy h(S) with SMM
exploration (Lee et al., 2019), and then encodes the discovered states into skills via VAE (Kingma &
Welling, 2014). APS (Liu & Abbeel, 2021a) combines VISR (Hansen et al., 2020) with APT (Liu &
Abbeel, 2021b), an exploration method based on k-nearest neighbors. Yet, we empirically conﬁrm
that such a pure exploration signal is insufﬁcient to make large and consistent transitions in states.
IBOL (Kim et al., 2021) takes a hierarchical approach where it ﬁrst pre-trains a low-level policy to
make reaching remote states easier, and subsequently learns a high-level skill policy based on the
information bottleneck framework (Tishby et al., 2000). While IBOL can discover skills reaching
distant states in continuous control environments without locomotion priors (e.g., x-y prior), it still
has some limitations in that (1) IBOL cannot discover discrete skills, (2) it still capitalizes on input
feature engineering in that they exclude the locomotion coordinates from the low-level policy, and
(3) it consists of a two-level hierarchy with several additional hyperparameters, which make the
implementation difﬁcult. On the contrary, our proposed LSD can discover diverse skills in both
discrete and continuous settings without using any feature engineering, and is easy to implement
as it requires no additional hyperparameters or hierarchy. Table 1 overviews the comparison of
properties between different skill discovery methods."
PRIOR WORK ON UNSUPERVISED SKILL DISCOVERY,0.07256235827664399,"3
LIPSCHITZ-CONSTRAINED SKILL DISCOVERY (LSD)"
PRIOR WORK ON UNSUPERVISED SKILL DISCOVERY,0.07482993197278912,"We ﬁrst analyze limitations of existing MI-based methods for unsupervised skill discovery (Sec-
tion 3.1), and then derive our approach for learning continuous skills, Lipschitz-constrained Skill"
PRIOR WORK ON UNSUPERVISED SKILL DISCOVERY,0.07709750566893424,Published as a conference paper at ICLR 2022
PRIOR WORK ON UNSUPERVISED SKILL DISCOVERY,0.07936507936507936,"Discovery (LSD), which encourages the agent to have large traveled distances in the state space
(Section 3.2). We also show how learned skills can be used to solve goal-following tasks in a zero-
shot fashion (Section 3.3), and extend LSD to discovery of discrete skills (Section 3.4)."
LIMITATION OF MI-BASED METHODS,0.08163265306122448,"3.1
LIMITATION OF MI-BASED METHODS"
LIMITATION OF MI-BASED METHODS,0.08390022675736962,"Before deriving our objective for discovery of continuous skills, we review variational MI-based
skill discovery algorithms and discuss why such methods might end up learning only simple and
static skills. The MI objective I(Z; S) with continuous skills can be written with the variational
lower bound as follows (Eysenbach et al., 2019; Choi et al., 2021):"
LIMITATION OF MI-BASED METHODS,0.08616780045351474,"I(Z; S) = −h(Z|S) + h(Z) = Ez∼p(z),s∼pπ(s|z)[log p(z|s) −log p(z)]
(1)"
LIMITATION OF MI-BASED METHODS,0.08843537414965986,"≥Ez,s[log q(z|s)] + (const) = −1"
LIMITATION OF MI-BASED METHODS,0.09070294784580499,"2 Ez,s

∥z −µ(s)∥2
+ (const),
(2)"
LIMITATION OF MI-BASED METHODS,0.09297052154195011,"where we assume that a skill z ∈Rd is sampled from a ﬁxed prior distribution p(z), and q(z|s)
is a variational approximation of p(z|s) (Barber & Agakov, 2003; Mohamed & Rezende, 2015),
parameterized as a normal distribution with unit variance, N(µ(s), I) (Choi et al., 2021). Some
other methods are based on a conditional form of mutual information (Gregor et al., 2016; Sharma
et al., 2020); for instance, the objective of VIC (Gregor et al., 2016) can be written as"
LIMITATION OF MI-BASED METHODS,0.09523809523809523,"I(Z; ST |S0) ≥Ez,τ[log q(z|s0, sT )] + (const) = −1"
LIMITATION OF MI-BASED METHODS,0.09750566893424037,"2 Ez,τ

∥z −µ(s0, sT )∥2
+ (const),
(3)"
LIMITATION OF MI-BASED METHODS,0.09977324263038549,"where we assume that p(z|s0) = p(z) is a ﬁxed prior distribution, and the posterior is chosen as
q(z|s0, sT ) = N(µ(s0, sT ), I) in a continuous skill setting."
LIMITATION OF MI-BASED METHODS,0.10204081632653061,"One issue with Equations (2) and (3) is that these objectives can be fully maximized even with
small differences in states as long as different z’s correspond to even marginally different sT ’s, not
necessarily encouraging more ‘interesting’ skills. This is especially problematic because discovering
skills with such slight or less dynamic state variations is usually a ‘lower-hanging fruit’ than making
dynamic and large differences in the state space (e.g., µ can simply map the angles of Ant’s joints
to z). As a result, continuous DIAYN and DADS discover only posing skills on Ant (Figures 2a
and 17) in the absence of any feature engineering or tricks to elicit more diverse behaviors. We refer
to Appendix H for quantitative demonstrations of this phenomenon on MuJoCo environments."
LIMITATION OF MI-BASED METHODS,0.10430839002267574,"Further decomposition of the MI objective. Before we address this limitation, we decompose
the objective of VIC (Equation (3)) to get further insights that will inspire our new objective in
Section 3.2. Here, we model µ(s0, sT ) with φ(sT ) −φ(s0) to focus on the relative differences
between the initial and ﬁnal states, where φ : S →Z is a learnable state representation function
that maps a state observation into a latent space, which will be the core component of our method.
This choice makes the latent skill z represent a direction or displacement in the latent space induced
by φ. Then, we can rewrite Equation (3) as follows:"
LIMITATION OF MI-BASED METHODS,0.10657596371882086,"Ez,τ [log q(z|s0, sT )] + (const) = −1"
LIMITATION OF MI-BASED METHODS,0.10884353741496598,"2 Ez,τ

∥z −(φ(sT ) −φ(s0))∥2
+ (const)
(4)"
LIMITATION OF MI-BASED METHODS,0.1111111111111111,"= Ez,τ

(φ(sT ) −φ(s0))⊤z
"
LIMITATION OF MI-BASED METHODS,0.11337868480725624,"|
{z
}
1⃝alignment of the direction −1"
LIMITATION OF MI-BASED METHODS,0.11564625850340136,"2 Ez,τ

∥φ(sT ) −φ(s0)∥2"
LIMITATION OF MI-BASED METHODS,0.11791383219954649,"|
{z
}
2⃝implicit regularizer"
LIMITATION OF MI-BASED METHODS,0.12018140589569161,"+ (const),
(5)"
LIMITATION OF MI-BASED METHODS,0.12244897959183673,"where we use the fact that Ez[z⊤z] is a constant as p(z) is a ﬁxed distribution. This decomposition
of the MI lower-bound objective provides an intuitive interpretation: the ﬁrst inner-product term 1⃝
in Equation (5) encourages the direction vector φ(sT )−φ(s0) to be aligned with z, while the second
term 2⃝regularizes the norm of the vector φ(sT ) −φ(s0)."
CONTINUOUS LSD,0.12471655328798185,"3.2
CONTINUOUS LSD"
CONTINUOUS LSD,0.12698412698412698,"The LSD objective. We now propose our new objective that is based on neither a skill discriminator
(Equation (3)) nor mutual information but a Lipschitz-constrained state representation function, in
order to address the limitation that I(Z; S) can be fully optimized with small state differences.
Speciﬁcally, inspired by the decomposition in Equation (5), we suggest using the directional term
1⃝as our objective. However, since this term alone could be trivially optimized by just increasing
the value of φ(sT ) to the inﬁnity regardless of the ﬁnal state sT , we apply the 1-Lipschitz constraint
on the state representation function φ so that maximizing our objective in the latent space can result"
CONTINUOUS LSD,0.1292517006802721,Published as a conference paper at ICLR 2022
CONTINUOUS LSD,0.13151927437641722,in an increase in state differences. This leads to a constrained maximization objective as follows:
CONTINUOUS LSD,0.13378684807256236,"JLSD = Ez,τ

(φ(sT ) −φ(s0))⊤z

s.t.
∀x, y ∈S
∥φ(x) −φ(y)∥≤∥x −y∥,
(6)"
CONTINUOUS LSD,0.1360544217687075,where JLSD is the objective of our proposed Lipschitz-constrained Skill Discovery (LSD).
CONTINUOUS LSD,0.1383219954648526,"The LSD objective encourages the agent to prefer skills with larger traveled distances, unlike previ-
ous MI-based methods, as follows. First, in order to maximize the inner product in Equation (6), the
length of φ(sT ) −φ(s0) should be increased. It then makes its upper bound ∥sT −s0∥increase as
well due to the 1-Lipschitz constraint (i.e., ∥φ(sT ) −φ(s0)∥≤∥sT −s0∥). As a result, it leads to
learning more dynamic skills in terms of state differences."
CONTINUOUS LSD,0.14058956916099774,"Note that LSD’s objective differs from VIC’s in an important way. Equation (3) tries to equate the
value of z and µ(s0, sT ) (i.e., it tries to recover z from its skill discriminator), while the objective of
LSD (Equation (6)) only requires the directions of z and φ(sT ) −φ(s0) to be aligned."
CONTINUOUS LSD,0.14285714285714285,"We also note that our purpose of enforcing the Lipschitz constraint is very different from its common
usages in machine learning. Many works have adopted the Lipschitz continuity to regularize func-
tions for better generalization (Neyshabur et al., 2018; Sokolic et al., 2017), interpretability (Tsipras
et al., 2018) or stability (Choi et al., 2021). On the other hand, we employ it to ensure that maximiza-
tion of the reward entails increased state variations. The Lipschitz constant 1 is chosen empirically
as it can be easily implemented using Spectral Normalization (Miyato et al., 2018)."
CONTINUOUS LSD,0.14512471655328799,"Per-step transition reward. By eliminating the second term in Equation (5), we can further de-
compose the objective using a telescoping sum as"
CONTINUOUS LSD,0.1473922902494331,"JLSD = Ez,τ

(φ(sT ) −φ(s0))⊤z

= Ez,τ"
CONTINUOUS LSD,0.14965986394557823,"""T −1
X"
CONTINUOUS LSD,0.15192743764172337,"t=0
(φ(st+1) −φ(st))⊤z # .
(7)"
CONTINUOUS LSD,0.15419501133786848,"This formulation enables the optimization of JLSD with respect to the policy π (i.e., reinforcement
learning steps) with a per-step transition reward given as:"
CONTINUOUS LSD,0.1564625850340136,"rLSD
z
(st, at, st+1) = (φ(st+1) −φ(st))⊤z.
(8)"
CONTINUOUS LSD,0.15873015873015872,"Compared to the per-trajectory reward in Equation (3) (Gregor et al., 2016), this can be optimized
more easily and stably with off-the-shelf RL algorithms such as SAC (Haarnoja et al., 2018a)."
CONTINUOUS LSD,0.16099773242630386,"Connections to previous methods. The per-step reward function of Equation (8) is closely related
to continuous DIAYN (Eysenbach et al., 2019; Choi et al., 2021) and VISR (Hansen et al., 2020):"
CONTINUOUS LSD,0.16326530612244897,"rDIAYN
z
(st, at, st+1) = log qDIAYN(z|st+1) ∝−∥φ(st+1) −z∥2 + (const)
(9)"
CONTINUOUS LSD,0.1655328798185941,"rVISR
˜z
(st, at, st+1) = log qVISR(˜z|st) ∝˜φ(st)⊤˜z + (const)
(10)"
CONTINUOUS LSD,0.16780045351473924,"rLSD
z
(st, at, st+1) = (φ(st+1) −φ(st))⊤z,
(11)"
CONTINUOUS LSD,0.17006802721088435,"where ˜z and ˜φ(st) in VISR are the normalized vectors of unit length (i.e., z/∥z∥and φ(st)/∥φ(st)∥),
respectively. We assume that qDIAYN is parameterized as a normal distribution with unit variance,
and qVISR as a von-Mises Fisher (vMF) distribution with a scale parameter of 1 (Hansen et al., 2020)."
CONTINUOUS LSD,0.17233560090702948,"While it appears that there are some similarities among Equation (9)–(11), LSD’s reward function
is fundamentally different from the others in that it optimizes neither a log-probability nor mutual
information, and thus only LSD seeks for distant states. For instance, VISR (Equation (10)) has the
most similar form as it also uses an inner product, but φ(st+1) −φ(st) in rLSD
z
does not need to be
a unit vector unlike VISR optimizing the vMF distribution. Instead, LSD increases the difference of
φ to encourage the agent to reach more distant states. In addition, while Choi et al. (2021) also use
Spectral Normalization, our objective differs from theirs as we do not optimize I(Z; S). We present
further discussion and an empirical comparison of reward functions in Appendix D."
CONTINUOUS LSD,0.1746031746031746,"Implementation. In order to maximize the LSD objective (Equation (8)), we alternately train π with
SAC (Haarnoja et al., 2018a) and φ with stochastic gradient descent. We provide the full procedure
for LSD in Appendix C. Note that LSD has the same components and hyperparameters as DIAYN,
and is thus easy to implement, especially as opposed to IBOL (Kim et al., 2021), a state-of-the-
art skill discovery method on MuJoCo environments that requires a two-level hierarchy with many
moving components and hyperparameters."
CONTINUOUS LSD,0.17687074829931973,Published as a conference paper at ICLR 2022
ZERO-SHOT SKILL SELECTION,0.17913832199546487,"3.3
ZERO-SHOT SKILL SELECTION"
ZERO-SHOT SKILL SELECTION,0.18140589569160998,"Another advantage of the LSD objective JLSD (Equation (6)) is that the learned state representation
φ(s) allows solving goal-following downstream tasks in a zero-shot manner (i.e., without any fur-
ther training or complex planning), as z is aligned with the direction in the representation space.
Although it is also possible for DIAYN-like methods to reach a single goal from the initial state
in a zero-shot manner (Choi et al., 2021), LSD is able to reach a goal from an arbitrary state or
follow multiple goals thanks to the directional alignment without any additional modiﬁcations to the
method. Speciﬁcally, if we want to make a transition from the current state s ∈S to a target state
g ∈S, we can simply repeat selecting the following z until reaching the goal:"
ZERO-SHOT SKILL SELECTION,0.1836734693877551,"z = α(φ(g) −φ(s)) / ∥φ(g) −φ(s)∥,
(12)"
ZERO-SHOT SKILL SELECTION,0.18594104308390022,"and executing the latent-conditioned policy π(a|s, z) to choose an action. Here, α is a hyperpa-
rameter that controls the norm of z, and we ﬁnd that α ≈Ez∼p(z)[∥z∥] empirically works the best
(e.g., α = 2−1"
ZERO-SHOT SKILL SELECTION,0.18820861678004536,"2 Γ(1/2) ≈1.25 for d = 2). As will be shown in Section 4.3, this zero-shot scheme
provides a convenient way to immediately achieve strong performance on many goal-following
downstream tasks. Note that, in such tasks, this scheme is more efﬁcient than the zero-shot planning
of DADS with its learned skill dynamics model (Sharma et al., 2020); LSD does not need to learn
models or require any planning steps in the representation space."
DISCRETE LSD,0.19047619047619047,"3.4
DISCRETE LSD"
DISCRETE LSD,0.1927437641723356,"Continuous LSD can be extended to discovery of discrete skills. One might be tempted to use
the one-hot encoding for z with the same objective as continuous LSD (Equation (6)), as in prior
methods (Eysenbach et al., 2019; Sharma et al., 2020). For discrete LSD, however, we cannot simply
use the standard one-hot encoding. This is because an encoding that has a non-zero mean could make
all the skills collapse into a single behavior in LSD. For example, without loss of generality, suppose
the ﬁrst dimension of the mean of the N encoding vectors is c > 0. Then, if the agent ﬁnds a ﬁnal
state sT that makes ∥sT −s0∥fairly large, it can simply learn the skill policy to reach sT regardless
of z so that the agent can always receive a reward of c · ∥sT −s0∥on average, by setting, e.g.,
φ(sT ) = [∥sT −s0∥, 0, . . . , 0]⊤and φ(s0) = [0, 0, . . . , 0]. In other words, the agent can easily
exploit the reward function without learning any diverse set of skills."
DISCRETE LSD,0.19501133786848074,"To resolve this issue, we propose using a zero-centered one-hot vectors as follows:"
DISCRETE LSD,0.19727891156462585,"Z ∼unif{z1, z2, . . . , zN}
where [zi]j ="
DISCRETE LSD,0.19954648526077098,"(
1
if i = j
−
1
N−1
otherwise for i, j ∈{1, . . . , N},
(13)"
DISCRETE LSD,0.2018140589569161,"where N is the number of skills, [·]i denotes the i-th element of the vector, and unif{. . .} denotes
the uniform distribution over a set. Plugging into Equation (8), the reward for the k-th skill becomes"
DISCRETE LSD,0.20408163265306123,"rLSD
k
(st, at, st+1) = [φ(st+1) −φ(st)]k −
1
N −1 X"
DISCRETE LSD,0.20634920634920634,"i∈{1,2,...,N}\{k}
[φ(st+1) −φ(st)]i.
(14)"
DISCRETE LSD,0.20861678004535147,"This formulation provides an intuitive interpretation: it enforces the k-th element of φ(s) to be the
only indicator for the k-th skill in a contrastive manner. We note that Equation (14) consistently
pushes the difference in φ to be as large as possible, unlike prior approaches using the softmax
function (Eysenbach et al., 2019; Sharma et al., 2020). Thanks to the Lipschitz constraint on φ(s),
this makes the agent learn diverse and dynamic behaviors as in the continuous case."
EXPERIMENTS,0.2108843537414966,"4
EXPERIMENTS"
EXPERIMENTS,0.21315192743764172,"We compare LSD with multiple previous skill discovery methods on various MuJoCo robotic loco-
motion and manipulation environments (Todorov et al., 2012; Schulman et al., 2016; Plappert et al.,
2018) from OpenAI Gym (Brockman et al., 2016). We aim to answer the following questions: (i)
How well does LSD discover skills on high-dimensional continuous control problems, compared to
previous approaches? (ii) Can the discovered skills be used for solving goal-following tasks in a
zero-shot fashion? In Appendix, we present an ablation study for demonstrating the importance of
LSD’s components (Appendix D) and analyses of learned skills (Appendix E)."
EXPERIMENTS,0.21541950113378686,"Experimental setup. We make evaluations on three MuJoCo robotic locomotion environments
(Ant, Humanoid, HalfCheetah) and three robotic manipulation environments (FetchPush, FetchSlide
and FetchPickAndPlace). Following the practice in previous works (Sharma et al., 2020; Kim et al.,"
EXPERIMENTS,0.21768707482993196,Published as a conference paper at ICLR 2022
EXPERIMENTS,0.2199546485260771,"LSD (ours)
IBOL
DIAYN
DIAYN w/ SN
DADS"
EXPERIMENTS,0.2222222222222222,"VISR
APS
DIAYN (d=5)
DADS (d=5)
APS (d=5)"
EXPERIMENTS,0.22448979591836735,"IBOL-O
DADS-XYO"
EXPERIMENTS,0.22675736961451248,DIAYN-XYO
EXPERIMENTS,0.2290249433106576,"(w/ feat. engineering)
(w/ feat. engineering)"
EXPERIMENTS,0.23129251700680273,"(w/ feat. engineering)
(a) Ant"
EXPERIMENTS,0.23356009070294784,"IBOL
DADS (d=5)
DIAYN (d=5)
IBOL-O
DADS-XYO
(w/ feat. engineering)
(w/ feat. engineering)
LSD (ours)
DIAYN-XYO"
EXPERIMENTS,0.23582766439909297,"(w/ feat. engineering)
(b) Humanoid
Figure 2: Visualization of 2-D (or 5-D) continuous skills discovered by various methods. We plot
the x-y trajectories of the agent. Each color represents the direction of the skill latent variable z.
See Figure 13 for a zoomed-in version."
EXPERIMENTS,0.23809523809523808,"2021), we mainly compare skill discovery methods on Ant, but we additionally adopt Humanoid
for quantitative comparisons with competitive baselines, since it is often considered the most chal-
lenging environment in the MuJoCo benchmark. On the manipulation environments, we compare
LSD to baselines combined with MUSIC-u (Zhao et al., 2021), an intrinsic reward that facilitates the
agent to have control on target objects. For continuous skills, unless otherwise mentioned, we use
two-dimensional skill latents (d = 2) sampled from the standard normal distribution, following Kim
et al. (2021). On the locomotion environments, we normalize the state dimensions to ensure that the
different scales of the dimensions have less effect on skill discovery. We repeat all the experiments
eight times and denote their 95% conﬁdence intervals with shaded areas or error bars. We refer to
Appendix I for the full experimental details."
EXPERIMENTS,0.24036281179138322,"Baseline methods. We make comparisons with six skill discovery algorithms: DIAYN (Eysenbach
et al., 2019), DADS (Sharma et al., 2020), VISR (Hansen et al., 2020), EDL (Campos Cam´u˜nez
et al., 2020), APS (Liu & Abbeel, 2021a) and IBOL (Kim et al., 2021)."
EXPERIMENTS,0.24263038548752835,"Additionally, we consider two variants of skill discovery methods: the x-y prior (denoted with the
sufﬁx ‘-XY’) and x-y omission (with ‘-O’) (Sharma et al., 2020; Kim et al., 2021). The x-y prior
variant restricts the input to the skill discriminator or the dynamics model only to the positional
information, enforcing the agent to discover locomotion skills. The x-y omission variant excludes
the locomotion coordinates from the input to policies or dynamics models (but not to discriminators)
to impose an inductive bias that the agent can choose actions regardless of its location. We denote
the variants that have both modiﬁcations with the sufﬁx ‘-XYO’. While previous methods mostly
require such feature engineering or tricks to discover skills that move consistently or have large
variations in the state space, we will demonstrate that LSD can discover diverse skills on MuJoCo
locomotion environments without using hand-engineered features."
SKILLS LEARNED WITH CONTINUOUS LSD,0.24489795918367346,"4.1
SKILLS LEARNED WITH CONTINUOUS LSD"
SKILLS LEARNED WITH CONTINUOUS LSD,0.2471655328798186,"Visualization of skills.
We train LSD and baselines on the Ant environment to learn two-
dimensional continuous skills (d = 2). Figure 2a visualizes the learned skills as trajectories of
the Ant agent on the x-y plane. LSD discovers skills that move far from the initial location in al-
most all possible directions, while the other methods except IBOL fail to discover such locomotion
primitives without feature engineering (i.e., x-y prior) even with an increased skill dimensionality
(d = 5). Instead, they simply learn to take static postures rather than to move; such a phenomenon
is also reported in Gu et al. (2021). This is because their MI objectives do not particularly induce
the agent to increase state variations. On the other hand, LSD discovers skills reaching even farther
than those of the baselines using feature engineering (IBOL-O, DADS-XYO and DIAYN-XYO)."
SKILLS LEARNED WITH CONTINUOUS LSD,0.2494331065759637,"Figure 2b demonstrates the results on the Humanoid environment. As in Ant, LSD learns diverse
skills walking or running consistently in various directions, while skills discovered by other methods"
SKILLS LEARNED WITH CONTINUOUS LSD,0.25170068027210885,Published as a conference paper at ICLR 2022 100 2500 5000 7500 LSD
SKILLS LEARNED WITH CONTINUOUS LSD,0.25396825396825395,IBOL-O*
SKILLS LEARNED WITH CONTINUOUS LSD,0.2562358276643991,DADS-XYO*
SKILLS LEARNED WITH CONTINUOUS LSD,0.2585034013605442,DIAYN-XYO*
SKILLS LEARNED WITH CONTINUOUS LSD,0.26077097505668934,EDL (E stage) IBOL
SKILLS LEARNED WITH CONTINUOUS LSD,0.26303854875283444,DADS (d=5)
SKILLS LEARNED WITH CONTINUOUS LSD,0.2653061224489796,DIAYN (d=5)
SKILLS LEARNED WITH CONTINUOUS LSD,0.2675736961451247,"APS (d=5) DADS DIAYN APS VISR 0
50"
SKILLS LEARNED WITH CONTINUOUS LSD,0.2698412698412698,State space coverage
SKILLS LEARNED WITH CONTINUOUS LSD,0.272108843537415,(a) Ant 100 2000 4000 LSD
SKILLS LEARNED WITH CONTINUOUS LSD,0.2743764172335601,IBOL-O*
SKILLS LEARNED WITH CONTINUOUS LSD,0.2766439909297052,DADS-XYO*
SKILLS LEARNED WITH CONTINUOUS LSD,0.2789115646258503,DIAYN-XYO*
SKILLS LEARNED WITH CONTINUOUS LSD,0.2811791383219955,EDL (E stage) IBOL
SKILLS LEARNED WITH CONTINUOUS LSD,0.2834467120181406,DADS (d=5)
SKILLS LEARNED WITH CONTINUOUS LSD,0.2857142857142857,"DIAYN (d=5) 0
50"
SKILLS LEARNED WITH CONTINUOUS LSD,0.28798185941043086,State space coverage
SKILLS LEARNED WITH CONTINUOUS LSD,0.29024943310657597,"(b) Humanoid
Figure 3: Plots of state space coverage. Asterisks (*) denote the methods with feature engineering."
SKILLS LEARNED WITH CONTINUOUS LSD,0.2925170068027211,"HalfCheetah (N = 8)
Ant (N = 16)
Humanoid (N = 16) … … …"
SKILLS LEARNED WITH CONTINUOUS LSD,0.2947845804988662,"Figure 4: Qualitative results of discrete LSD (Section 4.2). We visualize each skill’s trajectories on
the x axis (HalfCheetah) or the x-y plane (Ant and Humanoid). See Appendix J for more results."
SKILLS LEARNED WITH CONTINUOUS LSD,0.29705215419501135,"0
50K
100K
150K
# episodes 0 2 4 6"
SKILLS LEARNED WITH CONTINUOUS LSD,0.29931972789115646,Reward
SKILLS LEARNED WITH CONTINUOUS LSD,0.30158730158730157,(a) AntGoal
SKILLS LEARNED WITH CONTINUOUS LSD,0.30385487528344673,"0
50K
100K
150K
# episodes 1 2 3"
SKILLS LEARNED WITH CONTINUOUS LSD,0.30612244897959184,(b) AntMultiGoals
SKILLS LEARNED WITH CONTINUOUS LSD,0.30839002267573695,"0
50K
100K
150K
# episodes 0 2 4 6 8"
SKILLS LEARNED WITH CONTINUOUS LSD,0.31065759637188206,(c) HumanoidGoal
SKILLS LEARNED WITH CONTINUOUS LSD,0.3129251700680272,"0
50K
100K
150K
# episodes 1 2 3 4"
SKILLS LEARNED WITH CONTINUOUS LSD,0.31519274376417233,"LSD (Zero-shot)
LSD
DIAYN-XYO (w/ feat. engineering)
DADS-XYO (w/ feat. engineering)
IBOL-O (w/ feat. engineering)
DIAYN (d=5)
DADS (d=5)
IBOL
SAC"
SKILLS LEARNED WITH CONTINUOUS LSD,0.31746031746031744,(d) HumanoidMultiGoals
SKILLS LEARNED WITH CONTINUOUS LSD,0.3197278911564626,Figure 5: Performance on downstream tasks after skill discovery (Section 4.3).
SKILLS LEARNED WITH CONTINUOUS LSD,0.3219954648526077,"are limited in terms of the state space coverage or the variety of directions. We provide the videos
of skills discovered by LSD at https://shpark.me/projects/lsd/."
SKILLS LEARNED WITH CONTINUOUS LSD,0.3242630385487528,"Quantitative evaluation. For numerical comparison, we measure the state space coverage (Kim
et al., 2021) of each skill discovery method on Ant and Humanoid. The state space coverage is
measured by the number of occupied 1 × 1 bins on the x-y plane from 200 randomly sampled
trajectories, averaged over eight runs. For EDL, we report the state space coverage of its SMM
exploration phase (Lee et al., 2019). Figure 3 shows that on both environments, LSD outperforms
all the baselines even including those with feature engineering."
SKILLS LEARNED WITH DISCRETE LSD,0.32653061224489793,"4.2
SKILLS LEARNED WITH DISCRETE LSD"
SKILLS LEARNED WITH DISCRETE LSD,0.3287981859410431,"We train discrete LSD on Ant, HalfCheetah and Humanoid with N = 6, 8, 16, where N is the
number of skills. While continuous LSD mainly discovers locomotion skills, we observe that dis-
crete LSD learns more diverse skills thanks to its contrastive scheme (Figure 4, Appendix J). On
Ant, discrete LSD discovers a skill set consisting of ﬁve locomotion skills, six rotation skills, three
posing skills and two ﬂipping skills. On HalfCheetah, the agent learns to run forward and backward
in multiple postures, to roll forward and backward, and to take different poses. Finally, Humanoid
learns to run or move in multiple directions and speeds with unique gaits. We highly recommend the
reader to check the videos available on our project page. We refer to Appendix G.1 for quantitative
evaluations. To the best of our knowledge, LSD is the only method that can discover such diverse
and dynamic behaviors (i.e., having large traveled distances in many of the state dimensions) within
a single set of skills in the absence of feature engineering."
COMPARISON ON DOWNSTREAM TASKS,0.3310657596371882,"4.3
COMPARISON ON DOWNSTREAM TASKS"
COMPARISON ON DOWNSTREAM TASKS,0.3333333333333333,"As done in Eysenbach et al. (2019); Sharma et al. (2020); Kim et al. (2021), we make comparisons
on downstream goal-following tasks to assess how well skills learned by LSD can be employed for
solving tasks in a hierarchical manner, where we evaluate our approach not only on AntGoal and
AntMultiGoals (Eysenbach et al., 2019; Sharma et al., 2020; Kim et al., 2021) but also on the more
challenging tasks: HumanoidGoal and HumanoidMultiGoals. In the ‘-Goal’ tasks, the agent should"
COMPARISON ON DOWNSTREAM TASKS,0.3356009070294785,Published as a conference paper at ICLR 2022
COMPARISON ON DOWNSTREAM TASKS,0.3378684807256236,"LSD (ours)
DADS+MUSIC-u
DADS
DIAYN+MUSIC-u
DIAYN"
COMPARISON ON DOWNSTREAM TASKS,0.3401360544217687,FetchPickAndPlace
COMPARISON ON DOWNSTREAM TASKS,0.3424036281179138,FetchSlide
COMPARISON ON DOWNSTREAM TASKS,0.34467120181405897,FetchPush
COMPARISON ON DOWNSTREAM TASKS,0.3469387755102041,"(a) Visualization of trajectories of the target object on the x-y
plane (i.e., the table) in three Fetch manipulation environments.
Each color represents the direction of the skill latent variable z."
COMPARISON ON DOWNSTREAM TASKS,0.3492063492063492,"FetchPush
FetchSlide
FetchPickAndPlace"
COMPARISON ON DOWNSTREAM TASKS,0.35147392290249435,(b) State space coverage.
COMPARISON ON DOWNSTREAM TASKS,0.35374149659863946,"FetchPushGoal
FetchSlideGoal
FetchPickAndPlaceGoal
(c) Average reward on downstream tasks."
COMPARISON ON DOWNSTREAM TASKS,0.35600907029478457,Figure 6: Comparisons on the Fetch robotic manipulation environments (Section 4.4).
COMPARISON ON DOWNSTREAM TASKS,0.35827664399092973,"reach a uniformly sampled random goal on the x-y plane, while in the ‘-MultiGoals’ tasks, the agent
should navigate through multiple randomly sampled goals in order. The agent is rewarded only
when it reaches a goal. We refer to Appendix I for the full details of the tasks."
COMPARISON ON DOWNSTREAM TASKS,0.36054421768707484,"We ﬁrst train each skill discovery method with continuous skills (without rewards), and then train a
hierarchical meta-controller on top of the learned skill policy (kept frozen) with the task reward. The
meta-controller observes the target goal concatenated to the state observation. At every K-th step,
the controller selects a skill z ∈[−2, 2]d to be performed for the next K steps, and the chosen skill
is executed by the skill policy for the K steps. We also examine zero-shot skill selection of LSD,
denoted ‘LSD (Zero-shot)’, where the agent chooses z at every step according to Equation (12)."
COMPARISON ON DOWNSTREAM TASKS,0.36281179138321995,"Results. Figure 5 shows the performance of each algorithm evaluated on the four downstream tasks.
LSD demonstrates the highest reward in all of the environments, outperforming even the baselines
with feature engineering. On top of that, in some environments such as AntMultiGoals, LSD’s zero-
shot skill selection performs the best, while still exhibiting strong performance on the other tasks.
From these results, we show that LSD is capable of solving downstream goal-following tasks very
efﬁciently with no further training or complex planning procedures."
EXPERIMENTS ON ROBOTIC MANIPULATION ENVIRONMENTS,0.36507936507936506,"4.4
EXPERIMENTS ON ROBOTIC MANIPULATION ENVIRONMENTS"
EXPERIMENTS ON ROBOTIC MANIPULATION ENVIRONMENTS,0.3673469387755102,"In order to demonstrate that LSD can also discover useful skills in environments other than locomo-
tion tasks, we make another evaluation on three Fetch robotic manipulation environments (Plappert
et al., 2018). We compare LSD with other skill discovery methods combined with MUSIC-u (Zhao
et al., 2021), an intrinsic reward that maximizes the mutual information I(Sa; Ss) between the agent
state Sa and the surrounding state Ss. For a fair comparison with MUSIC, we make use of the same
prior knowledge for skill discovery methods including LSD to make them focus only on the sur-
rounding states (Zhao et al., 2021), which correspond to the target object in our experiments."
EXPERIMENTS ON ROBOTIC MANIPULATION ENVIRONMENTS,0.36961451247165533,"Results. Figure 6a visualizes the target object’s trajectories of 2-D continuous skills learned by each
algorithm. They suggest that LSD can control the target object in the most diverse directions. No-
tably, in FetchPickAndPlace, LSD learns to pick the target object in multiple directions without any
task reward or intrinsic motivation like MUSIC-u. Figures 6b and 6c present quantitative evaluations
on the Fetch environments. As in Ant and Humanoid, LSD exhibits the best state space coverage
(measured with 0.1 × 0.1-sized bins) in all the environments. Also, LSD and LSD (Zero-shot)
outperform the baselines by large margins on the three downstream tasks."
CONCLUSION,0.37188208616780044,"5
CONCLUSION"
CONCLUSION,0.3741496598639456,"We presented LSD as an unsupervised skill discovery method based on a Lipschitz constraint. We
ﬁrst pointed out the limitation of previous MI-based skill discovery objectives that they are likely
to prefer static skills with limited state variations, and resolved this by proposing a new objective
based on a Lipschitz constraint. It resulted in learning more dynamic skills and a state represen-
tation function that enables zero-shot skill selection. Through multiple quantitative and qualitative
experiments on robotic manipulation and complex locomotion environments, we showed that LSD
outperforms previous skill discovery methods in terms of the diversity of skills, state space coverage
and performance on downstream tasks. Finally, we refer the readers to Appendix A for a discussion
of limitations and future directions."
CONCLUSION,0.3764172335600907,Published as a conference paper at ICLR 2022
CONCLUSION,0.3786848072562358,ACKNOWLEDGEMENTS
CONCLUSION,0.38095238095238093,"We thank the anonymous reviewers for their helpful comments. This work was supported by Sam-
sung Advanced Institute of Technology, Brain Research Program by National Research Foundation
of Korea (NRF) (2017M3C7A1047860), Institute of Information & communications Technology
Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (No. 2019-0-01082,
SW StarLab), Institute of Information & communications Technology Planning & Evaluation (IITP)
grant funded by the Korea government (MSIT) (No. 2021-0-01343, Artiﬁcial Intelligence Graduate
School Program (Seoul National University)) and NSF CAREER IIS-1453651. J.C. was partly sup-
ported by Korea Foundation for Advanced Studies. J.K. was supported by Google PhD Fellowship.
Gunhee Kim is the corresponding author."
REPRODUCIBILITY STATEMENT,0.3832199546485261,REPRODUCIBILITY STATEMENT
REPRODUCIBILITY STATEMENT,0.3854875283446712,"We make our implementation publicly available in the repository at https://vision.snu.
ac.kr/projects/lsd/ and provide the full implementation details in Appendix I."
REFERENCES,0.3877551020408163,REFERENCES
REFERENCES,0.3900226757369615,"Joshua Achiam, Harrison Edwards, Dario Amodei, and Pieter Abbeel. Variational option discovery
algorithms. ArXiv, abs/1807.10299, 2018."
REFERENCES,0.3922902494331066,"Marcin Andrychowicz, Bowen Baker, Maciek Chociej, R. J´ozefowicz, Bob McGrew, Jakub W.
Pachocki, Arthur Petron, Matthias Plappert, Glenn Powell, Alex Ray, Jonas Schneider, S. Sidor,
Joshua Tobin, P. Welinder, Lilian Weng, and Wojciech Zaremba. Learning dexterous in-hand
manipulation. The International Journal of Robotics Research, 39:20 – 3, 2020."
REFERENCES,0.3945578231292517,"Adri`a Puigdom`enech Badia, Bilal Piot, Steven Kapturowski, P. Sprechmann, Alex Vitvitskyi, Daniel
Guo, and C. Blundell. Agent57: Outperforming the atari human benchmark. In ICML, 2020."
REFERENCES,0.3968253968253968,"D. Barber and F. Agakov. The IM algorithm: a variational approach to information maximization.
In NeurIPS, 2003."
REFERENCES,0.39909297052154197,"Andr´e Barreto, Will Dabney, R´emi Munos, Jonathan J Hunt, Tom Schaul, Hado Van Hasselt, and
David Silver. Successor features for transfer in reinforcement learning. In NeurIPS, 2017."
REFERENCES,0.4013605442176871,"G. Brockman, Vicki Cheung, Ludwig Pettersson, J. Schneider, John Schulman, Jie Tang, and
W. Zaremba. OpenAI Gym. ArXiv, abs/1606.01540, 2016."
REFERENCES,0.4036281179138322,"V´ıctor Campos Cam´u˜nez, Alex Trott, Caiming Xiong, Richard Socher, Xavier Gir´o Nieto, and Jordi
Torres Vi˜nals. Explore, discover and learn: unsupervised discovery of state-covering skills. In
ICML, 2020."
REFERENCES,0.40589569160997735,"Jongwook Choi, Archit Sharma, Honglak Lee, Sergey Levine, and Shixiang Gu. Variational empow-
erment as representation learning for goal-conditioned reinforcement learning. In ICML, 2021."
REFERENCES,0.40816326530612246,"Peter Dayan. Improving generalization for temporal difference learning: The successor representa-
tion. Neural Computation, 5:613–624, 1993."
REFERENCES,0.41043083900226757,"Gabriel Dulac-Arnold, Daniel Mankowitz, and Todd Hester. Challenges of real-world reinforcement
learning. ArXiv, abs/1904.12901, 2019."
REFERENCES,0.4126984126984127,"Benjamin Eysenbach, Abhishek Gupta, Julian Ibarz, and Sergey Levine. Diversity is all you need:
Learning skills without a reward function. In ICLR, 2019."
REFERENCES,0.41496598639455784,"The garage contributors.
Garage: A toolkit for reproducible reinforcement learning research.
https://github.com/rlworkgroup/garage, 2019."
REFERENCES,0.41723356009070295,"Karol Gregor, Danilo Jimenez Rezende, and Daan Wierstra. Variational intrinsic control. ArXiv,
abs/1611.07507, 2016."
REFERENCES,0.41950113378684806,Published as a conference paper at ICLR 2022
REFERENCES,0.4217687074829932,"Shixiang Gu, Ethan Holly, T. Lillicrap, and S. Levine. Deep reinforcement learning for robotic
manipulation with asynchronous off-policy updates. In ICRA, 2017."
REFERENCES,0.42403628117913833,"Shixiang Shane Gu, Manfred Diaz, Daniel C. Freeman, Hiroki Furuta, Seyed Kamyar Seyed
Ghasemipour, Anton Raichuk, Byron David, Erik Frey, Erwin Coumans, and Olivier Bachem.
Braxlines: Fast and interactive toolkit for rl-driven behavior engineering beyond reward maxi-
mization. ArXiv, abs/2110.04686, 2021."
REFERENCES,0.42630385487528344,"Tuomas Haarnoja, Aurick Zhou, Pieter Abbeel, and Sergey Levine. Soft actor-critic: Off-policy
maximum entropy deep reinforcement learning with a stochastic actor. In ICML, 2018a."
REFERENCES,0.42857142857142855,"Tuomas Haarnoja, Aurick Zhou, Kristian Hartikainen, G. Tucker, Sehoon Ha, Jie Tan, Vikash Ku-
mar, Henry Zhu, Abhishek Gupta, Pieter Abbeel, and Sergey Levine. Soft actor-critic algorithms
and applications. ArXiv, abs/1812.05905, 2018b."
REFERENCES,0.4308390022675737,"Dylan Hadﬁeld-Menell, Smitha Milli, Pieter Abbeel, Stuart Russell, and Anca Dragan. Inverse
reward design. In NeurIPS, 2017."
REFERENCES,0.4331065759637188,"S. Hansen, Will Dabney, Andr´e Barreto, T. Wiele, David Warde-Farley, and V. Mnih. Fast task
inference with variational intrinsic successor features. In ICLR, 2020."
REFERENCES,0.43537414965986393,"Jaekyeom Kim, Seohong Park, and Gunhee Kim. Unsupervised skill discovery with bottleneck
option learning. In ICML, 2021."
REFERENCES,0.4376417233560091,"Diederik P Kingma and Max Welling. Auto-encoding variational bayes. In ICLR, 2014."
REFERENCES,0.4399092970521542,"Lisa Lee, Benjamin Eysenbach, Emilio Parisotto, Eric Xing, Sergey Levine, and Ruslan Salakhut-
dinov. Efﬁcient exploration via state marginal matching. ArXiv, abs/1906.05274, 2019."
REFERENCES,0.4421768707482993,"Youngwoon Lee, Jingyun Yang, and Joseph J. Lim. Learning to coordinate manipulation skills via
skill behavior diversiﬁcation. In ICLR, 2020."
REFERENCES,0.4444444444444444,"Hao Liu and Pieter Abbeel. APS: Active pretraining with successor features. In ICML, 2021a."
REFERENCES,0.4467120181405896,"Hao Liu and Pieter Abbeel. Behavior from the void: Unsupervised active pre-training. ArXiv,
abs/2103.04551, 2021b."
REFERENCES,0.4489795918367347,"Marlos C. Machado, Marc G. Bellemare, and Michael Bowling. A laplacian framework for option
discovery in reinforcement learning. ArXiv, abs/1703.00956, 2017."
REFERENCES,0.4512471655328798,"Marlos C. Machado, C. Rosenbaum, Xiaoxiao Guo, Miao Liu, G. Tesauro, and Murray Campbell.
Eigenoption discovery through the deep successor representation. ArXiv, abs/1710.11089, 2018."
REFERENCES,0.45351473922902497,"Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normalization
for generative adversarial networks. In ICLR, 2018."
REFERENCES,0.4557823129251701,"Shakir Mohamed and Danilo J. Rezende. Variational information maximisation for intrinsically
motivated reinforcement learning. In NeurIPS, 2015."
REFERENCES,0.4580498866213152,"Behnam Neyshabur, Srinadh Bhojanapalli, David A. McAllester, and Nathan Srebro.
A PAC-
Bayesian approach to spectrally-normalized margin bounds for neural networks. In ICLR, 2018."
REFERENCES,0.4603174603174603,"Matthias Plappert, Marcin Andrychowicz, Alex Ray, Bob McGrew, Bowen Baker, Glenn Powell,
Jonas Schneider, Josh Tobin, Maciek Chociej, Peter Welinder, Vikash Kumar, and Wojciech
Zaremba. Multi-goal reinforcement learning: Challenging robotics environments and request
for research. ArXiv, abs/1802.09464, 2018."
REFERENCES,0.46258503401360546,"A. H. Qureshi, Jacob J. Johnson, Yuzhe Qin, Taylor Henderson, Byron Boots, and Michael C. Yip.
Composing task-agnostic policies with deep reinforcement learning. In ICLR, 2020."
REFERENCES,0.46485260770975056,"Julian Schrittwieser, Ioannis Antonoglou, T. Hubert, K. Simonyan, L. Sifre, Simon Schmitt,
A. Guez, Edward Lockhart, Demis Hassabis, T. Graepel, T. Lillicrap, and D. Silver. Master-
ing Atari, Go, Chess and Shogi by planning with a learned model. Nature, 588 7839:604–609,
2020."
REFERENCES,0.4671201814058957,Published as a conference paper at ICLR 2022
REFERENCES,0.46938775510204084,"John Schulman, Philipp Moritz, Sergey Levine, Michael Jordan, and Pieter Abbeel.
High-
dimensional continuous control using generalized advantage estimation. In ICLR, 2016."
REFERENCES,0.47165532879818595,"John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal policy
optimization algorithms. ArXiv, abs/1707.06347, 2017."
REFERENCES,0.47392290249433106,"Archit Sharma, Shixiang Gu, Sergey Levine, Vikash Kumar, and Karol Hausman. Dynamics-aware
unsupervised discovery of skills. In ICLR, 2020."
REFERENCES,0.47619047619047616,"Jure Sokolic, Raja Giryes, Guillermo Sapiro, and Miguel R. D. Rodrigues. Robust large margin
deep neural networks. IEEE Transactions on Signal Processing, 65:4265–4280, 2017."
REFERENCES,0.47845804988662133,"Richard S. Sutton and Andrew G. Barto. Reinforcement learning: An introduction. IEEE Transac-
tions on Neural Networks, 16:285–286, 2005."
REFERENCES,0.48072562358276644,"Naftali Tishby, Fernando C. Pereira, and William Bialek. The information bottleneck method. ArXiv,
physics/0004057, 2000."
REFERENCES,0.48299319727891155,"Emanuel Todorov, Tom Erez, and Yuval Tassa. Mujoco: A physics engine for model-based control.
In IEEE/RSJ International Conference on Intelligent Robots and Systems, pp. 5026–5033. IEEE,
2012."
REFERENCES,0.4852607709750567,"D. Tsipras, Shibani Santurkar, Logan Engstrom, Alexander Turner, and A. Madry. There is no free
lunch in adversarial robustness (but there are unexpected beneﬁts). ArXiv, abs/1805.12152, 2018."
REFERENCES,0.4875283446712018,"Jesse Zhang, Haonan Yu, and Wei Xu. Hierarchical reinforcement learning by discovering intrinsic
options. In ICLR, 2021."
REFERENCES,0.4897959183673469,"Rui Zhao, Yang Gao, Pieter Abbeel, Volker Tresp, and Wei Xu. Mutual information state intrinsic
control. In ICLR, 2021."
REFERENCES,0.49206349206349204,Published as a conference paper at ICLR 2022
REFERENCES,0.4943310657596372,APPENDIX: LIPSCHITZ-CONSTRAINED UNSUPERVISED SKILL DISCOVERY
REFERENCES,0.4965986394557823,"A
LIMITATIONS AND FUTURE DIRECTIONS"
REFERENCES,0.4988662131519274,"LSD may not encourage dynamic behaviors in some environments where Lipschitz constraints are
not semantically meaningful, such as control from pixel observations. This issue is addressable by
incorporating representation learning, which we leave for future work. Also, in contrast to discrete
LSD that learns more diverse skills, continuous LSD mainly discovers locomotion skills that move as
far as possible, since its objective is independent of the magnitude of z. While this has an advantage
in that we can later choose skills just by their directions (enabling zero-shot skill selection), making
LSD respect the magnitude as well can be another interesting research direction. Finally, while LSD
does not use any explicit feature engineering, we note that the skills LSD learns are still affected by
the shape of maximally reachable regions in the (normalized) state space."
REFERENCES,0.5011337868480725,"B
EXTENDED RELATED WORK"
REFERENCES,0.5034013605442177,"The LSD reward (Equation (8)) might look very similar to the objective of eigenoptions (Machado
et al., 2017; 2018): (φ(st+1) −φ(st))⊤e, where φ is a ﬁxed (or pre-trained) representation function
of states and e is an eigenvector of the successor representation matrix (Dayan, 1993) computed
from a ﬁxed random policy. They deﬁne eigenoptions as the options (or skills) that maximize this
reward for each of the eigenvectors e of the N largest eigenvalues. However, our interest differs
from their setting, since we learn both the policy and the representation function in order to seek
diverse and dynamic skills, and our approach is applicable to continuous skill settings as well as
discrete skill learning."
REFERENCES,0.5056689342403629,"C
TRAINING PROCEDURE FOR LSD"
REFERENCES,0.5079365079365079,"Algorithm 1: Lipschitz-constrained Skill Discovery (LSD)
Initialize skill policy π and representation function φ;
while not converged do"
REFERENCES,0.5102040816326531,"for i = 1, . . . , (# episodes per epoch) do"
REFERENCES,0.5124716553287982,"Sample skill z from p(z);
Sample trajectory (episode) τ with π(·|·, z) and z;"
REFERENCES,0.5147392290249433,"Compute reward rLSD(st, at, st+1) = (φ(st+1) −φ(st))⊤z (Equation (8));
Update φ using SGD to maximize Equation (8) under Spectral Normalization;
Update π using SAC;"
REFERENCES,0.5170068027210885,"Algorithm 1 overviews the training procedure for LSD. There are two learnable components in LSD:
the skill policy π(a|s, z) and the representation function φ(s). In order to impose the 1-Lipschitz
constraint on φ, we employ Spectral Normalization (SN) (Miyato et al., 2018). At every epoch, we
alternately train π with SAC (Haarnoja et al., 2018a) and φ with stochastic gradient descent (SGD)
to maximize Equation (8). When collecting trajectories τ, we ﬁx z within a single episode as in
previous works (Eysenbach et al., 2019; Sharma et al., 2020; Kim et al., 2021)."
REFERENCES,0.5192743764172335,Published as a conference paper at ICLR 2022
REFERENCES,0.5215419501133787,"w/ 1-Lipschitz constraint on 𝜙
w/o 1-Lipschitz constraint on 𝜙"
REFERENCES,0.5238095238095238,"φ(s)
φ(s0)
φ(s0 −s)
φ(s0) −φ(s)
φ(s)
φ(s0)
φ(s0 −s)
φ(s0) −φ(s)"
REFERENCES,0.5260770975056689,"Normal
Dist."
REFERENCES,0.528344671201814,"vMF
Dist."
REFERENCES,0.5306122448979592,"Inner
Product"
REFERENCES,0.5328798185941043,"DIAYN w/ SN
DIAYN VISR LSD"
REFERENCES,0.5351473922902494,Figure 7: Ablation study on Ant. See Appendix D.
REFERENCES,0.5374149659863946,"D
ABLATION STUDY"
REFERENCES,0.5396825396825397,"The LSD reward (Equations (6) and (8)) consists of three components: the inner-product form, the
use of φ’s difference and the 1-Lipschitz constraint on φ. In order to examine the role and importance
of each component, we ablate them with several variants. We consider all possible combinations of
the following variations:"
REFERENCES,0.5419501133786848,(i) The form of the reward function specifying how z and φ(·) are compared:1
REFERENCES,0.54421768707483,"(1) the Normal distribution form (as in DIAYN, Equation (9)), i.e., the squared distance,
(2) the von-Mises Fisher (vMF) distribution form (as in VISR, Equation (10)), i.e., the inner-
product form with normalizing the norms of φ(·) and z, or
(3) the inner-product form (as in LSD, Equations (8) and (11)) without normalizing the norms."
REFERENCES,0.546485260770975,"(ii) The use of the current and/or next states: φ(s), φ(s′) or φ(s′ −s) in place of φ(s′) −φ(s)
(where s′ denotes the next state)."
REFERENCES,0.5487528344671202,(iii) The use of Spectral Normalization: with or without the 1-Lipschitz constraint on φ(·).
REFERENCES,0.5510204081632653,"Figure 7 shows the result of the ablation study on the Ant environment. We observe the state
space coverage drastically decreases if any of these components constituting the LSD reward (Equa-
tion (8)) is missing; i.e., all of the three components are crucial for LSD. Especially, just adding
Spectral Normalization (SN) to the DIAYN objective (‘DIAYN w/ SN’, Choi et al. (2021)) does not
induce large state variations, since its objective does not necessarily encourage the scale of φ(s) to
increase. We also note that the purposes of using SN in our work and in Choi et al. (2021) are very
different. While Choi et al. (2021) employ SN to regularize the discriminator for better stability, we
use SN to lower-bound the state differences (Equation (6)) so that maximizing the LSD objective
always guarantees an increase in state differences."
REFERENCES,0.5532879818594104,"1For DIAYN (Eysenbach et al., 2019), we omit the −log p(z) term from the original objective as its ex-
pectation can be treated as a constant assuming that p(z) is a ﬁxed prior distribution and that episodes have the
same length. For VISR (Hansen et al., 2020), we only consider its unsupervised skill discovery objective."
REFERENCES,0.5555555555555556,Published as a conference paper at ICLR 2022
REFERENCES,0.5578231292517006,"Ant
(2-D continuous skills)"
REFERENCES,0.5600907029478458,"Humanoid
(2-D continuous skills)"
REFERENCES,0.562358276643991,"Visualization of skills
Correlation matrix
φ(sT ) −φ(s0)"
REFERENCES,0.564625850340136,Figure 8: Analysis of 2-D continuous skills discovered by LSD for Ant and Humanoid.
REFERENCES,0.5668934240362812,"Ant
(4-D continuous skills)"
REFERENCES,0.5691609977324263,"Ant
(5-D continuous skills)"
REFERENCES,0.5714285714285714,"Visualization of skills
Correlation matrix
φ(sT ) −φ(s0)"
REFERENCES,0.5736961451247166,"Ant
(3-D continuous skills)"
REFERENCES,0.5759637188208617,"Figure 9: Analysis of 3-D, 4-D and 5-D continuous skills discovered by LSD for Ant. We plot only
the ﬁrst two latent dimensions for the φ(sT ) −φ(s0) ﬁgures, and each color also represents only the
ﬁrst two dimensions."
REFERENCES,0.5782312925170068,"E
VISUALIZATION AND ANALYSES OF SKILLS LEARNED"
REFERENCES,0.5804988662131519,"We provide more visual examples and analyses of skills discovered by LSD (Figures 8 to 12, also
videos available at https://shpark.me/projects/lsd/)."
REFERENCES,0.5827664399092971,"Figure 8 visualizes 2-D continuous skills for Ant and Humanoid, and the learned state representation
function φ, and demonstrates the correlation coefﬁcient matrices between the state dimensions and
skill latent dimensions. We observe that continuous LSD focuses on the x-y coordinates (the ﬁrst and
second state dimensions) on both the environments, which is attributable to the fact that those two"
REFERENCES,0.5850340136054422,Published as a conference paper at ICLR 2022
REFERENCES,0.5873015873015873,"HalfCheetah
(6 discrete skills)"
REFERENCES,0.5895691609977324,"HalfCheetah
(8 discrete skills)"
REFERENCES,0.5918367346938775,Figure 10: Analysis of discrete skills discovered by LSD for HalfCheetah.
REFERENCES,0.5941043083900227,"Ant
(6 discrete skills)"
REFERENCES,0.5963718820861678,"Ant
(8 discrete skills)"
REFERENCES,0.5986394557823129,"Visualization of skills
Correlation matrix"
REFERENCES,0.6009070294784581,"Ant
(16 discrete skills)"
REFERENCES,0.6031746031746031,Figure 11: Analysis of discrete skills discovered by LSD for Ant.
REFERENCES,0.6054421768707483,"dimensions are the most suitable ones for increasing φ(sT ) −φ(s0) under the Lipschitz constraint.
Figure 8 also shows that φ on Ant has almost no correlation with the 8th to 15th state dimensions,
which correspond to the angles of the four leg joints. This is because Ant should repeatedly move
its legs back and forth to move consistently in a direction."
REFERENCES,0.6077097505668935,"We also experiment continuous LSD with d = 3, 4, 5 on Ant. Figure 9 demonstrates that LSD
still mainly learns locomotion skills as in d = 2. However, in this case, some skills represent the
same direction since there exist more skill dimensions than x and y dimensions. To resolve this, we
believe combining continuous LSD with contrastive learning (as in discrete LSD) can be a possible
solution, which we leave for future work."
REFERENCES,0.6099773242630385,"Figures 10 to 12 visualize discrete skills learned for HalfCheetah, Ant and Humanoid. We conﬁrm
that discrete LSD focuses not only on the x-y coordinates but on a set of more diverse dimensions."
REFERENCES,0.6122448979591837,Published as a conference paper at ICLR 2022
REFERENCES,0.6145124716553289,"Humanoid
(8 discrete skills)"
REFERENCES,0.6167800453514739,"Humanoid
(16 discrete skills)"
REFERENCES,0.6190476190476191,"Visualization of skills
Correlation matrix"
REFERENCES,0.6213151927437641,Figure 12: Analysis of discrete skills discovered by LSD for Humanoid.
REFERENCES,0.6235827664399093,"For instance, the example of ‘Ant (16 discrete skills)’ in Figure 11 shows that some skills such as the
second and third ones have large correlations with the orientation dimensions (the 4th to 7th state
dimensions) of Ant. These skills correspond to rotation skills, as shown in the video on our project
page."
REFERENCES,0.6258503401360545,"F
ENLARGED VISUALIZATION OF SKILL DISCOVERY METHODS"
REFERENCES,0.6281179138321995,"Figure 13 (a zoomed-in version of Figure 2) visualizes the learned skills on the x-y plane. Note that
each plot has different axes."
REFERENCES,0.6303854875283447,"LSD (ours)
IBOL
DIAYN
DIAYN w/ SN
DADS"
REFERENCES,0.6326530612244898,"VISR
APS
DIAYN (d=5)
DADS (d=5)
APS (d=5)"
REFERENCES,0.6349206349206349,"IBOL-O
DADS-XYO"
REFERENCES,0.63718820861678,DIAYN-XYO
REFERENCES,0.6394557823129252,"(w/ feat. engineering)
(w/ feat. engineering)"
REFERENCES,0.6417233560090703,"(w/ feat. engineering)
(a) Ant"
REFERENCES,0.6439909297052154,"IBOL
DADS (d=5)
DIAYN (d=5)
IBOL-O
DADS-XYO
(w/ feat. engineering)
(w/ feat. engineering)
LSD (ours)
DIAYN-XYO"
REFERENCES,0.6462585034013606,"(w/ feat. engineering)
(b) Humanoid"
REFERENCES,0.6485260770975056,"Figure 13: Zoomed-in version of Figure 2. We visualize 2-D (or 5-D) continuous skills discovered
by various methods by plotting the x-y trajectories of the agent. Each color represents the direction
of the skill latent variable z. Note that each plot has different axes. This result shows that most of the
existing approaches (DIAYN, VISR, APS, DIAYN-XYO, etc.) cannot learn far-reaching locomotion
skills, as shown in Figure 17."
REFERENCES,0.6507936507936508,Published as a conference paper at ICLR 2022
REFERENCES,0.6530612244897959,"0
64K
128K
# episodes 0 1 2 3 4"
REFERENCES,0.655328798185941,Reward
REFERENCES,0.6575963718820862,(a) CheetahHurdle
REFERENCES,0.6598639455782312,"0
64K
128K
# episodes 0.0 2.5 5.0 7.5 10.0"
REFERENCES,0.6621315192743764,(b) AntRotation
REFERENCES,0.6643990929705216,"0
64K
128K
# episodes 2 4 6 8"
REFERENCES,0.6666666666666666,(c) AntQuaternion
REFERENCES,0.6689342403628118,"LSD
DIAYN
DADS
LSD (at 500K episodes)
DIAYN (at 500K episodes)
DADS (at 500K episodes)"
REFERENCES,0.671201814058957,"Figure 14: Training curves of LSD, DIAYN and DADS on three non-locomotion downstream tasks
after skill discovery."
REFERENCES,0.673469387755102,"0
50K
100K
150K
# episodes 0 2 4 6"
REFERENCES,0.6757369614512472,Reward
REFERENCES,0.6780045351473923,(a) AntGoal
REFERENCES,0.6802721088435374,"0
50K
100K
150K
# episodes 1 2 3"
REFERENCES,0.6825396825396826,(b) AntMultiGoals
REFERENCES,0.6848072562358276,"0
50K
100K
150K
# episodes 0 2 4 6 8"
REFERENCES,0.6870748299319728,(c) HumanoidGoal
REFERENCES,0.6893424036281179,"0
50K
100K
150K
# episodes 1 2 3 4"
REFERENCES,0.691609977324263,"LSD (Zero-shot)
LSD
DIAYN-XYO (Zero-shot)
DIAYN-XYO
DIAYN-XY (Zero-shot)
DIAYN-XY
DIAYN (d=5) (Zero-shot)
DIAYN (d=5)"
REFERENCES,0.6938775510204082,(d) HumanoidMultiGoals
REFERENCES,0.6961451247165533,"Figure 15: Training curves of LSD and DIAYN on four goal-following downstream tasks after skill
discovery."
REFERENCES,0.6984126984126984,"G
ADDITIONAL DOWNSTREAM TASKS"
REFERENCES,0.7006802721088435,"G.1
NON-LOCOMOTION DOWNSTREAM TASKS"
REFERENCES,0.7029478458049887,"In order to examine the performance of LSD on more diverse downstream tasks, we make quantita-
tive evaluations of discrete skill discovery methods on non-locomotion environments. Speciﬁcally,
we test discrete DIAYN, DADS and LSD on three different tasks: CheetahHurdle (with N = 8),
AntRotation and AntQuaternion (with N = 16)."
REFERENCES,0.7052154195011338,"In CheetahHurdle, the HalfCheetah agent should move forward while jumping over evenly spaced
hurdles, where we employ the same hurdle conﬁguration used in Qureshi et al. (2020). The agent
is given a reward of 1 every time it successfully jumps over a hurdle. In AntRotation, the Ant
agent should rotate in place to reach a randomly sampled angle on the x-y plane. AntQuaternion is
the 3-D version of AntRotation, where the agent should rotate or ﬂip to match a randomly sampled
rotation quaternion. In both environments, the agent receives a reward of 10 when the angle between
the target orientation and the current orientation becomes smaller than a threshold. Speciﬁcally, in
AntRotation, we ﬁrst project both the target angle and the z-axis rotation angle of the agent onto
the unit circle and compute the Euclidean distance between them. If the distance becomes less than
0.05, the agent gets a reward and the episode ends. In AntQuaternion, we compute the distance
between two quaternion using d(q1, q2) = 1 −⟨q1, q2⟩2, where ⟨q1, q2⟩denotes the inner product
between the quaternions. When d(q1, q2) becomes smaller than 0.3, the agent receives a reward and
the episode ends."
REFERENCES,0.7074829931972789,"Results. Figure 14 shows the results on the three downstream tasks, where we report both the per-
formances of skill discovery methods trained with 500K episodes (= 25K epochs) and 2M episodes
(= 100K epochs). Figure 14 demonstrates that LSD exhibits the best performance on all of the envi-
ronments, suggesting that LSD is capable of learning more diverse behaviors other than locomotion
skills as well. Also, we observe that the performances of DIAYN and DADS decrease as training
of skill discovery progresses in CheetahHurdle. This is mainly because the MI objective (I(Z; S))
they use usually prefers more predictable and thus static skills, making the agent incline to posing
skills rather than moving or jumping. On the other hand, since LSD’s objective always encourages
larger state differences, its performance increases with training epochs."
REFERENCES,0.7097505668934241,"G.2
ADDITIONAL ZERO-SHOT EVALUATION"
REFERENCES,0.7120181405895691,"In this section, we additionally test the zero-shot scheme for DIAYN-like methods (Choi et al.,
2021) on goal-following downstream tasks. DIAYN-like methods can also select a skill to reach a"
REFERENCES,0.7142857142857143,Published as a conference paper at ICLR 2022
REFERENCES,0.7165532879818595,Table 2: Comparison of zero-shot performances on PointGoal.
REFERENCES,0.7188208616780045,"Method
PointGoal (gs = 10)
PointGoal (gs = 20)
PointGoal (gs = 40)
PointGoal (gs = 80)
LSD
1.00 ± 0.00
1.00 ± 0.00
1.00 ± 0.00
0.92 ± 0.03
DIAYN
0.41 ± 0.05
0.20 ± 0.03
0.12 ± 0.03
0.05 ± 0.02
DIAYN-XYO
1.00 ± 0.00
0.80 ± 0.01
0.35 ± 0.01
0.15 ± 0.01"
REFERENCES,0.7210884353741497,Table 3: Comparison of zero-shot performances on PointMultiGoals.
REFERENCES,0.7233560090702947,"Method
PointMultiGoals (gm = 10)
PointMultiGoals (gm = 20)
PointMultiGoals (gm = 40)
LSD
4.00 ± 0.00
4.00 ± 0.00
3.85 ± 0.05
DIAYN
1.54 ± 0.18
0.82 ± 0.11
0.43 ± 0.08
DIAYN-XYO
2.09 ± 0.03
1.27 ± 0.02
0.57 ± 0.02"
REFERENCES,0.7256235827664399,"target goal z in a zero-shot manner by setting z = Ez′[q(z′|g)], where q denotes its skill discrim-
inator. However, in contrast to LSD, which can follow multiple goals from an arbitrary state with
its direction-aligned representation function (Section 3.3), DIAYN-like methods could usually only
reach a single goal from the initial state because they are trained to reach the absolute position of
the goal with the discriminator q(·|g). Although it may be possible for such methods to deal with
unseen goals or initial states if we train them with a broad range of initial states, this modiﬁcation
could harm the performance as it requires more training data. On the other hand, LSD’s directional
goal scheme enables reaching unseen goals in a zero-shot fashion even if it is trained with a ﬁxed
initial state. Also, while they require the skill z = Ez′[q(z′|g)] to be in the vicinity of the prior p(z),
LSD is free from this constraint as it can normalize the skill obtained from Equation (12)."
REFERENCES,0.7278911564625851,"G.2.1
RESULTS ON MUJOCO LOCOMOTION ENVIRONMENTS"
REFERENCES,0.7301587301587301,"Figure 15 demonstrates the performances of LSD, DIAYN and its zero-shot schemes on AntGoal,
AntMultiGoals, HumanoidGoal and HumanoidMultiGoals.
It suggests that the performance of
DIAYN’s zero-shot scheme falls behind DIAYN in the HumanoidMultiGoals environment, while
LSD’s zero-shot performance is mostly comparable to or better than LSD, outperforming DIAYN in
all the environments."
REFERENCES,0.7324263038548753,"G.2.2
RESULTS ON POINTENV"
REFERENCES,0.7346938775510204,"In order to fairly compare only the zero-shot scheme of each method, we make additional com-
parisons on a toy environment named PointEnv (Kim et al., 2021). PointEnv is a minimalistic
environment in which the state of the agent is deﬁned as its x-y position and an action denotes the
direction in which the agent moves. If the agent performs action a = (ax, ay) ∈[−1, 1]2 on state
(sx, sy) ∈R2, its next state becomes (sx + ax, sy + ay). Unless otherwise mentioned, the initial
state is given as (0, 0). We train each skill discovery method with an episode length of 10 in this
environment. We sample z from the 2-D standard normal distribution."
REFERENCES,0.7369614512471655,"We prepare two goal-following downstream tasks: PointGoal and PointMultiGoals, which are simi-
lar to the ‘-Goal’ or ‘-MultiGoals’ environments in Section 4.3. In PointGoal, the agent should reach
a goal g uniformly sampled from [−gs, gs]2 within 100 environment steps. In PointMultiGoals, the
agent should follow four goals within 400 environment steps (we refer to Appendix I.1.5 for the full
details of ‘-MultiGoals’ environments). The agent receives a reward of 1 when it reaches a goal."
REFERENCES,0.7392290249433107,"In these environments, we test the zero-shot schemes of LSD and DIAYN trained with random
initial states sampled from [−10, 10]2, as well as DIAYN-XYO with a ﬁxed initial state. When
training each skill discovery method, we employ a two-layered MLP with 128 units for modelling
trainable components, and train the models for 250K episodes (= 5K epochs) with four minibatches
consisting of 500 transitions from 50 trajectories at every epoch. For downstream tasks, we set
gs ∈{10, 20, 40, 80} and gm ∈{10, 20, 40}."
REFERENCES,0.7414965986394558,"Tables 2 and 3 demonstrate the ﬁnal average zero-shot performance of each skill discovery method,
averaged over eight independent runs with the standard error. The result shows that although both
LSD and DIAYN-XYO have the same ‘base’ performance, achieving the maximum reward with
gs = 10 (i.e., when goals are sampled only from the states encountered during training), DIAYN-
XYO’s performance degrades as gs increases (i.e., given previously unseen goals). We speculate one"
REFERENCES,0.7437641723356009,Published as a conference paper at ICLR 2022
REFERENCES,0.746031746031746,"HalfCheetah
(8 discrete skills)"
REFERENCES,0.7482993197278912,"Ant
(16 discrete skills)"
REFERENCES,0.7505668934240363,"Ant
(continuous skills)"
REFERENCES,0.7528344671201814,"Humanoid
(continuous skills)"
REFERENCES,0.7551020408163265,Figure 16: Average normalized state difference ∥sT −s0∥of skill discovery methods.
REFERENCES,0.7573696145124716,"reason behind this is that the probability of some chosen skill z ∼p(z) in DIAYN becomes smaller
when it encounters a previously unseen goal, which could lead to an unexpected behavior (for exam-
ple, we notice that the average norm of DIAYN’s selected skills is approximately 3.84 when gs = 40,
which is unlikely to be sampled from the standard normal distribution). Also, the result suggests that
training with a broad range of the initial state distribution indeed harms the performance of DIAYN.
Finally, LSD’s zero-shot scheme outperforms DIAYN’s on the three PointMultiGoals settings by
large margins, indicating that DIAYN’s zero-shot scheme (at least empirically) could not cope well
with goal-following settings (i.e., reaching multiple goals in order)."
REFERENCES,0.7596371882086168,"H
QUANTITATIVE EVALUATIONS OF ∥sT −s0∥"
REFERENCES,0.7619047619047619,"In order to empirically demonstrate that previous methods using the MI objective I(Z; S) might end
up learning only static or simple skills, we measure the average difference between the (normalized)
initial and ﬁnal states ∥sT −s0∥on MuJoCo environments. Figure 16 shows that existing MI-based
methods indeed prefer less dynamic skills, in contrast to LSD. Notably, in HalfCheetah and Ant,
the state differences of DIAYN and DADS after skill discovery become even smaller than a random
policy. This is natural because it is better for MI-based methods to have more predictable, static tra-
jectories so that they can accurately restore the skill z from the corresponding states (Equation (3))."
REFERENCES,0.764172335600907,"I
IMPLEMENTATION DETAILS"
REFERENCES,0.7664399092970522,"I.1
MUJOCO LOCOMOTION ENVIRONMENTS"
REFERENCES,0.7687074829931972,"I.1.1
SETTINGS"
REFERENCES,0.7709750566893424,"We implement LSD and most of the baselines on top of the garage framework (garage contributors,
2019), while we train the E stage (Lee et al., 2019) of EDL (Campos Cam´u˜nez et al., 2020) using
their released codebase2. We provide the implementation for LSD in the repository at https:
//vision.snu.ac.kr/projects/lsd/."
REFERENCES,0.7732426303854876,"For the environments used in our experiments, we use the same conﬁgurations adopted in Sharma
et al. (2020); Kim et al. (2021), with a maximum episode length of 200 for Ant and HalfCheetah,
and 1000 for Humanoid. We normalize each state dimension of the environments ahead of skill
discovery with the statistics used in Kim et al. (2021), where they compute the mean and standard
deviation from 10000 rollouts of a random policy."
REFERENCES,0.7755102040816326,"I.1.2
VARIANTS OF SKILL DISCOVERY METHODS"
REFERENCES,0.7777777777777778,"DIAYN-XYO (Eysenbach et al., 2019) limits the input to the skill discriminator q(z|s) to the x-
y dimensions and omits them from the input to its skill policy. For DADS-XYO (Sharma et al.,
2020), we make its skill dynamics model q(s′|s, z) only consider the x-y coordinates and exclude
them from the inputs to both the skill policy and the skill dynamics model, as done in Sharma et al.
(2020). IBOL-O (Kim et al., 2021) denotes the exact setting used in their work, where they omit the
x-y coordinates from the input to its low-level policy."
REFERENCES,0.780045351473923,2https://github.com/victorcampos7/edl
REFERENCES,0.782312925170068,Published as a conference paper at ICLR 2022
REFERENCES,0.7845804988662132,"I.1.3
TRAINING OF SKILL DISCOVERY METHODS"
REFERENCES,0.7868480725623582,"We model each trainable component as a two-layered MLP with 1024 units, and train them with
SAC (Haarnoja et al., 2018a). At every epoch, we sample 20 (Ant and HalfCheetah) or 5 (Humanoid)
rollouts and train the networks with 4 gradient steps computed from 2048-sized mini-batches. For
quantitative evaluation of learned skills, we train the models for 2M episodes (= 100K epochs, Ant
and HalfCheetah) or 1M episodes (= 200K epochs, Humanoid)."
REFERENCES,0.7891156462585034,"For each method, we search the discount factor γ from {0.99, 0.995} and the SAC entropy coefﬁ-
cient α from {0.003, 0.01, 0.03, 0.1, 0.3, 1.0, auto-adjust (Haarnoja et al., 2018b)}. For continuous
skills on Ant, we use γ = 0.995 for the low-level policy of IBOL-O and 0.99 for the others, and use
an auto-adjusted α for DADS, DIAYN, VISR and APS, α = 0.01 for LSD, α = 0.03 for DADS
(d = 5), and α = 0.3 for DIAYN (d = 5). For discrete skills, we set α to 0.003 (Ant with N = 16)
or 0.01 (HalfCheetah with N = 8) for LSD and use an auto-adjusted α for DADS and DIAYN. We
set the default learning rate to 1e−4, but 3e−5 for DADS’s q, DIAYN’s q and LSD’s φ, and 3e−4
for IBOL’s low-level policy. On Ant and HalfCheetah, we train the models with on-policy samples
without using the replay buffer (following Sharma et al. (2020); Kim et al. (2021)), while we use
the replay buffer for sampling the k(= 5)-nearest neighbors in APS. For the low-level policy of
IBOL-O, we additionally normalize rewards and use full-sized batches, following Kim et al. (2021).
In the case of IBOL, we used mini-batches of size 1024 and do not normalize rewards as we ﬁnd this
setting performs better. We use the original hyperparameter choices for their high-level policies."
REFERENCES,0.7913832199546486,"On Humanoid, we set the discount factor to γ = 0.99 and the learning rate to 3e −4, but 1e −4 for
DADS’s q, DIAYN’s q and LSD’s φ. Also, we use the replay buffer and additionally give an alive
bonus b at each step (following Kim et al. (2021)) searched from {0, 0.03, 0.3}, while we ﬁnd that b
does not signiﬁcantly affect the performance. We use α = 0.03 for LSD and an auto-adjusted α for
the others, and b = 0 for DADS and b = 0.03 for the others."
REFERENCES,0.7936507936507936,"I.1.4
TRAINING OF SMM"
REFERENCES,0.7959183673469388,"We train the SMM exploration stage (Lee et al., 2019) of EDL (Campos Cam´u˜nez et al., 2020) using
the ofﬁcial implementation with hyperparameters tuned. Speciﬁcally, we set the discount factor γ
to 0.99 (Ant and Humanoid), the SAC entropy coefﬁcient α to 1 (Ant) or 3 (Humanoid), the β-VAE
coefﬁcient to 1, the alive bonus b to 30 (only for Humanoid), and the density coefﬁcient ν to 0.5
(Ant) or 0.05 (Humanoid)."
REFERENCES,0.7981859410430839,"I.1.5
DOWNSTREAM TASKS"
REFERENCES,0.800453514739229,"In AntGoal and HumanoidGoal, a random goal g ∈[−gs, gs]2 is given at the beginning of each
episode, and the episode ends if the agent reaches the goal (i.e., the distance between the agent and
the goal becomes less than or equal to ϵ). In AntMultiGoal and HumanoidMultiGoals, (up to X) new
goals are sampled within the relative range of [−gm, gm]2 from the current 2-D coordinates when
the episode begins, the agent reaches the current goal, or the agent does not reach the goal within Y
steps. In all of the environments, the agent receives a reward of r when it reaches the goal (no reward
otherwise). We use gs = 50, gm = 15, ϵ = 3, X = 4 and Y = 50 for AntGoal and AntMultiGoals,
and gs = 20, gm = 7.5, ϵ = 3, X = 4 and Y = 250 for HumanoidGoal and HumanoidMultiGoals.
Also, we set r to 10 (‘-Goals’ environments) or 2.5 (‘-MultiGoals’ environments)."
REFERENCES,0.8027210884353742,"I.1.6
TRAINING OF HIERARCHICAL POLICIES FOR DOWNSTREAM TASKS"
REFERENCES,0.8049886621315193,"For downstream tasks, we train a high-level meta-controller on top of a pre-trained skill policy with
SAC (Haarnoja et al., 2018a) for continuous skills or PPO (Schulman et al., 2017) for discrete skills.
The meta-controller is modeled as an MLP with two hidden layers of 512 dimensions. We set K
to 25 (Ant and HalfCheetah) or 125 (Humanoid), the learning rate to 3e −4, the discount factor to
0.995, and use an auto-adjusted entropy coefﬁcient (SAC) or an entropy coefﬁcient of 0.01 (PPO).
For SAC, we sample ten trajectories and train the networks with four SAC gradients computed from
full-sized batches at every epoch. For PPO, we use 64 trajectories, ten gradients and 256-sized mini-
batches. We normalize the state dimensions with an exponential moving average. For zero-shot
learning, we set g in Equation (12) to the current state with its locomotion dimensions replaced with
the goal’s coordinates. Additionally, only for Figure 1c, we set the locomotion dimensions of the
input to the pre-trained low-level policy to 0 for better visualization."
REFERENCES,0.8072562358276644,Published as a conference paper at ICLR 2022
REFERENCES,0.8095238095238095,"z = (−1.06, 1.06)"
REFERENCES,0.8117913832199547,"z = (0.0, 1.5)"
REFERENCES,0.8140589569160998,"z = (1.06, 1.06)"
REFERENCES,0.8163265306122449,"z = (−1.5, 0.0)"
REFERENCES,0.81859410430839,"z = (0.0, 0.0)"
REFERENCES,0.8208616780045351,"z = (1.5, 0.0)"
REFERENCES,0.8231292517006803,"z = (−1.06, −1.06)"
REFERENCES,0.8253968253968254,"z = (0.0, −1.5)"
REFERENCES,0.8276643990929705,"z = (1.06, −1.06)"
REFERENCES,0.8299319727891157,(a) DIAYN
REFERENCES,0.8321995464852607,"z = (−1.06, 1.06)"
REFERENCES,0.8344671201814059,"z = (0.0, 1.5)"
REFERENCES,0.8367346938775511,"z = (1.06, 1.06)"
REFERENCES,0.8390022675736961,"z = (−1.5, 0.0)"
REFERENCES,0.8412698412698413,"z = (0.0, 0.0)"
REFERENCES,0.8435374149659864,"z = (1.5, 0.0)"
REFERENCES,0.8458049886621315,"z = (−1.06, −1.06)"
REFERENCES,0.8480725623582767,"z = (0.0, −1.5)"
REFERENCES,0.8503401360544217,"z = (1.06, −1.06)"
REFERENCES,0.8526077097505669,(b) LSD
REFERENCES,0.854875283446712,"Figure 17: 2-D continuous skills for Ant. DIAYN discovers posing skills, as its mutual information
objective does not necessarily prefer large state variations. On the other hand, LSD encourages the
agent to have more variations in the state space, resulting in learning more dynamic behaviors such
as locomotion skills. Videos are available on our project page."
REFERENCES,0.8571428571428571,"I.2
MUJOCO MANIPULATION ENVIRONMENTS"
REFERENCES,0.8594104308390023,"I.2.1
TRAINING OF SKILL DISCOVERY METHODS"
REFERENCES,0.8616780045351474,"For MuJoCo manipulation environments (FetchPush, FetchSlide, FetchPickAndPlace), we imple-
ment skill discovery methods based on the ofﬁcial implementation3 of MUSIC (Zhao et al., 2021).
We train each method for 8K episodes (= 4K epochs) with SAC and set the model dimensionality
to (1024, 1024), the entropy coefﬁcient to 0.02, the discount factor to 0.95 and the learning rate to
0.001. At every epoch, we sample two trajectories and train the models with 40 gradient steps com-
puted from 256-sized mini-batches. For methods equipped with the MUSIC intrinsic reward, we set
the MUSIC reward coefﬁcient to 5000 with reward clipping, following Zhao et al. (2021). For the
skill reward coefﬁcient, we perform hyperparameter search over {5, 15, 50, 150, 500, 1500, 5000},
where we choose 500 (LSD), 150 (DADS), or 1500 (DIAYN), not clipping the skill reward."
REFERENCES,0.8639455782312925,"I.2.2
TRAINING OF DOWNSTREAM POLICIES"
REFERENCES,0.8662131519274376,"In FetchPushGoal, FetchSlideGoal and FetchPickAndPlaceGoal, a random goal is sampled at the
beginning of each episode and the episode ends with a reward of 1 if the agent reaches the goal,
where we use the same sampling range and reach radius as the original Fetch environments. For
training of meta-controllers, we use the same hyperparameters as in the skill discovery phase, except
that we sample 16 trajectories for each epoch."
REFERENCES,0.8684807256235828,"J
RENDERED SCENES OF LEARNED SKILLS"
REFERENCES,0.8707482993197279,"Figures 17 to 21 visualize the rendered scenes of skills discovered on the MuJoCo locomotion envi-
ronments. Each ﬁgure demonstrates a single set of skills. We refer the reader to our project page for
the videos."
REFERENCES,0.873015873015873,3https://github.com/ruizhaogit/music
REFERENCES,0.8752834467120182,Published as a conference paper at ICLR 2022
REFERENCES,0.8775510204081632,Skill #1
REFERENCES,0.8798185941043084,Skill #2
REFERENCES,0.8820861678004536,Skill #3
REFERENCES,0.8843537414965986,Skill #4
REFERENCES,0.8866213151927438,Skill #5
REFERENCES,0.8888888888888888,Skill #6
REFERENCES,0.891156462585034,Skill #7
REFERENCES,0.8934240362811792,Skill #8
REFERENCES,0.8956916099773242,Skill #9
REFERENCES,0.8979591836734694,Skill #10
REFERENCES,0.9002267573696145,Skill #11
REFERENCES,0.9024943310657596,Skill #12
REFERENCES,0.9047619047619048,Skill #13
REFERENCES,0.9070294784580499,Skill #14
REFERENCES,0.909297052154195,Skill #15
REFERENCES,0.9115646258503401,Skill #16
REFERENCES,0.9138321995464853,"Figure 18: 16 discrete skills discovered by LSD for Ant. Discrete LSD learns a skill set consisting
of locomotion skills (#1, #6, #7, #12, #16), rotation skills (#2, #3, #4, #8, #10, #15), posing skills
(#5, #9, #14) and ﬂipping skills (#11, #13). Videos are available on our project page."
REFERENCES,0.9160997732426304,"z = (−1.06, 1.06)"
REFERENCES,0.9183673469387755,"z = (0.0, 1.5)"
REFERENCES,0.9206349206349206,"z = (1.06, 1.06)"
REFERENCES,0.9229024943310657,"z = (−1.5, 0.0)"
REFERENCES,0.9251700680272109,"z = (0.0, 0.0)"
REFERENCES,0.927437641723356,"z = (1.5, 0.0)"
REFERENCES,0.9297052154195011,"z = (−1.06, −1.06)"
REFERENCES,0.9319727891156463,"z = (0.0, −1.5)"
REFERENCES,0.9342403628117913,"z = (1.06, −1.06)"
REFERENCES,0.9365079365079365,"Figure 19: 2-D continuous skills discovered by LSD for Humanoid. The Humanoid robot can walk
in various directions speciﬁed by z. Videos are available on our project page."
REFERENCES,0.9387755102040817,Published as a conference paper at ICLR 2022
REFERENCES,0.9410430839002267,Skill #1
REFERENCES,0.9433106575963719,Skill #2
REFERENCES,0.9455782312925171,Skill #3
REFERENCES,0.9478458049886621,Skill #4
REFERENCES,0.9501133786848073,Skill #5
REFERENCES,0.9523809523809523,Skill #6
REFERENCES,0.9546485260770975,Skill #7
REFERENCES,0.9569160997732427,Skill #8
REFERENCES,0.9591836734693877,Skill #9
REFERENCES,0.9614512471655329,Skill #10
REFERENCES,0.963718820861678,Skill #11
REFERENCES,0.9659863945578231,Skill #12
REFERENCES,0.9682539682539683,Skill #13
REFERENCES,0.9705215419501134,Skill #14
REFERENCES,0.9727891156462585,Skill #15
REFERENCES,0.9750566893424036,Skill #16
REFERENCES,0.9773242630385488,"Figure 20: 16 discrete skills discovered by LSD for Humanoid. Videos are available on our project
page."
REFERENCES,0.9795918367346939,Skill #1
REFERENCES,0.981859410430839,Skill #2
REFERENCES,0.9841269841269841,Skill #3
REFERENCES,0.9863945578231292,Skill #4
REFERENCES,0.9886621315192744,Skill #5
REFERENCES,0.9909297052154195,Skill #6
REFERENCES,0.9931972789115646,Skill #7
REFERENCES,0.9954648526077098,Skill #8
REFERENCES,0.9977324263038548,"Figure 21: 8 discrete skills discovered by LSD for HalfCheetah. Videos are available on our project
page."
