Section,Section Appearance Order,Paragraph
ABSTRACT,0.0,ABSTRACT
ABSTRACT,0.005847953216374269,"Reusing previously trained models is critical in deep reinforcement learning to
speed up training of new agents.
However, it is unclear how to acquire new
skills when objectives and constraints are in conﬂict with previously learned skills.
Moreover, when retraining, there is an intrinsic conﬂict between exploiting what
has already been learned and exploring new skills. In soft actor-critic (SAC) meth-
ods, a temperature parameter can be dynamically adjusted to weight the action en-
tropy and balance the explore × exploit trade-off. However, controlling a single
coefﬁcient can be challenging within the context of retraining, even more so when
goals are contradictory. In this work, inspired by neuroscience research, we pro-
pose a novel approach using inhibitory networks to allow separate and adaptive
state value evaluations, as well as distinct automatic entropy tuning. Ultimately,
our approach allows for controlling inhibition to handle conﬂict between exploit-
ing less risky, acquired behaviors and exploring novel ones to overcome more
challenging tasks. We validate our method through experiments in OpenAI Gym
environments."
INTRODUCTION,0.011695906432748537,"1
INTRODUCTION"
INTRODUCTION,0.017543859649122806,"In reinforcement learning (RL), for all but the simplest tasks, agents behavior must be optimized
with respect to multiple goals and constraints (Sutton & Barto, 2018). It is common in practice for
new objectives and constraints to arise after already having trained an agent on existing ones. In
order for the behavior of the agent to account for these additional constraints, retraining is required.
Within the context of deep RL, retraining an agent to new constraints gives problems in balancing
exploitation of previously learned skills with learning new skills. In this paper, we present a method
for efﬁciently retraining an agent to acquire new skills in a similar environment."
INTRODUCTION,0.023391812865497075,"Existing approaches to solving the problem of learning new skills include the use of hierarchical
RL structures (Dayan & Hinton, 1993; Barto & Mahadevan, 2003), such as the options framework
(Sutton et al., 1999; Comanici & Precup, 2010), universal value functions (Schaul et al., 2015),
option-critic (Bacon et al., 2017), FeUdal networks (Vezhnevets et al., 2017), and data-efﬁcient
hierarchical RL (Nachum et al., 2018). Other methods use multiple policies and value functions
each of which are optimized for simple objectives that can then be composed to achieve complex
objectives (Van Seijen et al., 2017; Sahni et al., 2017; Haarnoja et al., 2017; Hansen et al., 2020;
Barreto et al., 2020). In this paper we propose to address the problem through the use of multiple
value functions to provide a complex evaluative input to a single policy network. By applying
different value functions in a state dependent fashion, the reward provided to the policy network
during training can remain the same as in prior training when appropriate, and can switch to a
different reward when the situation indicates new constraints or goals."
INTRODUCTION,0.029239766081871343,"The mechanism we propose to govern the output of the composite value function is based upon
neuroscientiﬁc research on inhibitory control (Diamond, 2013). The brain uses inhibition to interrupt
ongoing goal-directed action when unexpected events or conﬂicts arise. The horse-race model of
Logan et al. (2015), which describes the behavioral response to a goal and its inhibition in terms
of dual processes, is supported by many behavioral and neurobiological studies (Verbruggen &
Logan, 2009; Shenoy et al., 2011; Ide et al., 2013; Schall et al., 2017). We implement this inhibitory
concept in soft actor-critic (SAC) algorithm (Haarnoja et al., 2018a) by using an additional value
network (inhibitory), as opposed to retraining the previously learned value network (ongoing), to"
INTRODUCTION,0.03508771929824561,Under review as a conference paper at ICLR 2022
INTRODUCTION,0.04093567251461988,"learn the new skill evaluation. Additionally, we propose the use of an inhibitory policy network to
control inhibition. We call this SAC with inhibitory networks approach SAC-I. SAC-I is distinct
from previous value composition work (Haarnoja et al., 2017; Van Niekerk et al., 2019), since it
proposes a speciﬁc mechanism to train and compose value networks and generate a single policy
network focused on fast and improved retraining. We hypothesize that retraining of RL agents can
be accelerated by creating independent and mutually inhibitory evaluative processes that will change
the reward function used during learning in a state dependent manner. SAC provides two important
features for the SAC-I: a replay buffer that can be partitioned into episodic memories related to each
evaluative-learning process (Botvinick et al., 2019) and an automated entropy estimation (Haarnoja
et al., 2018b), which allows computing two separate temperature parameters and exploring actions
differently."
INTRODUCTION,0.04678362573099415,"There are two main contributions in this work.
First, we develop the SAC-I architecture for
accelerated retraining, that encompasses the use of inhibitory networks for the control of multi-
ple evaluative networks. This approach modiﬁes SAC methods by separating the learning pro-
cess, which includes training multiple value functions, storing episodic replay buffers, estimat-
ing distinct temperature parameters, and learning an inhibition policy when necessary (Section
3).
Second, we provide a detailed validation showing the different components of SAC-I and
its improvements over SAC in two modiﬁed environments from OpenAI Gym (Section 4). The
LunarLanderContinuous-v2 with a bomb appearing randomly resembles the classic stop-signal
paradigm (Logan et al., 2015; Verbruggen & Logan, 2009) in inhibitory control studies. A mixed
version of the BipedalWalkerHardcore-v3, highlights the out-performance of SAC-I over SAC,
which is not able to successfully solve the task."
BACKGROUND AND RELATED WORK,0.05263157894736842,"2
BACKGROUND AND RELATED WORK"
MAXIMUM ENTROPY REINFORCEMENT LEARNING,0.05847953216374269,"2.1
MAXIMUM ENTROPY REINFORCEMENT LEARNING"
MAXIMUM ENTROPY REINFORCEMENT LEARNING,0.06432748538011696,"In RL, knowing the best way to explore while exploiting is non-trivial, environment-dependent,
and still an active area of research (Hong et al., 2018). Maximum entropy RL theory provides a
principled way to address this particular challenge, and has been a key element in many of the recent
RL advancements, providing improved exploration and faster learning (Thomas, 2014; Schulman
et al., 2017a; Haarnoja et al., 2017; 2018a;b; Ziebart, 2010). Given a Markov decision process
(MDP) with a set of states S, a set of actions A, a transition function T and a reward function R,
forming a tuple < S, A, T, R > (Puterman, 1994), a stochastic policy π : S →A is a mapping from
states to probabilities of selecting each possible action, where π(a|s) represents the probability of
choosing action a given state s. In maximum entropy RL, as in an MDP, the goal is to ﬁnd the
optimal policy π∗that provides the highest expected sum of rewards, while additionally maximizing
the entropy of each visited state, leading to the expression (Ziebart, 2010):"
MAXIMUM ENTROPY REINFORCEMENT LEARNING,0.07017543859649122,"π∗= arg max
π X"
MAXIMUM ENTROPY REINFORCEMENT LEARNING,0.07602339181286549,"t
E(st,at)∼ρπ[rt + αH(π( · |st))],
(1)"
MAXIMUM ENTROPY REINFORCEMENT LEARNING,0.08187134502923976,"where α is the temperature parameter that controls the stochasticity of the optimal policy, ρπ is
the state-action marginal of the trajectory distribution induced by the policy, rt is a shorthand
for the environmental reward r(st, at) at time t, and H(π) represents the entropy of the policy,
E[−log(π(a|s))]. This approach allows a state-wise balance between exploitation and exploration.
For states with high reward, a low entropy policy is permitted while, for states with low reward, high
entropy policies are preferred, leading to greater exploration. The discount factor γ is omitted in
the equation for simplicity since it leads to a more complex expression for the maximum entropy
case (Thomas, 2014). But it is required for the convergence of inﬁnite-horizon problems, and it is
included in our ﬁnal algorithm."
SOFT ACTOR-CRITIC,0.08771929824561403,"2.2
SOFT ACTOR-CRITIC"
SOFT ACTOR-CRITIC,0.0935672514619883,"Soft actor-critic (SAC) (Haarnoja et al., 2018a) is one of the most successful maximum entropy RL
methods and has become a common baseline algorithm in most of the RL libraries, outperform-
ing state-of-the-art methods Haarnoja et al. (2018a;b). Like the deep deterministic policy gradient
(DDPG) approach (Lillicrap et al., 2016), SAC is a model-free and off-policy method, using a replay
buffer, where the policy and value functions are approximated using neural networks. In addition,"
SOFT ACTOR-CRITIC,0.09941520467836257,Under review as a conference paper at ICLR 2022
SOFT ACTOR-CRITIC,0.10526315789473684,"it incorporates a policy entropy term into the objective function facilitating exploration, similar to
soft Q-learning (Haarnoja et al., 2017). Similar to trust region policy optimization (TRPO) (Schul-
man et al., 2015) and proximal policy optimization (PPO) Schulman et al. (2017b), SAC uses a
stochastic policy and is known to be more stable than DDPG. In short, SAC combines the best
of DDPG (sample efﬁciency) and TRPO/PPO (stability through stochastic policies). As expressed
in Equation 1, the SAC policy/actor is trained with the objective of maximizing the expected cu-
mulative reward and the action entropy at a particular state. The critic is the soft Q-function and,
following the Bellman equation, is expressed by: Q(st, at) = rt + γ Est+1∼p[V (st+1)], where p
represents the state transition probability, and the soft value function is parameterized by the Q-
function: V (st+1) = Eat∼π[Q(st+1, at+1) −α log π(at+1|st+1)]. The soft Q-function is trained to
minimize the following objective function given by the mean squared error between predicted and
observed state-action values:"
SOFT ACTOR-CRITIC,0.1111111111111111,"JQ = E(st,at)∼D 1"
SOFT ACTOR-CRITIC,0.11695906432748537,"2
 
Q(st, at) −(rt + γ Est+1∼p[ ¯V (st+1)])
2

,
(2)"
SOFT ACTOR-CRITIC,0.12280701754385964,"where D denotes the replay buffer, and ¯V is the target value function (Mnih et al., 2015). Finally, the
policy is updated to minimize the KL-divergence between the policy and the exponentiated state-
action value function (Haarnoja et al., 2018b), and can be expressed by:
Jπ = Est∼D [Eat∼π[α log π(at|st) −Q(st, at)]] .
(3)"
INHIBITORY CONTROL,0.1286549707602339,"2.3
INHIBITORY CONTROL"
INHIBITORY CONTROL,0.13450292397660818,"Figure 1: Dual process
model in the stop-signal
task (SST)."
INHIBITORY CONTROL,0.14035087719298245,"Inhibitory control, also known as response inhibition, is a critical compo-
nent of the executive functions and refers to the ability to modify ongo-
ing actions in response to unexpected and dynamically changing task de-
mands (Aron, 2007; Diamond, 2013). In Shenoy et al. (2011), inhibitory
control is formalized as a rational decision-making problem, and a com-
putational model using Bayesian inference and stochastic control tools
is proposed and validated by behavioral data from humans and animals.
Using a widely adopted paradigm known as the stop-signal task (Logan
et al., 2015), authors show that the optimal policy, whether to go or stop,
systematically depends on accumulating sensory evidence, which sup-
ports the hypothesis that the brain is implementing statistically optimal
decision-making (Shenoy et al., 2011). Figure 1 depicts the two pro-
cesses involved in the stop-signal task. The Go process starts with a go signal followed by a stop
signal which triggers the stop process. The stop process will dominate when its activation is larger
than the Go process activation. The key assumption is that both processes are stochastically inde-
pendent, as supported by behavioral studies (Verbruggen & Logan, 2009). Stop-signal reaction time
(SSRT) is deﬁned as the time necessary to respond to the stop stimulus. In further work using func-
tional MRI, the anterior cingulate cortex, a region in the brain implicated in a variety of cognitive
control functions, is shown to activate proportionally to a Bayesian prediction error between pre-
dicted and observed events resembling the temporal-difference methods in reinforcement learning
(Ide et al., 2013). These previous computational models indicate that when dealing with unexpected
events such as the stop signal the brain implements a dual-process model driven by prediction error
and responds to the conﬂict in an optimal way."
RELATED WORK,0.14619883040935672,"2.4
RELATED WORK"
RELATED WORK,0.15204678362573099,"Value function composition. In value function composition (Haarnoja et al., 2017; Van Niekerk
et al., 2019), the goal is to model a new task by composing value functions previously trained
on sub-tasks. In Todorov (2009), they show that for linearly solvable MDPs (Todorov, 2007), pre-
trained value function estimators can be optimally composed and solved. The composition is a union
of tasks, an “OR” composition, and is deﬁned by taking the softmax over the component reward
signals. Van Niekerk et al. (2019) extends this result to the standard and entropy regularized RL
settings. Haarnoja et al. (2017) deﬁnes a composition rule that approximately solves the intersection
of tasks in the entropy regularized setting, an “AND” composition, with the composed signal as
an average over the constituent rewards. Despite the similarities, our approach is fundamentally
different since it composes a previously learned value function with one which is newly trained, and
moreover does not involve combining their value estimates."
RELATED WORK,0.15789473684210525,Under review as a conference paper at ICLR 2022
RELATED WORK,0.16374269005847952,"Hybrid reward architecture. In Hybrid Reward Architecture (HRA) (Van Seijen et al., 2017), the
goal is to learn a complex task by decomposing its reward, and training separate value functions for
each component. The total reward is replaced by an equivalent representation as the sum, an “AND”
composition, of decomposed constituent rewards. They show that HRA learns more efﬁciently than
the deep Q-network algorithm (DQN) (Mnih et al., 2015) when both algorithms have otherwise
identical network architectures. SAC-I is similar to HRA in the training of multiple Q networks
using different rewards, however essentially different since it does not aim to combine the reward
values. In our approach, Q networks are trained independently and used to provide specialized
action values depending on the state, which is deﬁned by the inhibition rule."
RELATED WORK,0.1695906432748538,"Transfer learning in RL. Broadly speaking, transfer learning in RL consists of transferring the
knowledge gained in one task to improve the learning performance in a related, but different task
(Taylor & Stone, 2009; Lazaric, 2012). This knowledge can be some type of learned representation
(Rusu et al., 2016b), reward shaping (Brys et al., 2015), demonstration (Schaal, 1996), model dy-
namics (Ammar et al., 2012), or policy (Rusu et al., 2016a). Our work is within the large ﬁeld of
transfer learning, however we are primarily focused on transferring learned value and policy func-
tions among identical aspects of a task, while learning new skills (value functions) and retraining
the previously learned policy within the similar environment."
METHODS,0.17543859649122806,"3
METHODS"
METHODS,0.18128654970760233,"3.1
SAC-I: SAC WITH INHIBITORY NETWORKS"
METHODS,0.1871345029239766,Figure 2: SAC-I policy update.
METHODS,0.19298245614035087,"Inhibitory control is traditionally deﬁned as the
ability to stop ongoing or planned cognitive or
motor processes, overriding impulsive or ha-
bitual responses (Aron, 2007).
One possible
RL implementation is at the executive level by
switching between two policies using a hierar-
chical architecture. However, this approach re-
quires having to train multiple policies, and a
more complex hierarchical model. We propose
a computationally less expensive approach and
do the switching at the Q network level, since it will ultimately drive the change of the habitual re-
sponse or action. We implement inhibitory control in this broader sense at a higher cognitive level,
where the action execution (policy) is updated by the evaluative processes that precede execution."
METHODS,0.19883040935672514,"We apply inhibitory control to the SAC algorithm by having multiple, competing value functions
(critics) that take turns depending on the current task demand. Rather than having a Q network that
learns the Go task and later the Stop task, we keep the previous Q network that knows to evaluate
the Go task and train a new Q-I network that learns the Stop task. Thus, both Q networks are trained
independently. Here, the term “inhibitory” refers to a new evaluative process replacing an ongoing
one. In Figure 2, we depict the SAC policy update with inhibitory networks. Go networks estimate
ongoing evaluation (which led to pre-trained skills), while the Stop networks estimate the value of
the new event, leading the policy to learn new skills. Additionally, we introduce the use of an in-
hibitory policy network to learn the inhibition policy responsible for deciding how and when to use
the outcomes from the multiple Q networks. Alternatively, to avoid having to train an additional
policy, a parametric state-based inhibition rule can be implemented using knowledge about the en-
vironment or updated constraints. We use Q networks to estimate all the value functions, following
the implementation in Haarnoja et al. (2018b), and the clipped double-Q learning trick, introduced
in twin delayed DDPG (TD3) (Fujimoto et al., 2018) to avoid their overestimation."
EPISODIC MEMORY THROUGH SELECTIVE REPLAY BUFFER,0.2046783625730994,"3.2
EPISODIC MEMORY THROUGH SELECTIVE REPLAY BUFFER"
EPISODIC MEMORY THROUGH SELECTIVE REPLAY BUFFER,0.21052631578947367,"In neuroscience research, episodic memory refers to the brain’s ability to recollect past experiences,
and is an important component of learning (Tulving, 2002). In recent years, it has been applied
to DRL as a non-parametric framework to retrieve past successful experiences to improve sample
efﬁciency (Blundell et al., 2016; Lin et al., 2018; Botvinick et al., 2019) or to avoid catastrophic
forgetting (Isele & Cosgun, 2018). In this work, we implement episodic memory in its simplest
form; a partition of the state space according to an inhibition rule or policy that yields a partition"
EPISODIC MEMORY THROUGH SELECTIVE REPLAY BUFFER,0.21637426900584794,Under review as a conference paper at ICLR 2022
EPISODIC MEMORY THROUGH SELECTIVE REPLAY BUFFER,0.2222222222222222,"of the replay buffer. Let S = {SR, SI} be a partition of the state space. The corresponding replay
buffer partition is D = {DR, DI} where set membership of a tuple (sk, a, rk, s′) is parameterized by
sk for k ∈{R, I} where sR ∈SR and sI ∈SI. For ease of notation, s′ = st+1, and the next state
can belong to any of the partitions, s′ ∈S. Note that inhibitory states have an associated inhibitory
reward rI and regular states have the associated reward rR. These corresponding rewards are stored
in the replay buffers but the replay buffers are not parameterized by them. The loss function of each
Q network is computed using memories from the corresponding replay buffer as expressed by:"
EPISODIC MEMORY THROUGH SELECTIVE REPLAY BUFFER,0.22807017543859648,"JQk = E(s,a)∼Dk 1"
EPISODIC MEMORY THROUGH SELECTIVE REPLAY BUFFER,0.23391812865497075,"2
 
Qk(s, a) −(rk + γ Es′∼p[ ¯V (s′)])
2

for k ∈{R, I}.
(4)"
EPISODIC MEMORY THROUGH SELECTIVE REPLAY BUFFER,0.23976608187134502,"Notice that if we use a single replay buffer that contains both the regular and the inhibitory re-
wards (s, a, rR, rI, s′), and sample a tuple containing the regular (s, a, rR, 0, s′) or the inhibitory
(s, a, 0, rI, s′) rewards depending on the updated Q network, we would have sparser rewards partic-
ularly for the Q-I network. Therefore, having separate memories promotes faster learning (as shown
in Figure 4) and, importantly, also allows the estimation of separate entropy parameters."
AUTOMATED DUAL ENTROPY ESTIMATION,0.24561403508771928,"3.3
AUTOMATED DUAL ENTROPY ESTIMATION"
AUTOMATED DUAL ENTROPY ESTIMATION,0.25146198830409355,"The SAC algorithm is sensitive to the α temperature changes depending on the environment, reward
scale and training stage, as shown in the initial paper (Haarnoja et al., 2018a). To address this
issue, the same authors propose to automatically adjust the temperature parameter by formulating
the problem with a dual objective; maximize entropy while satisfying a minimum entropy constraint
(Haarnoja et al., 2018b). The goal is still maximizing the cumulative expected reward (Equation 1),
but the average entropy of the policy is now constrained by a minimum value. The full derivation
of the dual optimization problem is given in Haarnoja et al. (2018b). In practice, the optimization
is performed recursively as follows: at time t, given the current estimate αt, the optimal policy π∗
t
is estimated as described in Equation 1. Subsequently, given πt, the αt is approximated using a
neural network. While in the standard SAC, there is a single α parameter, in SAC-I, we propose
estimating two separate α temperature parameters, αR and αI, to allow distinct action entropy for
the previously learned and the new skills, respectively. This is implemented by training two separate
α networks, with regular states sR ∈SR distinguished from inhibitory states sI ∈SI, with losses
given by:
Jαk = Ea∼π[−αk log π(a | sk) −αkH0],
for k ∈{R, I},
(5)"
AUTOMATED DUAL ENTROPY ESTIMATION,0.2573099415204678,where H0 is the minimum expected entropy. The policy loss function is composed of two terms:
AUTOMATED DUAL ENTROPY ESTIMATION,0.2631578947368421,"J′
π =
X"
AUTOMATED DUAL ENTROPY ESTIMATION,0.26900584795321636,"k∈{R,I}
Esk∼Sk [Ea∼π[αk log π(a|sk) −Qk(sk, a)]] .
(6)"
INHIBITORY POLICY NETWORK,0.27485380116959063,"3.4
INHIBITORY POLICY NETWORK"
INHIBITORY POLICY NETWORK,0.2807017543859649,"In our proposed SAC-I algorithm (Figure 2), for the cases in which a state-dependent inhibition rule
is not deﬁned, we propose training an inhibitory policy network πI. This network can be trained
as an automated hard switch or a soft modulator between the regular and inhibitory Q networks.
The inhibitory policy network is a stand-alone agent with its own Q networks (not shown in Figure
2), however it shares the same replay buffers. The loss functions are the standard ones as deﬁned
in Equations 2 and 3. Ultimately, the goal of the inhibitory policy network is to maximize the
environment’s reward by learning to choose between the Go and Stop networks and/or by modulating
the Stop network. We show the implementation of both cases next in Section 4."
INHIBITORY POLICY NETWORK,0.28654970760233917,SAC-I is summarized in Algorithm 1.
EXPERIMENTS AND RESULTS,0.29239766081871343,"4
EXPERIMENTS AND RESULTS"
EXPERIMENTS AND RESULTS,0.2982456140350877,"In order to show two different use-cases of SAC-I algorithm, as well as to evaluate it as a way
to speed up training during transfer learning, we use continuous tasks from the Box2D simulator,
OpenAI Gym (Brockman et al., 2016), LunarLanderContinuous-v2 and BipedalWalkerHardcore-v3.
Importantly, we include custom modiﬁcations to them to emulate the scenarios in which retraining
is necessary. By adding a random bomb in the LunarLander task, we show the advantages of using"
EXPERIMENTS AND RESULTS,0.30409356725146197,Under review as a conference paper at ICLR 2022
EXPERIMENTS AND RESULTS,0.30994152046783624,"Algorithm 1: Soft Actor Critic with Inhibitory Networks (SAC-I)
Initialize QR1, QR2, QI1, QI2, policy π, policy πI, αR and αI networks parameters;
Initialize the target ¯QR1, ¯QR2, ¯QI1 and ¯QI2 networks weights;
Initialize the replay buffers DR and DI;
for each episode do"
EXPERIMENTS AND RESULTS,0.3157894736842105,for each environment step do
EXPERIMENTS AND RESULTS,0.3216374269005848,"Given st, sample at from π(st) and (st+1, rt) from the environment;
Use an inhibition rule or inhibitory policy πI to classify st;
if st ∈SR, push (st, at, rRt, st+1) to DR;
else if st ∈SI push (st, at, rIt, st+1) to DI;
end
for each gradient step do"
EXPERIMENTS AND RESULTS,0.32748538011695905,"Sample a batch of memories from from {DR, DI};
for k ∈{R, I} do"
EXPERIMENTS AND RESULTS,0.3333333333333333,"Update Qk1 and Qk2 (Equation 4), αk (Equation 5), and ¯Qk1 and ¯Qk2 (soft-update);
end
Update the policy network π (Equation 6);
If an inhibitory policy network is used, update πI and the associated Q networks;
end
end"
EXPERIMENTS AND RESULTS,0.3391812865497076,"SAC-I, compared to standard SAC, when retraining with conﬂicting goals, similar to what happens
in a stop-signal task (Logan et al., 2015), i.e. stopping an ongoing action (to land) whenever an
unexpected event occurs (to avoid bomb). In the experiments with BipedalWalkerHardcore-v3,
we train agents in a simpler version of the task (BipedalWalker-v3), and retrain them in the more
complex task. We show how SAC-I can help transfer learning and adjust inhibitory control. In all
the experiments provided in this section, we used ﬁve random seeds to account for the variability
during training and compare agents trained across a ﬁxed number of steps. All the hyperparameters
are available in Table 1 (Appendix)."
LUNARLANDERCONTINUOUS WITH BOMB,0.34502923976608185,"4.1
LUNARLANDERCONTINUOUS WITH BOMB"
LUNARLANDERCONTINUOUS WITH BOMB,0.3508771929824561,"Environment. The original version of LunarLanderContinuous-v2 is modiﬁed in order to include
a bomb that appears randomly within a region above the landing pad (Figure 3). Like the original
version, it includes the environment reward (moving from the top of the frame to the landing pad:
100-140 points, each leg contact: +10, crashing: -100, successful landing: +100, ﬁring engine: -0.3
per frame), but additionally it includes a penalty for hitting the bomb (-150) and a time penalty
(-0.1 per frame) to motivate landing as quickly as possible (like in SST). Importantly, the bomb
coordinates are included in the observation state only after the bomb appears so the agent does not
know about its existence beforehand. Further details can be found in Appendix."
LUNARLANDERCONTINUOUS WITH BOMB,0.3567251461988304,"Figure 3: LunarLanderContinuous-v2 with Bomb. (a) Episode starts with the lander placed ran-
domly on top of the frame around the center. (b) Go trial: refers to an episode without a bomb, and
it is exactly as the original environment. (c) Stop trial: refers to episodes in which a bomb randomly
appears close to the landing pad (between the two ﬂags). (d) It shows a successful landing during a
stop trial after avoiding hitting the bomb. By default, the bomb appears in 50% of the episodes."
LUNARLANDERCONTINUOUS WITH BOMB,0.36257309941520466,"Experimental design.
Initially, a standard SAC agent is trained in the original environment
LunarLanderContinuous-v2. This agent, which we will call “baseline agent”, takes about 250K
steps to reach an average cumulative reward of 200 and is able to successfully land in most of
the episodes. All the network weights are transferred to the retrained agent. The Q-I network is
trained from scratch. In this experiment, the inhibition rule/policy works as a switch between the"
LUNARLANDERCONTINUOUS WITH BOMB,0.3684210526315789,Under review as a conference paper at ICLR 2022
LUNARLANDERCONTINUOUS WITH BOMB,0.3742690058479532,"regular and inhibitory Q networks. We show both cases, user-deﬁned inhibition rule and learned
inhibitory policy network. Experiments are performed in a single machine with Intel Core i7-9850H
CPU@2.60Hz x 12, Quadro RTX3000, RAM 16GB. The average rewards reported in the ﬁgures
represent the average of the episode reward, including the bomb penalty, over the last 100 episodes.
Agents are trained for a ﬁxed number of 2K episodes, approximately 500K steps."
LUNARLANDERCONTINUOUS WITH BOMB,0.38011695906432746,"Advantage of retraining. In this experiment, we show how the performance of a standard SAC
agent is boosted by retraining it using weights from the baseline agent, which already knows how to
safely land. In order to learn bomb avoidance skills, we shaped the original reward with an additional
penalty given by the expression rbomb.proxy = −1e4×(db−0.3)4, where db is deﬁned as the agent’s
distance to the center of the bomb (xb, yb). The idea is to have a ﬁeld-type avoidance mechanism
and give a penalty proportional to bomb proximity. Average reward results are depicted in Figure 4,
orange and blue lines. For retraining, all the network weights are loaded from the baseline agent and
updated in the new task with bomb. The retrained agent (blue line) clearly learns to complete the task
(land and avoid the bomb) faster than the agent trained from scratch (orange line). In about 300K
steps, it starts to avoid the bomb and at 500K steps is mostly able to complete the task successfully.
The agent from scratch takes > 1.25M steps to learn the task."
LUNARLANDERCONTINUOUS WITH BOMB,0.38596491228070173,"Figure 4: Comparison of different
SAC and SAC-I agents."
LUNARLANDERCONTINUOUS WITH BOMB,0.391812865497076,"Effect of using episodic memory and dual alpha in SAC-I.
We parse out the distinct contributions of different components
of SAC-I by training agents with and without episodic mem-
ory and the dual α temperature parameters. In these versions,
we use a user deﬁned inhibition rule given by y > yb and
db < 0.3. If these conditions are met, the inhibitory Q-I net-
work is used with the same shaping used for the SAC agent,
rI = rbomb.proxy. Results are shown in Figure 4. The SAC-
I vanilla agent (green line) is trained without episodic mem-
ory and with a single α parameter. The SAC-I with episodic
memory (purple line) is trained with separate experience re-
play buffer for the inhibitory states, but uses only a single en-
tropy parameter α. The SAC-I agent with episodic memory and dual α (red line) has faster learning,
reaching an average reward of 200 after 300K steps, and highlighting the importance of these com-
ponents1."
LUNARLANDERCONTINUOUS WITH BOMB,0.39766081871345027,"SAC-I performance for different conﬂict levels. The brain’s inhibitory control is known to be
modulated by levels of conﬂict between ongoing processes (Braver et al., 2001). For instance in
the SST, changing the frequency of stop signals, which is associated with expectation, alters the
response time to go signals. In a similar way, we investigate whether and how the frequency of
stop trials (episodes with bomb) impacts the agent’s learning, other than the overall performance
which is expected to decrease for increased occurrence of bombs. We hypothesize that the bomb
frequency will impact SAC-I less than SAC because it trains separate Q networks for different skills
involved in the task (i.e. landing and bomb avoidance). Both SAC and SAC-I agents are trained with
varying bomb frequencies, and results are shown in Figure 5. As expected, the overall performance"
LUNARLANDERCONTINUOUS WITH BOMB,0.40350877192982454,Figure 5: Performance of SAC-I and SAC agents for different bomb frequencies.
LUNARLANDERCONTINUOUS WITH BOMB,0.4093567251461988,"decreases for higher frequency. SAC-I agent reaches an average reward of 200 in about 200K, 300K
and 600K for frequencies 25%, 50% and 75%, respectively. For the SAC agent, it is clear that bomb
frequency not only affects performance but also the training progression. For example, a signiﬁcant
drop in performance is observed around step 50K for Bomb 75% as well as for 50%, although less.
This likely happens because learning to avoid the bomb interferes with its initial ability to land."
LUNARLANDERCONTINUOUS WITH BOMB,0.4152046783625731,1Further SAC-I agents are all trained with episodic memory and dual α parameters estimation.
LUNARLANDERCONTINUOUS WITH BOMB,0.42105263157894735,Under review as a conference paper at ICLR 2022
LUNARLANDERCONTINUOUS WITH BOMB,0.4269005847953216,"Interestingly, although both agent’s performances converge asymptotically, the difference is larger
for Bomb 50% case, in which the uncertainty is the highest. This is likely because SAC and SAC-I
agents learn different strategies to avoid the bomb. While the SAC agent adopts an optimal global
strategy accordingly to different bomb frequencies (i.e, if bomb is frequent, slow down when task
starts), the SAC-I agent keeps the same landing strategy independent of bomb frequency and learns
to avoid the bomb when it appears."
LUNARLANDERCONTINUOUS WITH BOMB,0.4327485380116959,"Figure 6: SAC and SAC-I agents
with and without shaping."
LUNARLANDERCONTINUOUS WITH BOMB,0.43859649122807015,"Training without reward shaping. Further, we examined the
training of SAC and SAC-I agents without using any reward
shaping for the bomb avoidance. Both agents use the same
reward r = r0 + rbomb, where r0 is the original reward and
rbomb is a sparse penalty for hitting the bomb. Results2 are
shown in Figure 6. Surprisingly, the SAC* agent without shap-
ing (yellow line) performed better than the one with, mean-
ing that shaping is negatively impacting its training. In con-
trast, the SAC-I* agent without shaping (gray line) success-
fully learns the task with similar speed to the one with shaping
(red line), likely because it keeps separate critic networks to
evaluate landing and bomb avoidance. In further experiments,
we observed that different reward shaping can boost SAC-I’s performance even more, but not SAC
(see results with conservative shaping in Appendix, Figure 10)."
LUNARLANDERCONTINUOUS WITH BOMB,0.4444444444444444,"Learning when to inhibit. In this experiment, we show an agent trained with an inhibitory policy
network SAC-I** and compare it to an agent trained with an inhibition rule SAC-I*. The SAC-I*
agent (gray line) uses a simple inhibition rule (“whenever bomb appears”) to switch between the
regular and inhibitory Q networks (Figure 2). While, the SAC-I** agent (brown line) learns an
inhibition policy, i.e. the best timing to inhibit. This SAC-I** agent (brown line) performs as good
as the SAC-I* and outperforms the SAC agents (Figure 6)."
LUNARLANDERCONTINUOUS WITH BOMB,0.4502923976608187,"4.2
BIPEDALWALKERHARDCORE-V3"
LUNARLANDERCONTINUOUS WITH BOMB,0.45614035087719296,"In this evaluation, we show a different use of inhibitory networks, to control the magnitude of inhi-
bition. To create the retraining scenario, ﬁrst, we train a standard SAC agent in an easier environ-
ment BipedalWalker-v3 (Figure 7a), in which the goal is to walk through a plain terrain, and use
its weights to retrain SAC and SAC-I agents in BipedalWalkerHardcore-v3 (Figure 7b-d). In the
BipedalWalker task, agents naturally get a negative “inhibitory” reward whenever they are stuck.
We use SAC-I to learn as well as to weight that negative reward."
LUNARLANDERCONTINUOUS WITH BOMB,0.4619883040935672,"Figure 7: BipedalWalker environment. (a) Plain terrain: agent has to learn to walk forward; (b)
Stuck position: agent starts to receive negative reward since it is spending energy without moving
forward; (c) Fall: agent can fall because it loses balance, stumbles itself, or fall into a hole; (d)
Overcoming obstacles: the agent learns avoiding the holes or going over the blocks."
LUNARLANDERCONTINUOUS WITH BOMB,0.4678362573099415,"The BipedalWalkerHardcore-v3 is a challenging task, known to be unsolvable for many of the sim-
pler non-recurrent DRL architectures or model-free RL methods (Wei & Ying, 2021). We solve the
task using a standard two-layer dense-network architecture, and adopt two strategies: removing the
fall-penalty and creating a cumulative version of the task reward. Otherwise, the task is unsolvable
with SAC algorithm (see Figure 11 in Appendix)."
LUNARLANDERCONTINUOUS WITH BOMB,0.47368421052631576,"Learning how to inhibit.
In Figure 8, we show the training performance of SAC and two
versions of SAC-I agents learning BipedalWalkerHardcore-v3.
All agents are retrained from
baseline.
The SAC agent reward consists of the raw environment reward r0, but with a
cumulative reward and without the fall penalty3, expressed by r
=
r0 + rstuck −rfall."
LUNARLANDERCONTINUOUS WITH BOMB,0.47953216374269003,"2SAC and SAC-I agents from Figure 4 are also shown to facilitate comparison, using the same color coding.
3Mimicking life, harsh fall penalty seems to block learning. See Figure 11 in Appendix."
LUNARLANDERCONTINUOUS WITH BOMB,0.4853801169590643,Under review as a conference paper at ICLR 2022
LUNARLANDERCONTINUOUS WITH BOMB,0.49122807017543857,"Figure 8:
Performance of
SAC and SAC-I agents."
LUNARLANDERCONTINUOUS WITH BOMB,0.49707602339181284,"The cumulative reward is deﬁned by rstuck = P5
i=0 rt−i, ac-
counted if it is negative, i.e.
the agent is at a “stuck” state.
The cumulative reward provides a less noisy feedback. The pri-
mary goal of SAC-I (standard) is to separately train a Q-I critic
network specialized on modeling the new reward structure, i.e.
rI = r0 + rstuck −rfall. The SAC-I* agent (adaptive) learns
an inhibitory policy network to estimate the weight w so that
rI∗= r0 + w × rstuck −rfall. This SAC-I* agent with adap-
tive inhibition (green line) outperforms the other agents, and the
difference is highlighted in the mixed version of the task (see further Figure 9)."
LUNARLANDERCONTINUOUS WITH BOMB,0.5029239766081871,"Mixed version of BipedalWalkerHardcore-v3. To replicate the scenario in which there are go
and stop episodes, we retrain the baseline agent on a modiﬁed task mixing both the BipedalWalker-
v3 (Go trial) and BipedalWalkerHardcore-v3 (Stop trial). For each episode, we randomly choose
in which environment the agent should perform. Interestingly, this makes the learning even more
challenging, because the obstacles are sparser in time and the agent has to explore and exploit while
learning the easy and hard versions of the task simultaneously. In Figure 9, we show that using
inhibitory networks is critical to successfully learn the mixed task. Both agents are retrained using
the same reward structure as presented in the previous section. Although the task gets easier as the
percent of go trials is increased, from 10% to 30%, we observe that it is more difﬁcult to learn the
mixed version of the task since there are less stop trials to learn from (for instance, compare the two
plots in the middle column). Also, we observe some training instability for 70% stop trial, likely
because the interference between learning the Stop and Go trials (3rd column). Interestingly, we
observe that the SAC-I* agent with adaptive inhibition has more stability across the stop training
sessions. For Stop 90%, the averages of the reward standard deviation are 47.5 and 27.5 for SAC-I
and SAC-I* agents, respectively. For Stop 70%, the averages are 56.3 and 31.7, respectively. Finally,
we observe that, unlike the SAC agent, only the SAC-I agents are able to successfully learn the stop
trials (2nd column). Note, they are trained using the same reward structure (previous section)."
LUNARLANDERCONTINUOUS WITH BOMB,0.5087719298245614,"Figure 9: SAC and SAC-I agents performance in the mixed version of the BipedalWalkerHardcore-
v3. First row shows results for the task with 90% Stop trials (hardcore), while the second, with 70%.
From the left to the right, rewards are averaged across all, only Stop and only Go trials."
CONCLUSIONS,0.5146198830409356,"5
CONCLUSIONS"
CONCLUSIONS,0.52046783625731,"In this work, we draw a parallel between neuroscience research in inhibitory control and reinforce-
ment learning of competing value functions. We propose an SAC algorithm using inhibitory net-
works with a particular focus on retraining the agent to acquire a new skill, while still exploiting
previously learned abilities. Through our experiments, we show that SAC-I agents are able to main-
tain higher rewards from the beginning of retraining since they keep a previous ability compared to
retrained SAC agents (Figure 6). With SAC-I, we advance the use of SAC methods by introduc-
ing the use of multiple value networks with respective episodic replay buffers, as well as distinct
entropy parameter estimation for skills at different training stages. In Figure 9, we show SAC-I is
able to successfully learn the mixed version of the BipedalWalkerHardcore-v3, otherwise unsolvable
with the standard SAC. We believe that the experiments and results presented in this paper offer a
proof of concept of the advantages using SAC methods with inhibitory networks (SAC-I) for faster
retraining."
CONCLUSIONS,0.5263157894736842,Under review as a conference paper at ICLR 2022
REFERENCES,0.5321637426900585,REFERENCES
REFERENCES,0.5380116959064327,"Haitham B. Ammar, Karl Tuyls, Matthew E. Taylor, Kurt Driessens, and Gerhard Weiss. Reinforce-
ment learning transfer via sparse coding. In Proceedings of the 11th International Conference
on Autonomous Agents and Multiagent Systems - Volume 1, AAMAS ’12, pp. 383390, Rich-
land, SC, 2012. International Foundation for Autonomous Agents and Multiagent Systems. ISBN
0981738117."
REFERENCES,0.543859649122807,"Adam R. Aron. The neural basis of inhibition in cognitive control. The Neuroscientist, 13(3):
214–228, 2007. doi: 10.1177/1073858407299288. PMID: 17519365."
REFERENCES,0.5497076023391813,"Pierre-Luc Bacon, Jean Harb, and Doina Precup. The option-critic architecture. In Proceedings
of the Thirty-First AAAI Conference on Artiﬁcial Intelligence, AAAI’17, pp. 17261734. AAAI
Press, 2017."
REFERENCES,0.5555555555555556,"Andr´e Barreto, Shaobo Hou, Diana Borsa, David Silver, and Doina Precup. Fast reinforcement
learning with generalized policy updates. Proceedings of the National Academy of Sciences, 117
(48):30079–30087, 2020. ISSN 0027-8424. doi: 10.1073/pnas.1907370117. URL https:
//www.pnas.org/content/117/48/30079."
REFERENCES,0.5614035087719298,"Andrew G. Barto and Sridhar Mahadevan. Recent advances in hierarchical reinforcement learn-
ing. Discrete Event Dynamic Systems, 13(12):4177, 2003. ISSN 0924-6703. doi: 10.1023/A:
1022140919877."
REFERENCES,0.5672514619883041,"Charles Blundell, Benigno Uria, Alexander Pritzel, Yazhe Li, Avraham Ruderman, Joel Z Leibo,
Jack Rae, Daan Wierstra, and Demis Hassabis. Model-free episodic control, 2016."
REFERENCES,0.5730994152046783,"Matthew Botvinick, Sam Ritter, Jane X Wang, Zeb Kurth-Nelson, Charles Blundell, and Demis
Hassabis. Reinforcement learning, fast and slow. Trends in cognitive sciences, 23(5):408422,
May 2019. ISSN 1364-6613. doi: 10.1016/j.tics.2019.02.006. URL https://doi.org/10.
1016/j.tics.2019.02.006."
REFERENCES,0.5789473684210527,"Todd S. Braver, Deanna M. Barch, Jeremy R. Gray, David L. Molfese, and Avraham Snyder. Ante-
rior Cingulate Cortex and Response Conﬂict: Effects of Frequency, Inhibition and Errors. Cere-
bral Cortex, 11(9):825–836, 09 2001. ISSN 1047-3211. doi: 10.1093/cercor/11.9.825. URL
https://doi.org/10.1093/cercor/11.9.825."
REFERENCES,0.5847953216374269,"Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas Schneider, John Schulman, Jie Tang, and
Wojciech Zaremba. Openai gym. arXiv preprint arXiv:1606.01540, 2016."
REFERENCES,0.5906432748538012,"Tim Brys, Anna Harutyunyan, Matthew E. Taylor, and Ann Now´e. Policy transfer using reward
shaping. In Proceedings of the 2015 International Conference on Autonomous Agents and Multi-
agent Systems, AAMAS ’15, pp. 181188. International Foundation for Autonomous Agents and
Multiagent Systems, 2015. ISBN 9781450334136."
REFERENCES,0.5964912280701754,"G. Comanici and D Precup. Optimal policy switching algorithms for reinforcement learning. In
Proceedings of the 9th International Conference on Autonomous Agents and Multiagent Systems
(AAMAS 2010), pp. 709–714, 2010."
REFERENCES,0.6023391812865497,"Peter Dayan and Geoffrey E Hinton.
Feudal reinforcement learning.
In S. Hanson, J. Cowan,
and C. Giles (eds.), Advances in Neural Information Processing Systems, volume 5. Morgan-
Kaufmann, 1993."
REFERENCES,0.6081871345029239,"Adele Diamond. Executive functions. Annual Review of Psychology, 64:135–68, 2013."
REFERENCES,0.6140350877192983,"S. Fujimoto, H. van Hoof, and D. Meger. Addressing function approximation error in actor-critic
methods. In Proceedings of the 35th International Conference on Machine Learning, volume 80,
pp. 1582–1591. PMLR, 2018."
REFERENCES,0.6198830409356725,"Tuomas Haarnoja, Haoran Tang, Pieter Abbeel, and Sergey Levine. Reinforcement learning with
deep energy-based policies. In Doina Precup and Yee Whye Teh (eds.), Proceedings of the 34th
International Conference on Machine Learning, volume 70 of Proceedings of Machine Learning
Research, pp. 1352–1361, International Convention Centre, Sydney, Australia, 06–11 Aug 2017.
PMLR."
REFERENCES,0.6257309941520468,Under review as a conference paper at ICLR 2022
REFERENCES,0.631578947368421,"Tuomas Haarnoja, Aurick Zhou, Pieter Abbeel, and Sergey Levine. Soft actor-critic: Off-policy
maximum entropy deep reinforcement learning with a stochastic actor. In Jennifer Dy and An-
dreas Krause (eds.), Proceedings of the 35th International Conference on Machine Learning,
volume 80 of Proceedings of Machine Learning Research, pp. 1861–1870, Stockholmsmssan,
Stockholm Sweden, 10–15 Jul 2018a. PMLR. URL http://proceedings.mlr.press/
v80/haarnoja18b.html."
REFERENCES,0.6374269005847953,"Tuomas Haarnoja, Aurick Zhou, Kristian Hartikainen, George Tucker, Sehoon Ha, Jie Tan, Vikash
Kumar, Henry Zhu, Abhishek Gupta, Pieter Abbeel, and Sergey Levine. Soft actor-critic algo-
rithms and applications. CoRR, abs/1812.05905, 2018b. URL http://arxiv.org/abs/
1812.05905."
REFERENCES,0.6432748538011696,"Steven Hansen, Will Dabney, Andre Barreto, David Warde-Farley, Tom Van de Wiele, and
Volodymyr Mnih. Fast task inference with variational intrinsic successor features. In Interna-
tional Conference on Learning Representations, 2020. URL https://openreview.net/
forum?id=BJeAHkrYDS."
REFERENCES,0.6491228070175439,"Zhang-Wei Hong, Tzu-Yun Shann, Shih-Yang Su, Yi-Hsiang Chang, Tsu-Jui Fu, and Chun-Yi Lee.
Diversity-driven exploration strategy for deep reinforcement learning. In S. Bengio, H. Wallach,
H. Larochelle, K. Grauman, N. Cesa-Bianchi, and R. Garnett (eds.), Advances in Neural Infor-
mation Processing Systems, volume 31. Curran Associates, Inc., 2018."
REFERENCES,0.6549707602339181,"Yujing Hu, Weixun Wang, Hangtian Jia, Yixiang Wang, Yingfeng Chen, Jianye Hao, Feng
Wu, and Changjie Fan.
Learning to utilize shaping rewards: A new approach of reward
shaping.
In H. Larochelle, M. Ranzato, R. Hadsell, M. F. Balcan, and H. Lin (eds.), Ad-
vances in Neural Information Processing Systems, volume 33, pp. 15931–15941. Curran As-
sociates, Inc., 2020. URL https://proceedings.neurips.cc/paper/2020/file/
b710915795b9e9c02cf10d6d2bdb688c-Paper.pdf."
REFERENCES,0.6608187134502924,"J.S. Ide, P. Shenoy, A.J. Yu, and C.S. Li. Bayesian prediction and evaluation in the anterior cingulate
cortex. J Neurosci, 33(5):2039–47, 2013."
REFERENCES,0.6666666666666666,"David Isele and Akansel Cosgun. Selective experience replay for lifelong learning. In Sheila A.
McIlraith and Kilian Q. Weinberger (eds.), Proceedings of the Thirty-Second AAAI Conference on
Artiﬁcial Intelligence, (AAAI-18), the 30th innovative Applications of Artiﬁcial Intelligence (IAAI-
18), and the 8th AAAI Symposium on Educational Advances in Artiﬁcial Intelligence (EAAI-18),
New Orleans, Louisiana, USA, February 2-7, 2018, pp. 3302–3309. AAAI Press, 2018. URL
https://www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16054."
REFERENCES,0.672514619883041,"Alessandro Lazaric. Transfer in Reinforcement Learning: A Framework and a Survey, pp. 143–173.
Springer Berlin Heidelberg, Berlin, Heidelberg, 2012. ISBN 978-3-642-27645-3. doi: 10.1007/
978-3-642-27645-3 5. URL https://doi.org/10.1007/978-3-642-27645-3_5."
REFERENCES,0.6783625730994152,"Timothy P. Lillicrap, Jonathan J. Hunt, Alexander Pritzel, Nicolas Heess, Tom Erez, Yuval Tassa,
David Silver, and Daan Wierstra. Continuous control with deep reinforcement learning. In Yoshua
Bengio and Yann LeCun (eds.), 4th International Conference on Learning Representations, (ICLR
2016), 2016. URL http://arxiv.org/abs/1509.02971."
REFERENCES,0.6842105263157895,"Zichuan Lin, Tianqi Zhao, Guangwen Yang, and Lintao Zhang. Episodic memory deep q-networks.
In Proceedings of the 27th International Joint Conference on Artiﬁcial Intelligence, IJCAI’18, pp.
24332439. AAAI Press, 2018. ISBN 9780999241127."
REFERENCES,0.6900584795321637,"G. D. Logan, M. Yamaguchi, J. D. Schall, and T. J. Palmeri. Inhibitory control in mind and brain
2.0: Blocked-input models of saccadic countermanding. Psychological Review, 122(2):115–147,
2015. doi: https://doi.org/10.1037/a0038893."
REFERENCES,0.695906432748538,"Andrew J. Martin. Fear of Failure in Learning, pp. 1276–1278. Springer US, Boston, MA, 2012.
ISBN 978-1-4419-1428-6. doi: 10.1007/978-1-4419-1428-6 266. URL https://doi.org/
10.1007/978-1-4419-1428-6_266."
REFERENCES,0.7017543859649122,"Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A. Rusu, Joel Veness, Marc G. Belle-
mare, Alex Graves, Martin Riedmiller, Andreas K. Fidjeland, Georg Ostrovski, Stig Petersen,"
REFERENCES,0.7076023391812866,Under review as a conference paper at ICLR 2022
REFERENCES,0.7134502923976608,"Charles Beattie, Amir Sadik, Ioannis Antonoglou, Helen King, Dharshan Kumaran, Daan Wier-
stra, Shane Legg, and Demis Hassabis. Human-level control through deep reinforcement learn-
ing. Nature, 518:529–533, 2015. ISSN 00280836. URL http://dx.doi.org/10.1038/
nature14236."
REFERENCES,0.7192982456140351,"O. Nachum, S. Gu, H. Lee, and S. Levine. Data-efﬁcient hierarchical reinforcement learning. Ad-
vances in Neural Information Processing Systems, pp. 3303–3313, 2018."
REFERENCES,0.7251461988304093,"Martin L Puterman. Markov decision processes: discrete stochastic dynamic programming. John
Wiley & Sons, 1994."
REFERENCES,0.7309941520467836,"Andrei A. Rusu, Sergio Gomez Colmenarejo, Caglar Gulcehre, Guillaume Desjardins, James Kirk-
patrick, Razvan Pascanu, Volodymyr Mnih, Koray Kavukcuoglu, and Raia Hadsell. Policy distil-
lation, 2016a."
REFERENCES,0.7368421052631579,"Andrei A. Rusu, Neil C. Rabinowitz, Guillaume Desjardins, Hubert Soyer, James Kirkpatrick,
Koray Kavukcuoglu, Razvan Pascanu, and Raia Hadsell. Progressive neural networks. CoRR,
abs/1606.04671, 2016b. URL http://arxiv.org/abs/1606.04671."
REFERENCES,0.7426900584795322,"Himanshu Sahni, Saurabh Kumar, Farhan Tejani, and Charles L. Isbell Jr. Learning to compose
skills. CoRR, abs/1711.11289, 2017. URL http://arxiv.org/abs/1711.11289."
REFERENCES,0.7485380116959064,"Stefan Schaal. Learning from demonstration. In Proceedings of the 9th International Conference on
Neural Information Processing Systems, NIPS’96, pp. 10401046, Cambridge, MA, USA, 1996.
MIT Press."
REFERENCES,0.7543859649122807,"J.D. Schall, T.J. Palmeri, and G.D. Logan. Models of inhibitory control. Philos Trans R Soc Lond B
Biol Sci., 372(1718), 04 2017. doi: 10.1098/rstb.2016.0193."
REFERENCES,0.7602339181286549,"Tom Schaul, Daniel Horgan, Karol Gregor, and David Silver. Universal value function approxima-
tors. In Francis Bach and David Blei (eds.), Proceedings of the 32nd International Conference
on Machine Learning, volume 37 of Proceedings of Machine Learning Research, pp. 1312–1320,
Lille, France, 07–09 Jul 2015. PMLR."
REFERENCES,0.7660818713450293,"John Schulman, Sergey Levine, Pieter Abbeel, Michael Jordan, and Philipp Moritz. Trust region
policy optimization. In Francis Bach and David Blei (eds.), Proceedings of the 32nd International
Conference on Machine Learning, volume 37 of Proceedings of Machine Learning Research, pp.
1889–1897, Lille, France, 07–09 Jul 2015. PMLR."
REFERENCES,0.7719298245614035,"John Schulman, Pieter Abbeel, and Xi Chen. Equivalence between policy gradients and soft q-
learning. CoRR, abs/1704.06440, 2017a. URL http://arxiv.org/abs/1704.06440."
REFERENCES,0.7777777777777778,"John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Radford, and Oleg Klimov. Proximal policy
optimization algorithms. CoRR, abs/1707.06347, 2017b. URL http://arxiv.org/abs/
1707.06347."
REFERENCES,0.783625730994152,"B. Seymour, T. Singer, and R Dolan. The neurobiology of punishment. Nat Rev Neurosci, 8:300–
311, 2007. URL https://doi.org/10.1038/nrn2119."
REFERENCES,0.7894736842105263,"Pradeep Shenoy, RP Rao, and AJ Yu. A rational decision making framework for inhibitory control.
In Advances in Neural Information Processing Systems (NIPS), volume 23, pp. 2146–2154. MIT
Press, 2011."
REFERENCES,0.7953216374269005,"Richard S. Sutton and Andrew G. Barto. Reinforcement Learning: An Introduction. A Bradford
Book, Cambridge, MA, USA, 2018. ISBN 0262039249."
REFERENCES,0.8011695906432749,"Richard S. Sutton, Doina Precup, and Satinder Singh. Between mdps and semi-mdps: A framework
for temporal abstraction in reinforcement learning. Artif. Intell., 112(12):181211, 1999. ISSN
0004-3702. doi: 10.1016/S0004-3702(99)00052-1."
REFERENCES,0.8070175438596491,"Matthew E. Taylor and Peter Stone. Transfer learning for reinforcement learning domains: A survey.
Journal of Machine Learning Research, 10(1):1633–1685, 2009."
REFERENCES,0.8128654970760234,Under review as a conference paper at ICLR 2022
REFERENCES,0.8187134502923976,"Philip Thomas. Bias in natural actor-critic algorithms. In Eric P. Xing and Tony Jebara (eds.), Pro-
ceedings of the 31st International Conference on Machine Learning, volume 32 of Proceedings
of Machine Learning Research, pp. 441–448, Bejing, China, 22–24 Jun 2014. PMLR."
REFERENCES,0.8245614035087719,"Emanuel Todorov.
Linearly-solvable markov decision problems.
In B. Sch¨olkopf, J. Platt,
and T. Hoffman (eds.), Advances in Neural Information Processing Systems, volume 19.
MIT Press, 2007.
URL https://proceedings.neurips.cc/paper/2006/file/
d806ca13ca3449af72a1ea5aedbed26a-Paper.pdf."
REFERENCES,0.8304093567251462,"Emanuel Todorov. Compositionality of optimal control laws. In Y. Bengio, D. Schuurmans, J. Laf-
ferty, C. Williams, and A. Culotta (eds.), Advances in Neural Information Processing Systems,
volume 22. Curran Associates, Inc., 2009. URL https://proceedings.neurips.cc/
paper/2009/file/3eb71f6293a2a31f3569e10af6552658-Paper.pdf."
REFERENCES,0.8362573099415205,"Endel Tulving. Episodic memory: from mind to brain. Annual Review of Psychology, 53:1–25,
2002."
REFERENCES,0.8421052631578947,"Benjamin Van Niekerk, Steven James, Adam Earle, and Benjamin Rosman.
Composing value
functions in reinforcement learning. In Kamalika Chaudhuri and Ruslan Salakhutdinov (eds.),
Proceedings of the 36th International Conference on Machine Learning, volume 97 of Proceed-
ings of Machine Learning Research, pp. 6401–6409. PMLR, 09–15 Jun 2019.
URL http:
//proceedings.mlr.press/v97/van-niekerk19a.html."
REFERENCES,0.847953216374269,"Harm Van Seijen, Mehdi Fatemi, Joshua Romoff, Romain Laroche, Tavian Barnes, and
Jeffrey Tsang.
Hybrid reward architecture for reinforcement learning.
In I. Guyon,
U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett
(eds.), Advances in Neural Information Processing Systems, volume 30. Curran Asso-
ciates, Inc., 2017. URL https://proceedings.neurips.cc/paper/2017/file/
1264a061d82a2edae1574b07249800d6-Paper.pdf."
REFERENCES,0.8538011695906432,"Juan Vargas, Lazar Andjelic, and Amir Barati Farimani.
Effects of sparse rewards of different
magnitudes in the speed of learning of model-based actor critic methods, 2020."
REFERENCES,0.8596491228070176,"F. Verbruggen and G.D. Logan. Models of response inhibition in the stop-signal and stop-change
paradigms. Neurosci Biobehav Rev., 33:647–61, 2009. doi: 10.1016/j.neubiorev.2008.08.014."
REFERENCES,0.8654970760233918,"Alexander Sasha Vezhnevets, Simon Osindero, Tom Schaul, Nicolas Heess, Max Jaderberg, David
Silver, and Koray Kavukcuoglu. Feudal networks for hierarchical reinforcement learning. In
Proceedings of the 34th International Conference on Machine Learning - Volume 70, ICML’17,
pp. 35403549. JMLR.org, 2017."
REFERENCES,0.8713450292397661,"Honghao Wei and Lei Ying. Fork: A forward-looking actor for model-free reinforcement learning,
2021."
REFERENCES,0.8771929824561403,"B. D. Ziebart. Modeling Purposeful Adaptive Behavior with the Principle of Maximum Causal
Entropy. PhD thesis, Machine Learning Dpt., Carnegie Mellon University, Pittsburgh, PA, 2010."
REFERENCES,0.8830409356725146,Under review as a conference paper at ICLR 2022
REFERENCES,0.8888888888888888,"A
APPENDIX"
REFERENCES,0.8947368421052632,BROADER IMPACTS
REFERENCES,0.9005847953216374,"Efﬁciency in retraining is useful in situations where training is computationally expensive or can
cause damage and wear to instruments like robotic arms. Our work proposes a method of efﬁcient
retraining of agents by reusing trained policies and value function estimators. Ultimately, we con-
tribute to the body of work that prioritizes creative reuse of models."
REFERENCES,0.9064327485380117,"Table 1: List of common hyper-parameters used in the SAC training.
Parameter
Value
Optimizer
Adam
Replay buffer size
1.0e6
Number of hidden layers
1 (LunarLander), 2 (BipedalWalker)
Number of hidden neurons
256
Batch size
64 and 128
Learning rate
5.0e-4
Discount factor γ
0.99
Soft τ
1.0e-3
Entropy target τ
-3
Activation function
ReLU
Target update interval
1
Number of episodes before training πI
0 (LunarLander), 100 (BipedalWalker)"
REFERENCES,0.9122807017543859,SUPPLEMENTARY EXPERIMENTS AND RESULTS
REFERENCES,0.9181286549707602,"LunarLanderContinuous-v2 with bomb. The observation space consists of the original 8 states
(related to position, angle, velocities and leg contact) plus 4 values indicating the upper left and
bottom right coordinates of the bomb zone (a box with a width of ≈10% of the screen size).
The agent assumes horizontal coordinates x ∈[−1, 1] and vertical coordinates y ∈[0, 1.4], where
y = 0 corresponds to the ground. The bomb is randomly placed with center coordinates xc ∈
[−0.2, 0.2] and yc ∈[0.1, 0.5], and appears with a default frequency of 50% (stop trials), which
creates an environment with the highest uncertainty. In the stop trials, the bomb appears randomly
after the agent achieves an altitude between the range [0.9, 1.1]. Importantly, the bomb coordinates
are included in the observation state only after the bomb appears so that the agent does not know
about its existence beforehand. If the bomb is absent, four dummy negative values are provided
in the state. The episode ends if the agent hits the bomb (i.e. agent inside the bomb zone) or the
ground, successfully lands or reaches the maximum length of 1000 steps."
REFERENCES,0.9239766081871345,"Figure 10:
Comparison of SAC
and SAC-I agents with conserva-
tive shaping."
REFERENCES,0.9298245614035088,"Conservative reward shaping. In LunarLanderContinuous-
v2 with bomb, it is expected that how the inhibitory reward
rI is shaped, as described in the main text, inﬂuences the
agents’ training.
Indeed, we tested a few shaping variants
and observed differences. However, results comparing SAC-
I vs. SAC were qualitatively similar to the ones presented so
far. One potential issue with the current reward shaping to
avoid the bomb is that it does not consider any of the aspects
involved in landing.
Therefore, we present another variant
of the rI which includes some of the aspects of the raw re-
ward such as rewarding getting close to the landing pad, slow-
ing down, and penalizing “aggressive” maneuvers (large ve-
locities and vertical angles). The more conservative reward
shaping is given by the sum of the following components
rI = rx + ry + rangle + rvel, where rx = −1/(6 × dx + 0.1) + 0.77, ry = −3 × (dy −0.05)2,
rangle = −angle2, rvel = −2 × (v2
x + v2
y + v2
angle), and (dx, dy) are the horizontal and vertical
distances to the bomb, respectively. In short, the inhibitory reward has maximum value 0 and com-
ponents with quadratic forms. Coefﬁcients are adjusted to have rI < 0 and a balance between the
different rewards. If the inhibition rule given by conditions dx < 0.2 and y > yb is met, the Q-I"
REFERENCES,0.935672514619883,Under review as a conference paper at ICLR 2022
REFERENCES,0.9415204678362573,"network is used along with the inhibitory reward rI. In this version, the bomb avoidance is driven
by the horizontal distance dx, independent of dy, making the agent more conservative. Results are
shown in Figure 10. Unlike SAC, the SAC-I is beneﬁted by the shaping and it offers a mechanism
to include additional shaping without interfering previously learned Q networks."
REFERENCES,0.9473684210526315,"BipedalWalker environments. In both BipedalWalker-v3 and BipedalWalkerHardcore-v3 tasks,
the primary goal is to reach the end of the track using the least amount of energy as possible.
The agent gets a dense reward for moving forward (total 300+ points up to the end) and -100 for
falling. There is a small cost for applying motor torque and moving the joints, so agents with
optimal movements score more. The observation state has a total of 24 variables split between
14 related to the agent’s body (including the angles and velocities of hull, hip joints, knee joints,
vertical and horizontal speeds) and 10 LIDAR sensor readings. Everything the agent knows about
the environment is through the sensors, so it does not know about obstacles or holes until they
are scanned by the sensor, neither about its position in the environment since no coordinates are
given. Note that sensor readings are relative to the agent’s position and angle. These characteristics
make the hardcore version signiﬁcantly more challenging than the plain terrain version. The agent
has 2 legs, each leg has 2 joints, and therefore the action space has size 4 with continuous values
within the range of [−1, 1]. Each episode ends whenever the agent reaches the end of the track,
falls or reaches the maximum of 2000 steps. Some informal discussion regarding the difﬁculty
in solving the task can be found in https://ai.stackexchange.com/questions/13848/has-anyone-been-
able-to-solve-openais-hardcore-bipedal-walker-with-their-implem ."
REFERENCES,0.9532163742690059,"BipedalWalker experimental design. The standard SAC agent is trained in the BipedalWalker-v3
to be used as a baseline agent in further training in the hardcore version. Agents are trained with three
different seeds for 3K episodes, and the one with the best average reward is selected as the baseline.
This agent reaches an average over the last 100 episodes above 300+ in about 0.5M steps similar to
the results reported in Wei & Ying (2021). All the network weights are transferred to the retrained
agent. The Q-I network is also retrained from previous weights. For the BipedalWalkerHardcore-v3,
we train agents with ﬁve seeds for 5K episodes, and compute the average reward across runs."
REFERENCES,0.9590643274853801,"Effect of removing the fall penalty. In neuroscience, punishments (negative rewards) are known
to produce aversive conditioning or prediction of aversive events that leads to defensive or ag-
gressive Pavlonian actions (Seymour et al., 2007), what in turn can cause fear of failure and
procrastination in learning (Martin, 2012). Negative rewards are often successfully used in RL.
However, there are studies showing that intermixing positive and sparse negative rewards might
have adverse effects in learning, as reported in a recent work using DDPG in robotic environ-
ment Vargas et al. (2020).
Moreover, optimally shaping reward is still an open area of re-
search (Hu et al., 2020), and it is likely to depend on the particular DRL method being used."
REFERENCES,0.9649122807017544,"Figure 11:
Agent performance
in BipedalWalkerHardcore-v3, re-
trained using SAC algorithm with
(brown) and without (blue line) the
fall penalty."
REFERENCES,0.9707602339181286,"Interestingly, in our experiments in BipedalWalkerHardcore-
v3, we observe that the SAC agents are greatly beneﬁted from
removing the fall penalty from the raw environment reward.
We observe that, with the fall penalty, often the agent learns
to simply stop in front of the block by fear of falling (which
is likely a local minimum), never exploring enough to over-
come the large obstacles. In Figure 11, we illustrate the ef-
fects of removing the fall penalty and including the stuck
penalty. Removing the fall penalty (-100) included in origi-
nal reward/penalty provided by the environment allowed the
agent to explore riskier actions to overcome obstacles. The
SAC agent without stuck penalty is also unable to learn the
task successfully (purple line). It should be noted that retrain-
ing from a baseline agent is also critical to speed-up training
and make possible solving the task. Average reward represents
the average over the last 100 episodes of the raw environmental
reward."
REFERENCES,0.9766081871345029,"Training from scratch in the mixed version of the BipedalWalkerHardcore-v3. In Figure 12, we
show the average reward during training for the SAC and SAC-I agents, in the environment with 90%
stop trials. Training the SAC-I agent from scratch is slower than retraining from the baseline agent
(Figure 10, Stop trial 90%). However, the SAC-I agent is still able to solve the hardcore task (Stop
trials). Meanwhile, the SAC agent is only able to solve the simple task (Go trials). The advantage"
REFERENCES,0.9824561403508771,Under review as a conference paper at ICLR 2022
REFERENCES,0.9883040935672515,"of retraining is evident during the initial training steps. The retrained SAC-I agent completes the
simple task from the beginning of the training (compare with Figure 10, Stop trial 90%). The SAC-I
agent trained from scratch learns to complete the Go trials only after 1M steps."
REFERENCES,0.9941520467836257,"Figure 12: SAC and SAC-I agents performance in the mixed version of BipedalWalkerHardcore-v3.
Agents are trained from scratch. Stop trials are 90% of the total number of episodes."
